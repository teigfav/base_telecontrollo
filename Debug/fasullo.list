
fasullo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e4cc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe4  0801e79c  0801e79c  0002e79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08021780  08021780  00031780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08021788  08021788  00031788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802178c  0802178c  0003178c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d8  24000000  08021790  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000d8  08021868  000400d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000138  080218c8  00040138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 00001800  24000198  08021928  00040198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000208c8  24001998  08023128  00041998  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24022260  08023128  00042260  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00041998  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007766f  00000000  00000000  000419c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b6f9  00000000  00000000  000b9035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003330  00000000  00000000  000c4730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003108  00000000  00000000  000c7a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017087  00000000  00000000  000cab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00051359  00000000  00000000  000e1bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00185fac  00000000  00000000  00132f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002b8ef4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e304  00000000  00000000  002b8f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24001998 	.word	0x24001998
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e784 	.word	0x0801e784

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400199c 	.word	0x2400199c
 800030c:	0801e784 	.word	0x0801e784

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b96e 	b.w	80006d4 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468c      	mov	ip, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	f040 8083 	bne.w	8000526 <__udivmoddi4+0x116>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d947      	bls.n	80004b6 <__udivmoddi4+0xa6>
 8000426:	fab2 f282 	clz	r2, r2
 800042a:	b142      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042c:	f1c2 0020 	rsb	r0, r2, #32
 8000430:	fa24 f000 	lsr.w	r0, r4, r0
 8000434:	4091      	lsls	r1, r2
 8000436:	4097      	lsls	r7, r2
 8000438:	ea40 0c01 	orr.w	ip, r0, r1
 800043c:	4094      	lsls	r4, r2
 800043e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fbbc f6f8 	udiv	r6, ip, r8
 8000448:	fa1f fe87 	uxth.w	lr, r7
 800044c:	fb08 c116 	mls	r1, r8, r6, ip
 8000450:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000454:	fb06 f10e 	mul.w	r1, r6, lr
 8000458:	4299      	cmp	r1, r3
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x60>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000462:	f080 8119 	bcs.w	8000698 <__udivmoddi4+0x288>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 8116 	bls.w	8000698 <__udivmoddi4+0x288>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb00 fe0e 	mul.w	lr, r0, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x8c>
 8000488:	193c      	adds	r4, r7, r4
 800048a:	f100 33ff 	add.w	r3, r0, #4294967295
 800048e:	f080 8105 	bcs.w	800069c <__udivmoddi4+0x28c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f240 8102 	bls.w	800069c <__udivmoddi4+0x28c>
 8000498:	3802      	subs	r0, #2
 800049a:	443c      	add	r4, r7
 800049c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	2600      	movs	r6, #0
 80004a6:	b11d      	cbz	r5, 80004b0 <__udivmoddi4+0xa0>
 80004a8:	40d4      	lsrs	r4, r2
 80004aa:	2300      	movs	r3, #0
 80004ac:	e9c5 4300 	strd	r4, r3, [r5]
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	b902      	cbnz	r2, 80004ba <__udivmoddi4+0xaa>
 80004b8:	deff      	udf	#255	; 0xff
 80004ba:	fab2 f282 	clz	r2, r2
 80004be:	2a00      	cmp	r2, #0
 80004c0:	d150      	bne.n	8000564 <__udivmoddi4+0x154>
 80004c2:	1bcb      	subs	r3, r1, r7
 80004c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c8:	fa1f f887 	uxth.w	r8, r7
 80004cc:	2601      	movs	r6, #1
 80004ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80004d2:	0c21      	lsrs	r1, r4, #16
 80004d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004dc:	fb08 f30c 	mul.w	r3, r8, ip
 80004e0:	428b      	cmp	r3, r1
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0xe4>
 80004e4:	1879      	adds	r1, r7, r1
 80004e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0xe2>
 80004ec:	428b      	cmp	r3, r1
 80004ee:	f200 80e9 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 80004f2:	4684      	mov	ip, r0
 80004f4:	1ac9      	subs	r1, r1, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000500:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000504:	fb08 f800 	mul.w	r8, r8, r0
 8000508:	45a0      	cmp	r8, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x10c>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x10a>
 8000514:	45a0      	cmp	r8, r4
 8000516:	f200 80d9 	bhi.w	80006cc <__udivmoddi4+0x2bc>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 0408 	sub.w	r4, r4, r8
 8000520:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000524:	e7bf      	b.n	80004a6 <__udivmoddi4+0x96>
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0x12e>
 800052a:	2d00      	cmp	r5, #0
 800052c:	f000 80b1 	beq.w	8000692 <__udivmoddi4+0x282>
 8000530:	2600      	movs	r6, #0
 8000532:	e9c5 0100 	strd	r0, r1, [r5]
 8000536:	4630      	mov	r0, r6
 8000538:	4631      	mov	r1, r6
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f683 	clz	r6, r3
 8000542:	2e00      	cmp	r6, #0
 8000544:	d14a      	bne.n	80005dc <__udivmoddi4+0x1cc>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0x140>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80b8 	bhi.w	80006c0 <__udivmoddi4+0x2b0>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0103 	sbc.w	r1, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	468c      	mov	ip, r1
 800055a:	2d00      	cmp	r5, #0
 800055c:	d0a8      	beq.n	80004b0 <__udivmoddi4+0xa0>
 800055e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000562:	e7a5      	b.n	80004b0 <__udivmoddi4+0xa0>
 8000564:	f1c2 0320 	rsb	r3, r2, #32
 8000568:	fa20 f603 	lsr.w	r6, r0, r3
 800056c:	4097      	lsls	r7, r2
 800056e:	fa01 f002 	lsl.w	r0, r1, r2
 8000572:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000576:	40d9      	lsrs	r1, r3
 8000578:	4330      	orrs	r0, r6
 800057a:	0c03      	lsrs	r3, r0, #16
 800057c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000580:	fa1f f887 	uxth.w	r8, r7
 8000584:	fb0e 1116 	mls	r1, lr, r6, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb06 f108 	mul.w	r1, r6, r8
 8000590:	4299      	cmp	r1, r3
 8000592:	fa04 f402 	lsl.w	r4, r4, r2
 8000596:	d909      	bls.n	80005ac <__udivmoddi4+0x19c>
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	f106 3cff 	add.w	ip, r6, #4294967295
 800059e:	f080 808d 	bcs.w	80006bc <__udivmoddi4+0x2ac>
 80005a2:	4299      	cmp	r1, r3
 80005a4:	f240 808a 	bls.w	80006bc <__udivmoddi4+0x2ac>
 80005a8:	3e02      	subs	r6, #2
 80005aa:	443b      	add	r3, r7
 80005ac:	1a5b      	subs	r3, r3, r1
 80005ae:	b281      	uxth	r1, r0
 80005b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80005b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb00 f308 	mul.w	r3, r0, r8
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d907      	bls.n	80005d4 <__udivmoddi4+0x1c4>
 80005c4:	1879      	adds	r1, r7, r1
 80005c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005ca:	d273      	bcs.n	80006b4 <__udivmoddi4+0x2a4>
 80005cc:	428b      	cmp	r3, r1
 80005ce:	d971      	bls.n	80006b4 <__udivmoddi4+0x2a4>
 80005d0:	3802      	subs	r0, #2
 80005d2:	4439      	add	r1, r7
 80005d4:	1acb      	subs	r3, r1, r3
 80005d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005da:	e778      	b.n	80004ce <__udivmoddi4+0xbe>
 80005dc:	f1c6 0c20 	rsb	ip, r6, #32
 80005e0:	fa03 f406 	lsl.w	r4, r3, r6
 80005e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005e8:	431c      	orrs	r4, r3
 80005ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ee:	fa01 f306 	lsl.w	r3, r1, r6
 80005f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005fa:	431f      	orrs	r7, r3
 80005fc:	0c3b      	lsrs	r3, r7, #16
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fa1f f884 	uxth.w	r8, r4
 8000606:	fb0e 1119 	mls	r1, lr, r9, r1
 800060a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800060e:	fb09 fa08 	mul.w	sl, r9, r8
 8000612:	458a      	cmp	sl, r1
 8000614:	fa02 f206 	lsl.w	r2, r2, r6
 8000618:	fa00 f306 	lsl.w	r3, r0, r6
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x220>
 800061e:	1861      	adds	r1, r4, r1
 8000620:	f109 30ff 	add.w	r0, r9, #4294967295
 8000624:	d248      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 8000626:	458a      	cmp	sl, r1
 8000628:	d946      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4421      	add	r1, r4
 8000630:	eba1 010a 	sub.w	r1, r1, sl
 8000634:	b2bf      	uxth	r7, r7
 8000636:	fbb1 f0fe 	udiv	r0, r1, lr
 800063a:	fb0e 1110 	mls	r1, lr, r0, r1
 800063e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000642:	fb00 f808 	mul.w	r8, r0, r8
 8000646:	45b8      	cmp	r8, r7
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x24a>
 800064a:	19e7      	adds	r7, r4, r7
 800064c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000650:	d22e      	bcs.n	80006b0 <__udivmoddi4+0x2a0>
 8000652:	45b8      	cmp	r8, r7
 8000654:	d92c      	bls.n	80006b0 <__udivmoddi4+0x2a0>
 8000656:	3802      	subs	r0, #2
 8000658:	4427      	add	r7, r4
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	eba7 0708 	sub.w	r7, r7, r8
 8000662:	fba0 8902 	umull	r8, r9, r0, r2
 8000666:	454f      	cmp	r7, r9
 8000668:	46c6      	mov	lr, r8
 800066a:	4649      	mov	r1, r9
 800066c:	d31a      	bcc.n	80006a4 <__udivmoddi4+0x294>
 800066e:	d017      	beq.n	80006a0 <__udivmoddi4+0x290>
 8000670:	b15d      	cbz	r5, 800068a <__udivmoddi4+0x27a>
 8000672:	ebb3 020e 	subs.w	r2, r3, lr
 8000676:	eb67 0701 	sbc.w	r7, r7, r1
 800067a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800067e:	40f2      	lsrs	r2, r6
 8000680:	ea4c 0202 	orr.w	r2, ip, r2
 8000684:	40f7      	lsrs	r7, r6
 8000686:	e9c5 2700 	strd	r2, r7, [r5]
 800068a:	2600      	movs	r6, #0
 800068c:	4631      	mov	r1, r6
 800068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000692:	462e      	mov	r6, r5
 8000694:	4628      	mov	r0, r5
 8000696:	e70b      	b.n	80004b0 <__udivmoddi4+0xa0>
 8000698:	4606      	mov	r6, r0
 800069a:	e6e9      	b.n	8000470 <__udivmoddi4+0x60>
 800069c:	4618      	mov	r0, r3
 800069e:	e6fd      	b.n	800049c <__udivmoddi4+0x8c>
 80006a0:	4543      	cmp	r3, r8
 80006a2:	d2e5      	bcs.n	8000670 <__udivmoddi4+0x260>
 80006a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80006a8:	eb69 0104 	sbc.w	r1, r9, r4
 80006ac:	3801      	subs	r0, #1
 80006ae:	e7df      	b.n	8000670 <__udivmoddi4+0x260>
 80006b0:	4608      	mov	r0, r1
 80006b2:	e7d2      	b.n	800065a <__udivmoddi4+0x24a>
 80006b4:	4660      	mov	r0, ip
 80006b6:	e78d      	b.n	80005d4 <__udivmoddi4+0x1c4>
 80006b8:	4681      	mov	r9, r0
 80006ba:	e7b9      	b.n	8000630 <__udivmoddi4+0x220>
 80006bc:	4666      	mov	r6, ip
 80006be:	e775      	b.n	80005ac <__udivmoddi4+0x19c>
 80006c0:	4630      	mov	r0, r6
 80006c2:	e74a      	b.n	800055a <__udivmoddi4+0x14a>
 80006c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c8:	4439      	add	r1, r7
 80006ca:	e713      	b.n	80004f4 <__udivmoddi4+0xe4>
 80006cc:	3802      	subs	r0, #2
 80006ce:	443c      	add	r4, r7
 80006d0:	e724      	b.n	800051c <__udivmoddi4+0x10c>
 80006d2:	bf00      	nop

080006d4 <__aeabi_idiv0>:
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006de:	f000 fe6d 	bl	80013bc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006e2:	4b4a      	ldr	r3, [pc, #296]	; (800080c <main+0x134>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d11b      	bne.n	8000726 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ee:	f3bf 8f4f 	dsb	sy
}
 80006f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f4:	f3bf 8f6f 	isb	sy
}
 80006f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006fa:	4b44      	ldr	r3, [pc, #272]	; (800080c <main+0x134>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000702:	f3bf 8f4f 	dsb	sy
}
 8000706:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000708:	f3bf 8f6f 	isb	sy
}
 800070c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <main+0x134>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a3e      	ldr	r2, [pc, #248]	; (800080c <main+0x134>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800071a:	f3bf 8f4f 	dsb	sy
}
 800071e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000720:	f3bf 8f6f 	isb	sy
}
 8000724:	e000      	b.n	8000728 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000726:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <main+0x134>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000730:	2b00      	cmp	r3, #0
 8000732:	d138      	bne.n	80007a6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000734:	4b35      	ldr	r3, [pc, #212]	; (800080c <main+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800073c:	f3bf 8f4f 	dsb	sy
}
 8000740:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <main+0x134>)
 8000744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000748:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	0b5b      	lsrs	r3, r3, #13
 800074e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000752:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800075c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	015a      	lsls	r2, r3, #5
 8000762:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000766:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800076c:	4927      	ldr	r1, [pc, #156]	; (800080c <main+0x134>)
 800076e:	4313      	orrs	r3, r2
 8000770:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1e5a      	subs	r2, r3, #1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1ef      	bne.n	800075e <main+0x86>
    } while(sets-- != 0U);
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60ba      	str	r2, [r7, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1e5      	bne.n	8000754 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000788:	f3bf 8f4f 	dsb	sy
}
 800078c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <main+0x134>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a1e      	ldr	r2, [pc, #120]	; (800080c <main+0x134>)
 8000794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000798:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800079a:	f3bf 8f4f 	dsb	sy
}
 800079e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a0:	f3bf 8f6f 	isb	sy
}
 80007a4:	e000      	b.n	80007a8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007a6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f003 fb8e 	bl	8003ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f83a 	bl	8000824 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b0:	f000 f8b0 	bl	8000914 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 fc78 	bl	80010a8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80007b8:	f000 fae6 	bl	8000d88 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007bc:	f000 fb3a 	bl	8000e34 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80007c0:	f000 fbda 	bl	8000f78 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80007c4:	f000 fc24 	bl	8001010 <MX_USART3_UART_Init>
  MX_OCTOSPI1_Init();
 80007c8:	f000 f9ee 	bl	8000ba8 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 80007cc:	f000 fa54 	bl	8000c78 <MX_OCTOSPI2_Init>
  MX_LTDC_Init();
 80007d0:	f000 f968 	bl	8000aa4 <MX_LTDC_Init>
  MX_CRC_Init();
 80007d4:	f000 f8ca 	bl	800096c <MX_CRC_Init>
  MX_I2C4_Init();
 80007d8:	f000 f924 	bl	8000a24 <MX_I2C4_Init>
  MX_DMA2D_Init();
 80007dc:	f000 f8e8 	bl	80009b0 <MX_DMA2D_Init>
  MX_UART7_Init();
 80007e0:	f000 fb7e 	bl	8000ee0 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  Initialization();
 80007e4:	f003 f8a6 	bl	8003934 <Initialization>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&car,1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <main+0x138>)
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <main+0x13c>)
 80007ee:	f00b f9cd 	bl	800bb8c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f2:	f00e fb2d 	bl	800ee50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <main+0x140>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <main+0x144>)
 80007fc:	f00e fb87 	bl	800ef0e <osThreadNew>
 8000800:	4603      	mov	r3, r0
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <main+0x148>)
 8000804:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000806:	f00e fb47 	bl	800ee98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080a:	e7fe      	b.n	800080a <main+0x132>
 800080c:	e000ed00 	.word	0xe000ed00
 8000810:	2401afe0 	.word	0x2401afe0
 8000814:	2401b390 	.word	0x2401b390
 8000818:	08021498 	.word	0x08021498
 800081c:	080013a9 	.word	0x080013a9
 8000820:	2401afe4 	.word	0x2401afe4

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	; 0x70
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	224c      	movs	r2, #76	; 0x4c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f01c fe3c 	bl	801d4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f01c fe36 	bl	801d4b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000844:	2004      	movs	r0, #4
 8000846:	f008 f9b7 	bl	8008bb8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <SystemClock_Config+0xe8>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <SystemClock_Config+0xe8>)
 8000854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <SystemClock_Config+0xe8>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000866:	bf00      	nop
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <SystemClock_Config+0xe8>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000874:	d1f8      	bne.n	8000868 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <SystemClock_Config+0xec>)
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	f023 0303 	bic.w	r3, r3, #3
 800087e:	4a24      	ldr	r2, [pc, #144]	; (8000910 <SystemClock_Config+0xec>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	2302      	movs	r3, #2
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800089c:	232c      	movs	r3, #44	; 0x2c
 800089e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ac:	230c      	movs	r3, #12
 80008ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4618      	mov	r0, r3
 80008be:	f008 f9d5 	bl	8008c6c <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008c8:	f000 fdc6 	bl	8001458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	233f      	movs	r3, #63	; 0x3f
 80008ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008d8:	2308      	movs	r3, #8
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2103      	movs	r1, #3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f008 fd66 	bl	80093c4 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80008fe:	f000 fdab 	bl	8001458 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3770      	adds	r7, #112	; 0x70
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024800 	.word	0x58024800
 8000910:	58024400 	.word	0x58024400

08000914 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0ae      	sub	sp, #184	; 0xb8
 8000918:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	22b4      	movs	r2, #180	; 0xb4
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f01c fdc5 	bl	801d4b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800092c:	2305      	movs	r3, #5
 800092e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000930:	2350      	movs	r3, #80	; 0x50
 8000932:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f009 f903 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000960:	f000 fd7a 	bl	8001458 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	37b8      	adds	r7, #184	; 0xb8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_CRC_Init+0x3c>)
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <MX_CRC_Init+0x40>)
 8000974:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_CRC_Init+0x3c>)
 8000978:	2200      	movs	r2, #0
 800097a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_CRC_Init+0x3c>)
 800097e:	2200      	movs	r2, #0
 8000980:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_CRC_Init+0x3c>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_CRC_Init+0x3c>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_CRC_Init+0x3c>)
 8000990:	2201      	movs	r2, #1
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_CRC_Init+0x3c>)
 8000996:	f003 fc63 	bl	8004260 <HAL_CRC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009a0:	f000 fd5a 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2401b23c 	.word	0x2401b23c
 80009ac:	58024c00 	.word	0x58024c00

080009b0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009b6:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <MX_DMA2D_Init+0x70>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 80009f8:	f004 fa7e 	bl	8004ef8 <HAL_DMA2D_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a02:	f000 fd29 	bl	8001458 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a06:	2101      	movs	r1, #1
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_DMA2D_Init+0x6c>)
 8000a0a:	f004 fbe9 	bl	80051e0 <HAL_DMA2D_ConfigLayer>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000a14:	f000 fd20 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2401b420 	.word	0x2401b420
 8000a20:	52001000 	.word	0x52001000

08000a24 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C4_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C4_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a60:	f006 fd04 	bl	800746c <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 fcf5 	bl	8001458 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a72:	f006 fd8b 	bl	800758c <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 fcec 	bl	8001458 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_I2C4_Init+0x74>)
 8000a84:	f006 fdcd 	bl	8007622 <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fce3 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2401afe8 	.word	0x2401afe8
 8000a9c:	58001c00 	.word	0x58001c00
 8000aa0:	60404e72 	.word	0x60404e72

08000aa4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2234      	movs	r2, #52	; 0x34
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f01c fcfd 	bl	801d4b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ab8:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <MX_LTDC_Init+0x100>)
 8000aba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000abc:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ac2:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ace:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ad6:	2228      	movs	r2, #40	; 0x28
 8000ad8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000adc:	2209      	movs	r2, #9
 8000ade:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ae2:	2235      	movs	r2, #53	; 0x35
 8000ae4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ae8:	220b      	movs	r2, #11
 8000aea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000aee:	f240 2215 	movw	r2, #533	; 0x215
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000af6:	f240 121b 	movw	r2, #283	; 0x11b
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000afe:	f240 2235 	movw	r2, #565	; 0x235
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b06:	f240 121d 	movw	r2, #285	; 0x11d
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b24:	481e      	ldr	r0, [pc, #120]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b26:	f006 fdc9 	bl	80076bc <HAL_LTDC_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b30:	f000 fc92 	bl	8001458 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b3c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b46:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b4c:	23ff      	movs	r3, #255	; 0xff
 8000b4e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b58:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b5e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000b64:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b8a:	f006 ff29 	bl	80079e0 <HAL_LTDC_ConfigLayer>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b94:	f000 fc60 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2401b2e8 	.word	0x2401b2e8
 8000ba4:	50001000 	.word	0x50001000

08000ba8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <MX_OCTOSPI1_Init+0xc8>)
 8000bc2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bd6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bda:	2220      	movs	r2, #32
 8000bdc:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000c26:	4811      	ldr	r0, [pc, #68]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c28:	f007 f8b2 	bl	8007d90 <HAL_OSPI_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_OCTOSPI1_Init+0x8e>
  {
    Error_Handler();
 8000c32:	f000 fc11 	bl	8001458 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000c42:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000c46:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_OCTOSPI1_Init+0xcc>)
 8000c4a:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_OCTOSPI1_Init+0xc4>)
 8000c56:	f007 f9a7 	bl	8007fa8 <HAL_OSPIM_Config>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_OCTOSPI1_Init+0xbc>
  {
    Error_Handler();
 8000c60:	f000 fbfa 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2401b1dc 	.word	0x2401b1dc
 8000c70:	52005000 	.word	0x52005000
 8000c74:	01000001 	.word	0x01000001

08000c78 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000c9e:	4a37      	ldr	r2, [pc, #220]	; (8000d7c <MX_OCTOSPI2_Init+0x104>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cb4:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 24;
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cb8:	2218      	movs	r2, #24
 8000cba:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 4;
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 2;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 23;
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cea:	2217      	movs	r2, #23
 8000cec:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.ClkChipSelectHighTime = 0;
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.MaxTran = 0;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi2.Init.Refresh = 400;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000d02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000d08:	481b      	ldr	r0, [pc, #108]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000d0a:	f007 f841 	bl	8007d90 <HAL_OSPI_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8000d14:	f000 fba0 	bl	8001458 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_OCTOSPI2_Init+0x108>)
 8000d26:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_OCTOSPI2_Init+0x10c>)
 8000d2a:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d34:	4619      	mov	r1, r3
 8000d36:	4810      	ldr	r0, [pc, #64]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000d38:	f007 f936 	bl	8007fa8 <HAL_OSPIM_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_OCTOSPI2_Init+0xce>
  {
    Error_Handler();
 8000d42:	f000 fb89 	bl	8001458 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 3;
 8000d46:	2303      	movs	r3, #3
 8000d48:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 6;
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000d52:	2301      	movs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_OCTOSPI2_Init+0x100>)
 8000d60:	f007 f8d4 	bl	8007f0c <HAL_OSPI_HyperbusCfg>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_OCTOSPI2_Init+0xf6>
  {
    Error_Handler();
 8000d6a:	f000 fb75 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2401b488 	.word	0x2401b488
 8000d7c:	5200a000 	.word	0x5200a000
 8000d80:	00010002 	.word	0x00010002
 8000d84:	01000002 	.word	0x01000002

08000d88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000d8e:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <MX_SPI2_Init+0xa8>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000d94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000da2:	2207      	movs	r2, #7
 8000da4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000db4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000db8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dc0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_SPI2_Init+0xa4>)
 8000e1a:	f00a f9bd 	bl	800b198 <HAL_SPI_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000e24:	f000 fb18 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2401b034 	.word	0x2401b034
 8000e30:	40003800 	.word	0x40003800

08000e34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <MX_SPI3_Init+0xa8>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e6c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SPI3_Init+0xa4>)
 8000ec6:	f00a f967 	bl	800b198 <HAL_SPI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000ed0:	f000 fac2 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2401b260 	.word	0x2401b260
 8000edc:	40003c00 	.word	0x40003c00

08000ee0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_UART7_Init+0x90>)
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <MX_UART7_Init+0x94>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_UART7_Init+0x90>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_UART7_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_UART7_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f2a:	f00a fd49 	bl	800b9c0 <HAL_UART_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000f34:	f000 fa90 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f3c:	f00d f8d3 	bl	800e0e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000f46:	f000 fa87 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f4e:	f00d f908 	bl	800e162 <HAL_UARTEx_SetRxFifoThreshold>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000f58:	f000 fa7e 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_UART7_Init+0x90>)
 8000f5e:	f00d f889 	bl	800e074 <HAL_UARTEx_DisableFifoMode>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000f68:	f000 fa76 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2401b0bc 	.word	0x2401b0bc
 8000f74:	40007800 	.word	0x40007800

08000f78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fc2:	f00a fcfd 	bl	800b9c0 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 fa44 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fd4:	f00d f887 	bl	800e0e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f000 fa3b 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000fe6:	f00d f8bc 	bl	800e162 <HAL_UARTEx_SetRxFifoThreshold>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 fa32 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_USART1_UART_Init+0x90>)
 8000ff6:	f00d f83d 	bl	800e074 <HAL_UARTEx_DisableFifoMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 fa2a 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2401b390 	.word	0x2401b390
 800100c:	40011000 	.word	0x40011000

08001010 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <MX_USART3_UART_Init+0x94>)
 8001018:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800105a:	f00a fcb1 	bl	800b9c0 <HAL_UART_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001064:	f000 f9f8 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800106c:	f00d f83b 	bl	800e0e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001076:	f000 f9ef 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800107e:	f00d f870 	bl	800e162 <HAL_UARTEx_SetRxFifoThreshold>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001088:	f000 f9e6 	bl	8001458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800108e:	f00c fff1 	bl	800e074 <HAL_UARTEx_DisableFifoMode>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f9de 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2401b14c 	.word	0x2401b14c
 80010a4:	40004800 	.word	0x40004800

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010be:	4b9a      	ldr	r3, [pc, #616]	; (8001328 <MX_GPIO_Init+0x280>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a98      	ldr	r2, [pc, #608]	; (8001328 <MX_GPIO_Init+0x280>)
 80010c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b96      	ldr	r3, [pc, #600]	; (8001328 <MX_GPIO_Init+0x280>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d8:	623b      	str	r3, [r7, #32]
 80010da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010dc:	4b92      	ldr	r3, [pc, #584]	; (8001328 <MX_GPIO_Init+0x280>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	4a91      	ldr	r2, [pc, #580]	; (8001328 <MX_GPIO_Init+0x280>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ec:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <MX_GPIO_Init+0x280>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b8b      	ldr	r3, [pc, #556]	; (8001328 <MX_GPIO_Init+0x280>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a89      	ldr	r2, [pc, #548]	; (8001328 <MX_GPIO_Init+0x280>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b87      	ldr	r3, [pc, #540]	; (8001328 <MX_GPIO_Init+0x280>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001118:	4b83      	ldr	r3, [pc, #524]	; (8001328 <MX_GPIO_Init+0x280>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	4a82      	ldr	r2, [pc, #520]	; (8001328 <MX_GPIO_Init+0x280>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001128:	4b7f      	ldr	r3, [pc, #508]	; (8001328 <MX_GPIO_Init+0x280>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b7c      	ldr	r3, [pc, #496]	; (8001328 <MX_GPIO_Init+0x280>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	4a7a      	ldr	r2, [pc, #488]	; (8001328 <MX_GPIO_Init+0x280>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001146:	4b78      	ldr	r3, [pc, #480]	; (8001328 <MX_GPIO_Init+0x280>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001154:	4b74      	ldr	r3, [pc, #464]	; (8001328 <MX_GPIO_Init+0x280>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a73      	ldr	r2, [pc, #460]	; (8001328 <MX_GPIO_Init+0x280>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b70      	ldr	r3, [pc, #448]	; (8001328 <MX_GPIO_Init+0x280>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <MX_GPIO_Init+0x280>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	4a6b      	ldr	r2, [pc, #428]	; (8001328 <MX_GPIO_Init+0x280>)
 800117a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001182:	4b69      	ldr	r3, [pc, #420]	; (8001328 <MX_GPIO_Init+0x280>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001190:	4b65      	ldr	r3, [pc, #404]	; (8001328 <MX_GPIO_Init+0x280>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001196:	4a64      	ldr	r2, [pc, #400]	; (8001328 <MX_GPIO_Init+0x280>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a0:	4b61      	ldr	r3, [pc, #388]	; (8001328 <MX_GPIO_Init+0x280>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IO_8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f240 4102 	movw	r1, #1026	; 0x402
 80011b4:	485d      	ldr	r0, [pc, #372]	; (800132c <MX_GPIO_Init+0x284>)
 80011b6:	f006 f91b 	bl	80073f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_CS_Pin|IO_1_Pin|IO_5_Pin|IO_6_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2178      	movs	r1, #120	; 0x78
 80011be:	485c      	ldr	r0, [pc, #368]	; (8001330 <MX_GPIO_Init+0x288>)
 80011c0:	f006 f916 	bl	80073f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, FRAM_CS_Pin|LCD_BL_CTRL_Pin|DtoACS3_Pin|UART3_ADDR0_Pin
 80011c4:	2200      	movs	r2, #0
 80011c6:	f24a 1118 	movw	r1, #41240	; 0xa118
 80011ca:	485a      	ldr	r0, [pc, #360]	; (8001334 <MX_GPIO_Init+0x28c>)
 80011cc:	f006 f910 	bl	80073f0 <HAL_GPIO_WritePin>
                          |UART3_ADDR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, IO_9_Pin|IO_10_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011d6:	4858      	ldr	r0, [pc, #352]	; (8001338 <MX_GPIO_Init+0x290>)
 80011d8:	f006 f90a 	bl	80073f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IO_2_Pin|IO_4_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f242 010d 	movw	r1, #8205	; 0x200d
 80011e2:	4856      	ldr	r0, [pc, #344]	; (800133c <MX_GPIO_Init+0x294>)
 80011e4:	f006 f904 	bl	80073f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_WP_GPIO_Port, FRAM_WP_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	4854      	ldr	r0, [pc, #336]	; (8001340 <MX_GPIO_Init+0x298>)
 80011ee:	f006 f8ff 	bl	80073f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IO_0_Pin|IO_3_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f640 0101 	movw	r1, #2049	; 0x801
 80011f8:	4852      	ldr	r0, [pc, #328]	; (8001344 <MX_GPIO_Init+0x29c>)
 80011fa:	f006 f8f9 	bl	80073f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_7_GPIO_Port, IO_7_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	4850      	ldr	r0, [pc, #320]	; (8001348 <MX_GPIO_Init+0x2a0>)
 8001206:	f006 f8f3 	bl	80073f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IO_8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = IO_8_Pin|LCD_DISP_Pin;
 800120a:	f240 4302 	movw	r3, #1026	; 0x402
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	4842      	ldr	r0, [pc, #264]	; (800132c <MX_GPIO_Init+0x284>)
 8001224:	f005 ff3c 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin IO_1_Pin IO_5_Pin IO_6_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|IO_1_Pin|IO_5_Pin|IO_6_Pin;
 8001228:	2378      	movs	r3, #120	; 0x78
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	483c      	ldr	r0, [pc, #240]	; (8001330 <MX_GPIO_Init+0x288>)
 8001240:	f005 ff2e 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRAM_CS_Pin LCD_BL_CTRL_Pin DtoACS3_Pin UART3_ADDR0_Pin
                           UART3_ADDR1_Pin */
  GPIO_InitStruct.Pin = FRAM_CS_Pin|LCD_BL_CTRL_Pin|DtoACS3_Pin|UART3_ADDR0_Pin
 8001244:	f24a 1318 	movw	r3, #41240	; 0xa118
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
                          |UART3_ADDR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4835      	ldr	r0, [pc, #212]	; (8001334 <MX_GPIO_Init+0x28c>)
 800125e:	f005 ff1f 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_9_Pin IO_10_Pin */
  GPIO_InitStruct.Pin = IO_9_Pin|IO_10_Pin;
 8001262:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	482f      	ldr	r0, [pc, #188]	; (8001338 <MX_GPIO_Init+0x290>)
 800127c:	f005 ff10 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_2_Pin IO_4_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = IO_2_Pin|IO_4_Pin|LED2_Pin|LED1_Pin;
 8001280:	f242 030d 	movw	r3, #8205	; 0x200d
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4828      	ldr	r0, [pc, #160]	; (800133c <MX_GPIO_Init+0x294>)
 800129a:	f005 ff01 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAM_WP_Pin */
  GPIO_InitStruct.Pin = FRAM_WP_Pin;
 800129e:	2320      	movs	r3, #32
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAM_WP_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4822      	ldr	r0, [pc, #136]	; (8001340 <MX_GPIO_Init+0x298>)
 80012b6:	f005 fef3 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_0_Pin IO_3_Pin */
  GPIO_InitStruct.Pin = IO_0_Pin|IO_3_Pin;
 80012ba:	f640 0301 	movw	r3, #2049	; 0x801
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	481c      	ldr	r0, [pc, #112]	; (8001344 <MX_GPIO_Init+0x29c>)
 80012d4:	f005 fee4 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <MX_GPIO_Init+0x28c>)
 80012ee:	f005 fed7 	bl	80070a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_7_Pin */
  GPIO_InitStruct.Pin = IO_7_Pin;
 80012f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_7_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	480f      	ldr	r0, [pc, #60]	; (8001348 <MX_GPIO_Init+0x2a0>)
 800130c:	f005 fec8 	bl	80070a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2105      	movs	r1, #5
 8001314:	2008      	movs	r0, #8
 8001316:	f002 feff 	bl	8004118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800131a:	2008      	movs	r0, #8
 800131c:	f002 ff16 	bl	800414c <HAL_NVIC_EnableIRQ>

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58024400 	.word	0x58024400
 800132c:	58020c00 	.word	0x58020c00
 8001330:	58021000 	.word	0x58021000
 8001334:	58021800 	.word	0x58021800
 8001338:	58021c00 	.word	0x58021c00
 800133c:	58020800 	.word	0x58020800
 8001340:	58020400 	.word	0x58020400
 8001344:	58020000 	.word	0x58020000
 8001348:	58021400 	.word	0x58021400

0800134c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135a:	2201      	movs	r2, #1
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <__io_putchar+0x20>)
 800135e:	f00a fb7f 	bl	800ba60 <HAL_UART_Transmit>
return ch;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2401b390 	.word	0x2401b390

08001370 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_IT(&huart1,(uint8_t*)&car,1);
 8001378:	2201      	movs	r2, #1
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <HAL_UART_RxCpltCallback+0x2c>)
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <HAL_UART_RxCpltCallback+0x30>)
 800137e:	f00a fc05 	bl	800bb8c <HAL_UART_Receive_IT>
		embeddedCliReceiveChar(cli, car);
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_UART_RxCpltCallback+0x34>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_UART_RxCpltCallback+0x2c>)
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f9e9 	bl	8002764 <embeddedCliReceiveChar>
	}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2401afe0 	.word	0x2401afe0
 80013a0:	2401b390 	.word	0x2401b390
 80013a4:	2401b538 	.word	0x2401b538

080013a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80013b0:	f00c ff64 	bl	800e27c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f00d fe3c 	bl	800f032 <osDelay>
 80013ba:	e7fb      	b.n	80013b4 <StartDefaultTask+0xc>

080013bc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013ce:	f002 fecb 	bl	8004168 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80013da:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80013de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80013e0:	230e      	movs	r3, #14
 80013e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013ec:	2303      	movs	r3, #3
 80013ee:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001400:	463b      	mov	r3, r7
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fee8 	bl	80041d8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001408:	2302      	movs	r3, #2
 800140a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800140c:	2308      	movs	r3, #8
 800140e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001410:	2300      	movs	r3, #0
 8001412:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001414:	2301      	movs	r3, #1
 8001416:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800141c:	463b      	mov	r3, r7
 800141e:	4618      	mov	r0, r3
 8001420:	f002 feda 	bl	80041d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001424:	2004      	movs	r0, #4
 8001426:	f002 feb7 	bl	8004198 <HAL_MPU_Enable>

}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001446:	f002 fd7b 	bl	8003f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40001000 	.word	0x40001000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_MspInit+0x38>)
 800146c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_MspInit+0x38>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_MspInit+0x38>)
 800147c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	210f      	movs	r1, #15
 800148c:	f06f 0001 	mvn.w	r0, #1
 8001490:	f002 fe42 	bl	8004118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	58024400 	.word	0x58024400

080014a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_CRC_MspInit+0x3c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10e      	bne.n	80014d0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_CRC_MspInit+0x40>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_CRC_MspInit+0x40>)
 80014ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_CRC_MspInit+0x40>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	58024c00 	.word	0x58024c00
 80014e0:	58024400 	.word	0x58024400

080014e4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_DMA2D_MspInit+0x48>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d116      	bne.n	8001524 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_DMA2D_MspInit+0x4c>)
 80014f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <HAL_DMA2D_MspInit+0x4c>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_DMA2D_MspInit+0x4c>)
 8001508:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2105      	movs	r1, #5
 8001518:	205a      	movs	r0, #90	; 0x5a
 800151a:	f002 fdfd 	bl	8004118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800151e:	205a      	movs	r0, #90	; 0x5a
 8001520:	f002 fe14 	bl	800414c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	52001000 	.word	0x52001000
 8001530:	58024400 	.word	0x58024400

08001534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0b6      	sub	sp, #216	; 0xd8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	22b4      	movs	r2, #180	; 0xb4
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f01b ffab 	bl	801d4b0 <memset>
  if(hi2c->Instance==I2C4)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a25      	ldr	r2, [pc, #148]	; (80015f4 <HAL_I2C_MspInit+0xc0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d142      	bne.n	80015ea <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001564:	2310      	movs	r3, #16
 8001566:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4618      	mov	r0, r3
 8001574:	f008 faf4 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800157e:	f7ff ff6b 	bl	8001458 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_I2C_MspInit+0xc4>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <HAL_I2C_MspInit+0xc4>)
 800158a:	f043 0320 	orr.w	r3, r3, #32
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_I2C_MspInit+0xc4>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 80015a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a8:	2312      	movs	r3, #18
 80015aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80015ba:	2304      	movs	r3, #4
 80015bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <HAL_I2C_MspInit+0xc8>)
 80015c8:	f005 fd6a 	bl	80070a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_I2C_MspInit+0xc4>)
 80015ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_I2C_MspInit+0xc4>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_I2C_MspInit+0xc4>)
 80015de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	37d8      	adds	r7, #216	; 0xd8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	58001c00 	.word	0x58001c00
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58021400 	.word	0x58021400

08001600 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0bc      	sub	sp, #240	; 0xf0
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161c:	22b4      	movs	r2, #180	; 0xb4
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f01b ff45 	bl	801d4b0 <memset>
  if(hltdc->Instance==LTDC)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4ab4      	ldr	r2, [pc, #720]	; (80018fc <HAL_LTDC_MspInit+0x2fc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	f040 8161 	bne.w	80018f4 <HAL_LTDC_MspInit+0x2f4>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001632:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001638:	2319      	movs	r3, #25
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 800163c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001640:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001642:	2302      	movs	r3, #2
 8001644:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 800164a:	231e      	movs	r3, #30
 800164c:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800164e:	2300      	movs	r3, #0
 8001650:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001656:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001660:	4618      	mov	r0, r3
 8001662:	f008 fa7d 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 800166c:	f7ff fef4 	bl	8001458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001670:	4ba3      	ldr	r3, [pc, #652]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001672:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001676:	4aa2      	ldr	r2, [pc, #648]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001680:	4b9f      	ldr	r3, [pc, #636]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001682:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b9c      	ldr	r3, [pc, #624]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a9a      	ldr	r2, [pc, #616]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b98      	ldr	r3, [pc, #608]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b94      	ldr	r3, [pc, #592]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	4a93      	ldr	r2, [pc, #588]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016bc:	4b90      	ldr	r3, [pc, #576]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	4a8b      	ldr	r2, [pc, #556]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e8:	4b85      	ldr	r3, [pc, #532]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	4a84      	ldr	r2, [pc, #528]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f8:	4b81      	ldr	r3, [pc, #516]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	4b7e      	ldr	r3, [pc, #504]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	4a7c      	ldr	r2, [pc, #496]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 800170e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001716:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	4a75      	ldr	r2, [pc, #468]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001734:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001742:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001748:	4a6d      	ldr	r2, [pc, #436]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 800174a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001752:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <HAL_LTDC_MspInit+0x300>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> LTDC_DE
    PE15     ------> LTDC_R7
    PA6     ------> LTDC_G2
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001760:	2348      	movs	r3, #72	; 0x48
 8001762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001778:	230e      	movs	r3, #14
 800177a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001782:	4619      	mov	r1, r3
 8001784:	485f      	ldr	r0, [pc, #380]	; (8001904 <HAL_LTDC_MspInit+0x304>)
 8001786:	f005 fc8b 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800178a:	f248 0358 	movw	r3, #32856	; 0x8058
 800178e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017a4:	230e      	movs	r3, #14
 80017a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017ae:	4619      	mov	r1, r3
 80017b0:	4855      	ldr	r0, [pc, #340]	; (8001908 <HAL_LTDC_MspInit+0x308>)
 80017b2:	f005 fc75 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_1;
 80017b6:	f240 2302 	movw	r3, #514	; 0x202
 80017ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017d0:	230e      	movs	r3, #14
 80017d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017da:	4619      	mov	r1, r3
 80017dc:	484b      	ldr	r0, [pc, #300]	; (800190c <HAL_LTDC_MspInit+0x30c>)
 80017de:	f005 fc5f 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 80017e2:	f64b 0303 	movw	r3, #47107	; 0xb803
 80017e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_15|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fc:	230e      	movs	r3, #14
 80017fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001802:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001806:	4619      	mov	r1, r3
 8001808:	4841      	ldr	r0, [pc, #260]	; (8001910 <HAL_LTDC_MspInit+0x310>)
 800180a:	f005 fc49 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800180e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001828:	230d      	movs	r3, #13
 800182a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001832:	4619      	mov	r1, r3
 8001834:	4834      	ldr	r0, [pc, #208]	; (8001908 <HAL_LTDC_MspInit+0x308>)
 8001836:	f005 fc33 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_10;
 800183a:	f44f 430e 	mov.w	r3, #36352	; 0x8e00
 800183e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001854:	230e      	movs	r3, #14
 8001856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800185a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800185e:	4619      	mov	r1, r3
 8001860:	482c      	ldr	r0, [pc, #176]	; (8001914 <HAL_LTDC_MspInit+0x314>)
 8001862:	f005 fc1d 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001866:	23c0      	movs	r3, #192	; 0xc0
 8001868:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800187e:	230e      	movs	r3, #14
 8001880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001888:	4619      	mov	r1, r3
 800188a:	4823      	ldr	r0, [pc, #140]	; (8001918 <HAL_LTDC_MspInit+0x318>)
 800188c:	f005 fc08 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018a8:	230e      	movs	r3, #14
 80018aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018b2:	4619      	mov	r1, r3
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <HAL_LTDC_MspInit+0x31c>)
 80018b6:	f005 fbf3 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018ba:	2310      	movs	r3, #16
 80018bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018d2:	2309      	movs	r3, #9
 80018d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <HAL_LTDC_MspInit+0x314>)
 80018e0:	f005 fbde 	bl	80070a0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2105      	movs	r1, #5
 80018e8:	2058      	movs	r0, #88	; 0x58
 80018ea:	f002 fc15 	bl	8004118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80018ee:	2058      	movs	r0, #88	; 0x58
 80018f0:	f002 fc2c 	bl	800414c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	37f0      	adds	r7, #240	; 0xf0
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	50001000 	.word	0x50001000
 8001900:	58024400 	.word	0x58024400
 8001904:	58020c00 	.word	0x58020c00
 8001908:	58020000 	.word	0x58020000
 800190c:	58020400 	.word	0x58020400
 8001910:	58021000 	.word	0x58021000
 8001914:	58021c00 	.word	0x58021c00
 8001918:	58020800 	.word	0x58020800
 800191c:	58021800 	.word	0x58021800

08001920 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0c0      	sub	sp, #256	; 0x100
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800193c:	22b4      	movs	r2, #180	; 0xb4
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f01b fdb5 	bl	801d4b0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a8e      	ldr	r2, [pc, #568]	; (8001b84 <HAL_OSPI_MspInit+0x264>)
 800194c:	4293      	cmp	r3, r2
 800194e:	f040 8129 	bne.w	8001ba4 <HAL_OSPI_MspInit+0x284>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001962:	4618      	mov	r0, r3
 8001964:	f008 f8fc 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 800196e:	f7ff fd73 	bl	8001458 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001972:	4b85      	ldr	r3, [pc, #532]	; (8001b88 <HAL_OSPI_MspInit+0x268>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	4a83      	ldr	r2, [pc, #524]	; (8001b88 <HAL_OSPI_MspInit+0x268>)
 800197a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800197c:	4b82      	ldr	r3, [pc, #520]	; (8001b88 <HAL_OSPI_MspInit+0x268>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10e      	bne.n	80019a2 <HAL_OSPI_MspInit+0x82>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001986:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800198a:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 800198c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001990:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001994:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001996:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80019a2:	4b7a      	ldr	r3, [pc, #488]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019a8:	4a78      	ldr	r2, [pc, #480]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80019b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019c0:	4b72      	ldr	r3, [pc, #456]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	4a71      	ldr	r2, [pc, #452]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d0:	4b6e      	ldr	r3, [pc, #440]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019de:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4a69      	ldr	r2, [pc, #420]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fc:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a62      	ldr	r2, [pc, #392]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2a:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	623b      	str	r3, [r7, #32]
 8001a36:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b54      	ldr	r3, [pc, #336]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	4a53      	ldr	r2, [pc, #332]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_OSPI_MspInit+0x26c>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a70:	2309      	movs	r3, #9
 8001a72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a76:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4844      	ldr	r0, [pc, #272]	; (8001b90 <HAL_OSPI_MspInit+0x270>)
 8001a7e:	f005 fb0f 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8001a82:	23b0      	movs	r3, #176	; 0xb0
 8001a84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	483b      	ldr	r0, [pc, #236]	; (8001b94 <HAL_OSPI_MspInit+0x274>)
 8001aa8:	f005 fafa 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aac:	2304      	movs	r3, #4
 8001aae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001ac4:	2309      	movs	r3, #9
 8001ac6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4831      	ldr	r0, [pc, #196]	; (8001b98 <HAL_OSPI_MspInit+0x278>)
 8001ad2:	f005 fae5 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001aee:	230a      	movs	r3, #10
 8001af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001af4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001af8:	4619      	mov	r1, r3
 8001afa:	4825      	ldr	r0, [pc, #148]	; (8001b90 <HAL_OSPI_MspInit+0x270>)
 8001afc:	f005 fad0 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8001b00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001b1a:	2309      	movs	r3, #9
 8001b1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b24:	4619      	mov	r1, r3
 8001b26:	481b      	ldr	r0, [pc, #108]	; (8001b94 <HAL_OSPI_MspInit+0x274>)
 8001b28:	f005 faba 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001b46:	2309      	movs	r3, #9
 8001b48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b50:	4619      	mov	r1, r3
 8001b52:	4812      	ldr	r0, [pc, #72]	; (8001b9c <HAL_OSPI_MspInit+0x27c>)
 8001b54:	f005 faa4 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001b70:	230a      	movs	r3, #10
 8001b72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <HAL_OSPI_MspInit+0x280>)
 8001b7e:	f005 fa8f 	bl	80070a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001b82:	e0ac      	b.n	8001cde <HAL_OSPI_MspInit+0x3be>
 8001b84:	52005000 	.word	0x52005000
 8001b88:	240019b4 	.word	0x240019b4
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	58021800 	.word	0x58021800
 8001b94:	58020c00 	.word	0x58020c00
 8001b98:	58021000 	.word	0x58021000
 8001b9c:	58021400 	.word	0x58021400
 8001ba0:	58020400 	.word	0x58020400
  else if(hospi->Instance==OCTOSPI2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_OSPI_MspInit+0x3c8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	f040 8097 	bne.w	8001cde <HAL_OSPI_MspInit+0x3be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f007 ffcd 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_OSPI_MspInit+0x2b0>
      Error_Handler();
 8001bcc:	f7ff fc44 	bl	8001458 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_OSPI_MspInit+0x3cc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_OSPI_MspInit+0x3cc>)
 8001bd8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_OSPI_MspInit+0x3cc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10e      	bne.n	8001c00 <HAL_OSPI_MspInit+0x2e0>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001be4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001be8:	4a41      	ldr	r2, [pc, #260]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001bf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c06:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c0c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	4a32      	ldr	r2, [pc, #200]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c44:	f043 0320 	orr.w	r3, r3, #32
 8001c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_OSPI_MspInit+0x3d0>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_1|GPIO_PIN_0;
 8001c5a:	f640 0303 	movw	r3, #2051	; 0x803
 8001c5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001c74:	2309      	movs	r3, #9
 8001c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c7a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c7e:	4619      	mov	r1, r3
 8001c80:	481c      	ldr	r0, [pc, #112]	; (8001cf4 <HAL_OSPI_MspInit+0x3d4>)
 8001c82:	f005 fa0d 	bl	80070a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001caa:	4619      	mov	r1, r3
 8001cac:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <HAL_OSPI_MspInit+0x3d4>)
 8001cae:	f005 f9f7 	bl	80070a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001cb2:	f241 031f 	movw	r3, #4127	; 0x101f
 8001cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <HAL_OSPI_MspInit+0x3d8>)
 8001cda:	f005 f9e1 	bl	80070a0 <HAL_GPIO_Init>
}
 8001cde:	bf00      	nop
 8001ce0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	5200a000 	.word	0x5200a000
 8001cec:	240019b4 	.word	0x240019b4
 8001cf0:	58024400 	.word	0x58024400
 8001cf4:	58021800 	.word	0x58021800
 8001cf8:	58021400 	.word	0x58021400

08001cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08e      	sub	sp, #56	; 0x38
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a54      	ldr	r2, [pc, #336]	; (8001e6c <HAL_SPI_MspInit+0x170>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d14f      	bne.n	8001dbe <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d1e:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d24:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d2e:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	4a4b      	ldr	r2, [pc, #300]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4c:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	4a43      	ldr	r2, [pc, #268]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	4619      	mov	r1, r3
 8001d94:	4837      	ldr	r0, [pc, #220]	; (8001e74 <HAL_SPI_MspInit+0x178>)
 8001d96:	f005 f983 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001d9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dac:	2305      	movs	r3, #5
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	4830      	ldr	r0, [pc, #192]	; (8001e78 <HAL_SPI_MspInit+0x17c>)
 8001db8:	f005 f972 	bl	80070a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dbc:	e052      	b.n	8001e64 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	; (8001e7c <HAL_SPI_MspInit+0x180>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d14d      	bne.n	8001e64 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dce:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_SPI_MspInit+0x174>)
 8001e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e22:	2310      	movs	r3, #16
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e32:	2306      	movs	r3, #6
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480e      	ldr	r0, [pc, #56]	; (8001e78 <HAL_SPI_MspInit+0x17c>)
 8001e3e:	f005 f92f 	bl	80070a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8001e42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e54:	2306      	movs	r3, #6
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <HAL_SPI_MspInit+0x184>)
 8001e60:	f005 f91e 	bl	80070a0 <HAL_GPIO_Init>
}
 8001e64:	bf00      	nop
 8001e66:	3738      	adds	r7, #56	; 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40003800 	.word	0x40003800
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58020000 	.word	0x58020000
 8001e78:	58020400 	.word	0x58020400
 8001e7c:	40003c00 	.word	0x40003c00
 8001e80:	58020800 	.word	0x58020800

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0bc      	sub	sp, #240	; 0xf0
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea0:	22b4      	movs	r2, #180	; 0xb4
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f01b fb03 	bl	801d4b0 <memset>
  if(huart->Instance==UART7)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a88      	ldr	r2, [pc, #544]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d143      	bne.n	8001f3c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f007 fe4c 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ece:	f7ff fac3 	bl	8001458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001ed2:	4b80      	ldr	r3, [pc, #512]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed8:	4a7e      	ldr	r2, [pc, #504]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ee2:	4b7c      	ldr	r3, [pc, #496]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ef0:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef6:	4a77      	ldr	r2, [pc, #476]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001ef8:	f043 0310 	orr.w	r3, r3, #16
 8001efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f00:	4b74      	ldr	r3, [pc, #464]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001f0e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f32:	4619      	mov	r1, r3
 8001f34:	4868      	ldr	r0, [pc, #416]	; (80020d8 <HAL_UART_MspInit+0x254>)
 8001f36:	f005 f8b3 	bl	80070a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f3a:	e0c5      	b.n	80020c8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a66      	ldr	r2, [pc, #408]	; (80020dc <HAL_UART_MspInit+0x258>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d14b      	bne.n	8001fde <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f54:	4618      	mov	r0, r3
 8001f56:	f007 fe03 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001f60:	f7ff fa7a 	bl	8001458 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f64:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f74:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f88:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f92:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001fa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4846      	ldr	r0, [pc, #280]	; (80020e0 <HAL_UART_MspInit+0x25c>)
 8001fc8:	f005 f86a 	bl	80070a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2105      	movs	r1, #5
 8001fd0:	2025      	movs	r0, #37	; 0x25
 8001fd2:	f002 f8a1 	bl	8004118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fd6:	2025      	movs	r0, #37	; 0x25
 8001fd8:	f002 f8b8 	bl	800414c <HAL_NVIC_EnableIRQ>
}
 8001fdc:	e074      	b.n	80020c8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a40      	ldr	r2, [pc, #256]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d16f      	bne.n	80020c8 <HAL_UART_MspInit+0x244>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f007 fdb2 	bl	8009b60 <HAL_RCCEx_PeriphCLKConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002002:	f7ff fa29 	bl	8001458 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002006:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8002008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_UART_MspInit+0x250>)
 800200e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002012:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8002018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800201c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_UART_MspInit+0x250>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_UART_MspInit+0x250>)
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800207a:	2307      	movs	r3, #7
 800207c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002080:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002084:	4619      	mov	r1, r3
 8002086:	4818      	ldr	r0, [pc, #96]	; (80020e8 <HAL_UART_MspInit+0x264>)
 8002088:	f005 f80a 	bl	80070a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800208c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a6:	2307      	movs	r3, #7
 80020a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020b0:	4619      	mov	r1, r3
 80020b2:	480e      	ldr	r0, [pc, #56]	; (80020ec <HAL_UART_MspInit+0x268>)
 80020b4:	f004 fff4 	bl	80070a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2105      	movs	r1, #5
 80020bc:	2027      	movs	r0, #39	; 0x27
 80020be:	f002 f82b 	bl	8004118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c2:	2027      	movs	r0, #39	; 0x27
 80020c4:	f002 f842 	bl	800414c <HAL_NVIC_EnableIRQ>
}
 80020c8:	bf00      	nop
 80020ca:	37f0      	adds	r7, #240	; 0xf0
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40007800 	.word	0x40007800
 80020d4:	58024400 	.word	0x58024400
 80020d8:	58021000 	.word	0x58021000
 80020dc:	40011000 	.word	0x40011000
 80020e0:	58020000 	.word	0x58020000
 80020e4:	40004800 	.word	0x40004800
 80020e8:	58020800 	.word	0x58020800
 80020ec:	58020c00 	.word	0x58020c00

080020f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b090      	sub	sp, #64	; 0x40
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	d827      	bhi.n	800214e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80020fe:	2200      	movs	r2, #0
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	2036      	movs	r0, #54	; 0x36
 8002104:	f002 f808 	bl	8004118 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002108:	2036      	movs	r0, #54	; 0x36
 800210a:	f002 f81f 	bl	800414c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800210e:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <HAL_InitTick+0xc4>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_InitTick+0xc8>)
 8002116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211a:	4a27      	ldr	r2, [pc, #156]	; (80021b8 <HAL_InitTick+0xc8>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_InitTick+0xc8>)
 8002126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002132:	f107 0210 	add.w	r2, r7, #16
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f007 fccd 	bl	8009adc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <HAL_InitTick+0x6a>
 800214c:	e001      	b.n	8002152 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e02b      	b.n	80021aa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002152:	f007 fc97 	bl	8009a84 <HAL_RCC_GetPCLK1Freq>
 8002156:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002158:	e004      	b.n	8002164 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800215a:	f007 fc93 	bl	8009a84 <HAL_RCC_GetPCLK1Freq>
 800215e:	4603      	mov	r3, r0
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <HAL_InitTick+0xcc>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	3b01      	subs	r3, #1
 8002170:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_InitTick+0xd0>)
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_InitTick+0xd4>)
 8002176:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_InitTick+0xd0>)
 800217a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800217e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_InitTick+0xd0>)
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_InitTick+0xd0>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_InitTick+0xd0>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <HAL_InitTick+0xd0>)
 8002194:	f009 f921 	bl	800b3da <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d104      	bne.n	80021a8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800219e:	4808      	ldr	r0, [pc, #32]	; (80021c0 <HAL_InitTick+0xd0>)
 80021a0:	f009 f97c 	bl	800b49c <HAL_TIM_Base_Start_IT>
 80021a4:	4603      	mov	r3, r0
 80021a6:	e000      	b.n	80021aa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3740      	adds	r7, #64	; 0x40
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	24000048 	.word	0x24000048
 80021b8:	58024400 	.word	0x58024400
 80021bc:	431bde83 	.word	0x431bde83
 80021c0:	2401b4e8 	.word	0x2401b4e8
 80021c4:	40001000 	.word	0x40001000

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 80021f8:	2004      	movs	r0, #4
 80021fa:	f005 f912 	bl	8007422 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <USART1_IRQHandler+0x10>)
 800220a:	f009 fd15 	bl	800bc38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2401b390 	.word	0x2401b390

08002218 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <USART3_IRQHandler+0x10>)
 800221e:	f009 fd0b 	bl	800bc38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2401b14c 	.word	0x2401b14c

0800222c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <TIM6_DAC_IRQHandler+0x10>)
 8002232:	f009 f9b9 	bl	800b5a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2401b4e8 	.word	0x2401b4e8

08002240 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <ETH_IRQHandler+0x10>)
 8002246:	f003 fd59 	bl	8005cfc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2401b6a0 	.word	0x2401b6a0

08002254 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <LTDC_IRQHandler+0x10>)
 800225a:	f005 faff 	bl	800785c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2401b2e8 	.word	0x2401b2e8

08002268 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA2D_IRQHandler+0x10>)
 800226e:	f002 fea7 	bl	8004fc0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2401b420 	.word	0x2401b420

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
	return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <_kill+0x20>)
 8002298:	2216      	movs	r2, #22
 800229a:	601a      	str	r2, [r3, #0]
	return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	2402224c 	.word	0x2402224c

080022b0 <_exit>:

void _exit (int status)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffe5 	bl	800228c <_kill>
	while (1) {}		/* Make sure we hang here */
 80022c2:	e7fe      	b.n	80022c2 <_exit+0x12>

080022c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e00a      	b.n	80022ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d6:	f3af 8000 	nop.w
 80022da:	4601      	mov	r1, r0
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	b2ca      	uxtb	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf0      	blt.n	80022d6 <_read+0x12>
	}

return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e009      	b.n	8002324 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f817 	bl	800134c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbf1      	blt.n	8002310 <_write+0x12>
	}
	return len;
 800232c:	687b      	ldr	r3, [r7, #4]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_close>:

int _close(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
	return -1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235e:	605a      	str	r2, [r3, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_isatty>:

int _isatty(int file)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
	return 1;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_sbrk+0x5c>)
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <_sbrk+0x60>)
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x64>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <_sbrk+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d205      	bcs.n	80023dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <_sbrk+0x6c>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e009      	b.n	80023f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a06      	ldr	r2, [pc, #24]	; (8002404 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	24050000 	.word	0x24050000
 8002400:	00000400 	.word	0x00000400
 8002404:	240019b8 	.word	0x240019b8
 8002408:	24022260 	.word	0x24022260
 800240c:	2402224c 	.word	0x2402224c

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002414:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <SystemInit+0xd0>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a31      	ldr	r2, [pc, #196]	; (80024e0 <SystemInit+0xd0>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <SystemInit+0xd4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	2b06      	cmp	r3, #6
 800242e:	d807      	bhi.n	8002440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <SystemInit+0xd4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 030f 	bic.w	r3, r3, #15
 8002438:	4a2a      	ldr	r2, [pc, #168]	; (80024e4 <SystemInit+0xd4>)
 800243a:	f043 0307 	orr.w	r3, r3, #7
 800243e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <SystemInit+0xd8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <SystemInit+0xd8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <SystemInit+0xd8>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <SystemInit+0xd8>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4924      	ldr	r1, [pc, #144]	; (80024e8 <SystemInit+0xd8>)
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <SystemInit+0xdc>)
 800245a:	4013      	ands	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800245e:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <SystemInit+0xd4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <SystemInit+0xd4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 030f 	bic.w	r3, r3, #15
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <SystemInit+0xd4>)
 8002474:	f043 0307 	orr.w	r3, r3, #7
 8002478:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <SystemInit+0xd8>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <SystemInit+0xd8>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <SystemInit+0xd8>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <SystemInit+0xd8>)
 800248e:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <SystemInit+0xe0>)
 8002490:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <SystemInit+0xd8>)
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <SystemInit+0xe4>)
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <SystemInit+0xd8>)
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <SystemInit+0xe8>)
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <SystemInit+0xd8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <SystemInit+0xd8>)
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <SystemInit+0xe8>)
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <SystemInit+0xd8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <SystemInit+0xd8>)
 80024b2:	4a11      	ldr	r2, [pc, #68]	; (80024f8 <SystemInit+0xe8>)
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <SystemInit+0xd8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <SystemInit+0xd8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <SystemInit+0xd8>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <SystemInit+0xd8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <SystemInit+0xec>)
 80024d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024d4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00
 80024e4:	52002000 	.word	0x52002000
 80024e8:	58024400 	.word	0x58024400
 80024ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80024f0:	02020200 	.word	0x02020200
 80024f4:	01ff0000 	.word	0x01ff0000
 80024f8:	01010280 	.word	0x01010280
 80024fc:	52004000 	.word	0x52004000

08002500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002504:	f7ff ff84 	bl	8002410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002520:	4c0a      	ldr	r4, [pc, #40]	; (800254c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800252e:	f01a ff59 	bl	801d3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002532:	f7fe f8d1 	bl	80006d8 <main>
  bx  lr
 8002536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002538:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800253c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002540:	240000d8 	.word	0x240000d8
  ldr r2, =_sidata
 8002544:	08021790 	.word	0x08021790
  ldr r2, =_sbss
 8002548:	24001998 	.word	0x24001998
  ldr r4, =_ebss
 800254c:	24022260 	.word	0x24022260

08002550 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC3_IRQHandler>
	...

08002554 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 8002578:	2208      	movs	r2, #8
 800257a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 800257e:	2201      	movs	r2, #1
 8002580:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "EDH> ";
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <embeddedCliDefaultConfig+0x40>)
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <embeddedCliDefaultConfig+0x44>)
 8002586:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8002588:	4b02      	ldr	r3, [pc, #8]	; (8002594 <embeddedCliDefaultConfig+0x40>)
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	240019bc 	.word	0x240019bc
 8002598:	0801e7cc 	.word	0x0801e7cc

0800259c <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	895b      	ldrh	r3, [r3, #10]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	889b      	ldrh	r3, [r3, #4]
 80025b2:	3303      	adds	r3, #3
 80025b4:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	88db      	ldrh	r3, [r3, #6]
 80025ba:	3303      	adds	r3, #3
 80025bc:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80025be:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	891b      	ldrh	r3, [r3, #8]
 80025c4:	3303      	adds	r3, #3
 80025c6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80025c8:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80025ca:	89fa      	ldrh	r2, [r7, #14]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	3303      	adds	r3, #3
 80025d6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80025d8:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 80025da:	89fb      	ldrh	r3, [r7, #14]
 80025dc:	3303      	adds	r3, #3
 80025de:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80025e0:	4413      	add	r3, r2
 80025e2:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	b29b      	uxth	r3, r3
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b088      	sub	sp, #32
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	895b      	ldrh	r3, [r3, #10]
 8002606:	2201      	movs	r2, #1
 8002608:	4413      	add	r3, r2
 800260a:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ffc5 	bl	800259c <embeddedCliRequiredSize>
 8002612:	4603      	mov	r3, r0
 8002614:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8002616:	2300      	movs	r3, #0
 8002618:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8002622:	6938      	ldr	r0, [r7, #16]
 8002624:	f01a ff06 	bl	801d434 <malloc>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <embeddedCliNew+0x46>
            return NULL;
 8002638:	2300      	movs	r3, #0
 800263a:	e08f      	b.n	800275c <embeddedCliNew+0x166>
        allocated = true;
 800263c:	2301      	movs	r3, #1
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	e007      	b.n	8002652 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8a1b      	ldrh	r3, [r3, #16]
 8002646:	461a      	mov	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <embeddedCliNew+0x5c>
        return NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	e084      	b.n	800275c <embeddedCliNew+0x166>
    }

    CLI_UINT *buf = config->cliBuffer;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	2100      	movs	r1, #0
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f01a ff27 	bl	801d4b0 <memset>

    cli = (EmbeddedCli *) buf;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3310      	adds	r3, #16
 800266a:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3334      	adds	r3, #52	; 0x34
 8002676:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	889b      	ldrh	r3, [r3, #4]
 8002688:	3303      	adds	r3, #3
 800268a:	f023 0303 	bic.w	r3, r3, #3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	88db      	ldrh	r3, [r3, #6]
 800269e:	3303      	adds	r3, #3
 80026a0:	f023 0303 	bic.w	r3, r3, #3
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 80026b0:	8afa      	ldrh	r2, [r7, #22]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3303      	adds	r3, #3
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 80026cc:	8afb      	ldrh	r3, [r7, #22]
 80026ce:	3303      	adds	r3, #3
 80026d0:	f023 0303 	bic.w	r3, r3, #3
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	891a      	ldrh	r2, [r3, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	811a      	strh	r2, [r3, #8]

    if (allocated)
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7c9b      	ldrb	r3, [r3, #18]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <embeddedCliNew+0x11e>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	889a      	ldrh	r2, [r3, #4]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	88da      	ldrh	r2, [r3, #6]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	895b      	ldrh	r3, [r3, #10]
 800273a:	2201      	movs	r2, #1
 800273c:	4413      	add	r3, r2
 800273e:	b29a      	uxth	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8002754:	69b8      	ldr	r0, [r7, #24]
 8002756:	f000 fc53 	bl	8003000 <initInternalBindings>

    return cli;
 800275a:	69bb      	ldr	r3, [r7, #24]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <embeddedCliReceiveChar>:

EmbeddedCli *embeddedCliNewDefault(void) {
    return embeddedCliNew(embeddedCliDefaultConfig());
}

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3310      	adds	r3, #16
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f000 ff93 	bl	80036aa <fifoBufPush>
 8002784:	4603      	mov	r3, r0
 8002786:	f083 0301 	eor.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8083 	beq.w	80028c2 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d155      	bne.n	800287c <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 febd 	bl	8003568 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 80027ee:	e045      	b.n	800287c <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3310      	adds	r3, #16
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 ff30 	bl	800365a <fifoBufPop>
 80027fa:	4603      	mov	r3, r0
 80027fc:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fa17 	bl	8002c44 <onEscapedInput>
 8002816:	e02a      	b.n	800286e <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800281e:	2b1b      	cmp	r3, #27
 8002820:	d10c      	bne.n	800283c <embeddedCliProcess+0x92>
 8002822:	7afb      	ldrb	r3, [r7, #11]
 8002824:	2b5b      	cmp	r3, #91	; 0x5b
 8002826:	d109      	bne.n	800283c <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800283a:	e018      	b.n	800286e <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 800283c:	7afb      	ldrb	r3, [r7, #11]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 feb3 	bl	80035aa <isControlChar>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa54 	bl	8002cfc <onControlInput>
 8002854:	e00b      	b.n	800286e <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fec6 	bl	80035ea <isDisplayableChar>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fa17 	bl	8002c9c <onCharInput>
        }

        printLiveAutocompletion(cli);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fdb1 	bl	80033d6 <printLiveAutocompletion>

        impl->lastChar = c;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	7afa      	ldrb	r2, [r7, #11]
 8002878:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3310      	adds	r3, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fec9 	bl	8003618 <fifoBufAvailable>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1b1      	bne.n	80027f0 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d014      	beq.n	80028c4 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	8c12      	ldrh	r2, [r2, #32]
 80028a8:	4413      	add	r3, r2
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80028c0:	e000      	b.n	80028c4 <embeddedCliProcess+0x11a>
        return;
 80028c2:	bf00      	nop
    }
}
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 80028ca:	b084      	sub	sp, #16
 80028cc:	b4b0      	push	{r4, r5, r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80028d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d101      	bne.n	80028f2 <embeddedCliAddBinding+0x28>
        return false;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e017      	b.n	8002922 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028fa:	4619      	mov	r1, r3
 80028fc:	460b      	mov	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	461d      	mov	r5, r3
 8002908:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800290c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002918:	3301      	adds	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8002920:	2301      	movs	r3, #1
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bcb0      	pop	{r4, r5, r7}
 800292a:	b004      	add	sp, #16
 800292c:	4770      	bx	lr
	...

08002930 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d031      	beq.n	80029a6 <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fdd4 	bl	8003504 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fe02 	bl	8003568 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <embeddedCliPrint+0x80>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fdfc 	bl	8003568 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d114      	bne.n	80029a8 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fdef 	bl	8003568 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fde9 	bl	8003568 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8c1a      	ldrh	r2, [r3, #32]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fd19 	bl	80033d6 <printLiveAutocompletion>
 80029a4:	e000      	b.n	80029a8 <embeddedCliPrint+0x78>
        return;
 80029a6:	bf00      	nop
    }
}
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	24000044 	.word	0x24000044

080029b4 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d066      	beq.n	8002a90 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80029c2:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <embeddedCliTokenizeArgs+0xe4>)
 80029c4:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80029c6:	2300      	movs	r3, #0
 80029c8:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80029ca:	2300      	movs	r3, #0
 80029cc:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80029d6:	e047      	b.n	8002a68 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3301      	adds	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 80029de:	7fbb      	ldrb	r3, [r7, #30]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 80029e4:	2300      	movs	r3, #0
 80029e6:	77bb      	strb	r3, [r7, #30]
 80029e8:	e029      	b.n	8002a3e <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b5c      	cmp	r3, #92	; 0x5c
 80029ee:	d102      	bne.n	80029f6 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 80029f0:	2301      	movs	r3, #1
 80029f2:	77bb      	strb	r3, [r7, #30]
            continue;
 80029f4:	e038      	b.n	8002a68 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b22      	cmp	r3, #34	; 0x22
 80029fa:	d110      	bne.n	8002a1e <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8002a18:	2300      	movs	r3, #0
 8002a1a:	74fb      	strb	r3, [r7, #19]
 8002a1c:	e00f      	b.n	8002a3e <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
 8002a20:	f083 0301 	eor.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <embeddedCliTokenizeArgs+0x8a>
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f01a ff25 	bl	801d87e <strchr>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <embeddedCliTokenizeArgs+0xa4>
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	dd0e      	ble.n	8002a68 <embeddedCliTokenizeArgs+0xb4>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	7cfa      	ldrb	r2, [r7, #19]
 8002a60:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	74fb      	strb	r3, [r7, #19]
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1af      	bne.n	80029d8 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	3301      	adds	r3, #1
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e000      	b.n	8002a92 <embeddedCliTokenizeArgs+0xde>
        return;
 8002a90:	bf00      	nop
}
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	0801e7d4 	.word	0x0801e7d4

08002a9c <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 ff03 	bl	80038b8 <getTokenPosition>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8002ac0:	89fb      	ldrh	r3, [r7, #14]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	e000      	b.n	8002aca <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fee8 	bl	80038b8 <getTokenPosition>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8002af6:	89fb      	ldrh	r3, [r7, #14]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	e000      	b.n	8002b00 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <embeddedCliGetTokenCount+0x16>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <embeddedCliGetTokenCount+0x1a>
        return 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e019      	b.n	8002b56 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	3301      	adds	r3, #1
 8002b48:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8002b50:	e7eb      	b.n	8002b2a <embeddedCliGetTokenCount+0x22>
                break;
 8002b52:	bf00      	nop
    }

    return tokenCount;
 8002b54:	897b      	ldrh	r3, [r7, #10]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	899b      	ldrh	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d05c      	beq.n	8002c38 <navigateHistory+0xd4>
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	895a      	ldrh	r2, [r3, #10]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	899b      	ldrh	r3, [r3, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d053      	beq.n	8002c38 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	895b      	ldrh	r3, [r3, #10]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d049      	beq.n	8002c38 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fcad 	bl	8003504 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fcd9 	bl	8003568 <writeToOutput>

    if (navigateUp)
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d006      	beq.n	8002bca <navigateHistory+0x66>
        ++impl->history.current;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	895b      	ldrh	r3, [r3, #10]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	815a      	strh	r2, [r3, #10]
 8002bc8:	e005      	b.n	8002bd6 <navigateHistory+0x72>
    else
        --impl->history.current;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	895b      	ldrh	r3, [r3, #10]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1d1a      	adds	r2, r3, #4
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	895b      	ldrh	r3, [r3, #10]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f000 fdf0 	bl	80037c6 <historyGet>
 8002be6:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <navigateHistory+0x8e>
        item = "";
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <navigateHistory+0xdc>)
 8002bf0:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7fd fb96 	bl	8000324 <strlen>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	89fa      	ldrh	r2, [r7, #14]
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f01a fc2b 	bl	801d460 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	4413      	add	r3, r2
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	89fa      	ldrh	r2, [r7, #14]
 8002c1a:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fca0 	bl	8003568 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	8c1a      	ldrh	r2, [r3, #32]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fbd0 	bl	80033d6 <printLiveAutocompletion>
 8002c36:	e000      	b.n	8002c3a <navigateHistory+0xd6>
        return;
 8002c38:	bf00      	nop
}
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	0801e7d8 	.word	0x0801e7d8

08002c44 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	2b3f      	cmp	r3, #63	; 0x3f
 8002c5a:	d91b      	bls.n	8002c94 <onEscapedInput+0x50>
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	2b7e      	cmp	r3, #126	; 0x7e
 8002c60:	d818      	bhi.n	8002c94 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002c68:	f023 0308 	bic.w	r3, r3, #8
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	2b41      	cmp	r3, #65	; 0x41
 8002c78:	d002      	beq.n	8002c80 <onEscapedInput+0x3c>
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	2b42      	cmp	r3, #66	; 0x42
 8002c7e:	d109      	bne.n	8002c94 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	2b41      	cmp	r3, #65	; 0x41
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ff68 	bl	8002b64 <navigateHistory>
        }
    }
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8c1b      	ldrh	r3, [r3, #32]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	da1a      	bge.n	8002cf2 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	8c12      	ldrh	r2, [r2, #32]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8c1b      	ldrh	r3, [r3, #32]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	8c12      	ldrh	r2, [r2, #32]
 8002cde:	4413      	add	r3, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	4611      	mov	r1, r2
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
 8002cf0:	e000      	b.n	8002cf4 <onCharInput+0x58>
        return;
 8002cf2:	bf00      	nop
}
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002d14:	2b0d      	cmp	r3, #13
 8002d16:	d102      	bne.n	8002d1e <onControlInput+0x22>
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	2b0a      	cmp	r3, #10
 8002d1c:	d062      	beq.n	8002de4 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8002d24:	2b0a      	cmp	r3, #10
 8002d26:	d102      	bne.n	8002d2e <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b0d      	cmp	r3, #13
 8002d2c:	d05a      	beq.n	8002de4 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	2b0d      	cmp	r3, #13
 8002d32:	d002      	beq.n	8002d3a <onControlInput+0x3e>
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	2b0a      	cmp	r3, #10
 8002d38:	d126      	bne.n	8002d88 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fb58 	bl	80033f0 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <onControlInput+0xf0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fc0e 	bl	8003568 <writeToOutput>

        if (impl->cmdSize > 0)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8c1b      	ldrh	r3, [r3, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <onControlInput+0x5e>
            parseCommand(cli);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f84b 	bl	8002df0 <parseCommand>
        impl->cmdSize = 0;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	8c12      	ldrh	r2, [r2, #32]
 8002d68:	4413      	add	r3, r2
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fbf1 	bl	8003568 <writeToOutput>
 8002d86:	e02e      	b.n	8002de6 <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d002      	beq.n	8002d94 <onControlInput+0x98>
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	2b7f      	cmp	r3, #127	; 0x7f
 8002d92:	d120      	bne.n	8002dd6 <onControlInput+0xda>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8c1b      	ldrh	r3, [r3, #32]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01c      	beq.n	8002dd6 <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2108      	movs	r1, #8
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2120      	movs	r1, #32
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2108      	movs	r1, #8
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8c1b      	ldrh	r3, [r3, #32]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	8c12      	ldrh	r2, [r2, #32]
 8002dce:	4413      	add	r3, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <onControlInput+0xea>
    } else if (c == '\t') {
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d104      	bne.n	8002de6 <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fb07 	bl	80033f0 <onAutocompleteRequest>
 8002de2:	e000      	b.n	8002de6 <onControlInput+0xea>
        return;
 8002de4:	bf00      	nop
    }

}
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	24000044 	.word	0x24000044

08002df0 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b08f      	sub	sp, #60	; 0x3c
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8002e04:	2300      	movs	r3, #0
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
 8002e08:	e00d      	b.n	8002e26 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	4413      	add	r3, r2
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d003      	beq.n	8002e20 <parseCommand+0x30>
            isEmpty = false;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8002e1e:	e008      	b.n	8002e32 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	3301      	adds	r3, #1
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	8c1b      	ldrh	r3, [r3, #32]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	dbeb      	blt.n	8002e0a <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8002e32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 80dc 	bne.w	8002ff4 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	1d1a      	adds	r2, r3, #4
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f000 fc59 	bl	80036fe <historyPut>

    char *cmdName = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	e030      	b.n	8002ec2 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d10f      	bne.n	8002e92 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	4413      	add	r3, r2
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d018      	beq.n	8002ebc <parseCommand+0xcc>
                nameFinished = true;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e90:	e014      	b.n	8002ebc <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea2:	e00b      	b.n	8002ebc <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <parseCommand+0xcc>
 8002eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	4413      	add	r3, r2
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	8c1b      	ldrh	r3, [r3, #32]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	dbc8      	blt.n	8002e60 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	8c1b      	ldrh	r3, [r3, #32]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8089 	beq.w	8002ff8 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e054      	b.n	8002f96 <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f02:	f7fd fa05 	bl	8000310 <strcmp>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d141      	bne.n	8002f90 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d040      	beq.n	8002fa4 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	7a1b      	ldrb	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8002f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3a:	f7ff fd3b 	bl	80029b4 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002f44:	f043 0310 	orr.w	r3, r3, #16
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	691c      	ldr	r4, [r3, #16]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002f82:	f023 0310 	bic.w	r3, r3, #16
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 8002f8e:	e034      	b.n	8002ffa <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	dba4      	blt.n	8002eec <parseCommand+0xfc>
 8002fa2:	e000      	b.n	8002fa6 <parseCommand+0x1b6>
                break;
 8002fa4:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01d      	beq.n	8002fea <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002fbc:	f043 0310 	orr.w	r3, r3, #16
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f107 020c 	add.w	r2, r7, #12
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002fdc:	f023 0310 	bic.w	r3, r3, #16
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8002fe8:	e007      	b.n	8002ffa <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8002fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f913 	bl	8003218 <onUnknownCommand>
 8002ff2:	e002      	b.n	8002ffa <parseCommand+0x20a>
        return;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <parseCommand+0x20a>
        return;
 8002ff8:	bf00      	nop
    }
}
 8002ffa:	373c      	adds	r7, #60	; 0x3c
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af02      	add	r7, sp, #8
 8003006:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <initInternalBindings+0x3c>)
 800300a:	f107 040c 	add.w	r4, r7, #12
 800300e:	461d      	mov	r5, r3
 8003010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 8003018:	466a      	mov	r2, sp
 800301a:	f107 0318 	add.w	r3, r7, #24
 800301e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003022:	e882 0003 	stmia.w	r2, {r0, r1}
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fc4c 	bl	80028ca <embeddedCliAddBinding>
}
 8003032:	bf00      	nop
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bdb0      	pop	{r4, r5, r7, pc}
 800303a:	bf00      	nop
 800303c:	0801e7dc 	.word	0x0801e7dc

08003040 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b08c      	sub	sp, #48	; 0x30
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 800305a:	496b      	ldr	r1, [pc, #428]	; (8003208 <onHelp+0x1c8>)
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fa83 	bl	8003568 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8003062:	4b6a      	ldr	r3, [pc, #424]	; (800320c <onHelp+0x1cc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa7d 	bl	8003568 <writeToOutput>
        return;
 800306e:	e0c8      	b.n	8003202 <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8003070:	68b8      	ldr	r0, [r7, #8]
 8003072:	f7ff fd49 	bl	8002b08 <embeddedCliGetTokenCount>
 8003076:	4603      	mov	r3, r0
 8003078:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 800307a:	8b7b      	ldrh	r3, [r7, #26]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d146      	bne.n	800310e <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8003080:	2300      	movs	r3, #0
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003084:	e03c      	b.n	8003100 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 8003086:	4962      	ldr	r1, [pc, #392]	; (8003210 <onHelp+0x1d0>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa6d 	bl	8003568 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fa60 	bl	8003568 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80030a8:	4b58      	ldr	r3, [pc, #352]	; (800320c <onHelp+0x1cc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa5a 	bl	8003568 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d017      	beq.n	80030fa <onHelp+0xba>
                cli->writeChar(cli, '\t');
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2109      	movs	r1, #9
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4619      	mov	r1, r3
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa3d 	bl	8003568 <writeToOutput>
                writeToOutput(cli, lineBreak);
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <onHelp+0x1cc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fa37 	bl	8003568 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	3301      	adds	r3, #1
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003104:	461a      	mov	r2, r3
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	4293      	cmp	r3, r2
 800310a:	dbbc      	blt.n	8003086 <onHelp+0x46>
 800310c:	e079      	b.n	8003202 <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 800310e:	8b7b      	ldrh	r3, [r7, #26]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d16c      	bne.n	80031ee <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8003118:	2101      	movs	r1, #1
 800311a:	68b8      	ldr	r0, [r7, #8]
 800311c:	f7ff fcbe 	bl	8002a9c <embeddedCliGetToken>
 8003120:	6178      	str	r0, [r7, #20]
        bool found = false;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	e020      	b.n	8003170 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd f8e4 	bl	8000310 <strcmp>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8003168:	e008      	b.n	800317c <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	3301      	adds	r3, #1
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003174:	461a      	mov	r2, r3
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	4293      	cmp	r3, r2
 800317a:	dbd8      	blt.n	800312e <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 800317c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <onHelp+0x186>
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01d      	beq.n	80031c6 <onHelp+0x186>
            writeToOutput(cli, " * ");
 800318a:	4921      	ldr	r1, [pc, #132]	; (8003210 <onHelp+0x1d0>)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f9eb 	bl	8003568 <writeToOutput>
            writeToOutput(cli, cmdName);
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f9e7 	bl	8003568 <writeToOutput>
            writeToOutput(cli, lineBreak);
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <onHelp+0x1cc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f9e1 	bl	8003568 <writeToOutput>
            cli->writeChar(cli, '\t');
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2109      	movs	r1, #9
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 80031b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f9d8 	bl	8003568 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <onHelp+0x1cc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f9d2 	bl	8003568 <writeToOutput>
 80031c4:	e01d      	b.n	8003202 <onHelp+0x1c2>
        } else if (found) {
 80031c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 80031ce:	490e      	ldr	r1, [pc, #56]	; (8003208 <onHelp+0x1c8>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f9c9 	bl	8003568 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <onHelp+0x1cc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f9c3 	bl	8003568 <writeToOutput>
 80031e2:	e00e      	b.n	8003202 <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 80031e4:	6979      	ldr	r1, [r7, #20]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f816 	bl	8003218 <onUnknownCommand>
 80031ec:	e009      	b.n	8003202 <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80031ee:	4909      	ldr	r1, [pc, #36]	; (8003214 <onHelp+0x1d4>)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f9b9 	bl	8003568 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <onHelp+0x1cc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f9b3 	bl	8003568 <writeToOutput>
    }
}
 8003202:	3730      	adds	r7, #48	; 0x30
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	0801e7f0 	.word	0x0801e7f0
 800320c:	24000044 	.word	0x24000044
 8003210:	0801e808 	.word	0x0801e808
 8003214:	0801e80c 	.word	0x0801e80c

08003218 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8003222:	490b      	ldr	r1, [pc, #44]	; (8003250 <onUnknownCommand+0x38>)
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f99f 	bl	8003568 <writeToOutput>
    writeToOutput(cli, name);
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f99b 	bl	8003568 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <onUnknownCommand+0x3c>)
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f997 	bl	8003568 <writeToOutput>
    writeToOutput(cli, lineBreak);
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <onUnknownCommand+0x40>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f991 	bl	8003568 <writeToOutput>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	0801e83c 	.word	0x0801e83c
 8003254:	0801e850 	.word	0x0801e850
 8003258:	24000044 	.word	0x24000044

0800325c <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	; 0x38
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	2300      	movs	r3, #0
 800326e:	82bb      	strh	r3, [r7, #20]
 8003270:	2300      	movs	r3, #0
 8003272:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7fd f855 	bl	8000324 <strlen>
 800327a:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <getAutocompletedCommand+0x34>
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d108      	bne.n	80032a2 <getAutocompletedCommand+0x46>
        return cmd;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	461a      	mov	r2, r3
 8003294:	f107 0310 	add.w	r3, r7, #16
 8003298:	e893 0003 	ldmia.w	r3, {r0, r1}
 800329c:	e882 0003 	stmia.w	r2, {r0, r1}
 80032a0:	e095      	b.n	80033ce <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
 80032a6:	e083      	b.n	80033b0 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 80032bc:	69f8      	ldr	r0, [r7, #28]
 80032be:	f7fd f831 	bl	8000324 <strlen>
 80032c2:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	4413      	add	r3, r2
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	440b      	add	r3, r1
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d35e      	bcc.n	80033a4 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f0:	e010      	b.n	8003314 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	4413      	add	r3, r2
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	69f9      	ldr	r1, [r7, #28]
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	440b      	add	r3, r1
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d003      	beq.n	800330e <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 800330c:	e006      	b.n	800331c <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	3301      	adds	r3, #1
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	429a      	cmp	r2, r3
 800331a:	d3ea      	bcc.n	80032f2 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 800331c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d13e      	bne.n	80033a8 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	4413      	add	r3, r2
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	440b      	add	r3, r1
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8003344:	8afb      	ldrh	r3, [r7, #22]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <getAutocompletedCommand+0xf8>
 800334a:	8abb      	ldrh	r3, [r7, #20]
 800334c:	461a      	mov	r2, r3
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4293      	cmp	r3, r2
 8003352:	d202      	bcs.n	800335a <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	b29b      	uxth	r3, r3
 8003358:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 800335a:	8afb      	ldrh	r3, [r7, #22]
 800335c:	3301      	adds	r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8003362:	8afb      	ldrh	r3, [r7, #22]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	613b      	str	r3, [r7, #16]
            continue;
 800336c:	e01d      	b.n	80033aa <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	8c1b      	ldrh	r3, [r3, #32]
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
 8003374:	e010      	b.n	8003398 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	4413      	add	r3, r2
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	69f9      	ldr	r1, [r7, #28]
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	440b      	add	r3, r1
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d003      	beq.n	8003392 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	b29b      	uxth	r3, r3
 800338e:	82bb      	strh	r3, [r7, #20]
                break;
 8003390:	e00b      	b.n	80033aa <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	3301      	adds	r3, #1
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
 8003398:	8abb      	ldrh	r3, [r7, #20]
 800339a:	461a      	mov	r2, r3
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	4293      	cmp	r3, r2
 80033a0:	d3e9      	bcc.n	8003376 <getAutocompletedCommand+0x11a>
 80033a2:	e002      	b.n	80033aa <getAutocompletedCommand+0x14e>
            continue;
 80033a4:	bf00      	nop
 80033a6:	e000      	b.n	80033aa <getAutocompletedCommand+0x14e>
            continue;
 80033a8:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	3301      	adds	r3, #1
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033b4:	461a      	mov	r2, r3
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	4293      	cmp	r3, r2
 80033ba:	f6ff af75 	blt.w	80032a8 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f107 0310 	add.w	r3, r7, #16
 80033c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	3738      	adds	r7, #56	; 0x38
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80033d6:	b480      	push	{r7}
 80033d8:	b087      	sub	sp, #28
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	617b      	str	r3, [r7, #20]
    impl->inputLineLength = cmd.autocompletedLen;
    cli->writeChar(cli, '\r');
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
    writeToOutput(cli, impl->cmdBuffer);
}
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	f107 030c 	add.w	r3, r7, #12
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff27 	bl	800325c <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 800340e:	8a7b      	ldrh	r3, [r7, #18]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d071      	beq.n	80034f8 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8003414:	8a7b      	ldrh	r3, [r7, #18]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d004      	beq.n	8003424 <onAutocompleteRequest+0x34>
 800341a:	8a3a      	ldrh	r2, [r7, #16]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	8c1b      	ldrh	r3, [r3, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	d92a      	bls.n	800347a <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	8a3a      	ldrh	r2, [r7, #16]
 800342c:	4618      	mov	r0, r3
 800342e:	f01a f817 	bl	801d460 <memcpy>
        if (cmd.candidateCount == 1) {
 8003432:	8a7b      	ldrh	r3, [r7, #18]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d109      	bne.n	800344c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	8a3a      	ldrh	r2, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	2220      	movs	r2, #32
 8003442:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8003444:	8a3b      	ldrh	r3, [r7, #16]
 8003446:	3301      	adds	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	8a3a      	ldrh	r2, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	8c12      	ldrh	r2, [r2, #32]
 8003460:	4413      	add	r3, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f87f 	bl	8003568 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 800346a:	8a3a      	ldrh	r2, [r7, #16]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	8c1a      	ldrh	r2, [r3, #32]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 8003478:	e03f      	b.n	80034fa <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f842 	bl	8003504 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e021      	b.n	80034ca <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d014      	beq.n	80034c2 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80034ac:	6979      	ldr	r1, [r7, #20]
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f85a 	bl	8003568 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <onAutocompleteRequest+0x110>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f854 	bl	8003568 <writeToOutput>
 80034c0:	e000      	b.n	80034c4 <onAutocompleteRequest+0xd4>
            continue;
 80034c2:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ce:	461a      	mov	r2, r3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4293      	cmp	r3, r2
 80034d4:	dbd7      	blt.n	8003486 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f843 	bl	8003568 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f83d 	bl	8003568 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	8c1a      	ldrh	r2, [r3, #32]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	861a      	strh	r2, [r3, #48]	; 0x30
 80034f6:	e000      	b.n	80034fa <onAutocompleteRequest+0x10a>
        return;
 80034f8:	bf00      	nop
}
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	24000044 	.word	0x24000044

08003504 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003516:	461c      	mov	r4, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fc ff01 	bl	8000324 <strlen>
 8003522:	4603      	mov	r3, r0
 8003524:	4423      	add	r3, r4
 8003526:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	210d      	movs	r1, #13
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e007      	b.n	8003548 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2120      	movs	r1, #32
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3301      	adds	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3f3      	bcc.n	8003538 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	210d      	movs	r1, #13
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
    impl->inputLineLength = 0;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2200      	movs	r2, #0
 800355e:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}

08003568 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	f7fc fed6 	bl	8000324 <strlen>
 8003578:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e00b      	b.n	8003598 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	440a      	add	r2, r1
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	4611      	mov	r1, r2
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3301      	adds	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d3ef      	bcc.n	8003580 <writeToOutput+0x18>
    }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <isControlChar>:

static bool isControlChar(char c) {
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2b0d      	cmp	r3, #13
 80035b8:	d00b      	beq.n	80035d2 <isControlChar+0x28>
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2b0a      	cmp	r3, #10
 80035be:	d008      	beq.n	80035d2 <isControlChar+0x28>
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d005      	beq.n	80035d2 <isControlChar+0x28>
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	2b09      	cmp	r3, #9
 80035ca:	d002      	beq.n	80035d2 <isControlChar+0x28>
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b7f      	cmp	r3, #127	; 0x7f
 80035d0:	d101      	bne.n	80035d6 <isControlChar+0x2c>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <isControlChar+0x2e>
 80035d6:	2300      	movs	r3, #0
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b1f      	cmp	r3, #31
 80035f8:	d904      	bls.n	8003604 <isDisplayableChar+0x1a>
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b7e      	cmp	r3, #126	; 0x7e
 80035fe:	d801      	bhi.n	8003604 <isDisplayableChar+0x1a>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <isDisplayableChar+0x1c>
 8003604:	2300      	movs	r3, #0
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	88da      	ldrh	r2, [r3, #6]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	889b      	ldrh	r3, [r3, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d306      	bcc.n	800363a <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	88da      	ldrh	r2, [r3, #6]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	889b      	ldrh	r3, [r3, #4]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	e009      	b.n	800364e <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	891a      	ldrh	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	889b      	ldrh	r3, [r3, #4]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	88db      	ldrh	r3, [r3, #6]
 800364a:	4413      	add	r3, r2
 800364c:	b29b      	uxth	r3, r3
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	889a      	ldrh	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	88db      	ldrh	r3, [r3, #6]
 800366e:	429a      	cmp	r2, r3
 8003670:	d014      	beq.n	800369c <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	8892      	ldrh	r2, [r2, #4]
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	889b      	ldrh	r3, [r3, #4]
 8003684:	3301      	adds	r3, #1
 8003686:	b29b      	uxth	r3, r3
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	8912      	ldrh	r2, [r2, #8]
 800368c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003690:	fb02 f201 	mul.w	r2, r2, r1
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	809a      	strh	r2, [r3, #4]
    }
    return a;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	88db      	ldrh	r3, [r3, #6]
 80036ba:	3301      	adds	r3, #1
 80036bc:	b29b      	uxth	r3, r3
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	8912      	ldrh	r2, [r2, #8]
 80036c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80036c6:	fb02 f201 	mul.w	r2, r2, r1
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	889b      	ldrh	r3, [r3, #4]
 80036d2:	89fa      	ldrh	r2, [r7, #14]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d00b      	beq.n	80036f0 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	88d2      	ldrh	r2, [r2, #6]
 80036e0:	4413      	add	r3, r2
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	89fa      	ldrh	r2, [r7, #14]
 80036ea:	80da      	strh	r2, [r3, #6]
        return true;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <fifoBufPush+0x48>
    }
    return false;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8003708:	6838      	ldr	r0, [r7, #0]
 800370a:	f7fc fe0b 	bl	8000324 <strlen>
 800370e:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	889b      	ldrh	r3, [r3, #4]
 8003714:	461a      	mov	r2, r3
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	3301      	adds	r3, #1
 800371a:	429a      	cmp	r2, r3
 800371c:	d201      	bcs.n	8003722 <historyPut+0x24>
        return false;
 800371e:	2300      	movs	r3, #0
 8003720:	e04d      	b.n	80037be <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8003722:	6839      	ldr	r1, [r7, #0]
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f86a 	bl	80037fe <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 800372a:	e024      	b.n	8003776 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	891b      	ldrh	r3, [r3, #8]
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f847 	bl	80037c6 <historyGet>
 8003738:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 800373a:	6978      	ldr	r0, [r7, #20]
 800373c:	f7fc fdf2 	bl	8000324 <strlen>
 8003740:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	461a      	mov	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	3301      	adds	r3, #1
 8003752:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	889b      	ldrh	r3, [r3, #4]
 8003758:	461a      	mov	r2, r3
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	3301      	adds	r3, #1
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	429a      	cmp	r2, r3
 8003768:	d20a      	bcs.n	8003780 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	891b      	ldrh	r3, [r3, #8]
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	891b      	ldrh	r3, [r3, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1d6      	bne.n	800372c <historyPut+0x2e>
 800377e:	e000      	b.n	8003782 <historyPut+0x84>
            break;
 8003780:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	891b      	ldrh	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	3301      	adds	r3, #1
 8003792:	18d0      	adds	r0, r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	4619      	mov	r1, r3
 800379c:	f019 fe6e 	bl	801d47c <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	3301      	adds	r3, #1
 80037a8:	461a      	mov	r2, r3
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	f019 fe58 	bl	801d460 <memcpy>
    ++history->itemsCount;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	891b      	ldrh	r3, [r3, #8]
 80037b4:	3301      	adds	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	811a      	strh	r2, [r3, #8]

    return true;
 80037bc:	2301      	movs	r3, #1
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <historyGet+0x1c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	891b      	ldrh	r3, [r3, #8]
 80037dc:	887a      	ldrh	r2, [r7, #2]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d901      	bls.n	80037e6 <historyGet+0x20>
        return NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e007      	b.n	80037f6 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f954 	bl	8002a9c <embeddedCliGetToken>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d04c      	beq.n	80038a8 <historyRemove+0xaa>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	891b      	ldrh	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d048      	beq.n	80038a8 <historyRemove+0xaa>
        return;
    char *item = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 800381a:	2301      	movs	r3, #1
 800381c:	827b      	strh	r3, [r7, #18]
 800381e:	e013      	b.n	8003848 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	8a7a      	ldrh	r2, [r7, #18]
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff f952 	bl	8002ad2 <embeddedCliGetTokenVariable>
 800382e:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7fc fd6c 	bl	8000310 <strcmp>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <historyRemove+0x56>
            break;
        }
        item = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8003842:	8a7b      	ldrh	r3, [r7, #18]
 8003844:	3301      	adds	r3, #1
 8003846:	827b      	strh	r3, [r7, #18]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	891b      	ldrh	r3, [r3, #8]
 800384c:	8a7a      	ldrh	r2, [r7, #18]
 800384e:	429a      	cmp	r2, r3
 8003850:	d9e6      	bls.n	8003820 <historyRemove+0x22>
 8003852:	e000      	b.n	8003856 <historyRemove+0x58>
            break;
 8003854:	bf00      	nop
    }
    if (item == NULL)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d027      	beq.n	80038ac <historyRemove+0xae>
        return;

    --history->itemsCount;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	891b      	ldrh	r3, [r3, #8]
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8003868:	8a7a      	ldrh	r2, [r7, #18]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	891b      	ldrh	r3, [r3, #8]
 800386e:	3301      	adds	r3, #1
 8003870:	429a      	cmp	r2, r3
 8003872:	d01d      	beq.n	80038b0 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	f7fc fd55 	bl	8000324 <strlen>
 800387a:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	889b      	ldrh	r3, [r3, #4]
 8003880:	4619      	mov	r1, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	1acb      	subs	r3, r1, r3
 8003892:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3301      	adds	r3, #1
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4413      	add	r3, r2
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	4619      	mov	r1, r3
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f019 fdeb 	bl	801d47c <memmove>
 80038a6:	e004      	b.n	80038b2 <historyRemove+0xb4>
        return;
 80038a8:	bf00      	nop
 80038aa:	e002      	b.n	80038b2 <historyRemove+0xb4>
        return;
 80038ac:	bf00      	nop
 80038ae:	e000      	b.n	80038b2 <historyRemove+0xb4>
        return;
 80038b0:	bf00      	nop
}
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <getTokenPosition+0x18>
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80038d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d4:	e028      	b.n	8003928 <getTokenPosition+0x70>
    uint16_t i = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80038de:	89ba      	ldrh	r2, [r7, #12]
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d013      	beq.n	800390e <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <getTokenPosition+0x4e>
            ++tokenCount;
 80038f2:	89bb      	ldrh	r3, [r7, #12]
 80038f4:	3301      	adds	r3, #1
 80038f6:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80038f8:	89fb      	ldrh	r3, [r7, #14]
 80038fa:	3301      	adds	r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8003906:	89fb      	ldrh	r3, [r7, #14]
 8003908:	3301      	adds	r3, #1
 800390a:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 800390c:	e7e7      	b.n	80038de <getTokenPosition+0x26>
            break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <getTokenPosition+0x5c>
                break;
 8003912:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8003914:	89fb      	ldrh	r3, [r7, #14]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <getTokenPosition+0x6c>
        return i;
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	e001      	b.n	8003928 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8003924:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <Initialization>:
#include "cmsis_os.h"

void InitGPIO(void);

void Initialization(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	InitGPIO();
 8003938:	f000 f804 	bl	8003944 <InitGPIO>
	InitCLITask();
 800393c:	f000 f80a 	bl	8003954 <InitCLITask>
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}

08003944 <InitGPIO>:

void InitGPIO(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0

}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <InitCLITask>:
extern UART_HandleTypeDef huart1;
// prototype declaration
void StartCLITask(void *argument);

void InitCLITask(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af00      	add	r7, sp, #0

const osThreadAttr_t CLITask_attributes = {
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	2224      	movs	r2, #36	; 0x24
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f019 fda5 	bl	801d4b0 <memset>
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <InitCLITask+0x48>)
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	2318      	movs	r3, #24
 8003972:	61fb      	str	r3, [r7, #28]
  .name = "CLITask",
  .stack_size = CLIStackSize,
  .priority = (osPriority_t) osPriorityNormal,
};
PrintMutexHandle = osMutexNew(&PrintMutexHandle_attributes);
 8003974:	480a      	ldr	r0, [pc, #40]	; (80039a0 <InitCLITask+0x4c>)
 8003976:	f00b fb77 	bl	800f068 <osMutexNew>
 800397a:	4603      	mov	r3, r0
 800397c:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <InitCLITask+0x50>)
 800397e:	6013      	str	r3, [r2, #0]
CLITaskHandle = osThreadNew(StartCLITask, NULL, &CLITask_attributes);
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	461a      	mov	r2, r3
 8003984:	2100      	movs	r1, #0
 8003986:	4808      	ldr	r0, [pc, #32]	; (80039a8 <InitCLITask+0x54>)
 8003988:	f00b fac1 	bl	800ef0e <osThreadNew>
 800398c:	4603      	mov	r3, r0
 800398e:	4a07      	ldr	r2, [pc, #28]	; (80039ac <InitCLITask+0x58>)
 8003990:	6013      	str	r3, [r2, #0]
};
 8003992:	bf00      	nop
 8003994:	3728      	adds	r7, #40	; 0x28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	0801e8d8 	.word	0x0801e8d8
 80039a0:	080214cc 	.word	0x080214cc
 80039a4:	2401b534 	.word	0x2401b534
 80039a8:	080039b1 	.word	0x080039b1
 80039ac:	2401b53c 	.word	0x2401b53c

080039b0 <StartCLITask>:

void StartCLITask(void *argument)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b090      	sub	sp, #64	; 0x40
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	EmbeddedCliConfig *config = embeddedCliDefaultConfig();
 80039b8:	f7fe fdcc 	bl	8002554 <embeddedCliDefaultConfig>
 80039bc:	6378      	str	r0, [r7, #52]	; 0x34
 	config->cliBufferSize = CLI_BUFFER_SIZE;
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c4:	821a      	strh	r2, [r3, #16]
	config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	2210      	movs	r2, #16
 80039ca:	809a      	strh	r2, [r3, #4]
	config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	2240      	movs	r2, #64	; 0x40
 80039d0:	80da      	strh	r2, [r3, #6]
	config->historyBufferSize = CLI_HISTORY_SIZE;
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	2220      	movs	r2, #32
 80039d6:	811a      	strh	r2, [r3, #8]
	config->maxBindingCount = CLI_BINDING_COUNT;
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	2212      	movs	r2, #18
 80039dc:	815a      	strh	r2, [r3, #10]
	cli = embeddedCliNew(config);
 80039de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039e0:	f7fe fe09 	bl	80025f6 <embeddedCliNew>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <StartCLITask+0xb4>)
 80039e8:	6013      	str	r3, [r2, #0]


	  CliCommandBinding on_read_version={
 80039ea:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <StartCLITask+0xb8>)
 80039ec:	f107 0420 	add.w	r4, r7, #32
 80039f0:	461d      	mov	r5, r3
 80039f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039f6:	682b      	ldr	r3, [r5, #0]
 80039f8:	6023      	str	r3, [r4, #0]
	              "Read Hardware and Firmware Version",
	              true,
	              NULL,
	              onReadVersion
	      };
	  embeddedCliAddBinding(cli,on_read_version);
 80039fa:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <StartCLITask+0xb4>)
 80039fc:	681c      	ldr	r4, [r3, #0]
 80039fe:	466a      	mov	r2, sp
 8003a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a08:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a0c:	f107 0320 	add.w	r3, r7, #32
 8003a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7fe ff59 	bl	80028ca <embeddedCliAddBinding>

	  CliCommandBinding on_tasklist={
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <StartCLITask+0xbc>)
 8003a1a:	f107 040c 	add.w	r4, r7, #12
 8003a1e:	461d      	mov	r5, r3
 8003a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	6023      	str	r3, [r4, #0]
	              "print tasklist",
	              false,
	              NULL,
	              ontasklist
	      };
	  embeddedCliAddBinding(cli,on_tasklist);
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <StartCLITask+0xb4>)
 8003a2a:	681c      	ldr	r4, [r3, #0]
 8003a2c:	466a      	mov	r2, sp
 8003a2e:	f107 0318 	add.w	r3, r7, #24
 8003a32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a36:	e882 0003 	stmia.w	r2, {r0, r1}
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a40:	4620      	mov	r0, r4
 8003a42:	f7fe ff42 	bl	80028ca <embeddedCliAddBinding>


	cli->onCommand = onCommand;
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <StartCLITask+0xb4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <StartCLITask+0xc0>)
 8003a4c:	605a      	str	r2, [r3, #4]
	cli->writeChar = writeChar;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <StartCLITask+0xb4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <StartCLITask+0xc4>)
 8003a54:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  embeddedCliProcess(cli);
 8003a56:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <StartCLITask+0xb4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fea5 	bl	80027aa <embeddedCliProcess>
 8003a60:	e7f9      	b.n	8003a56 <StartCLITask+0xa6>
 8003a62:	bf00      	nop
 8003a64:	2401b538 	.word	0x2401b538
 8003a68:	0801e8e0 	.word	0x0801e8e0
 8003a6c:	0801e8f4 	.word	0x0801e8f4
 8003a70:	08003a9d 	.word	0x08003a9d
 8003a74:	08003a79 	.word	0x08003a79

08003a78 <writeChar>:
  }
  /* USER CODE END 5 */
}

void writeChar(EmbeddedCli *embeddedCli, char c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
//		{
//			   netconn_write(newconn, pETH_data, len_ETH, NETCONN_COPY);  //serve per scrivere su tcpip
//		}
//		pETH_data=&ETH_data[0];
//	}
HAL_UART_Transmit(&huart1,(uint8_t*)&c,1,100);
 8003a84:	1cf9      	adds	r1, r7, #3
 8003a86:	2364      	movs	r3, #100	; 0x64
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4803      	ldr	r0, [pc, #12]	; (8003a98 <writeChar+0x20>)
 8003a8c:	f007 ffe8 	bl	800ba60 <HAL_UART_Transmit>


}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	2401b390 	.word	0x2401b390

08003a9c <onCommand>:

void onCommand(EmbeddedCli *embeddedCli, CliCommand *command)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
//	print_k("Received command:");
//	print_k("command name %s",command->name);
//	print_k("\n");
    embeddedCliTokenizeArgs(command->args);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe ff82 	bl	80029b4 <embeddedCliTokenizeArgs>
    for (int i = 1; i <= embeddedCliGetTokenCount(command->args); ++i)
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e019      	b.n	8003aea <onCommand+0x4e>
    {
    	print_k("arg ");
 8003ab6:	4814      	ldr	r0, [pc, #80]	; (8003b08 <onCommand+0x6c>)
 8003ab8:	f000 f85c 	bl	8003b74 <print_k>
    	print_k("%d",i);
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	4813      	ldr	r0, [pc, #76]	; (8003b0c <onCommand+0x70>)
 8003ac0:	f000 f858 	bl	8003b74 <print_k>
    	print_k(": ");
 8003ac4:	4812      	ldr	r0, [pc, #72]	; (8003b10 <onCommand+0x74>)
 8003ac6:	f000 f855 	bl	8003b74 <print_k>
    	print_k("arg: %s",embeddedCliGetToken(command->args, i));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe ffe1 	bl	8002a9c <embeddedCliGetToken>
 8003ada:	4603      	mov	r3, r0
 8003adc:	4619      	mov	r1, r3
 8003ade:	480d      	ldr	r0, [pc, #52]	; (8003b14 <onCommand+0x78>)
 8003ae0:	f000 f848 	bl	8003b74 <print_k>
    for (int i = 1; i <= embeddedCliGetTokenCount(command->args); ++i)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f80a 	bl	8002b08 <embeddedCliGetTokenCount>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4293      	cmp	r3, r2
 8003afc:	dddb      	ble.n	8003ab6 <onCommand+0x1a>
    	//print_k("\n");
    }
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	0801e908 	.word	0x0801e908
 8003b0c:	0801e910 	.word	0x0801e910
 8003b10:	0801e914 	.word	0x0801e914
 8003b14:	0801e918 	.word	0x0801e918

08003b18 <ontasklist>:


void ontasklist(EmbeddedCli *cli, char *args, void *context)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
	print_task_list();
 8003b24:	f000 f85a 	bl	8003bdc <print_task_list>
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <onReadVersion>:


void onReadVersion(EmbeddedCli *cli, char *args, void *context)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	print_k("FW : %s",fw_version);
 8003b3c:	4907      	ldr	r1, [pc, #28]	; (8003b5c <onReadVersion+0x2c>)
 8003b3e:	4808      	ldr	r0, [pc, #32]	; (8003b60 <onReadVersion+0x30>)
 8003b40:	f000 f818 	bl	8003b74 <print_k>
	print_k("CTRL HW : %s",hw_ctrl_version);
 8003b44:	4907      	ldr	r1, [pc, #28]	; (8003b64 <onReadVersion+0x34>)
 8003b46:	4808      	ldr	r0, [pc, #32]	; (8003b68 <onReadVersion+0x38>)
 8003b48:	f000 f814 	bl	8003b74 <print_k>
	print_k("RF HW : %s",hw_rf_version);
 8003b4c:	4907      	ldr	r1, [pc, #28]	; (8003b6c <onReadVersion+0x3c>)
 8003b4e:	4808      	ldr	r0, [pc, #32]	; (8003b70 <onReadVersion+0x40>)
 8003b50:	f000 f810 	bl	8003b74 <print_k>
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	24000000 	.word	0x24000000
 8003b60:	0801e920 	.word	0x0801e920
 8003b64:	2400001c 	.word	0x2400001c
 8003b68:	0801e928 	.word	0x0801e928
 8003b6c:	2400002c 	.word	0x2400002c
 8003b70:	0801e938 	.word	0x0801e938

08003b74 <print_k>:
/**
  * @brief  per ora scrive sia su uart che su tcp se connesso.
  * @param  None
  * @retval None
  */
void print_k(char *format, ...) {
 8003b74:	b40f      	push	{r0, r1, r2, r3}
 8003b76:	b580      	push	{r7, lr}
 8003b78:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003b7c:	af00      	add	r7, sp, #0
	char msg_ETH[512];
	va_list args;
   va_start(args, format);
 8003b7e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	601a      	str	r2, [r3, #0]
   if(osMutexAcquire(PrintMutexHandle,osWaitForever)==osOK)
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <print_k+0x60>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f00b faf0 	bl	800f174 <osMutexAcquire>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d114      	bne.n	8003bc4 <print_k+0x50>
      {
	   vsprintf(msg_ETH,format, args);
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	f107 0008 	add.w	r0, r7, #8
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8003ba6:	f019 fe95 	bl	801d8d4 <vsiprintf>
//   	   if (newconn!=NULL)
//   	   {
//   	   netconn_write(newconn, msg_ETH, len, NETCONN_COPY);  //serve per scrivere su tcpip
//   	   netconn_write(newconn, "\n", 1, NETCONN_COPY);  //serve per scrivere su tcpip
//   	   }
   	   embeddedCliPrint(cli, msg_ETH);
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <print_k+0x64>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f107 0208 	add.w	r2, r7, #8
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe febb 	bl	8002930 <embeddedCliPrint>
      osMutexRelease(PrintMutexHandle);
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <print_k+0x60>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f00b fb23 	bl	800f20a <osMutexRelease>
      }

   va_end(args);
}
 8003bc4:	bf00      	nop
 8003bc6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bd0:	b004      	add	sp, #16
 8003bd2:	4770      	bx	lr
 8003bd4:	2401b534 	.word	0x2401b534
 8003bd8:	2401b538 	.word	0x2401b538

08003bdc <print_task_list>:

void print_task_list(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003be2:	af00      	add	r7, sp, #0
    char buffer[512]; // Buffer to store the task list output
    vTaskList(buffer); // Generate the task list
 8003be4:	463b      	mov	r3, r7
 8003be6:	4618      	mov	r0, r3
 8003be8:	f00e f918 	bl	8011e1c <vTaskList>
    print_k("%s", buffer); // Print the task list
 8003bec:	463b      	mov	r3, r7
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4803      	ldr	r0, [pc, #12]	; (8003c00 <print_task_list+0x24>)
 8003bf2:	f7ff ffbf 	bl	8003b74 <print_k>
}
 8003bf6:	bf00      	nop
 8003bf8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	0801e95c 	.word	0x0801e95c

08003c04 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <LAN8742_RegisterBusIO+0x28>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <LAN8742_RegisterBusIO+0x28>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <LAN8742_RegisterBusIO+0x28>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	e014      	b.n	8003c5c <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	2300      	movs	r3, #0
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d17c      	bne.n	8003d82 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e01c      	b.n	8003cdc <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f107 0208 	add.w	r2, r7, #8
 8003caa:	2112      	movs	r1, #18
 8003cac:	6978      	ldr	r0, [r7, #20]
 8003cae:	4798      	blx	r3
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da03      	bge.n	8003cbe <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003cb6:	f06f 0304 	mvn.w	r3, #4
 8003cba:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003cbc:	e00b      	b.n	8003cd6 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d105      	bne.n	8003cd6 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
         break;
 8003cd4:	e005      	b.n	8003ce2 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b1f      	cmp	r3, #31
 8003ce0:	d9df      	bls.n	8003ca2 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b1f      	cmp	r3, #31
 8003ce8:	d902      	bls.n	8003cf0 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003cea:	f06f 0302 	mvn.w	r3, #2
 8003cee:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d145      	bne.n	8003d82 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6810      	ldr	r0, [r2, #0]
 8003cfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d02:	2100      	movs	r1, #0
 8003d04:	4798      	blx	r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	db37      	blt.n	8003d7c <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6810      	ldr	r0, [r2, #0]
 8003d14:	f107 0208 	add.w	r2, r7, #8
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4798      	blx	r3
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	db28      	blt.n	8003d74 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	4798      	blx	r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003d2c:	e01c      	b.n	8003d68 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	4798      	blx	r3
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d40:	d80e      	bhi.n	8003d60 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6810      	ldr	r0, [r2, #0]
 8003d4a:	f107 0208 	add.w	r2, r7, #8
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4798      	blx	r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	da07      	bge.n	8003d68 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003d58:	f06f 0304 	mvn.w	r3, #4
 8003d5c:	613b      	str	r3, [r7, #16]
                 break;
 8003d5e:	e010      	b.n	8003d82 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003d60:	f06f 0301 	mvn.w	r3, #1
 8003d64:	613b      	str	r3, [r7, #16]
               break;
 8003d66:	e00c      	b.n	8003d82 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1dd      	bne.n	8003d2e <LAN8742_Init+0xc6>
 8003d72:	e006      	b.n	8003d82 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003d74:	f06f 0304 	mvn.w	r3, #4
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e002      	b.n	8003d82 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003d7c:	f06f 0303 	mvn.w	r3, #3
 8003d80:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d112      	bne.n	8003dae <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4798      	blx	r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003d92:	bf00      	nop
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4798      	blx	r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003da6:	d9f5      	bls.n	8003d94 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003dae:	693b      	ldr	r3, [r7, #16]
 }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6810      	ldr	r0, [r2, #0]
 8003dcc:	f107 020c 	add.w	r2, r7, #12
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4798      	blx	r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da02      	bge.n	8003de0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003dda:	f06f 0304 	mvn.w	r3, #4
 8003dde:	e06e      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6810      	ldr	r0, [r2, #0]
 8003de8:	f107 020c 	add.w	r2, r7, #12
 8003dec:	2101      	movs	r1, #1
 8003dee:	4798      	blx	r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da02      	bge.n	8003dfc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003df6:	f06f 0304 	mvn.w	r3, #4
 8003dfa:	e060      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003e06:	2301      	movs	r3, #1
 8003e08:	e059      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6810      	ldr	r0, [r2, #0]
 8003e12:	f107 020c 	add.w	r2, r7, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	4798      	blx	r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da02      	bge.n	8003e26 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e20:	f06f 0304 	mvn.w	r3, #4
 8003e24:	e04b      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11b      	bne.n	8003e68 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d006      	beq.n	8003e48 <LAN8742_GetLinkState+0x90>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e03a      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e033      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003e60:	2304      	movs	r3, #4
 8003e62:	e02c      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003e64:	2305      	movs	r3, #5
 8003e66:	e02a      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6810      	ldr	r0, [r2, #0]
 8003e70:	f107 020c 	add.w	r2, r7, #12
 8003e74:	211f      	movs	r1, #31
 8003e76:	4798      	blx	r3
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da02      	bge.n	8003e84 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003e7e:	f06f 0304 	mvn.w	r3, #4
 8003e82:	e01c      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003e8e:	2306      	movs	r3, #6
 8003e90:	e015      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 031c 	and.w	r3, r3, #28
 8003e98:	2b18      	cmp	r3, #24
 8003e9a:	d101      	bne.n	8003ea0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00e      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 031c 	and.w	r3, r3, #28
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d101      	bne.n	8003eae <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e007      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 031c 	and.w	r3, r3, #28
 8003eb4:	2b14      	cmp	r3, #20
 8003eb6:	d101      	bne.n	8003ebc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	e000      	b.n	8003ebe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003ebc:	2305      	movs	r3, #5
    }				
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ece:	2003      	movs	r0, #3
 8003ed0:	f000 f917 	bl	8004102 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ed4:	f005 fc2c 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_Init+0x68>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	4913      	ldr	r1, [pc, #76]	; (8003f34 <HAL_Init+0x6c>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_Init+0x68>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_Init+0x6c>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <HAL_Init+0x70>)
 8003f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f0c:	4a0b      	ldr	r2, [pc, #44]	; (8003f3c <HAL_Init+0x74>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f12:	200f      	movs	r0, #15
 8003f14:	f7fe f8ec 	bl	80020f0 <HAL_InitTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e002      	b.n	8003f28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f22:	f7fd fa9f 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	58024400 	.word	0x58024400
 8003f34:	080214bc 	.word	0x080214bc
 8003f38:	24000040 	.word	0x24000040
 8003f3c:	2400003c 	.word	0x2400003c

08003f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_IncTick+0x20>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_IncTick+0x24>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <HAL_IncTick+0x24>)
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	2400004c 	.word	0x2400004c
 8003f64:	2401b540 	.word	0x2401b540

08003f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_GetTick+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	2401b540 	.word	0x2401b540

08003f80 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f90:	4904      	ldr	r1, [pc, #16]	; (8003fa4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	58000400 	.word	0x58000400

08003fa8 <__NVIC_SetPriorityGrouping>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <__NVIC_SetPriorityGrouping+0x44>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fd6:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	60d3      	str	r3, [r2, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00
 8003fec:	05fa0000 	.word	0x05fa0000

08003ff0 <__NVIC_GetPriorityGrouping>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff4:	4b04      	ldr	r3, [pc, #16]	; (8004008 <__NVIC_GetPriorityGrouping+0x18>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	0a1b      	lsrs	r3, r3, #8
 8003ffa:	f003 0307 	and.w	r3, r3, #7
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <__NVIC_EnableIRQ>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	db0b      	blt.n	8004036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	4907      	ldr	r1, [pc, #28]	; (8004044 <__NVIC_EnableIRQ+0x38>)
 8004026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2001      	movs	r0, #1
 800402e:	fa00 f202 	lsl.w	r2, r0, r2
 8004032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000e100 	.word	0xe000e100

08004048 <__NVIC_SetPriority>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db0a      	blt.n	8004072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	490c      	ldr	r1, [pc, #48]	; (8004094 <__NVIC_SetPriority+0x4c>)
 8004062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	440b      	add	r3, r1
 800406c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004070:	e00a      	b.n	8004088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4908      	ldr	r1, [pc, #32]	; (8004098 <__NVIC_SetPriority+0x50>)
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	3b04      	subs	r3, #4
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	440b      	add	r3, r1
 8004086:	761a      	strb	r2, [r3, #24]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <NVIC_EncodePriority>:
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f1c3 0307 	rsb	r3, r3, #7
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	bf28      	it	cs
 80040ba:	2304      	movcs	r3, #4
 80040bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d902      	bls.n	80040cc <NVIC_EncodePriority+0x30>
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3b03      	subs	r3, #3
 80040ca:	e000      	b.n	80040ce <NVIC_EncodePriority+0x32>
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	f04f 32ff 	mov.w	r2, #4294967295
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	401a      	ands	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e4:	f04f 31ff 	mov.w	r1, #4294967295
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	43d9      	mvns	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	4313      	orrs	r3, r2
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	; 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ff4c 	bl	8003fa8 <__NVIC_SetPriorityGrouping>
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004126:	f7ff ff63 	bl	8003ff0 <__NVIC_GetPriorityGrouping>
 800412a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	6978      	ldr	r0, [r7, #20]
 8004132:	f7ff ffb3 	bl	800409c <NVIC_EncodePriority>
 8004136:	4602      	mov	r2, r0
 8004138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ff82 	bl	8004048 <__NVIC_SetPriority>
}
 8004144:	bf00      	nop
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff56 	bl	800400c <__NVIC_EnableIRQ>
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800416c:	f3bf 8f5f 	dmb	sy
}
 8004170:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <HAL_MPU_Disable+0x28>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	4a06      	ldr	r2, [pc, #24]	; (8004190 <HAL_MPU_Disable+0x28>)
 8004178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_MPU_Disable+0x2c>)
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000ed00 	.word	0xe000ed00
 8004194:	e000ed90 	.word	0xe000ed90

08004198 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <HAL_MPU_Enable+0x38>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_MPU_Enable+0x3c>)
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_MPU_Enable+0x3c>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80041b6:	f3bf 8f4f 	dsb	sy
}
 80041ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041bc:	f3bf 8f6f 	isb	sy
}
 80041c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000ed90 	.word	0xe000ed90
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	785a      	ldrb	r2, [r3, #1]
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_MPU_ConfigRegion+0x84>)
 80041e6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d029      	beq.n	8004244 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80041f0:	4a1a      	ldr	r2, [pc, #104]	; (800425c <HAL_MPU_ConfigRegion+0x84>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	7b1b      	ldrb	r3, [r3, #12]
 80041fc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7adb      	ldrb	r3, [r3, #11]
 8004202:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004204:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7a9b      	ldrb	r3, [r3, #10]
 800420a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800420c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	7b5b      	ldrb	r3, [r3, #13]
 8004212:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004214:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	7b9b      	ldrb	r3, [r3, #14]
 800421a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800421c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	7bdb      	ldrb	r3, [r3, #15]
 8004222:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004224:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	7a5b      	ldrb	r3, [r3, #9]
 800422a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800422c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7a1b      	ldrb	r3, [r3, #8]
 8004232:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004234:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	7812      	ldrb	r2, [r2, #0]
 800423a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800423e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004240:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004242:	e005      	b.n	8004250 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_MPU_ConfigRegion+0x84>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_MPU_ConfigRegion+0x84>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed90 	.word	0xe000ed90

08004260 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e054      	b.n	800431c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7f5b      	ldrb	r3, [r3, #29]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd f90c 	bl	80014a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	791b      	ldrb	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10c      	bne.n	80042b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a22      	ldr	r2, [pc, #136]	; (8004324 <HAL_CRC_Init+0xc4>)
 800429c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0218 	bic.w	r2, r2, #24
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	e00c      	b.n	80042ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6899      	ldr	r1, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f834 	bl	8004328 <HAL_CRCEx_Polynomial_Set>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e028      	b.n	800431c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	795b      	ldrb	r3, [r3, #5]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	611a      	str	r2, [r3, #16]
 80042dc:	e004      	b.n	80042e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6912      	ldr	r2, [r2, #16]
 80042e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	04c11db7 	.word	0x04c11db7

08004328 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004338:	231f      	movs	r3, #31
 800433a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800433c:	bf00      	nop
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	613a      	str	r2, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <HAL_CRCEx_Polynomial_Set+0x34>
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_CRCEx_Polynomial_Set+0x16>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b18      	cmp	r3, #24
 8004360:	d846      	bhi.n	80043f0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	080043f7 	.word	0x080043f7
 800436c:	080043f1 	.word	0x080043f1
 8004370:	080043f1 	.word	0x080043f1
 8004374:	080043f1 	.word	0x080043f1
 8004378:	080043f1 	.word	0x080043f1
 800437c:	080043f1 	.word	0x080043f1
 8004380:	080043f1 	.word	0x080043f1
 8004384:	080043f1 	.word	0x080043f1
 8004388:	080043e5 	.word	0x080043e5
 800438c:	080043f1 	.word	0x080043f1
 8004390:	080043f1 	.word	0x080043f1
 8004394:	080043f1 	.word	0x080043f1
 8004398:	080043f1 	.word	0x080043f1
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	080043f1 	.word	0x080043f1
 80043a8:	080043d9 	.word	0x080043d9
 80043ac:	080043f1 	.word	0x080043f1
 80043b0:	080043f1 	.word	0x080043f1
 80043b4:	080043f1 	.word	0x080043f1
 80043b8:	080043f1 	.word	0x080043f1
 80043bc:	080043f1 	.word	0x080043f1
 80043c0:	080043f1 	.word	0x080043f1
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	080043cd 	.word	0x080043cd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d913      	bls.n	80043fa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80043d6:	e010      	b.n	80043fa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b07      	cmp	r3, #7
 80043dc:	d90f      	bls.n	80043fe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80043e2:	e00c      	b.n	80043fe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	d90b      	bls.n	8004402 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80043ee:	e008      	b.n	8004402 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e006      	b.n	8004404 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043f6:	bf00      	nop
 80043f8:	e004      	b.n	8004404 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004402:	bf00      	nop
  }
  if (status == HAL_OK)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f023 0118 	bic.w	r1, r3, #24
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800443c:	f7ff fd94 	bl	8003f68 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e2dc      	b.n	8004a06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d008      	beq.n	800446a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e2cd      	b.n	8004a06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a76      	ldr	r2, [pc, #472]	; (8004648 <HAL_DMA_Abort+0x214>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d04a      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a74      	ldr	r2, [pc, #464]	; (800464c <HAL_DMA_Abort+0x218>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d045      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a73      	ldr	r2, [pc, #460]	; (8004650 <HAL_DMA_Abort+0x21c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d040      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a71      	ldr	r2, [pc, #452]	; (8004654 <HAL_DMA_Abort+0x220>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d03b      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a70      	ldr	r2, [pc, #448]	; (8004658 <HAL_DMA_Abort+0x224>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d036      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6e      	ldr	r2, [pc, #440]	; (800465c <HAL_DMA_Abort+0x228>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d031      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6d      	ldr	r2, [pc, #436]	; (8004660 <HAL_DMA_Abort+0x22c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d02c      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6b      	ldr	r2, [pc, #428]	; (8004664 <HAL_DMA_Abort+0x230>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d027      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6a      	ldr	r2, [pc, #424]	; (8004668 <HAL_DMA_Abort+0x234>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d022      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a68      	ldr	r2, [pc, #416]	; (800466c <HAL_DMA_Abort+0x238>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01d      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a67      	ldr	r2, [pc, #412]	; (8004670 <HAL_DMA_Abort+0x23c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d018      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a65      	ldr	r2, [pc, #404]	; (8004674 <HAL_DMA_Abort+0x240>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a64      	ldr	r2, [pc, #400]	; (8004678 <HAL_DMA_Abort+0x244>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00e      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a62      	ldr	r2, [pc, #392]	; (800467c <HAL_DMA_Abort+0x248>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a61      	ldr	r2, [pc, #388]	; (8004680 <HAL_DMA_Abort+0x24c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_DMA_Abort+0xd6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5f      	ldr	r2, [pc, #380]	; (8004684 <HAL_DMA_Abort+0x250>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_DMA_Abort+0xda>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_DMA_Abort+0xdc>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 021e 	bic.w	r2, r2, #30
 8004522:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004532:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e00a      	b.n	8004552 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 020e 	bic.w	r2, r2, #14
 800454a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3c      	ldr	r2, [pc, #240]	; (8004648 <HAL_DMA_Abort+0x214>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d072      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a3a      	ldr	r2, [pc, #232]	; (800464c <HAL_DMA_Abort+0x218>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d06d      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a39      	ldr	r2, [pc, #228]	; (8004650 <HAL_DMA_Abort+0x21c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d068      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a37      	ldr	r2, [pc, #220]	; (8004654 <HAL_DMA_Abort+0x220>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d063      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a36      	ldr	r2, [pc, #216]	; (8004658 <HAL_DMA_Abort+0x224>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d05e      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a34      	ldr	r2, [pc, #208]	; (800465c <HAL_DMA_Abort+0x228>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d059      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a33      	ldr	r2, [pc, #204]	; (8004660 <HAL_DMA_Abort+0x22c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d054      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a31      	ldr	r2, [pc, #196]	; (8004664 <HAL_DMA_Abort+0x230>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d04f      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a30      	ldr	r2, [pc, #192]	; (8004668 <HAL_DMA_Abort+0x234>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04a      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2e      	ldr	r2, [pc, #184]	; (800466c <HAL_DMA_Abort+0x238>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d045      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2d      	ldr	r2, [pc, #180]	; (8004670 <HAL_DMA_Abort+0x23c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d040      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2b      	ldr	r2, [pc, #172]	; (8004674 <HAL_DMA_Abort+0x240>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d03b      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <HAL_DMA_Abort+0x244>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d036      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <HAL_DMA_Abort+0x248>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d031      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a27      	ldr	r2, [pc, #156]	; (8004680 <HAL_DMA_Abort+0x24c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d02c      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a25      	ldr	r2, [pc, #148]	; (8004684 <HAL_DMA_Abort+0x250>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d027      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a24      	ldr	r2, [pc, #144]	; (8004688 <HAL_DMA_Abort+0x254>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a22      	ldr	r2, [pc, #136]	; (800468c <HAL_DMA_Abort+0x258>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a21      	ldr	r2, [pc, #132]	; (8004690 <HAL_DMA_Abort+0x25c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <HAL_DMA_Abort+0x260>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <HAL_DMA_Abort+0x264>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1c      	ldr	r2, [pc, #112]	; (800469c <HAL_DMA_Abort+0x268>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <HAL_DMA_Abort+0x26c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_DMA_Abort+0x20e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <HAL_DMA_Abort+0x270>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d132      	bne.n	80046a8 <HAL_DMA_Abort+0x274>
 8004642:	2301      	movs	r3, #1
 8004644:	e031      	b.n	80046aa <HAL_DMA_Abort+0x276>
 8004646:	bf00      	nop
 8004648:	40020010 	.word	0x40020010
 800464c:	40020028 	.word	0x40020028
 8004650:	40020040 	.word	0x40020040
 8004654:	40020058 	.word	0x40020058
 8004658:	40020070 	.word	0x40020070
 800465c:	40020088 	.word	0x40020088
 8004660:	400200a0 	.word	0x400200a0
 8004664:	400200b8 	.word	0x400200b8
 8004668:	40020410 	.word	0x40020410
 800466c:	40020428 	.word	0x40020428
 8004670:	40020440 	.word	0x40020440
 8004674:	40020458 	.word	0x40020458
 8004678:	40020470 	.word	0x40020470
 800467c:	40020488 	.word	0x40020488
 8004680:	400204a0 	.word	0x400204a0
 8004684:	400204b8 	.word	0x400204b8
 8004688:	58025408 	.word	0x58025408
 800468c:	5802541c 	.word	0x5802541c
 8004690:	58025430 	.word	0x58025430
 8004694:	58025444 	.word	0x58025444
 8004698:	58025458 	.word	0x58025458
 800469c:	5802546c 	.word	0x5802546c
 80046a0:	58025480 	.word	0x58025480
 80046a4:	58025494 	.word	0x58025494
 80046a8:	2300      	movs	r3, #0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6d      	ldr	r2, [pc, #436]	; (8004878 <HAL_DMA_Abort+0x444>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d04a      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6b      	ldr	r2, [pc, #428]	; (800487c <HAL_DMA_Abort+0x448>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d045      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	; (8004880 <HAL_DMA_Abort+0x44c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d040      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_DMA_Abort+0x450>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d03b      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a67      	ldr	r2, [pc, #412]	; (8004888 <HAL_DMA_Abort+0x454>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d036      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a65      	ldr	r2, [pc, #404]	; (800488c <HAL_DMA_Abort+0x458>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d031      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a64      	ldr	r2, [pc, #400]	; (8004890 <HAL_DMA_Abort+0x45c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d02c      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a62      	ldr	r2, [pc, #392]	; (8004894 <HAL_DMA_Abort+0x460>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d027      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a61      	ldr	r2, [pc, #388]	; (8004898 <HAL_DMA_Abort+0x464>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d022      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5f      	ldr	r2, [pc, #380]	; (800489c <HAL_DMA_Abort+0x468>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01d      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5e      	ldr	r2, [pc, #376]	; (80048a0 <HAL_DMA_Abort+0x46c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d018      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5c      	ldr	r2, [pc, #368]	; (80048a4 <HAL_DMA_Abort+0x470>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a5b      	ldr	r2, [pc, #364]	; (80048a8 <HAL_DMA_Abort+0x474>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a59      	ldr	r2, [pc, #356]	; (80048ac <HAL_DMA_Abort+0x478>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a58      	ldr	r2, [pc, #352]	; (80048b0 <HAL_DMA_Abort+0x47c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_DMA_Abort+0x32a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a56      	ldr	r2, [pc, #344]	; (80048b4 <HAL_DMA_Abort+0x480>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d108      	bne.n	8004770 <HAL_DMA_Abort+0x33c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e007      	b.n	8004780 <HAL_DMA_Abort+0x34c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004780:	e013      	b.n	80047aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004782:	f7ff fbf1 	bl	8003f68 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b05      	cmp	r3, #5
 800478e:	d90c      	bls.n	80047aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2203      	movs	r2, #3
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e12d      	b.n	8004a06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e5      	bne.n	8004782 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2f      	ldr	r2, [pc, #188]	; (8004878 <HAL_DMA_Abort+0x444>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d04a      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2d      	ldr	r2, [pc, #180]	; (800487c <HAL_DMA_Abort+0x448>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d045      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <HAL_DMA_Abort+0x44c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d040      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <HAL_DMA_Abort+0x450>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d03b      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a29      	ldr	r2, [pc, #164]	; (8004888 <HAL_DMA_Abort+0x454>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d036      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a27      	ldr	r2, [pc, #156]	; (800488c <HAL_DMA_Abort+0x458>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d031      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <HAL_DMA_Abort+0x45c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d02c      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a24      	ldr	r2, [pc, #144]	; (8004894 <HAL_DMA_Abort+0x460>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d027      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a23      	ldr	r2, [pc, #140]	; (8004898 <HAL_DMA_Abort+0x464>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d022      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a21      	ldr	r2, [pc, #132]	; (800489c <HAL_DMA_Abort+0x468>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01d      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <HAL_DMA_Abort+0x46c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d018      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <HAL_DMA_Abort+0x470>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_DMA_Abort+0x474>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00e      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_DMA_Abort+0x478>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d009      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_DMA_Abort+0x47c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_DMA_Abort+0x422>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_DMA_Abort+0x480>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_DMA_Abort+0x426>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_DMA_Abort+0x428>
 800485a:	2300      	movs	r3, #0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02b      	beq.n	80048b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	223f      	movs	r2, #63	; 0x3f
 8004870:	409a      	lsls	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	609a      	str	r2, [r3, #8]
 8004876:	e02a      	b.n	80048ce <HAL_DMA_Abort+0x49a>
 8004878:	40020010 	.word	0x40020010
 800487c:	40020028 	.word	0x40020028
 8004880:	40020040 	.word	0x40020040
 8004884:	40020058 	.word	0x40020058
 8004888:	40020070 	.word	0x40020070
 800488c:	40020088 	.word	0x40020088
 8004890:	400200a0 	.word	0x400200a0
 8004894:	400200b8 	.word	0x400200b8
 8004898:	40020410 	.word	0x40020410
 800489c:	40020428 	.word	0x40020428
 80048a0:	40020440 	.word	0x40020440
 80048a4:	40020458 	.word	0x40020458
 80048a8:	40020470 	.word	0x40020470
 80048ac:	40020488 	.word	0x40020488
 80048b0:	400204a0 	.word	0x400204a0
 80048b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2201      	movs	r2, #1
 80048c8:	409a      	lsls	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a4f      	ldr	r2, [pc, #316]	; (8004a10 <HAL_DMA_Abort+0x5dc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d072      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4d      	ldr	r2, [pc, #308]	; (8004a14 <HAL_DMA_Abort+0x5e0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d06d      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a4c      	ldr	r2, [pc, #304]	; (8004a18 <HAL_DMA_Abort+0x5e4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d068      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <HAL_DMA_Abort+0x5e8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d063      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a49      	ldr	r2, [pc, #292]	; (8004a20 <HAL_DMA_Abort+0x5ec>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d05e      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a47      	ldr	r2, [pc, #284]	; (8004a24 <HAL_DMA_Abort+0x5f0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d059      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a46      	ldr	r2, [pc, #280]	; (8004a28 <HAL_DMA_Abort+0x5f4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d054      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a44      	ldr	r2, [pc, #272]	; (8004a2c <HAL_DMA_Abort+0x5f8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d04f      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a43      	ldr	r2, [pc, #268]	; (8004a30 <HAL_DMA_Abort+0x5fc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a41      	ldr	r2, [pc, #260]	; (8004a34 <HAL_DMA_Abort+0x600>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a40      	ldr	r2, [pc, #256]	; (8004a38 <HAL_DMA_Abort+0x604>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3e      	ldr	r2, [pc, #248]	; (8004a3c <HAL_DMA_Abort+0x608>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3d      	ldr	r2, [pc, #244]	; (8004a40 <HAL_DMA_Abort+0x60c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <HAL_DMA_Abort+0x610>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <HAL_DMA_Abort+0x614>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a38      	ldr	r2, [pc, #224]	; (8004a4c <HAL_DMA_Abort+0x618>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a37      	ldr	r2, [pc, #220]	; (8004a50 <HAL_DMA_Abort+0x61c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a35      	ldr	r2, [pc, #212]	; (8004a54 <HAL_DMA_Abort+0x620>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <HAL_DMA_Abort+0x624>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a32      	ldr	r2, [pc, #200]	; (8004a5c <HAL_DMA_Abort+0x628>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a31      	ldr	r2, [pc, #196]	; (8004a60 <HAL_DMA_Abort+0x62c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <HAL_DMA_Abort+0x630>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <HAL_DMA_Abort+0x634>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_Abort+0x58a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <HAL_DMA_Abort+0x638>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_DMA_Abort+0x58e>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_DMA_Abort+0x590>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00c      	beq.n	80049f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40020010 	.word	0x40020010
 8004a14:	40020028 	.word	0x40020028
 8004a18:	40020040 	.word	0x40020040
 8004a1c:	40020058 	.word	0x40020058
 8004a20:	40020070 	.word	0x40020070
 8004a24:	40020088 	.word	0x40020088
 8004a28:	400200a0 	.word	0x400200a0
 8004a2c:	400200b8 	.word	0x400200b8
 8004a30:	40020410 	.word	0x40020410
 8004a34:	40020428 	.word	0x40020428
 8004a38:	40020440 	.word	0x40020440
 8004a3c:	40020458 	.word	0x40020458
 8004a40:	40020470 	.word	0x40020470
 8004a44:	40020488 	.word	0x40020488
 8004a48:	400204a0 	.word	0x400204a0
 8004a4c:	400204b8 	.word	0x400204b8
 8004a50:	58025408 	.word	0x58025408
 8004a54:	5802541c 	.word	0x5802541c
 8004a58:	58025430 	.word	0x58025430
 8004a5c:	58025444 	.word	0x58025444
 8004a60:	58025458 	.word	0x58025458
 8004a64:	5802546c 	.word	0x5802546c
 8004a68:	58025480 	.word	0x58025480
 8004a6c:	58025494 	.word	0x58025494

08004a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e205      	b.n	8004e8e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e1fa      	b.n	8004e8e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a8c      	ldr	r2, [pc, #560]	; (8004cd0 <HAL_DMA_Abort_IT+0x260>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d04a      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a8b      	ldr	r2, [pc, #556]	; (8004cd4 <HAL_DMA_Abort_IT+0x264>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d045      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a89      	ldr	r2, [pc, #548]	; (8004cd8 <HAL_DMA_Abort_IT+0x268>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d040      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a88      	ldr	r2, [pc, #544]	; (8004cdc <HAL_DMA_Abort_IT+0x26c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d03b      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a86      	ldr	r2, [pc, #536]	; (8004ce0 <HAL_DMA_Abort_IT+0x270>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d036      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a85      	ldr	r2, [pc, #532]	; (8004ce4 <HAL_DMA_Abort_IT+0x274>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d031      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a83      	ldr	r2, [pc, #524]	; (8004ce8 <HAL_DMA_Abort_IT+0x278>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02c      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a82      	ldr	r2, [pc, #520]	; (8004cec <HAL_DMA_Abort_IT+0x27c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d027      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a80      	ldr	r2, [pc, #512]	; (8004cf0 <HAL_DMA_Abort_IT+0x280>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7f      	ldr	r2, [pc, #508]	; (8004cf4 <HAL_DMA_Abort_IT+0x284>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01d      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a7d      	ldr	r2, [pc, #500]	; (8004cf8 <HAL_DMA_Abort_IT+0x288>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7c      	ldr	r2, [pc, #496]	; (8004cfc <HAL_DMA_Abort_IT+0x28c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7a      	ldr	r2, [pc, #488]	; (8004d00 <HAL_DMA_Abort_IT+0x290>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a79      	ldr	r2, [pc, #484]	; (8004d04 <HAL_DMA_Abort_IT+0x294>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a77      	ldr	r2, [pc, #476]	; (8004d08 <HAL_DMA_Abort_IT+0x298>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xc8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a76      	ldr	r2, [pc, #472]	; (8004d0c <HAL_DMA_Abort_IT+0x29c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <HAL_DMA_Abort_IT+0xcc>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_DMA_Abort_IT+0xce>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d065      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a60      	ldr	r2, [pc, #384]	; (8004cd0 <HAL_DMA_Abort_IT+0x260>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a5e      	ldr	r2, [pc, #376]	; (8004cd4 <HAL_DMA_Abort_IT+0x264>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a5d      	ldr	r2, [pc, #372]	; (8004cd8 <HAL_DMA_Abort_IT+0x268>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a5b      	ldr	r2, [pc, #364]	; (8004cdc <HAL_DMA_Abort_IT+0x26c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a5a      	ldr	r2, [pc, #360]	; (8004ce0 <HAL_DMA_Abort_IT+0x270>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a58      	ldr	r2, [pc, #352]	; (8004ce4 <HAL_DMA_Abort_IT+0x274>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a57      	ldr	r2, [pc, #348]	; (8004ce8 <HAL_DMA_Abort_IT+0x278>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a55      	ldr	r2, [pc, #340]	; (8004cec <HAL_DMA_Abort_IT+0x27c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a54      	ldr	r2, [pc, #336]	; (8004cf0 <HAL_DMA_Abort_IT+0x280>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a52      	ldr	r2, [pc, #328]	; (8004cf4 <HAL_DMA_Abort_IT+0x284>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a51      	ldr	r2, [pc, #324]	; (8004cf8 <HAL_DMA_Abort_IT+0x288>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a4f      	ldr	r2, [pc, #316]	; (8004cfc <HAL_DMA_Abort_IT+0x28c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4e      	ldr	r2, [pc, #312]	; (8004d00 <HAL_DMA_Abort_IT+0x290>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a4c      	ldr	r2, [pc, #304]	; (8004d04 <HAL_DMA_Abort_IT+0x294>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a4b      	ldr	r2, [pc, #300]	; (8004d08 <HAL_DMA_Abort_IT+0x298>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_Abort_IT+0x17a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a49      	ldr	r2, [pc, #292]	; (8004d0c <HAL_DMA_Abort_IT+0x29c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <HAL_DMA_Abort_IT+0x18c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e147      	b.n	8004e8c <HAL_DMA_Abort_IT+0x41c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e13e      	b.n	8004e8c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 020e 	bic.w	r2, r2, #14
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <HAL_DMA_Abort_IT+0x260>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d04a      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <HAL_DMA_Abort_IT+0x264>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d045      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_DMA_Abort_IT+0x268>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d040      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <HAL_DMA_Abort_IT+0x26c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d03b      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <HAL_DMA_Abort_IT+0x270>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d036      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_DMA_Abort_IT+0x274>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d031      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a22      	ldr	r2, [pc, #136]	; (8004ce8 <HAL_DMA_Abort_IT+0x278>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d02c      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <HAL_DMA_Abort_IT+0x27c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d027      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_DMA_Abort_IT+0x280>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <HAL_DMA_Abort_IT+0x284>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_DMA_Abort_IT+0x288>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <HAL_DMA_Abort_IT+0x28c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_DMA_Abort_IT+0x290>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <HAL_DMA_Abort_IT+0x294>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <HAL_DMA_Abort_IT+0x298>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x24e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <HAL_DMA_Abort_IT+0x29c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d128      	bne.n	8004d10 <HAL_DMA_Abort_IT+0x2a0>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e027      	b.n	8004d20 <HAL_DMA_Abort_IT+0x2b0>
 8004cd0:	40020010 	.word	0x40020010
 8004cd4:	40020028 	.word	0x40020028
 8004cd8:	40020040 	.word	0x40020040
 8004cdc:	40020058 	.word	0x40020058
 8004ce0:	40020070 	.word	0x40020070
 8004ce4:	40020088 	.word	0x40020088
 8004ce8:	400200a0 	.word	0x400200a0
 8004cec:	400200b8 	.word	0x400200b8
 8004cf0:	40020410 	.word	0x40020410
 8004cf4:	40020428 	.word	0x40020428
 8004cf8:	40020440 	.word	0x40020440
 8004cfc:	40020458 	.word	0x40020458
 8004d00:	40020470 	.word	0x40020470
 8004d04:	40020488 	.word	0x40020488
 8004d08:	400204a0 	.word	0x400204a0
 8004d0c:	400204b8 	.word	0x400204b8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5c      	ldr	r2, [pc, #368]	; (8004e98 <HAL_DMA_Abort_IT+0x428>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d072      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a5b      	ldr	r2, [pc, #364]	; (8004e9c <HAL_DMA_Abort_IT+0x42c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d06d      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a59      	ldr	r2, [pc, #356]	; (8004ea0 <HAL_DMA_Abort_IT+0x430>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d068      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a58      	ldr	r2, [pc, #352]	; (8004ea4 <HAL_DMA_Abort_IT+0x434>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d063      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a56      	ldr	r2, [pc, #344]	; (8004ea8 <HAL_DMA_Abort_IT+0x438>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d05e      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a55      	ldr	r2, [pc, #340]	; (8004eac <HAL_DMA_Abort_IT+0x43c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d059      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a53      	ldr	r2, [pc, #332]	; (8004eb0 <HAL_DMA_Abort_IT+0x440>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d054      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a52      	ldr	r2, [pc, #328]	; (8004eb4 <HAL_DMA_Abort_IT+0x444>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d04f      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a50      	ldr	r2, [pc, #320]	; (8004eb8 <HAL_DMA_Abort_IT+0x448>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d04a      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4f      	ldr	r2, [pc, #316]	; (8004ebc <HAL_DMA_Abort_IT+0x44c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d045      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <HAL_DMA_Abort_IT+0x450>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d040      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a4c      	ldr	r2, [pc, #304]	; (8004ec4 <HAL_DMA_Abort_IT+0x454>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d03b      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	; (8004ec8 <HAL_DMA_Abort_IT+0x458>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d036      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a49      	ldr	r2, [pc, #292]	; (8004ecc <HAL_DMA_Abort_IT+0x45c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d031      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a47      	ldr	r2, [pc, #284]	; (8004ed0 <HAL_DMA_Abort_IT+0x460>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d02c      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a46      	ldr	r2, [pc, #280]	; (8004ed4 <HAL_DMA_Abort_IT+0x464>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d027      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a44      	ldr	r2, [pc, #272]	; (8004ed8 <HAL_DMA_Abort_IT+0x468>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d022      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a43      	ldr	r2, [pc, #268]	; (8004edc <HAL_DMA_Abort_IT+0x46c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d01d      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <HAL_DMA_Abort_IT+0x470>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d018      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <HAL_DMA_Abort_IT+0x474>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3e      	ldr	r2, [pc, #248]	; (8004ee8 <HAL_DMA_Abort_IT+0x478>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a3d      	ldr	r2, [pc, #244]	; (8004eec <HAL_DMA_Abort_IT+0x47c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3b      	ldr	r2, [pc, #236]	; (8004ef0 <HAL_DMA_Abort_IT+0x480>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3a0>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <HAL_DMA_Abort_IT+0x484>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_DMA_Abort_IT+0x3a4>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_DMA_Abort_IT+0x3a6>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d028      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	2201      	movs	r2, #1
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40020010 	.word	0x40020010
 8004e9c:	40020028 	.word	0x40020028
 8004ea0:	40020040 	.word	0x40020040
 8004ea4:	40020058 	.word	0x40020058
 8004ea8:	40020070 	.word	0x40020070
 8004eac:	40020088 	.word	0x40020088
 8004eb0:	400200a0 	.word	0x400200a0
 8004eb4:	400200b8 	.word	0x400200b8
 8004eb8:	40020410 	.word	0x40020410
 8004ebc:	40020428 	.word	0x40020428
 8004ec0:	40020440 	.word	0x40020440
 8004ec4:	40020458 	.word	0x40020458
 8004ec8:	40020470 	.word	0x40020470
 8004ecc:	40020488 	.word	0x40020488
 8004ed0:	400204a0 	.word	0x400204a0
 8004ed4:	400204b8 	.word	0x400204b8
 8004ed8:	58025408 	.word	0x58025408
 8004edc:	5802541c 	.word	0x5802541c
 8004ee0:	58025430 	.word	0x58025430
 8004ee4:	58025444 	.word	0x58025444
 8004ee8:	58025458 	.word	0x58025458
 8004eec:	5802546c 	.word	0x5802546c
 8004ef0:	58025480 	.word	0x58025480
 8004ef4:	58025494 	.word	0x58025494

08004ef8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e04f      	b.n	8004faa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc fae0 	bl	80014e4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <HAL_DMA2D_Init+0xbc>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6851      	ldr	r1, [r2, #4]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	69d2      	ldr	r2, [r2, #28]
 8004f3e:	4311      	orrs	r1, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_DMA2D_Init+0xc0>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6891      	ldr	r1, [r2, #8]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6992      	ldr	r2, [r2, #24]
 8004f5a:	4311      	orrs	r1, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_DMA2D_Init+0xc4>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68d1      	ldr	r1, [r2, #12]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	430b      	orrs	r3, r1
 8004f78:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	051a      	lsls	r2, r3, #20
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	055b      	lsls	r3, r3, #21
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	fff8ffbf 	.word	0xfff8ffbf
 8004fb8:	fffffef8 	.word	0xfffffef8
 8004fbc:	ffff0000 	.word	0xffff0000

08004fc0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d026      	beq.n	8005030 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d021      	beq.n	8005030 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ffa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2204      	movs	r2, #4
 8005014:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d026      	beq.n	8005088 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d021      	beq.n	8005088 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005052:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2220      	movs	r2, #32
 800505a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005060:	f043 0202 	orr.w	r2, r3, #2
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2204      	movs	r2, #4
 800506c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d026      	beq.n	80050e0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005098:	2b00      	cmp	r3, #0
 800509a:	d021      	beq.n	80050e0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050aa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2208      	movs	r2, #8
 80050b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b8:	f043 0204 	orr.w	r2, r3, #4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2204      	movs	r2, #4
 80050c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d013      	beq.n	8005112 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00e      	beq.n	8005112 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2204      	movs	r2, #4
 800510a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f853 	bl	80051b8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d024      	beq.n	8005166 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01f      	beq.n	8005166 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2202      	movs	r2, #2
 800513c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01f      	beq.n	80051b0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01a      	beq.n	80051b0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005188:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2210      	movs	r2, #16
 8005190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f80e 	bl	80051cc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d104      	bne.n	8005202 <HAL_DMA2D_ConfigLayer+0x22>
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_DMA2D_ConfigLayer+0x30>
 800520c:	2302      	movs	r3, #2
 800520e:	e092      	b.n	8005336 <HAL_DMA2D_ConfigLayer+0x156>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	3328      	adds	r3, #40	; 0x28
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4413      	add	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005244:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005250:	4b3c      	ldr	r3, [pc, #240]	; (8005344 <HAL_DMA2D_ConfigLayer+0x164>)
 8005252:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b0a      	cmp	r3, #10
 800525a:	d003      	beq.n	8005264 <HAL_DMA2D_ConfigLayer+0x84>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b09      	cmp	r3, #9
 8005262:	d107      	bne.n	8005274 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e005      	b.n	8005280 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d120      	bne.n	80052c8 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	43db      	mvns	r3, r3
 8005290:	ea02 0103 	and.w	r1, r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	430a      	orrs	r2, r1
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b0a      	cmp	r3, #10
 80052ae:	d003      	beq.n	80052b8 <HAL_DMA2D_ConfigLayer+0xd8>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b09      	cmp	r3, #9
 80052b6:	d135      	bne.n	8005324 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
 80052c6:	e02d      	b.n	8005324 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b0b      	cmp	r3, #11
 80052ce:	d109      	bne.n	80052e4 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	049b      	lsls	r3, r3, #18
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80052e2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	ea02 0103 	and.w	r1, r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b0a      	cmp	r3, #10
 800530c:	d003      	beq.n	8005316 <HAL_DMA2D_ConfigLayer+0x136>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b09      	cmp	r3, #9
 8005314:	d106      	bne.n	8005324 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005322:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	ff33000f 	.word	0xff33000f

08005348 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e0c6      	b.n	80054e8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f009 f8e2 	bl	800e52c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2223      	movs	r2, #35	; 0x23
 800536c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800536e:	4b60      	ldr	r3, [pc, #384]	; (80054f0 <HAL_ETH_Init+0x1a8>)
 8005370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005374:	4a5e      	ldr	r2, [pc, #376]	; (80054f0 <HAL_ETH_Init+0x1a8>)
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800537e:	4b5c      	ldr	r3, [pc, #368]	; (80054f0 <HAL_ETH_Init+0x1a8>)
 8005380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7a1b      	ldrb	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005394:	2000      	movs	r0, #0
 8005396:	f7fe fdf3 	bl	8003f80 <HAL_SYSCFG_ETHInterfaceSelect>
 800539a:	e003      	b.n	80053a4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800539c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80053a0:	f7fe fdee 	bl	8003f80 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053bc:	f7fe fdd4 	bl	8003f68 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053c2:	e00f      	b.n	80053e4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80053c4:	f7fe fdd0 	bl	8003f68 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053d2:	d907      	bls.n	80053e4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2204      	movs	r2, #4
 80053d8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	22e0      	movs	r2, #224	; 0xe0
 80053de:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e081      	b.n	80054e8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 fad8 	bl	80069ac <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80053fc:	f004 fb12 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 8005400:	4603      	mov	r3, r0
 8005402:	4a3c      	ldr	r2, [pc, #240]	; (80054f4 <HAL_ETH_Init+0x1ac>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	0c9a      	lsrs	r2, r3, #18
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3a01      	subs	r2, #1
 8005410:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fa2b 	bl	8006870 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005430:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005434:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	22e0      	movs	r2, #224	; 0xe0
 800544c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e04a      	b.n	80054e8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	f241 1308 	movw	r3, #4360	; 0x1108
 800545a:	4413      	add	r3, r2
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <HAL_ETH_Init+0x1b0>)
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6952      	ldr	r2, [r2, #20]
 8005466:	0052      	lsls	r2, r2, #1
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	6809      	ldr	r1, [r1, #0]
 800546c:	431a      	orrs	r2, r3
 800546e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005472:	440b      	add	r3, r1
 8005474:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 faf0 	bl	8006a5c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 fb34 	bl	8006aea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	3305      	adds	r3, #5
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	3304      	adds	r3, #4
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	4619      	mov	r1, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	3303      	adds	r3, #3
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	061a      	lsls	r2, r3, #24
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	3302      	adds	r3, #2
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	3301      	adds	r3, #1
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2210      	movs	r2, #16
 80054de:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2210      	movs	r2, #16
 80054e4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	58024400 	.word	0x58024400
 80054f4:	431bde83 	.word	0x431bde83
 80054f8:	ffff8001 	.word	0xffff8001

080054fc <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	3310      	adds	r3, #16
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_ETH_DescAssignMemory+0x28>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d904      	bls.n	800552e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e021      	b.n	8005572 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558a:	2b10      	cmp	r3, #16
 800558c:	d174      	bne.n	8005678 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2223      	movs	r2, #35	; 0x23
 8005592:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e00f      	b.n	80055ba <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3310      	adds	r3, #16
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d9ec      	bls.n	800559a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0202 	orr.w	r2, r2, #2
 80055d4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8005602:	4413      	add	r3, r2
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6811      	ldr	r1, [r2, #0]
 800560a:	f043 0201 	orr.w	r2, r3, #1
 800560e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005612:	440b      	add	r3, r1
 8005614:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f241 1308 	movw	r3, #4360	; 0x1108
 800561e:	4413      	add	r3, r2
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6811      	ldr	r1, [r2, #0]
 8005626:	f043 0201 	orr.w	r2, r3, #1
 800562a:	f241 1308 	movw	r3, #4360	; 0x1108
 800562e:	440b      	add	r3, r1
 8005630:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8005644:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005648:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	f241 1334 	movw	r3, #4404	; 0x1134
 8005652:	4413      	add	r3, r2
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6811      	ldr	r1, [r2, #0]
 800565a:	f24d 0241 	movw	r2, #53313	; 0xd041
 800565e:	431a      	orrs	r2, r3
 8005660:	f241 1334 	movw	r3, #4404	; 0x1134
 8005664:	440b      	add	r3, r1
 8005666:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2210      	movs	r2, #16
 800566c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2222      	movs	r2, #34	; 0x22
 8005672:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	e000      	b.n	800567a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d067      	beq.n	8005768 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2223      	movs	r2, #35	; 0x23
 800569c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	f241 1334 	movw	r3, #4404	; 0x1134
 80056a6:	4413      	add	r3, r2
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6811      	ldr	r1, [r2, #0]
 80056ae:	4a32      	ldr	r2, [pc, #200]	; (8005778 <HAL_ETH_Stop_IT+0xf0>)
 80056b0:	401a      	ands	r2, r3
 80056b2:	f241 1334 	movw	r3, #4404	; 0x1134
 80056b6:	440b      	add	r3, r1
 80056b8:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	f241 1304 	movw	r3, #4356	; 0x1104
 80056c2:	4413      	add	r3, r2
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6811      	ldr	r1, [r2, #0]
 80056ca:	f023 0201 	bic.w	r2, r3, #1
 80056ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80056d2:	440b      	add	r3, r1
 80056d4:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	f241 1308 	movw	r3, #4360	; 0x1108
 80056de:	4413      	add	r3, r2
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6811      	ldr	r1, [r2, #0]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80056ee:	440b      	add	r3, r1
 80056f0:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0202 	bic.w	r2, r2, #2
 8005724:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e00f      	b.n	800574c <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3310      	adds	r3, #16
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d9ec      	bls.n	800572c <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2210      	movs	r2, #16
 800575c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2210      	movs	r2, #16
 8005762:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	e000      	b.n	800576a <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	ffff2fbe 	.word	0xffff2fbe

0800577c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005792:	f043 0201 	orr.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e073      	b.n	8005886 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d16e      	bne.n	8005884 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80057a6:	2200      	movs	r2, #0
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f001 f9fa 	bl	8006ba4 <ETH_Prepare_Tx_Descriptors>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	f043 0202 	orr.w	r2, r3, #2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e05f      	b.n	8005886 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3206      	adds	r2, #6
 80057ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	629a      	str	r2, [r3, #40]	; 0x28
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d904      	bls.n	80057f0 <HAL_ETH_Transmit+0x74>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	1f1a      	subs	r2, r3, #4
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	3106      	adds	r1, #6
 80057fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005800:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005804:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8005806:	f7fe fbaf 	bl	8003f68 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800580c:	e034      	b.n	8005878 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d011      	beq.n	8005844 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005824:	f043 0208 	orr.w	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	22e0      	movs	r2, #224	; 0xe0
 800583e:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e020      	b.n	8005886 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d015      	beq.n	8005878 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800584c:	f7fe fb8c 	bl	8003f68 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <HAL_ETH_Transmit+0xe6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005866:	f043 0204 	orr.w	r2, r3, #4
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	22e0      	movs	r2, #224	; 0xe0
 8005872:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e006      	b.n	8005886 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	dbc6      	blt.n	800580e <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800588e:	b480      	push	{r7}
 8005890:	b089      	sub	sp, #36	; 0x24
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3344      	adds	r3, #68	; 0x44
 800589a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d06b      	beq.n	8005998 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e0ce      	b.n	8005a62 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	3301      	adds	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d036      	beq.n	8005944 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	3301      	adds	r3, #1
 80058da:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3301      	adds	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d902      	bls.n	80058f8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005900:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	db11      	blt.n	800592e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00b      	beq.n	800592e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2201      	movs	r2, #1
 800591a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d902      	bls.n	800592e <HAL_ETH_IsRxDataAvailable+0xa0>
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	3b04      	subs	r3, #4
 800592c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8005940:	2301      	movs	r3, #1
 8005942:	e08e      	b.n	8005a62 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d012      	beq.n	8005976 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8005954:	2301      	movs	r3, #1
 8005956:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d902      	bls.n	800596a <HAL_ETH_IsRxDataAvailable+0xdc>
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	3b04      	subs	r3, #4
 8005968:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e010      	b.n	8005998 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3301      	adds	r3, #1
 800597a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d902      	bls.n	800598e <HAL_ETH_IsRxDataAvailable+0x100>
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3b04      	subs	r3, #4
 800598c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005996:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	db02      	blt.n	80059a6 <HAL_ETH_IsRxDataAvailable+0x118>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d98e      	bls.n	80058c4 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d056      	beq.n	8005a5a <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e03b      	b.n	8005a44 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059da:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d20d      	bcs.n	8005a3e <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d902      	bls.n	8005a34 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3c:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3301      	adds	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3bf      	bcc.n	80059cc <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	f241 1328 	movw	r3, #4392	; 0x1128
 8005a56:	440b      	add	r3, r1
 8005a58:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	619a      	str	r2, [r3, #24]

  return 0;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3724      	adds	r7, #36	; 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08a      	sub	sp, #40	; 0x28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3344      	adds	r3, #68	; 0x44
 8005a7c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a90:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e07d      	b.n	8005ba2 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff feed 	bl	800588e <HAL_ETH_IsRxDataAvailable>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e071      	b.n	8005ba2 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	e031      	b.n	8005b38 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	461a      	mov	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b0e:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	3301      	adds	r3, #1
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d902      	bls.n	8005b22 <HAL_ETH_GetRxDataBuffer+0xb4>
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	3b04      	subs	r3, #4
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2a:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	3301      	adds	r3, #1
 8005b36:	623b      	str	r3, [r7, #32]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	6a3a      	ldr	r2, [r7, #32]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3c7      	bcc.n	8005ad4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	461a      	mov	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d803      	bhi.n	8005b6e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
 8005b6c:	e018      	b.n	8005ba0 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d012      	beq.n	8005b9c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	1ad2      	subs	r2, r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	e001      	b.n	8005ba0 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3728      	adds	r7, #40	; 0x28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3344      	adds	r3, #68	; 0x44
 8005bb8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fe60 	bl	800588e <HAL_ETH_IsRxDataAvailable>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e017      	b.n	8005c08 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	3b01      	subs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d902      	bls.n	8005bf0 <HAL_ETH_GetRxDataLength+0x46>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3344      	adds	r3, #68	; 0x44
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e057      	b.n	8005cf0 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e03b      	b.n	8005ccc <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c62:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d20d      	bcs.n	8005cc6 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d902      	bls.n	8005cbc <HAL_ETH_BuildRxDescriptors+0xac>
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	3b04      	subs	r3, #4
 8005cba:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d3bf      	bcc.n	8005c54 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	f241 1328 	movw	r3, #4392	; 0x1128
 8005cde:	440b      	add	r3, r1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3724      	adds	r7, #36	; 0x24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d113      	bne.n	8005d3e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f241 1334 	movw	r3, #4404	; 0x1134
 8005d1e:	4413      	add	r3, r2
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	d109      	bne.n	8005d3e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f008 fcb2 	bl	800e694 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005d38:	f248 0240 	movw	r2, #32832	; 0x8040
 8005d3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d113      	bne.n	8005d78 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	f241 1334 	movw	r3, #4404	; 0x1134
 8005d58:	4413      	add	r3, r2
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d109      	bne.n	8005d78 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f8b7 	bl	8005ed8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005d72:	f248 0201 	movw	r2, #32769	; 0x8001
 8005d76:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d8a:	d149      	bne.n	8005e20 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	f241 1334 	movw	r3, #4404	; 0x1134
 8005d94:	4413      	add	r3, r2
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005da0:	d13e      	bne.n	8005e20 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	f043 0208 	orr.w	r2, r3, #8
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d11b      	bne.n	8005dfa <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f241 1302 	movw	r3, #4354	; 0x1102
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	f241 1334 	movw	r3, #4404	; 0x1134
 8005dde:	4413      	add	r3, r2
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6811      	ldr	r1, [r2, #0]
 8005de6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dea:	f241 1334 	movw	r3, #4404	; 0x1134
 8005dee:	440b      	add	r3, r1
 8005df0:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	22e0      	movs	r2, #224	; 0xe0
 8005df6:	66da      	str	r2, [r3, #108]	; 0x6c
 8005df8:	e00f      	b.n	8005e1a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005e14:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8005e18:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f866 	bl	8005eec <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e28:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005e2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e30:	d10e      	bne.n	8005e50 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	22e0      	movs	r2, #224	; 0xe0
 8005e42:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f85b 	bl	8005f00 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d10f      	bne.n	8005e80 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e68:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f84e 	bl	8005f14 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d10f      	bne.n	8005eb0 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f840 	bl	8005f28 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <HAL_ETH_IRQHandler+0x1d8>)
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005ebc:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <HAL_ETH_IRQHandler+0x1d8>)
 8005ebe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f839 	bl	8005f3c <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	58000080 	.word	0x58000080

08005ed8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e03e      	b.n	8005ff0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f7a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	055b      	lsls	r3, r3, #21
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	041b      	lsls	r3, r3, #16
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f043 030c 	orr.w	r3, r3, #12
 8005f9e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005fb2:	f7fd ffd9 	bl	8003f68 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005fb8:	e009      	b.n	8005fce <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8005fba:	f7fd ffd5 	bl	8003f68 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc8:	d901      	bls.n	8005fce <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e010      	b.n	8005ff0 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1ed      	bne.n	8005fba <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e03c      	b.n	8006094 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006022:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	055b      	lsls	r3, r3, #21
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 030c 	bic.w	r3, r3, #12
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	b29a      	uxth	r2, r3
 8006058:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_ETH_WritePHYRegister+0xa4>)
 800605a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800605e:	4a0f      	ldr	r2, [pc, #60]	; (800609c <HAL_ETH_WritePHYRegister+0xa4>)
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006066:	f7fd ff7f 	bl	8003f68 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800606c:	e009      	b.n	8006082 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800606e:	f7fd ff7b 	bl	8003f68 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800607c:	d901      	bls.n	8006082 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e008      	b.n	8006094 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1ed      	bne.n	800606e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40028000 	.word	0x40028000

080060a0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e1c3      	b.n	800643c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 020c 	and.w	r2, r3, #12
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf0c      	ite	eq
 80060fa:	2301      	moveq	r3, #1
 80060fc:	2300      	movne	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf14      	ite	ne
 8006116:	2301      	movne	r3, #1
 8006118:	2300      	moveq	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612c:	2b00      	cmp	r3, #0
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf14      	ite	ne
 800614a:	2301      	movne	r3, #1
 800614c:	2300      	moveq	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006160:	2b00      	cmp	r3, #0
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006196:	2b00      	cmp	r3, #0
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bf0c      	ite	eq
 80061ce:	2301      	moveq	r3, #1
 80061d0:	2300      	movne	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	2b00      	cmp	r3, #0
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	461a      	mov	r2, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	0e5b      	lsrs	r3, r3, #25
 80062fe:	f003 021f 	and.w	r2, r3, #31
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 020f 	and.w	r2, r3, #15
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	b29a      	uxth	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80063c8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80063d8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf14      	ite	ne
 800640e:	2301      	movne	r3, #1
 8006410:	2300      	moveq	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e00a      	b.n	8006472 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006460:	2b10      	cmp	r3, #16
 8006462:	d105      	bne.n	8006470 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f860 	bl	800652c <ETH_SetMACConfig>

    return HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	e000      	b.n	8006472 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
  }
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800648c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006494:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006496:	f003 fac5 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 800649a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d908      	bls.n	80064b6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d804      	bhi.n	80064b6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e027      	b.n	8006506 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4a18      	ldr	r2, [pc, #96]	; (800651c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d908      	bls.n	80064d0 <HAL_ETH_SetMDIOClockRange+0x54>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a17      	ldr	r2, [pc, #92]	; (8006520 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d204      	bcs.n	80064d0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e01a      	b.n	8006506 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4a13      	ldr	r2, [pc, #76]	; (8006520 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d303      	bcc.n	80064e0 <HAL_ETH_SetMDIOClockRange+0x64>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a12      	ldr	r2, [pc, #72]	; (8006524 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d911      	bls.n	8006504 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a10      	ldr	r2, [pc, #64]	; (8006524 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d908      	bls.n	80064fa <HAL_ETH_SetMDIOClockRange+0x7e>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a0f      	ldr	r2, [pc, #60]	; (8006528 <HAL_ETH_SetMDIOClockRange+0xac>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d804      	bhi.n	80064fa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e005      	b.n	8006506 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e000      	b.n	8006506 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006504:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	01312cff 	.word	0x01312cff
 800651c:	02160ebf 	.word	0x02160ebf
 8006520:	03938700 	.word	0x03938700
 8006524:	05f5e0ff 	.word	0x05f5e0ff
 8006528:	08f0d17f 	.word	0x08f0d17f

0800652c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800653e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	791b      	ldrb	r3, [r3, #4]
 8006544:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8006546:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	7b1b      	ldrb	r3, [r3, #12]
 800654c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800654e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	7b5b      	ldrb	r3, [r3, #13]
 8006554:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006556:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	7b9b      	ldrb	r3, [r3, #14]
 800655c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800655e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	7bdb      	ldrb	r3, [r3, #15]
 8006564:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006566:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	7c12      	ldrb	r2, [r2, #16]
 800656c:	2a00      	cmp	r2, #0
 800656e:	d102      	bne.n	8006576 <ETH_SetMACConfig+0x4a>
 8006570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006574:	e000      	b.n	8006578 <ETH_SetMACConfig+0x4c>
 8006576:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006578:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	7c52      	ldrb	r2, [r2, #17]
 800657e:	2a00      	cmp	r2, #0
 8006580:	d102      	bne.n	8006588 <ETH_SetMACConfig+0x5c>
 8006582:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006586:	e000      	b.n	800658a <ETH_SetMACConfig+0x5e>
 8006588:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800658a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	7c9b      	ldrb	r3, [r3, #18]
 8006590:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006592:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006598:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800659e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	7f1b      	ldrb	r3, [r3, #28]
 80065a4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80065a6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	7f5b      	ldrb	r3, [r3, #29]
 80065ac:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80065ae:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	7f92      	ldrb	r2, [r2, #30]
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d102      	bne.n	80065be <ETH_SetMACConfig+0x92>
 80065b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065bc:	e000      	b.n	80065c0 <ETH_SetMACConfig+0x94>
 80065be:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80065c0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	7fdb      	ldrb	r3, [r3, #31]
 80065c6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80065c8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d102      	bne.n	80065da <ETH_SetMACConfig+0xae>
 80065d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065d8:	e000      	b.n	80065dc <ETH_SetMACConfig+0xb0>
 80065da:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80065dc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80065e2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ea:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80065ec:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b56      	ldr	r3, [pc, #344]	; (8006758 <ETH_SetMACConfig+0x22c>)
 80065fe:	4013      	ands	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	68f9      	ldr	r1, [r7, #12]
 8006606:	430b      	orrs	r3, r1
 8006608:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006616:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006618:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006620:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006622:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800662a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800662c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006634:	2a00      	cmp	r2, #0
 8006636:	d102      	bne.n	800663e <ETH_SetMACConfig+0x112>
 8006638:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800663c:	e000      	b.n	8006640 <ETH_SetMACConfig+0x114>
 800663e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006640:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4b42      	ldr	r3, [pc, #264]	; (800675c <ETH_SetMACConfig+0x230>)
 8006652:	4013      	ands	r3, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	68f9      	ldr	r1, [r7, #12]
 800665a:	430b      	orrs	r3, r1
 800665c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006664:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	4b3a      	ldr	r3, [pc, #232]	; (8006760 <ETH_SetMACConfig+0x234>)
 8006676:	4013      	ands	r3, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	68f9      	ldr	r1, [r7, #12]
 800667e:	430b      	orrs	r3, r1
 8006680:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006688:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800668e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006696:	2a00      	cmp	r2, #0
 8006698:	d101      	bne.n	800669e <ETH_SetMACConfig+0x172>
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	e000      	b.n	80066a0 <ETH_SetMACConfig+0x174>
 800669e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80066a0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80066b6:	4013      	ands	r3, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	68f9      	ldr	r1, [r7, #12]
 80066be:	430b      	orrs	r3, r1
 80066c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80066c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80066d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066de:	f023 0103 	bic.w	r1, r3, #3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80066f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006712:	2a00      	cmp	r2, #0
 8006714:	d101      	bne.n	800671a <ETH_SetMACConfig+0x1ee>
 8006716:	2240      	movs	r2, #64	; 0x40
 8006718:	e000      	b.n	800671c <ETH_SetMACConfig+0x1f0>
 800671a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800671c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006724:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006726:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800672e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800673c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	430a      	orrs	r2, r1
 8006748:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	00048083 	.word	0x00048083
 800675c:	c0f88000 	.word	0xc0f88000
 8006760:	fffffef0 	.word	0xfffffef0

08006764 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	4b38      	ldr	r3, [pc, #224]	; (800685c <ETH_SetDMAConfig+0xf8>)
 800677a:	4013      	ands	r3, r2
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	6809      	ldr	r1, [r1, #0]
 8006784:	431a      	orrs	r2, r3
 8006786:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800678a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	791b      	ldrb	r3, [r3, #4]
 8006790:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006796:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	7b1b      	ldrb	r3, [r3, #12]
 800679c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f241 0304 	movw	r3, #4100	; 0x1004
 80067aa:	4413      	add	r3, r2
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b2c      	ldr	r3, [pc, #176]	; (8006860 <ETH_SetDMAConfig+0xfc>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6811      	ldr	r1, [r2, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80067be:	440b      	add	r3, r1
 80067c0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	7b5b      	ldrb	r3, [r3, #13]
 80067c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b22      	ldr	r3, [pc, #136]	; (8006864 <ETH_SetDMAConfig+0x100>)
 80067dc:	4013      	ands	r3, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6811      	ldr	r1, [r2, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	431a      	orrs	r2, r3
 80067e6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80067ea:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	7d1b      	ldrb	r3, [r3, #20]
 80067f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80067f6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	7f5b      	ldrb	r3, [r3, #29]
 80067fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	f241 1304 	movw	r3, #4356	; 0x1104
 800680a:	4413      	add	r3, r2
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b16      	ldr	r3, [pc, #88]	; (8006868 <ETH_SetDMAConfig+0x104>)
 8006810:	4013      	ands	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6811      	ldr	r1, [r2, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	431a      	orrs	r2, r3
 800681a:	f241 1304 	movw	r3, #4356	; 0x1104
 800681e:	440b      	add	r3, r1
 8006820:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	7f1b      	ldrb	r3, [r3, #28]
 8006826:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	f241 1308 	movw	r3, #4360	; 0x1108
 8006838:	4413      	add	r3, r2
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b0b      	ldr	r3, [pc, #44]	; (800686c <ETH_SetDMAConfig+0x108>)
 800683e:	4013      	ands	r3, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6811      	ldr	r1, [r2, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	431a      	orrs	r2, r3
 8006848:	f241 1308 	movw	r3, #4360	; 0x1108
 800684c:	440b      	add	r3, r1
 800684e:	601a      	str	r2, [r3, #0]
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	ffff87fd 	.word	0xffff87fd
 8006860:	ffff2ffe 	.word	0xffff2ffe
 8006864:	fffec000 	.word	0xfffec000
 8006868:	ffc0efef 	.word	0xffc0efef
 800686c:	7fc0ffff 	.word	0x7fc0ffff

08006870 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b0a4      	sub	sp, #144	; 0x90
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800687e:	2300      	movs	r3, #0
 8006880:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006888:	2300      	movs	r3, #0
 800688a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006894:	2301      	movs	r3, #1
 8006896:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80068ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80068c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80068cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80068d4:	2300      	movs	r3, #0
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80068de:	2300      	movs	r3, #0
 80068e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80068ea:	2300      	movs	r3, #0
 80068ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80068f2:	2300      	movs	r3, #0
 80068f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006908:	2320      	movs	r3, #32
 800690a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006914:	2300      	movs	r3, #0
 8006916:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800691a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006924:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006926:	2300      	movs	r3, #0
 8006928:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800692c:	2302      	movs	r3, #2
 800692e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006932:	2300      	movs	r3, #0
 8006934:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800693e:	2300      	movs	r3, #0
 8006940:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800694a:	2300      	movs	r3, #0
 800694c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fde6 	bl	800652c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006960:	2301      	movs	r3, #1
 8006962:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006964:	2301      	movs	r3, #1
 8006966:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006968:	2300      	movs	r3, #0
 800696a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006972:	2300      	movs	r3, #0
 8006974:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006976:	2300      	movs	r3, #0
 8006978:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800697a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800697e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006980:	2300      	movs	r3, #0
 8006982:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006984:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006988:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800698a:	2300      	movs	r3, #0
 800698c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006990:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006996:	f107 0308 	add.w	r3, r7, #8
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff fee1 	bl	8006764 <ETH_SetDMAConfig>
}
 80069a2:	bf00      	nop
 80069a4:	3790      	adds	r7, #144	; 0x90
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80069c6:	f003 f82d 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 80069ca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a1e      	ldr	r2, [pc, #120]	; (8006a48 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d908      	bls.n	80069e6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4a1d      	ldr	r2, [pc, #116]	; (8006a4c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d804      	bhi.n	80069e6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e027      	b.n	8006a36 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d908      	bls.n	8006a00 <ETH_MAC_MDIO_ClkConfig+0x54>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d204      	bcs.n	8006a00 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	e01a      	b.n	8006a36 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d303      	bcc.n	8006a10 <ETH_MAC_MDIO_ClkConfig+0x64>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4a12      	ldr	r2, [pc, #72]	; (8006a54 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d911      	bls.n	8006a34 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4a10      	ldr	r2, [pc, #64]	; (8006a54 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d908      	bls.n	8006a2a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4a0f      	ldr	r2, [pc, #60]	; (8006a58 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d804      	bhi.n	8006a2a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e005      	b.n	8006a36 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e000      	b.n	8006a36 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006a34:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	01312cff 	.word	0x01312cff
 8006a4c:	02160ebf 	.word	0x02160ebf
 8006a50:	03938700 	.word	0x03938700
 8006a54:	05f5e0ff 	.word	0x05f5e0ff
 8006a58:	08f0d17f 	.word	0x08f0d17f

08006a5c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e01d      	b.n	8006aa6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68d9      	ldr	r1, [r3, #12]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4613      	mov	r3, r2
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	440b      	add	r3, r1
 8006a7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2200      	movs	r2, #0
 8006a86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	3206      	adds	r2, #6
 8006a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d9de      	bls.n	8006a6a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	f241 132c 	movw	r3, #4396	; 0x112c
 8006aba:	4413      	add	r3, r2
 8006abc:	2203      	movs	r2, #3
 8006abe:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68d9      	ldr	r1, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	f241 1314 	movw	r3, #4372	; 0x1114
 8006acc:	4413      	add	r3, r2
 8006ace:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006adc:	601a      	str	r2, [r3, #0]
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e024      	b.n	8006b42 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6919      	ldr	r1, [r3, #16]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4613      	mov	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	440b      	add	r3, r1
 8006b08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3310      	adds	r3, #16
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d9d7      	bls.n	8006af8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f241 1330 	movw	r3, #4400	; 0x1130
 8006b6e:	4413      	add	r3, r2
 8006b70:	2203      	movs	r2, #3
 8006b72:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6919      	ldr	r1, [r3, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	f241 131c 	movw	r3, #4380	; 0x111c
 8006b80:	4413      	add	r3, r2
 8006b82:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	f241 1328 	movw	r3, #4392	; 0x1128
 8006b94:	4413      	add	r3, r2
 8006b96:	6019      	str	r1, [r3, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b08d      	sub	sp, #52	; 0x34
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3318      	adds	r3, #24
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006be6:	d007      	beq.n	8006bf8 <ETH_Prepare_Tx_Descriptors+0x54>
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	3304      	adds	r3, #4
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e24a      	b.n	8007092 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d044      	beq.n	8006c92 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	4b72      	ldr	r3, [pc, #456]	; (8006dd8 <ETH_Prepare_Tx_Descriptors+0x234>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c14:	431a      	orrs	r2, r3
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c34:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d027      	beq.n	8006c92 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c80:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006c90:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0310 	and.w	r3, r3, #16
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00e      	beq.n	8006cbc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	4b4e      	ldr	r3, [pc, #312]	; (8006ddc <ETH_Prepare_Tx_Descriptors+0x238>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	6992      	ldr	r2, [r2, #24]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <ETH_Prepare_Tx_Descriptors+0x130>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d030      	beq.n	8006d36 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	3301      	adds	r3, #1
 8006cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d902      	bls.n	8006cfe <ETH_Prepare_Tx_Descriptors+0x15a>
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	3b04      	subs	r3, #4
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d06:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d1a:	d10c      	bne.n	8006d36 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8006d32:	2302      	movs	r3, #2
 8006d34:	e1ad      	b.n	8007092 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	3301      	adds	r3, #1
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <ETH_Prepare_Tx_Descriptors+0x238>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	6852      	ldr	r2, [r2, #4]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d012      	beq.n	8006d86 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	4b1a      	ldr	r3, [pc, #104]	; (8006de0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	6852      	ldr	r2, [r2, #4]
 8006d7c:	0412      	lsls	r2, r2, #16
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	e008      	b.n	8006d98 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	6a3a      	ldr	r2, [r7, #32]
 8006d96:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d021      	beq.n	8006de8 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	04db      	lsls	r3, r3, #19
 8006db2:	431a      	orrs	r2, r3
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	69d2      	ldr	r2, [r2, #28]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	e02e      	b.n	8006e36 <ETH_Prepare_Tx_Descriptors+0x292>
 8006dd8:	ffff0000 	.word	0xffff0000
 8006ddc:	ffffc000 	.word	0xffffc000
 8006de0:	c000ffff 	.word	0xc000ffff
 8006de4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	4b93      	ldr	r3, [pc, #588]	; (800703c <ETH_Prepare_Tx_Descriptors+0x498>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	6852      	ldr	r2, [r2, #4]
 8006df4:	431a      	orrs	r2, r3
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	431a      	orrs	r2, r3
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 80cb 	beq.w	800701c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006e98:	e0c0      	b.n	800701c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d902      	bls.n	8006eb8 <ETH_Prepare_Tx_Descriptors+0x314>
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	3b04      	subs	r3, #4
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eda:	d007      	beq.n	8006eec <ETH_Prepare_Tx_Descriptors+0x348>
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d026      	beq.n	8006f3a <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
 8006efe:	e016      	b.n	8006f2e <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	3301      	adds	r3, #1
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d902      	bls.n	8006f1e <ETH_Prepare_Tx_Descriptors+0x37a>
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	3b04      	subs	r3, #4
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f26:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d3e4      	bcc.n	8006f00 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8006f36:	2302      	movs	r3, #2
 8006f38:	e0ab      	b.n	8007092 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	4b3a      	ldr	r3, [pc, #232]	; (8007040 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	69fa      	ldr	r2, [r7, #28]
 8006f5a:	6852      	ldr	r2, [r2, #4]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d012      	beq.n	8006f90 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	6852      	ldr	r2, [r2, #4]
 8006f86:	0412      	lsls	r2, r2, #16
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	609a      	str	r2, [r3, #8]
 8006f8e:	e008      	b.n	8006fa2 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	2200      	movs	r2, #0
 8006f94:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	4b2a      	ldr	r3, [pc, #168]	; (8007044 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00f      	beq.n	8006fce <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	4b25      	ldr	r3, [pc, #148]	; (8007048 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	69d2      	ldr	r2, [r2, #28]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	60da      	str	r2, [r3, #12]
 8006fcc:	e017      	b.n	8006ffe <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	4b1a      	ldr	r3, [pc, #104]	; (800703c <ETH_Prepare_Tx_Descriptors+0x498>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	6852      	ldr	r2, [r2, #4]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	3301      	adds	r3, #1
 8007002:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f47f af3a 	bne.w	8006e9a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00f      	beq.n	800704c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	609a      	str	r2, [r3, #8]
 8007038:	e00e      	b.n	8007058 <ETH_Prepare_Tx_Descriptors+0x4b4>
 800703a:	bf00      	nop
 800703c:	ffff8000 	.word	0xffff8000
 8007040:	ffffc000 	.word	0xffffc000
 8007044:	c000ffff 	.word	0xc000ffff
 8007048:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007068:	6979      	ldr	r1, [r7, #20]
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	3304      	adds	r3, #4
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007078:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800707a:	b672      	cpsid	i
}
 800707c:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	4413      	add	r3, r2
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800708c:	b662      	cpsie	i
}
 800708e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3734      	adds	r7, #52	; 0x34
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b089      	sub	sp, #36	; 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80070ae:	4b86      	ldr	r3, [pc, #536]	; (80072c8 <HAL_GPIO_Init+0x228>)
 80070b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070b2:	e18c      	b.n	80073ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	2101      	movs	r1, #1
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	4013      	ands	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 817e 	beq.w	80073c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d005      	beq.n	80070e4 <HAL_GPIO_Init+0x44>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d130      	bne.n	8007146 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	2203      	movs	r2, #3
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800711a:	2201      	movs	r2, #1
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	43db      	mvns	r3, r3
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	4013      	ands	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	091b      	lsrs	r3, r3, #4
 8007130:	f003 0201 	and.w	r2, r3, #1
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4313      	orrs	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b03      	cmp	r3, #3
 8007150:	d017      	beq.n	8007182 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	2203      	movs	r2, #3
 800715e:	fa02 f303 	lsl.w	r3, r2, r3
 8007162:	43db      	mvns	r3, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4013      	ands	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	4313      	orrs	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d123      	bne.n	80071d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	08da      	lsrs	r2, r3, #3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3208      	adds	r2, #8
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	220f      	movs	r2, #15
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43db      	mvns	r3, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4013      	ands	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	fa02 f303 	lsl.w	r3, r2, r3
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	08da      	lsrs	r2, r3, #3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3208      	adds	r2, #8
 80071d0:	69b9      	ldr	r1, [r7, #24]
 80071d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	2203      	movs	r2, #3
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43db      	mvns	r3, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4013      	ands	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f003 0203 	and.w	r2, r3, #3
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	fa02 f303 	lsl.w	r3, r2, r3
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	4313      	orrs	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80d8 	beq.w	80073c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007218:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <HAL_GPIO_Init+0x22c>)
 800721a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800721e:	4a2b      	ldr	r2, [pc, #172]	; (80072cc <HAL_GPIO_Init+0x22c>)
 8007220:	f043 0302 	orr.w	r3, r3, #2
 8007224:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007228:	4b28      	ldr	r3, [pc, #160]	; (80072cc <HAL_GPIO_Init+0x22c>)
 800722a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007236:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <HAL_GPIO_Init+0x230>)
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	089b      	lsrs	r3, r3, #2
 800723c:	3302      	adds	r3, #2
 800723e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	220f      	movs	r2, #15
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	43db      	mvns	r3, r3
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	4013      	ands	r3, r2
 8007258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <HAL_GPIO_Init+0x234>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d04a      	beq.n	80072f8 <HAL_GPIO_Init+0x258>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <HAL_GPIO_Init+0x238>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d02b      	beq.n	80072c2 <HAL_GPIO_Init+0x222>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <HAL_GPIO_Init+0x23c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d025      	beq.n	80072be <HAL_GPIO_Init+0x21e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a1a      	ldr	r2, [pc, #104]	; (80072e0 <HAL_GPIO_Init+0x240>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01f      	beq.n	80072ba <HAL_GPIO_Init+0x21a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a19      	ldr	r2, [pc, #100]	; (80072e4 <HAL_GPIO_Init+0x244>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d019      	beq.n	80072b6 <HAL_GPIO_Init+0x216>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <HAL_GPIO_Init+0x248>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <HAL_GPIO_Init+0x212>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a17      	ldr	r2, [pc, #92]	; (80072ec <HAL_GPIO_Init+0x24c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00d      	beq.n	80072ae <HAL_GPIO_Init+0x20e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <HAL_GPIO_Init+0x250>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d007      	beq.n	80072aa <HAL_GPIO_Init+0x20a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <HAL_GPIO_Init+0x254>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d101      	bne.n	80072a6 <HAL_GPIO_Init+0x206>
 80072a2:	2309      	movs	r3, #9
 80072a4:	e029      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072a6:	230a      	movs	r3, #10
 80072a8:	e027      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072aa:	2307      	movs	r3, #7
 80072ac:	e025      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072ae:	2306      	movs	r3, #6
 80072b0:	e023      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072b2:	2305      	movs	r3, #5
 80072b4:	e021      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072b6:	2304      	movs	r3, #4
 80072b8:	e01f      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072ba:	2303      	movs	r3, #3
 80072bc:	e01d      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072be:	2302      	movs	r3, #2
 80072c0:	e01b      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e019      	b.n	80072fa <HAL_GPIO_Init+0x25a>
 80072c6:	bf00      	nop
 80072c8:	58000080 	.word	0x58000080
 80072cc:	58024400 	.word	0x58024400
 80072d0:	58000400 	.word	0x58000400
 80072d4:	58020000 	.word	0x58020000
 80072d8:	58020400 	.word	0x58020400
 80072dc:	58020800 	.word	0x58020800
 80072e0:	58020c00 	.word	0x58020c00
 80072e4:	58021000 	.word	0x58021000
 80072e8:	58021400 	.word	0x58021400
 80072ec:	58021800 	.word	0x58021800
 80072f0:	58021c00 	.word	0x58021c00
 80072f4:	58022400 	.word	0x58022400
 80072f8:	2300      	movs	r3, #0
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	f002 0203 	and.w	r2, r2, #3
 8007300:	0092      	lsls	r2, r2, #2
 8007302:	4093      	lsls	r3, r2
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	4313      	orrs	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800730a:	4938      	ldr	r1, [pc, #224]	; (80073ec <HAL_GPIO_Init+0x34c>)
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	089b      	lsrs	r3, r3, #2
 8007310:	3302      	adds	r3, #2
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	43db      	mvns	r3, r3
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	4013      	ands	r3, r2
 8007328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800733e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	43db      	mvns	r3, r3
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4013      	ands	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800736c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	43db      	mvns	r3, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4013      	ands	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	43db      	mvns	r3, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	3301      	adds	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f47f ae6b 	bne.w	80070b4 <HAL_GPIO_Init+0x14>
  }
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	3724      	adds	r7, #36	; 0x24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	58000400 	.word	0x58000400

080073f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	807b      	strh	r3, [r7, #2]
 80073fc:	4613      	mov	r3, r2
 80073fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007400:	787b      	ldrb	r3, [r7, #1]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007406:	887a      	ldrh	r2, [r7, #2]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800740c:	e003      	b.n	8007416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800740e:	887b      	ldrh	r3, [r7, #2]
 8007410:	041a      	lsls	r2, r3, #16
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	619a      	str	r2, [r3, #24]
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	4603      	mov	r3, r0
 800742a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800742c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007430:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d008      	beq.n	800744e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800743c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007440:	88fb      	ldrh	r3, [r7, #6]
 8007442:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f804 	bl	8007456 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	4603      	mov	r3, r0
 800745e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e07f      	b.n	800757e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fa f84e 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2224      	movs	r2, #36	; 0x24
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d107      	bne.n	80074e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074e2:	609a      	str	r2, [r3, #8]
 80074e4:	e006      	b.n	80074f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d104      	bne.n	8007506 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6859      	ldr	r1, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <HAL_I2C_Init+0x11c>)
 8007512:	430b      	orrs	r3, r1
 8007514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	69d9      	ldr	r1, [r3, #28]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1a      	ldr	r2, [r3, #32]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	02008000 	.word	0x02008000

0800758c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d138      	bne.n	8007614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e032      	b.n	8007616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2224      	movs	r2, #36	; 0x24
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6819      	ldr	r1, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	e000      	b.n	8007616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007614:	2302      	movs	r3, #2
  }
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007622:	b480      	push	{r7}
 8007624:	b085      	sub	sp, #20
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b20      	cmp	r3, #32
 8007636:	d139      	bne.n	80076ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007642:	2302      	movs	r3, #2
 8007644:	e033      	b.n	80076ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2224      	movs	r2, #36	; 0x24
 8007652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007674:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e0bf      	b.n	800784e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7f9 ff8c 	bl	8001600 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80076fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6999      	ldr	r1, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007714:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6899      	ldr	r1, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	4b4a      	ldr	r3, [pc, #296]	; (8007858 <HAL_LTDC_Init+0x19c>)
 8007730:	400b      	ands	r3, r1
 8007732:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6899      	ldr	r1, [r3, #8]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68d9      	ldr	r1, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4b3e      	ldr	r3, [pc, #248]	; (8007858 <HAL_LTDC_Init+0x19c>)
 800775e:	400b      	ands	r3, r1
 8007760:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68d9      	ldr	r1, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1a      	ldr	r2, [r3, #32]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6919      	ldr	r1, [r3, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b33      	ldr	r3, [pc, #204]	; (8007858 <HAL_LTDC_Init+0x19c>)
 800778c:	400b      	ands	r3, r1
 800778e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6919      	ldr	r1, [r3, #16]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6959      	ldr	r1, [r3, #20]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b27      	ldr	r3, [pc, #156]	; (8007858 <HAL_LTDC_Init+0x19c>)
 80077ba:	400b      	ands	r3, r1
 80077bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	041b      	lsls	r3, r3, #16
 80077c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6959      	ldr	r1, [r3, #20]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0206 	orr.w	r2, r2, #6
 800782a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	f000f800 	.word	0xf000f800

0800785c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	d023      	beq.n	80078c6 <HAL_LTDC_IRQHandler+0x6a>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01e      	beq.n	80078c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0204 	bic.w	r2, r2, #4
 8007896:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2204      	movs	r2, #4
 800789e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078a6:	f043 0201 	orr.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2204      	movs	r2, #4
 80078b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f86f 	bl	80079a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d023      	beq.n	8007918 <HAL_LTDC_IRQHandler+0xbc>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01e      	beq.n	8007918 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0202 	bic.w	r2, r2, #2
 80078e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2202      	movs	r2, #2
 80078f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078f8:	f043 0202 	orr.w	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2204      	movs	r2, #4
 8007906:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f846 	bl	80079a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01b      	beq.n	800795a <HAL_LTDC_IRQHandler+0xfe>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d016      	beq.n	800795a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0201 	bic.w	r2, r2, #1
 800793a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2201      	movs	r2, #1
 8007942:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f82f 	bl	80079b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b00      	cmp	r3, #0
 8007962:	d01b      	beq.n	800799c <HAL_LTDC_IRQHandler+0x140>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0208 	bic.w	r2, r2, #8
 800797c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2208      	movs	r2, #8
 8007984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f818 	bl	80079cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800799c:	bf00      	nop
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80079e0:	b5b0      	push	{r4, r5, r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_LTDC_ConfigLayer+0x1a>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e02c      	b.n	8007a54 <HAL_LTDC_ConfigLayer+0x74>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2134      	movs	r1, #52	; 0x34
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	4413      	add	r3, r2
 8007a16:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	461d      	mov	r5, r3
 8007a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f811 	bl	8007a5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bdb0      	pop	{r4, r5, r7, pc}

08007a5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b089      	sub	sp, #36	; 0x24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	0c1b      	lsrs	r3, r3, #16
 8007a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a78:	4413      	add	r3, r2
 8007a7a:	041b      	lsls	r3, r3, #16
 8007a7c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	01db      	lsls	r3, r3, #7
 8007a88:	4413      	add	r3, r2
 8007a8a:	3384      	adds	r3, #132	; 0x84
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	4611      	mov	r1, r2
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	01d2      	lsls	r2, r2, #7
 8007a98:	440a      	add	r2, r1
 8007a9a:	3284      	adds	r2, #132	; 0x84
 8007a9c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007aa0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	0c1b      	lsrs	r3, r3, #16
 8007aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ab2:	4413      	add	r3, r2
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	01db      	lsls	r3, r3, #7
 8007ac0:	440b      	add	r3, r1
 8007ac2:	3384      	adds	r3, #132	; 0x84
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ada:	4413      	add	r3, r2
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	01db      	lsls	r3, r3, #7
 8007aea:	4413      	add	r3, r2
 8007aec:	3384      	adds	r3, #132	; 0x84
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	4611      	mov	r1, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	01d2      	lsls	r2, r2, #7
 8007afa:	440a      	add	r2, r1
 8007afc:	3284      	adds	r2, #132	; 0x84
 8007afe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007b02:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b12:	4413      	add	r3, r2
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	01db      	lsls	r3, r3, #7
 8007b20:	440b      	add	r3, r1
 8007b22:	3384      	adds	r3, #132	; 0x84
 8007b24:	4619      	mov	r1, r3
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	01db      	lsls	r3, r3, #7
 8007b36:	4413      	add	r3, r2
 8007b38:	3384      	adds	r3, #132	; 0x84
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	4611      	mov	r1, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	01d2      	lsls	r2, r2, #7
 8007b46:	440a      	add	r2, r1
 8007b48:	3284      	adds	r2, #132	; 0x84
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	01db      	lsls	r3, r3, #7
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3384      	adds	r3, #132	; 0x84
 8007b5e:	461a      	mov	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	061b      	lsls	r3, r3, #24
 8007b80:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	01db      	lsls	r3, r3, #7
 8007b8c:	4413      	add	r3, r2
 8007b8e:	3384      	adds	r3, #132	; 0x84
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	01db      	lsls	r3, r3, #7
 8007b9c:	4413      	add	r3, r2
 8007b9e:	3384      	adds	r3, #132	; 0x84
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bac:	461a      	mov	r2, r3
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	01db      	lsls	r3, r3, #7
 8007bc0:	440b      	add	r3, r1
 8007bc2:	3384      	adds	r3, #132	; 0x84
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	01db      	lsls	r3, r3, #7
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3384      	adds	r3, #132	; 0x84
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	4611      	mov	r1, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	01d2      	lsls	r2, r2, #7
 8007be6:	440a      	add	r2, r1
 8007be8:	3284      	adds	r2, #132	; 0x84
 8007bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	01db      	lsls	r3, r3, #7
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3384      	adds	r3, #132	; 0x84
 8007bfe:	461a      	mov	r2, r3
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	01db      	lsls	r3, r3, #7
 8007c10:	4413      	add	r3, r2
 8007c12:	3384      	adds	r3, #132	; 0x84
 8007c14:	69da      	ldr	r2, [r3, #28]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	01db      	lsls	r3, r3, #7
 8007c20:	440b      	add	r3, r1
 8007c22:	3384      	adds	r3, #132	; 0x84
 8007c24:	4619      	mov	r1, r3
 8007c26:	4b58      	ldr	r3, [pc, #352]	; (8007d88 <LTDC_SetConfig+0x32c>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	69da      	ldr	r2, [r3, #28]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	68f9      	ldr	r1, [r7, #12]
 8007c36:	6809      	ldr	r1, [r1, #0]
 8007c38:	4608      	mov	r0, r1
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	01c9      	lsls	r1, r1, #7
 8007c3e:	4401      	add	r1, r0
 8007c40:	3184      	adds	r1, #132	; 0x84
 8007c42:	4313      	orrs	r3, r2
 8007c44:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	01db      	lsls	r3, r3, #7
 8007c50:	4413      	add	r3, r2
 8007c52:	3384      	adds	r3, #132	; 0x84
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	01db      	lsls	r3, r3, #7
 8007c60:	4413      	add	r3, r2
 8007c62:	3384      	adds	r3, #132	; 0x84
 8007c64:	461a      	mov	r2, r3
 8007c66:	2300      	movs	r3, #0
 8007c68:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	01db      	lsls	r3, r3, #7
 8007c74:	4413      	add	r3, r2
 8007c76:	3384      	adds	r3, #132	; 0x84
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007c88:	2304      	movs	r3, #4
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	e01b      	b.n	8007cc6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d102      	bne.n	8007c9c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007c96:	2303      	movs	r3, #3
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	e014      	b.n	8007cc6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d00b      	beq.n	8007cbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d007      	beq.n	8007cbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d003      	beq.n	8007cbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007cb8:	2b07      	cmp	r3, #7
 8007cba:	d102      	bne.n	8007cc2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e001      	b.n	8007cc6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	01db      	lsls	r3, r3, #7
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3384      	adds	r3, #132	; 0x84
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	01d2      	lsls	r2, r2, #7
 8007ce0:	440a      	add	r2, r1
 8007ce2:	3284      	adds	r2, #132	; 0x84
 8007ce4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	fb02 f303 	mul.w	r3, r2, r3
 8007cf4:	041a      	lsls	r2, r3, #16
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6859      	ldr	r1, [r3, #4]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	1acb      	subs	r3, r1, r3
 8007d00:	69f9      	ldr	r1, [r7, #28]
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	3307      	adds	r3, #7
 8007d08:	68f9      	ldr	r1, [r7, #12]
 8007d0a:	6809      	ldr	r1, [r1, #0]
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	01c9      	lsls	r1, r1, #7
 8007d12:	4401      	add	r1, r0
 8007d14:	3184      	adds	r1, #132	; 0x84
 8007d16:	4313      	orrs	r3, r2
 8007d18:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	01db      	lsls	r3, r3, #7
 8007d24:	4413      	add	r3, r2
 8007d26:	3384      	adds	r3, #132	; 0x84
 8007d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	01db      	lsls	r3, r3, #7
 8007d34:	440b      	add	r3, r1
 8007d36:	3384      	adds	r3, #132	; 0x84
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <LTDC_SetConfig+0x330>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	01db      	lsls	r3, r3, #7
 8007d4a:	4413      	add	r3, r2
 8007d4c:	3384      	adds	r3, #132	; 0x84
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	01db      	lsls	r3, r3, #7
 8007d60:	4413      	add	r3, r2
 8007d62:	3384      	adds	r3, #132	; 0x84
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	01d2      	lsls	r2, r2, #7
 8007d70:	440a      	add	r2, r1
 8007d72:	3284      	adds	r2, #132	; 0x84
 8007d74:	f043 0301 	orr.w	r3, r3, #1
 8007d78:	6013      	str	r3, [r2, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	3724      	adds	r7, #36	; 0x24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	fffff8f8 	.word	0xfffff8f8
 8007d8c:	fffff800 	.word	0xfffff800

08007d90 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007d9c:	f7fc f8e4 	bl	8003f68 <HAL_GetTick>
 8007da0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
 8007dac:	e0a6      	b.n	8007efc <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f040 809f 	bne.w	8007efc <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f9 fdae 	bl	8001920 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8007dc4:	f241 3188 	movw	r1, #5000	; 0x1388
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8de 	bl	8007f8a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	4b4c      	ldr	r3, [pc, #304]	; (8007f08 <HAL_OSPI_Init+0x178>)
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	68d1      	ldr	r1, [r2, #12]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6912      	ldr	r2, [r2, #16]
 8007de0:	3a01      	subs	r2, #1
 8007de2:	0412      	lsls	r2, r2, #16
 8007de4:	4311      	orrs	r1, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6952      	ldr	r2, [r2, #20]
 8007dea:	3a01      	subs	r2, #1
 8007dec:	0212      	lsls	r2, r2, #8
 8007dee:	4311      	orrs	r1, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007df4:	0112      	lsls	r2, r2, #4
 8007df6:	4311      	orrs	r1, r2
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	69d2      	ldr	r2, [r2, #28]
 8007dfc:	4311      	orrs	r1, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6812      	ldr	r2, [r2, #0]
 8007e02:	430b      	orrs	r3, r1
 8007e04:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1a      	ldr	r2, [r3, #32]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e36:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	021a      	lsls	r2, r3, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2120      	movs	r1, #32
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fdb8 	bl	80089d4 <OSPI_WaitFlagStateUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d146      	bne.n	8007efc <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	1e5a      	subs	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ea4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d107      	bne.n	8007ee4 <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0202 	orr.w	r2, r2, #2
 8007ee2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eec:	d103      	bne.n	8007ef6 <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	655a      	str	r2, [r3, #84]	; 0x54
 8007ef4:	e002      	b.n	8007efc <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	f8e0f88c 	.word	0xf8e0f88c

08007f0c <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08a      	sub	sp, #40	; 0x28
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007f18:	f7fc f826 	bl	8003f68 <HAL_GetTick>
 8007f1c:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f22:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d002      	beq.n	8007f30 <HAL_OSPI_HyperbusCfg+0x24>
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d122      	bne.n	8007f76 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2200      	movs	r2, #0
 8007f38:	2120      	movs	r1, #32
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 fd4a 	bl	80089d4 <OSPI_WaitFlagStateUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007f44:	7ffb      	ldrb	r3, [r7, #31]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11a      	bne.n	8007f80 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	041a      	lsls	r2, r3, #16
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	431a      	orrs	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	ea42 0103 	orr.w	r1, r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2202      	movs	r2, #2
 8007f72:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8007f74:	e004      	b.n	8007f80 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2210      	movs	r2, #16
 8007f7e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 8007f80:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b094      	sub	sp, #80	; 0x50
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4aa3      	ldr	r2, [pc, #652]	; (8008254 <HAL_OSPIM_Config+0x2ac>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d105      	bne.n	8007fd6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007fd4:	e004      	b.n	8007fe0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007fe6:	e01d      	b.n	8008024 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8007fe8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fec:	3301      	adds	r3, #1
 8007fee:	b2d8      	uxtb	r0, r3
 8007ff0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007ff4:	f107 0114 	add.w	r1, r7, #20
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	440b      	add	r3, r1
 8008002:	4619      	mov	r1, r3
 8008004:	f000 fd1e 	bl	8008a44 <OSPIM_GetConfig>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2208      	movs	r2, #8
 8008018:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800801a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800801e:	3301      	adds	r3, #1
 8008020:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008028:	2b01      	cmp	r3, #1
 800802a:	d9dd      	bls.n	8007fe8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800802c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008030:	2b00      	cmp	r3, #0
 8008032:	f040 84c3 	bne.w	80089bc <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8008036:	4b87      	ldr	r3, [pc, #540]	; (8008254 <HAL_OSPIM_Config+0x2ac>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00b      	beq.n	800805a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8008042:	4b84      	ldr	r3, [pc, #528]	; (8008254 <HAL_OSPIM_Config+0x2ac>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a83      	ldr	r2, [pc, #524]	; (8008254 <HAL_OSPIM_Config+0x2ac>)
 8008048:	f023 0301 	bic.w	r3, r3, #1
 800804c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800804e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800805a:	4b7f      	ldr	r3, [pc, #508]	; (8008258 <HAL_OSPIM_Config+0x2b0>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008066:	4b7c      	ldr	r3, [pc, #496]	; (8008258 <HAL_OSPIM_Config+0x2b0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a7b      	ldr	r2, [pc, #492]	; (8008258 <HAL_OSPIM_Config+0x2b0>)
 800806c:	f023 0301 	bic.w	r3, r3, #1
 8008070:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8008072:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008076:	f043 0302 	orr.w	r3, r3, #2
 800807a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800807e:	4977      	ldr	r1, [pc, #476]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 8008080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008082:	4613      	mov	r3, r2
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	4413      	add	r3, r2
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800808e:	4413      	add	r3, r2
 8008090:	3b34      	subs	r3, #52	; 0x34
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3b01      	subs	r3, #1
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	6859      	ldr	r1, [r3, #4]
 800809c:	486f      	ldr	r0, [pc, #444]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 800809e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a0:	4613      	mov	r3, r2
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	4413      	add	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080ac:	4413      	add	r3, r2
 80080ae:	3b34      	subs	r3, #52	; 0x34
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4403      	add	r3, r0
 80080bc:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80080be:	4b67      	ldr	r3, [pc, #412]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80ca 	beq.w	8008260 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80080cc:	4b63      	ldr	r3, [pc, #396]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a62      	ldr	r2, [pc, #392]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 80080d2:	f023 0301 	bic.w	r3, r3, #1
 80080d6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80080d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80080dc:	2b01      	cmp	r3, #1
 80080de:	f040 8178 	bne.w	80083d2 <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 80080e2:	495e      	ldr	r1, [pc, #376]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 80080e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80080e8:	4613      	mov	r3, r2
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	4413      	add	r3, r2
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080f4:	4413      	add	r3, r2
 80080f6:	3b3c      	subs	r3, #60	; 0x3c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	6859      	ldr	r1, [r3, #4]
 8008102:	4856      	ldr	r0, [pc, #344]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 8008104:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008108:	4613      	mov	r3, r2
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	4413      	add	r3, r2
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008114:	4413      	add	r3, r2
 8008116:	3b3c      	subs	r3, #60	; 0x3c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3b01      	subs	r3, #1
 800811c:	f041 0202 	orr.w	r2, r1, #2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4403      	add	r3, r0
 8008124:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8008126:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800812a:	4613      	mov	r3, r2
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	4413      	add	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008136:	4413      	add	r3, r2
 8008138:	3b38      	subs	r3, #56	; 0x38
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d021      	beq.n	8008184 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8008140:	4946      	ldr	r1, [pc, #280]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 8008142:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008152:	4413      	add	r3, r2
 8008154:	3b38      	subs	r3, #56	; 0x38
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3b01      	subs	r3, #1
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	6859      	ldr	r1, [r3, #4]
 8008160:	483e      	ldr	r0, [pc, #248]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 8008162:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008166:	4613      	mov	r3, r2
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	4413      	add	r3, r2
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008172:	4413      	add	r3, r2
 8008174:	3b38      	subs	r3, #56	; 0x38
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3b01      	subs	r3, #1
 800817a:	f041 0220 	orr.w	r2, r1, #32
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4403      	add	r3, r0
 8008182:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008184:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008188:	4613      	mov	r3, r2
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	4413      	add	r3, r2
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008194:	4413      	add	r3, r2
 8008196:	3b30      	subs	r3, #48	; 0x30
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d025      	beq.n	80081ea <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800819e:	492f      	ldr	r1, [pc, #188]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 80081a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80081a4:	4613      	mov	r3, r2
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	4413      	add	r3, r2
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80081b0:	4413      	add	r3, r2
 80081b2:	3b30      	subs	r3, #48	; 0x30
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	6859      	ldr	r1, [r3, #4]
 80081c2:	4826      	ldr	r0, [pc, #152]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 80081c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80081c8:	4613      	mov	r3, r2
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	4413      	add	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80081d4:	4413      	add	r3, r2
 80081d6:	3b30      	subs	r3, #48	; 0x30
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4403      	add	r3, r0
 80081e8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80081ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80081ee:	4613      	mov	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4413      	add	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80081fa:	4413      	add	r3, r2
 80081fc:	3b2c      	subs	r3, #44	; 0x2c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 80e6 	beq.w	80083d2 <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8008206:	4915      	ldr	r1, [pc, #84]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 8008208:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800820c:	4613      	mov	r3, r2
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	4413      	add	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008218:	4413      	add	r3, r2
 800821a:	3b2c      	subs	r3, #44	; 0x2c
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3b01      	subs	r3, #1
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	6859      	ldr	r1, [r3, #4]
 800822a:	480c      	ldr	r0, [pc, #48]	; (800825c <HAL_OSPIM_Config+0x2b4>)
 800822c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008230:	4613      	mov	r3, r2
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	4413      	add	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800823c:	4413      	add	r3, r2
 800823e:	3b2c      	subs	r3, #44	; 0x2c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3b01      	subs	r3, #1
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4403      	add	r3, r0
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	e0be      	b.n	80083d2 <HAL_OSPIM_Config+0x42a>
 8008254:	52005000 	.word	0x52005000
 8008258:	5200a000 	.word	0x5200a000
 800825c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8008260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008262:	4613      	mov	r3, r2
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	4413      	add	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800826e:	4413      	add	r3, r2
 8008270:	3b3c      	subs	r3, #60	; 0x3c
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 80ac 	beq.w	80083d2 <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800827a:	499d      	ldr	r1, [pc, #628]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 800827c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800827e:	4613      	mov	r3, r2
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	4413      	add	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800828a:	4413      	add	r3, r2
 800828c:	3b3c      	subs	r3, #60	; 0x3c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3b01      	subs	r3, #1
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	6859      	ldr	r1, [r3, #4]
 8008298:	4895      	ldr	r0, [pc, #596]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 800829a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800829c:	4613      	mov	r3, r2
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80082a8:	4413      	add	r3, r2
 80082aa:	3b3c      	subs	r3, #60	; 0x3c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f021 0201 	bic.w	r2, r1, #1
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4403      	add	r3, r0
 80082b8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80082ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082bc:	4613      	mov	r3, r2
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	4413      	add	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80082c8:	4413      	add	r3, r2
 80082ca:	3b38      	subs	r3, #56	; 0x38
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d01f      	beq.n	8008312 <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80082d2:	4987      	ldr	r1, [pc, #540]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 80082d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082d6:	4613      	mov	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4413      	add	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80082e2:	4413      	add	r3, r2
 80082e4:	3b38      	subs	r3, #56	; 0x38
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	6859      	ldr	r1, [r3, #4]
 80082f0:	487f      	ldr	r0, [pc, #508]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 80082f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f4:	4613      	mov	r3, r2
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	4413      	add	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008300:	4413      	add	r3, r2
 8008302:	3b38      	subs	r3, #56	; 0x38
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3b01      	subs	r3, #1
 8008308:	f021 0210 	bic.w	r2, r1, #16
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4403      	add	r3, r0
 8008310:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008314:	4613      	mov	r3, r2
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	4413      	add	r3, r2
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008320:	4413      	add	r3, r2
 8008322:	3b30      	subs	r3, #48	; 0x30
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d023      	beq.n	8008372 <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800832a:	4971      	ldr	r1, [pc, #452]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 800832c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800832e:	4613      	mov	r3, r2
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4413      	add	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800833a:	4413      	add	r3, r2
 800833c:	3b30      	subs	r3, #48	; 0x30
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3b01      	subs	r3, #1
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	6859      	ldr	r1, [r3, #4]
 800834c:	4868      	ldr	r0, [pc, #416]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 800834e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008350:	4613      	mov	r3, r2
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	4413      	add	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800835c:	4413      	add	r3, r2
 800835e:	3b30      	subs	r3, #48	; 0x30
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3b01      	subs	r3, #1
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4403      	add	r3, r0
 8008370:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008374:	4613      	mov	r3, r2
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	4413      	add	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008380:	4413      	add	r3, r2
 8008382:	3b2c      	subs	r3, #44	; 0x2c
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d023      	beq.n	80083d2 <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800838a:	4959      	ldr	r1, [pc, #356]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 800838c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800838e:	4613      	mov	r3, r2
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4413      	add	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800839a:	4413      	add	r3, r2
 800839c:	3b2c      	subs	r3, #44	; 0x2c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	6859      	ldr	r1, [r3, #4]
 80083ac:	4850      	ldr	r0, [pc, #320]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 80083ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083b0:	4613      	mov	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80083bc:	4413      	add	r3, r2
 80083be:	3b2c      	subs	r3, #44	; 0x2c
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4403      	add	r3, r0
 80083d0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80083da:	4613      	mov	r3, r2
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4413      	add	r3, r2
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80083e6:	4413      	add	r3, r2
 80083e8:	3b3c      	subs	r3, #60	; 0x3c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4299      	cmp	r1, r3
 80083ee:	d03c      	beq.n	800846a <HAL_OSPIM_Config+0x4c2>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	6859      	ldr	r1, [r3, #4]
 80083f4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80083f8:	4613      	mov	r3, r2
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	4413      	add	r3, r2
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008404:	4413      	add	r3, r2
 8008406:	3b38      	subs	r3, #56	; 0x38
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4299      	cmp	r1, r3
 800840c:	d02d      	beq.n	800846a <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008416:	4613      	mov	r3, r2
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	4413      	add	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008422:	4413      	add	r3, r2
 8008424:	3b34      	subs	r3, #52	; 0x34
 8008426:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8008428:	4299      	cmp	r1, r3
 800842a:	d01e      	beq.n	800846a <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	68d9      	ldr	r1, [r3, #12]
 8008430:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008434:	4613      	mov	r3, r2
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	4413      	add	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008440:	4413      	add	r3, r2
 8008442:	3b30      	subs	r3, #48	; 0x30
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4299      	cmp	r1, r3
 8008448:	d00f      	beq.n	800846a <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6919      	ldr	r1, [r3, #16]
 800844e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008452:	4613      	mov	r3, r2
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	4413      	add	r3, r2
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800845e:	4413      	add	r3, r2
 8008460:	3b2c      	subs	r3, #44	; 0x2c
 8008462:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8008464:	4299      	cmp	r1, r3
 8008466:	f040 811e 	bne.w	80086a6 <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6819      	ldr	r1, [r3, #0]
 800846e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008472:	4613      	mov	r3, r2
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	4413      	add	r3, r2
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800847e:	4413      	add	r3, r2
 8008480:	3b3c      	subs	r3, #60	; 0x3c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4299      	cmp	r1, r3
 8008486:	d135      	bne.n	80084f4 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008490:	4613      	mov	r3, r2
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4413      	add	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800849c:	4413      	add	r3, r2
 800849e:	3b38      	subs	r3, #56	; 0x38
 80084a0:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80084a2:	4299      	cmp	r1, r3
 80084a4:	d126      	bne.n	80084f4 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	68d9      	ldr	r1, [r3, #12]
 80084aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80084ae:	4613      	mov	r3, r2
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	4413      	add	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80084ba:	4413      	add	r3, r2
 80084bc:	3b30      	subs	r3, #48	; 0x30
 80084be:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80084c0:	4299      	cmp	r1, r3
 80084c2:	d117      	bne.n	80084f4 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	6919      	ldr	r1, [r3, #16]
 80084c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80084cc:	4613      	mov	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4413      	add	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80084d8:	4413      	add	r3, r2
 80084da:	3b2c      	subs	r3, #44	; 0x2c
 80084dc:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80084de:	4299      	cmp	r1, r3
 80084e0:	d108      	bne.n	80084f4 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80084e2:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a02      	ldr	r2, [pc, #8]	; (80084f0 <HAL_OSPIM_Config+0x548>)
 80084e8:	f043 0301 	orr.w	r3, r3, #1
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	e0da      	b.n	80086a6 <HAL_OSPIM_Config+0x6fe>
 80084f0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80084f4:	49c2      	ldr	r1, [pc, #776]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80084f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80084fa:	4613      	mov	r3, r2
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	4413      	add	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008506:	4413      	add	r3, r2
 8008508:	3b3c      	subs	r3, #60	; 0x3c
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3b01      	subs	r3, #1
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	6859      	ldr	r1, [r3, #4]
 8008514:	48ba      	ldr	r0, [pc, #744]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008516:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800851a:	4613      	mov	r3, r2
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	4413      	add	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008526:	4413      	add	r3, r2
 8008528:	3b3c      	subs	r3, #60	; 0x3c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3b01      	subs	r3, #1
 800852e:	f021 0201 	bic.w	r2, r1, #1
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4403      	add	r3, r0
 8008536:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8008538:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800853c:	4613      	mov	r3, r2
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	4413      	add	r3, r2
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008548:	4413      	add	r3, r2
 800854a:	3b38      	subs	r3, #56	; 0x38
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d021      	beq.n	8008596 <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8008552:	49ab      	ldr	r1, [pc, #684]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008554:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008558:	4613      	mov	r3, r2
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	4413      	add	r3, r2
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008564:	4413      	add	r3, r2
 8008566:	3b38      	subs	r3, #56	; 0x38
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3b01      	subs	r3, #1
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	6859      	ldr	r1, [r3, #4]
 8008572:	48a3      	ldr	r0, [pc, #652]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008574:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008578:	4613      	mov	r3, r2
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	4413      	add	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008584:	4413      	add	r3, r2
 8008586:	3b38      	subs	r3, #56	; 0x38
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3b01      	subs	r3, #1
 800858c:	f021 0210 	bic.w	r2, r1, #16
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4403      	add	r3, r0
 8008594:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8008596:	499a      	ldr	r1, [pc, #616]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008598:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800859c:	4613      	mov	r3, r2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	4413      	add	r3, r2
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80085a8:	4413      	add	r3, r2
 80085aa:	3b34      	subs	r3, #52	; 0x34
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	6859      	ldr	r1, [r3, #4]
 80085b6:	4892      	ldr	r0, [pc, #584]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80085b8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80085bc:	4613      	mov	r3, r2
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	4413      	add	r3, r2
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80085c8:	4413      	add	r3, r2
 80085ca:	3b34      	subs	r3, #52	; 0x34
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4403      	add	r3, r0
 80085d8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80085da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80085de:	4613      	mov	r3, r2
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4413      	add	r3, r2
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80085ea:	4413      	add	r3, r2
 80085ec:	3b30      	subs	r3, #48	; 0x30
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d025      	beq.n	8008640 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80085f4:	4982      	ldr	r1, [pc, #520]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80085f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80085fa:	4613      	mov	r3, r2
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	4413      	add	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008606:	4413      	add	r3, r2
 8008608:	3b30      	subs	r3, #48	; 0x30
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3b01      	subs	r3, #1
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	6859      	ldr	r1, [r3, #4]
 8008618:	4879      	ldr	r0, [pc, #484]	; (8008800 <HAL_OSPIM_Config+0x858>)
 800861a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800861e:	4613      	mov	r3, r2
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	4413      	add	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800862a:	4413      	add	r3, r2
 800862c:	3b30      	subs	r3, #48	; 0x30
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3b01      	subs	r3, #1
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4403      	add	r3, r0
 800863e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008640:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008644:	4613      	mov	r3, r2
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	4413      	add	r3, r2
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008650:	4413      	add	r3, r2
 8008652:	3b2c      	subs	r3, #44	; 0x2c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d025      	beq.n	80086a6 <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800865a:	4969      	ldr	r1, [pc, #420]	; (8008800 <HAL_OSPIM_Config+0x858>)
 800865c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008660:	4613      	mov	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	4413      	add	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800866c:	4413      	add	r3, r2
 800866e:	3b2c      	subs	r3, #44	; 0x2c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3b01      	subs	r3, #1
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	6859      	ldr	r1, [r3, #4]
 800867e:	4860      	ldr	r0, [pc, #384]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008680:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008684:	4613      	mov	r3, r2
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	4413      	add	r3, r2
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008690:	4413      	add	r3, r2
 8008692:	3b2c      	subs	r3, #44	; 0x2c
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3b01      	subs	r3, #1
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4403      	add	r3, r0
 80086a4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80086a6:	4a56      	ldr	r2, [pc, #344]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ba:	025b      	lsls	r3, r3, #9
 80086bc:	431a      	orrs	r2, r3
 80086be:	4950      	ldr	r1, [pc, #320]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	1e5a      	subs	r2, r3, #1
 80086d6:	4b4a      	ldr	r3, [pc, #296]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	0c1b      	lsrs	r3, r3, #16
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	429a      	cmp	r2, r3
 80086e0:	d90a      	bls.n	80086f8 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80086e2:	4b47      	ldr	r3, [pc, #284]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	041b      	lsls	r3, r3, #16
 80086f2:	4943      	ldr	r1, [pc, #268]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80086f8:	4b41      	ldr	r3, [pc, #260]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 809b 	beq.w	800883c <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8008706:	4a3e      	ldr	r2, [pc, #248]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3b01      	subs	r3, #1
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f023 0203 	bic.w	r2, r3, #3
 8008718:	4939      	ldr	r1, [pc, #228]	; (8008800 <HAL_OSPIM_Config+0x858>)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3b01      	subs	r3, #1
 8008720:	f042 0201 	orr.w	r2, r2, #1
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d011      	beq.n	8008756 <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8008732:	4a33      	ldr	r2, [pc, #204]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	3b01      	subs	r3, #1
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008744:	492e      	ldr	r1, [pc, #184]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	3b01      	subs	r3, #1
 800874c:	f042 0210 	orr.w	r2, r2, #16
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d016      	beq.n	8008790 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008762:	4a27      	ldr	r2, [pc, #156]	; (8008800 <HAL_OSPIM_Config+0x858>)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	3b01      	subs	r3, #1
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008778:	4921      	ldr	r1, [pc, #132]	; (8008800 <HAL_OSPIM_Config+0x858>)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	3b01      	subs	r3, #1
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	e019      	b.n	80087c4 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d015      	beq.n	80087c4 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <HAL_OSPIM_Config+0x858>)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	3b01      	subs	r3, #1
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80087ae:	4914      	ldr	r1, [pc, #80]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d019      	beq.n	8008804 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80087d0:	4a0b      	ldr	r2, [pc, #44]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80087e6:	4906      	ldr	r1, [pc, #24]	; (8008800 <HAL_OSPIM_Config+0x858>)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	440b      	add	r3, r1
 80087fa:	605a      	str	r2, [r3, #4]
 80087fc:	e0c6      	b.n	800898c <HAL_OSPIM_Config+0x9e4>
 80087fe:	bf00      	nop
 8008800:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80bf 	beq.w	800898c <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800880e:	4a6e      	ldr	r2, [pc, #440]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	3b01      	subs	r3, #1
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008824:	4968      	ldr	r1, [pc, #416]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	605a      	str	r2, [r3, #4]
 800883a:	e0a7      	b.n	800898c <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800883c:	4a62      	ldr	r2, [pc, #392]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3b01      	subs	r3, #1
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f023 0203 	bic.w	r2, r3, #3
 800884e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	431a      	orrs	r2, r3
 8008854:	495c      	ldr	r1, [pc, #368]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3b01      	subs	r3, #1
 800885c:	f042 0201 	orr.w	r2, r2, #1
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d014      	beq.n	8008898 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800886e:	4a56      	ldr	r2, [pc, #344]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	3b01      	subs	r3, #1
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008882:	015b      	lsls	r3, r3, #5
 8008884:	431a      	orrs	r2, r3
 8008886:	4950      	ldr	r1, [pc, #320]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	3b01      	subs	r3, #1
 800888e:	f042 0210 	orr.w	r2, r2, #16
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d019      	beq.n	80088d8 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80088a4:	4a48      	ldr	r2, [pc, #288]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80088ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088bc:	049b      	lsls	r3, r3, #18
 80088be:	431a      	orrs	r2, r3
 80088c0:	4941      	ldr	r1, [pc, #260]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	605a      	str	r2, [r3, #4]
 80088d6:	e01c      	b.n	8008912 <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d018      	beq.n	8008912 <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80088e0:	4a39      	ldr	r2, [pc, #228]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80088f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f8:	069b      	lsls	r3, r3, #26
 80088fa:	431a      	orrs	r2, r3
 80088fc:	4932      	ldr	r1, [pc, #200]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	3b01      	subs	r3, #1
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d019      	beq.n	8008952 <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800891e:	4a2a      	ldr	r2, [pc, #168]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	3b01      	subs	r3, #1
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008936:	049b      	lsls	r3, r3, #18
 8008938:	431a      	orrs	r2, r3
 800893a:	4923      	ldr	r1, [pc, #140]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	3b01      	subs	r3, #1
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	605a      	str	r2, [r3, #4]
 8008950:	e01c      	b.n	800898c <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d018      	beq.n	800898c <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800895a:	4a1b      	ldr	r2, [pc, #108]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	3b01      	subs	r3, #1
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008972:	069b      	lsls	r3, r3, #26
 8008974:	431a      	orrs	r2, r3
 8008976:	4914      	ldr	r1, [pc, #80]	; (80089c8 <HAL_OSPIM_Config+0xa20>)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	3b01      	subs	r3, #1
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800898c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <HAL_OSPIM_Config+0xa24>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a0b      	ldr	r2, [pc, #44]	; (80089cc <HAL_OSPIM_Config+0xa24>)
 800899e:	f043 0301 	orr.w	r3, r3, #1
 80089a2:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80089a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80089b0:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <HAL_OSPIM_Config+0xa28>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a06      	ldr	r2, [pc, #24]	; (80089d0 <HAL_OSPIM_Config+0xa28>)
 80089b6:	f043 0301 	orr.w	r3, r3, #1
 80089ba:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80089bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3750      	adds	r7, #80	; 0x50
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	5200b400 	.word	0x5200b400
 80089cc:	52005000 	.word	0x52005000
 80089d0:	5200a000 	.word	0x5200a000

080089d4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80089e4:	e01a      	b.n	8008a1c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ec:	d016      	beq.n	8008a1c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ee:	f7fb fabb 	bl	8003f68 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d302      	bcc.n	8008a04 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10b      	bne.n	8008a1c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a0a:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a10:	f043 0201 	orr.w	r2, r3, #1
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e00e      	b.n	8008a3a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a1a      	ldr	r2, [r3, #32]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	4013      	ands	r3, r2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bf14      	ite	ne
 8008a2a:	2301      	movne	r3, #1
 8008a2c:	2300      	moveq	r3, #0
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d1d6      	bne.n	80089e6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <OSPIM_GetConfig+0x26>
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d802      	bhi.n	8008a6a <OSPIM_GetConfig+0x26>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	75fb      	strb	r3, [r7, #23]
 8008a6e:	e098      	b.n	8008ba2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2200      	movs	r2, #0
 8008a86:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d10b      	bne.n	8008aac <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8008a94:	4b46      	ldr	r3, [pc, #280]	; (8008bb0 <OSPIM_GetConfig+0x16c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8008aa0:	4b44      	ldr	r3, [pc, #272]	; (8008bb4 <OSPIM_GetConfig+0x170>)
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	e002      	b.n	8008aac <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8008aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aaa:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e074      	b.n	8008b9c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8008ab2:	4a3f      	ldr	r2, [pc, #252]	; (8008bb0 <OSPIM_GetConfig+0x16c>)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4053      	eors	r3, r2
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d103      	bne.n	8008ade <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00a      	beq.n	8008afe <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	4053      	eors	r3, r2
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	1c5a      	adds	r2, r3, #1
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	4053      	eors	r3, r2
 8008b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d103      	bne.n	8008b1e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d018      	beq.n	8008b5a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4053      	eors	r3, r2
 8008b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d111      	bne.n	8008b5a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	60da      	str	r2, [r3, #12]
 8008b4c:	e005      	b.n	8008b5a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d018      	beq.n	8008b96 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4053      	eors	r3, r2
 8008b6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d111      	bne.n	8008b96 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	611a      	str	r2, [r3, #16]
 8008b88:	e005      	b.n	8008b96 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d987      	bls.n	8008ab2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	5200b400 	.word	0x5200b400
 8008bb4:	04040222 	.word	0x04040222

08008bb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008bc0:	4b29      	ldr	r3, [pc, #164]	; (8008c68 <HAL_PWREx_ConfigSupply+0xb0>)
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	2b06      	cmp	r3, #6
 8008bca:	d00a      	beq.n	8008be2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bcc:	4b26      	ldr	r3, [pc, #152]	; (8008c68 <HAL_PWREx_ConfigSupply+0xb0>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d001      	beq.n	8008bde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e03f      	b.n	8008c5e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	e03d      	b.n	8008c5e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008be2:	4b21      	ldr	r3, [pc, #132]	; (8008c68 <HAL_PWREx_ConfigSupply+0xb0>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8008bea:	491f      	ldr	r1, [pc, #124]	; (8008c68 <HAL_PWREx_ConfigSupply+0xb0>)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008bf2:	f7fb f9b9 	bl	8003f68 <HAL_GetTick>
 8008bf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bf8:	e009      	b.n	8008c0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008bfa:	f7fb f9b5 	bl	8003f68 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c08:	d901      	bls.n	8008c0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e027      	b.n	8008c5e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c0e:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c1a:	d1ee      	bne.n	8008bfa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b1e      	cmp	r3, #30
 8008c20:	d008      	beq.n	8008c34 <HAL_PWREx_ConfigSupply+0x7c>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b2e      	cmp	r3, #46	; 0x2e
 8008c26:	d005      	beq.n	8008c34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b1d      	cmp	r3, #29
 8008c2c:	d002      	beq.n	8008c34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b2d      	cmp	r3, #45	; 0x2d
 8008c32:	d113      	bne.n	8008c5c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008c34:	f7fb f998 	bl	8003f68 <HAL_GetTick>
 8008c38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c3a:	e009      	b.n	8008c50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c3c:	f7fb f994 	bl	8003f68 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c4a:	d901      	bls.n	8008c50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e006      	b.n	8008c5e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0311 	and.w	r3, r3, #17
 8008c58:	2b11      	cmp	r3, #17
 8008c5a:	d1ef      	bne.n	8008c3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	58024800 	.word	0x58024800

08008c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	; 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e397      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8087 	beq.w	8008d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c8c:	4b9e      	ldr	r3, [pc, #632]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c96:	4b9c      	ldr	r3, [pc, #624]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	2b10      	cmp	r3, #16
 8008ca0:	d007      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x46>
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	2b18      	cmp	r3, #24
 8008ca6:	d110      	bne.n	8008cca <HAL_RCC_OscConfig+0x5e>
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d10b      	bne.n	8008cca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cb2:	4b95      	ldr	r3, [pc, #596]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d06c      	beq.n	8008d98 <HAL_RCC_OscConfig+0x12c>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d168      	bne.n	8008d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e371      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd2:	d106      	bne.n	8008ce2 <HAL_RCC_OscConfig+0x76>
 8008cd4:	4b8c      	ldr	r3, [pc, #560]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a8b      	ldr	r2, [pc, #556]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	e02e      	b.n	8008d40 <HAL_RCC_OscConfig+0xd4>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10c      	bne.n	8008d04 <HAL_RCC_OscConfig+0x98>
 8008cea:	4b87      	ldr	r3, [pc, #540]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a86      	ldr	r2, [pc, #536]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	4b84      	ldr	r3, [pc, #528]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a83      	ldr	r2, [pc, #524]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e01d      	b.n	8008d40 <HAL_RCC_OscConfig+0xd4>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d0c:	d10c      	bne.n	8008d28 <HAL_RCC_OscConfig+0xbc>
 8008d0e:	4b7e      	ldr	r3, [pc, #504]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a7d      	ldr	r2, [pc, #500]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	4b7b      	ldr	r3, [pc, #492]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a7a      	ldr	r2, [pc, #488]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	e00b      	b.n	8008d40 <HAL_RCC_OscConfig+0xd4>
 8008d28:	4b77      	ldr	r3, [pc, #476]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a76      	ldr	r2, [pc, #472]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	4b74      	ldr	r3, [pc, #464]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a73      	ldr	r2, [pc, #460]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d013      	beq.n	8008d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d48:	f7fb f90e 	bl	8003f68 <HAL_GetTick>
 8008d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d50:	f7fb f90a 	bl	8003f68 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b64      	cmp	r3, #100	; 0x64
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e325      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d62:	4b69      	ldr	r3, [pc, #420]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f0      	beq.n	8008d50 <HAL_RCC_OscConfig+0xe4>
 8008d6e:	e014      	b.n	8008d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d70:	f7fb f8fa 	bl	8003f68 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d78:	f7fb f8f6 	bl	8003f68 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b64      	cmp	r3, #100	; 0x64
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e311      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d8a:	4b5f      	ldr	r3, [pc, #380]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f0      	bne.n	8008d78 <HAL_RCC_OscConfig+0x10c>
 8008d96:	e000      	b.n	8008d9a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 808a 	beq.w	8008ebc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008da8:	4b57      	ldr	r3, [pc, #348]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008db0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008db2:	4b55      	ldr	r3, [pc, #340]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d007      	beq.n	8008dce <HAL_RCC_OscConfig+0x162>
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	2b18      	cmp	r3, #24
 8008dc2:	d137      	bne.n	8008e34 <HAL_RCC_OscConfig+0x1c8>
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d132      	bne.n	8008e34 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dce:	4b4e      	ldr	r3, [pc, #312]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <HAL_RCC_OscConfig+0x17a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e2e3      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008de6:	4b48      	ldr	r3, [pc, #288]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f023 0219 	bic.w	r2, r3, #25
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	4945      	ldr	r1, [pc, #276]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008df8:	f7fb f8b6 	bl	8003f68 <HAL_GetTick>
 8008dfc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dfe:	e008      	b.n	8008e12 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e00:	f7fb f8b2 	bl	8003f68 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e2cd      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e12:	4b3d      	ldr	r3, [pc, #244]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0304 	and.w	r3, r3, #4
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f0      	beq.n	8008e00 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e1e:	4b3a      	ldr	r3, [pc, #232]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	061b      	lsls	r3, r3, #24
 8008e2c:	4936      	ldr	r1, [pc, #216]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e32:	e043      	b.n	8008ebc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d026      	beq.n	8008e8a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e3c:	4b32      	ldr	r3, [pc, #200]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f023 0219 	bic.w	r2, r3, #25
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	492f      	ldr	r1, [pc, #188]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4e:	f7fb f88b 	bl	8003f68 <HAL_GetTick>
 8008e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e54:	e008      	b.n	8008e68 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e56:	f7fb f887 	bl	8003f68 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d901      	bls.n	8008e68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e2a2      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e68:	4b27      	ldr	r3, [pc, #156]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0f0      	beq.n	8008e56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e74:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	061b      	lsls	r3, r3, #24
 8008e82:	4921      	ldr	r1, [pc, #132]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	604b      	str	r3, [r1, #4]
 8008e88:	e018      	b.n	8008ebc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e8a:	4b1f      	ldr	r3, [pc, #124]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e96:	f7fb f867 	bl	8003f68 <HAL_GetTick>
 8008e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e9e:	f7fb f863 	bl	8003f68 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e27e      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008eb0:	4b15      	ldr	r3, [pc, #84]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1f0      	bne.n	8008e9e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d06d      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ed0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d007      	beq.n	8008eee <HAL_RCC_OscConfig+0x282>
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b18      	cmp	r3, #24
 8008ee2:	d11e      	bne.n	8008f22 <HAL_RCC_OscConfig+0x2b6>
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d119      	bne.n	8008f22 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eee:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <HAL_RCC_OscConfig+0x29c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d008      	beq.n	8008f0c <HAL_RCC_OscConfig+0x2a0>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	2b80      	cmp	r3, #128	; 0x80
 8008f00:	d004      	beq.n	8008f0c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e253      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
 8008f06:	bf00      	nop
 8008f08:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f0c:	4ba3      	ldr	r3, [pc, #652]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	061b      	lsls	r3, r3, #24
 8008f1a:	49a0      	ldr	r1, [pc, #640]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f20:	e040      	b.n	8008fa4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d023      	beq.n	8008f72 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f2a:	4b9c      	ldr	r3, [pc, #624]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a9b      	ldr	r2, [pc, #620]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f36:	f7fb f817 	bl	8003f68 <HAL_GetTick>
 8008f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f3c:	e008      	b.n	8008f50 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f3e:	f7fb f813 	bl	8003f68 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e22e      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f50:	4b92      	ldr	r3, [pc, #584]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0f0      	beq.n	8008f3e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f5c:	4b8f      	ldr	r3, [pc, #572]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	061b      	lsls	r3, r3, #24
 8008f6a:	498c      	ldr	r1, [pc, #560]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60cb      	str	r3, [r1, #12]
 8008f70:	e018      	b.n	8008fa4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f72:	4b8a      	ldr	r3, [pc, #552]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a89      	ldr	r2, [pc, #548]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7e:	f7fa fff3 	bl	8003f68 <HAL_GetTick>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f84:	e008      	b.n	8008f98 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f86:	f7fa ffef 	bl	8003f68 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e20a      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f98:	4b80      	ldr	r3, [pc, #512]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1f0      	bne.n	8008f86 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d036      	beq.n	800901e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d019      	beq.n	8008fec <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fb8:	4b78      	ldr	r3, [pc, #480]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fbc:	4a77      	ldr	r2, [pc, #476]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc4:	f7fa ffd0 	bl	8003f68 <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fcc:	f7fa ffcc 	bl	8003f68 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e1e7      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fde:	4b6f      	ldr	r3, [pc, #444]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0f0      	beq.n	8008fcc <HAL_RCC_OscConfig+0x360>
 8008fea:	e018      	b.n	800901e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fec:	4b6b      	ldr	r3, [pc, #428]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff0:	4a6a      	ldr	r2, [pc, #424]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8008ff2:	f023 0301 	bic.w	r3, r3, #1
 8008ff6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff8:	f7fa ffb6 	bl	8003f68 <HAL_GetTick>
 8008ffc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ffe:	e008      	b.n	8009012 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009000:	f7fa ffb2 	bl	8003f68 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b02      	cmp	r3, #2
 800900c:	d901      	bls.n	8009012 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e1cd      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009012:	4b62      	ldr	r3, [pc, #392]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f0      	bne.n	8009000 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d036      	beq.n	8009098 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d019      	beq.n	8009066 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009032:	4b5a      	ldr	r3, [pc, #360]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a59      	ldr	r2, [pc, #356]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800903c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800903e:	f7fa ff93 	bl	8003f68 <HAL_GetTick>
 8009042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009044:	e008      	b.n	8009058 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009046:	f7fa ff8f 	bl	8003f68 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d901      	bls.n	8009058 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e1aa      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009058:	4b50      	ldr	r3, [pc, #320]	; (800919c <HAL_RCC_OscConfig+0x530>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0f0      	beq.n	8009046 <HAL_RCC_OscConfig+0x3da>
 8009064:	e018      	b.n	8009098 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009066:	4b4d      	ldr	r3, [pc, #308]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a4c      	ldr	r2, [pc, #304]	; (800919c <HAL_RCC_OscConfig+0x530>)
 800906c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009070:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009072:	f7fa ff79 	bl	8003f68 <HAL_GetTick>
 8009076:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009078:	e008      	b.n	800908c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800907a:	f7fa ff75 	bl	8003f68 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	2b02      	cmp	r3, #2
 8009086:	d901      	bls.n	800908c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e190      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800908c:	4b43      	ldr	r3, [pc, #268]	; (800919c <HAL_RCC_OscConfig+0x530>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1f0      	bne.n	800907a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8085 	beq.w	80091b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090a6:	4b3e      	ldr	r3, [pc, #248]	; (80091a0 <HAL_RCC_OscConfig+0x534>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a3d      	ldr	r2, [pc, #244]	; (80091a0 <HAL_RCC_OscConfig+0x534>)
 80090ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090b2:	f7fa ff59 	bl	8003f68 <HAL_GetTick>
 80090b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090b8:	e008      	b.n	80090cc <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090ba:	f7fa ff55 	bl	8003f68 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b64      	cmp	r3, #100	; 0x64
 80090c6:	d901      	bls.n	80090cc <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e170      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090cc:	4b34      	ldr	r3, [pc, #208]	; (80091a0 <HAL_RCC_OscConfig+0x534>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0f0      	beq.n	80090ba <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d106      	bne.n	80090ee <HAL_RCC_OscConfig+0x482>
 80090e0:	4b2e      	ldr	r3, [pc, #184]	; (800919c <HAL_RCC_OscConfig+0x530>)
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	4a2d      	ldr	r2, [pc, #180]	; (800919c <HAL_RCC_OscConfig+0x530>)
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	6713      	str	r3, [r2, #112]	; 0x70
 80090ec:	e02d      	b.n	800914a <HAL_RCC_OscConfig+0x4de>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10c      	bne.n	8009110 <HAL_RCC_OscConfig+0x4a4>
 80090f6:	4b29      	ldr	r3, [pc, #164]	; (800919c <HAL_RCC_OscConfig+0x530>)
 80090f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fa:	4a28      	ldr	r2, [pc, #160]	; (800919c <HAL_RCC_OscConfig+0x530>)
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	6713      	str	r3, [r2, #112]	; 0x70
 8009102:	4b26      	ldr	r3, [pc, #152]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009106:	4a25      	ldr	r2, [pc, #148]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009108:	f023 0304 	bic.w	r3, r3, #4
 800910c:	6713      	str	r3, [r2, #112]	; 0x70
 800910e:	e01c      	b.n	800914a <HAL_RCC_OscConfig+0x4de>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	2b05      	cmp	r3, #5
 8009116:	d10c      	bne.n	8009132 <HAL_RCC_OscConfig+0x4c6>
 8009118:	4b20      	ldr	r3, [pc, #128]	; (800919c <HAL_RCC_OscConfig+0x530>)
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	4a1f      	ldr	r2, [pc, #124]	; (800919c <HAL_RCC_OscConfig+0x530>)
 800911e:	f043 0304 	orr.w	r3, r3, #4
 8009122:	6713      	str	r3, [r2, #112]	; 0x70
 8009124:	4b1d      	ldr	r3, [pc, #116]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009128:	4a1c      	ldr	r2, [pc, #112]	; (800919c <HAL_RCC_OscConfig+0x530>)
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	6713      	str	r3, [r2, #112]	; 0x70
 8009130:	e00b      	b.n	800914a <HAL_RCC_OscConfig+0x4de>
 8009132:	4b1a      	ldr	r3, [pc, #104]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009136:	4a19      	ldr	r2, [pc, #100]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	6713      	str	r3, [r2, #112]	; 0x70
 800913e:	4b17      	ldr	r3, [pc, #92]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009142:	4a16      	ldr	r2, [pc, #88]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009144:	f023 0304 	bic.w	r3, r3, #4
 8009148:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d015      	beq.n	800917e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7fa ff09 	bl	8003f68 <HAL_GetTick>
 8009156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009158:	e00a      	b.n	8009170 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800915a:	f7fa ff05 	bl	8003f68 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	f241 3288 	movw	r2, #5000	; 0x1388
 8009168:	4293      	cmp	r3, r2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e11e      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009170:	4b0a      	ldr	r3, [pc, #40]	; (800919c <HAL_RCC_OscConfig+0x530>)
 8009172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0ee      	beq.n	800915a <HAL_RCC_OscConfig+0x4ee>
 800917c:	e018      	b.n	80091b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800917e:	f7fa fef3 	bl	8003f68 <HAL_GetTick>
 8009182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009184:	e00e      	b.n	80091a4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009186:	f7fa feef 	bl	8003f68 <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	f241 3288 	movw	r2, #5000	; 0x1388
 8009194:	4293      	cmp	r3, r2
 8009196:	d905      	bls.n	80091a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e108      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
 800919c:	58024400 	.word	0x58024400
 80091a0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091a4:	4b84      	ldr	r3, [pc, #528]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80091a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1ea      	bne.n	8009186 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 80f9 	beq.w	80093ac <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091ba:	4b7f      	ldr	r3, [pc, #508]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091c2:	2b18      	cmp	r3, #24
 80091c4:	f000 80b4 	beq.w	8009330 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	f040 8095 	bne.w	80092fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091d2:	4b79      	ldr	r3, [pc, #484]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a78      	ldr	r2, [pc, #480]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80091d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091de:	f7fa fec3 	bl	8003f68 <HAL_GetTick>
 80091e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091e4:	e008      	b.n	80091f8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091e6:	f7fa febf 	bl	8003f68 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e0da      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091f8:	4b6f      	ldr	r3, [pc, #444]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f0      	bne.n	80091e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009204:	4b6c      	ldr	r3, [pc, #432]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009208:	4b6c      	ldr	r3, [pc, #432]	; (80093bc <HAL_RCC_OscConfig+0x750>)
 800920a:	4013      	ands	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009214:	0112      	lsls	r2, r2, #4
 8009216:	430a      	orrs	r2, r1
 8009218:	4967      	ldr	r1, [pc, #412]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 800921a:	4313      	orrs	r3, r2
 800921c:	628b      	str	r3, [r1, #40]	; 0x28
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	3b01      	subs	r3, #1
 8009224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922c:	3b01      	subs	r3, #1
 800922e:	025b      	lsls	r3, r3, #9
 8009230:	b29b      	uxth	r3, r3
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009238:	3b01      	subs	r3, #1
 800923a:	041b      	lsls	r3, r3, #16
 800923c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009246:	3b01      	subs	r3, #1
 8009248:	061b      	lsls	r3, r3, #24
 800924a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800924e:	495a      	ldr	r1, [pc, #360]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009250:	4313      	orrs	r3, r2
 8009252:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009254:	4b58      	ldr	r3, [pc, #352]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	4a57      	ldr	r2, [pc, #348]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 800925a:	f023 0301 	bic.w	r3, r3, #1
 800925e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009260:	4b55      	ldr	r3, [pc, #340]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009264:	4b56      	ldr	r3, [pc, #344]	; (80093c0 <HAL_RCC_OscConfig+0x754>)
 8009266:	4013      	ands	r3, r2
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800926c:	00d2      	lsls	r2, r2, #3
 800926e:	4952      	ldr	r1, [pc, #328]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009270:	4313      	orrs	r3, r2
 8009272:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009274:	4b50      	ldr	r3, [pc, #320]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	f023 020c 	bic.w	r2, r3, #12
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	494d      	ldr	r1, [pc, #308]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009282:	4313      	orrs	r3, r2
 8009284:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009286:	4b4c      	ldr	r3, [pc, #304]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	f023 0202 	bic.w	r2, r3, #2
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009292:	4949      	ldr	r1, [pc, #292]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009294:	4313      	orrs	r3, r2
 8009296:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009298:	4b47      	ldr	r3, [pc, #284]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	4a46      	ldr	r2, [pc, #280]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 800929e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a4:	4b44      	ldr	r3, [pc, #272]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	4a43      	ldr	r2, [pc, #268]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	4a40      	ldr	r2, [pc, #256]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80092bc:	4b3e      	ldr	r3, [pc, #248]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	4a3d      	ldr	r2, [pc, #244]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092c2:	f043 0301 	orr.w	r3, r3, #1
 80092c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092c8:	4b3b      	ldr	r3, [pc, #236]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a3a      	ldr	r2, [pc, #232]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d4:	f7fa fe48 	bl	8003f68 <HAL_GetTick>
 80092d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092dc:	f7fa fe44 	bl	8003f68 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e05f      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092ee:	4b32      	ldr	r3, [pc, #200]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCC_OscConfig+0x670>
 80092fa:	e057      	b.n	80093ac <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092fc:	4b2e      	ldr	r3, [pc, #184]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a2d      	ldr	r2, [pc, #180]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009308:	f7fa fe2e 	bl	8003f68 <HAL_GetTick>
 800930c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009310:	f7fa fe2a 	bl	8003f68 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b02      	cmp	r3, #2
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e045      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009322:	4b25      	ldr	r3, [pc, #148]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1f0      	bne.n	8009310 <HAL_RCC_OscConfig+0x6a4>
 800932e:	e03d      	b.n	80093ac <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009330:	4b21      	ldr	r3, [pc, #132]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009336:	4b20      	ldr	r3, [pc, #128]	; (80093b8 <HAL_RCC_OscConfig+0x74c>)
 8009338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b01      	cmp	r3, #1
 8009342:	d031      	beq.n	80093a8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f003 0203 	and.w	r2, r3, #3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800934e:	429a      	cmp	r2, r3
 8009350:	d12a      	bne.n	80093a8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	091b      	lsrs	r3, r3, #4
 8009356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800935e:	429a      	cmp	r2, r3
 8009360:	d122      	bne.n	80093a8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800936e:	429a      	cmp	r2, r3
 8009370:	d11a      	bne.n	80093a8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	0a5b      	lsrs	r3, r3, #9
 8009376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009380:	429a      	cmp	r2, r3
 8009382:	d111      	bne.n	80093a8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	0c1b      	lsrs	r3, r3, #16
 8009388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009392:	429a      	cmp	r2, r3
 8009394:	d108      	bne.n	80093a8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	0e1b      	lsrs	r3, r3, #24
 800939a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d001      	beq.n	80093ac <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3730      	adds	r7, #48	; 0x30
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	58024400 	.word	0x58024400
 80093bc:	fffffc0c 	.word	0xfffffc0c
 80093c0:	ffff0007 	.word	0xffff0007

080093c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e19c      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093d8:	4b8a      	ldr	r3, [pc, #552]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d910      	bls.n	8009408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093e6:	4b87      	ldr	r3, [pc, #540]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f023 020f 	bic.w	r2, r3, #15
 80093ee:	4985      	ldr	r1, [pc, #532]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f6:	4b83      	ldr	r3, [pc, #524]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 030f 	and.w	r3, r3, #15
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d001      	beq.n	8009408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e184      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d010      	beq.n	8009436 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691a      	ldr	r2, [r3, #16]
 8009418:	4b7b      	ldr	r3, [pc, #492]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009420:	429a      	cmp	r2, r3
 8009422:	d908      	bls.n	8009436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009424:	4b78      	ldr	r3, [pc, #480]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	4975      	ldr	r1, [pc, #468]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009432:	4313      	orrs	r3, r2
 8009434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d010      	beq.n	8009464 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	695a      	ldr	r2, [r3, #20]
 8009446:	4b70      	ldr	r3, [pc, #448]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800944e:	429a      	cmp	r2, r3
 8009450:	d908      	bls.n	8009464 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009452:	4b6d      	ldr	r3, [pc, #436]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	496a      	ldr	r1, [pc, #424]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009460:	4313      	orrs	r3, r2
 8009462:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b00      	cmp	r3, #0
 800946e:	d010      	beq.n	8009492 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	4b64      	ldr	r3, [pc, #400]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800947c:	429a      	cmp	r2, r3
 800947e:	d908      	bls.n	8009492 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009480:	4b61      	ldr	r3, [pc, #388]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	495e      	ldr	r1, [pc, #376]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 800948e:	4313      	orrs	r3, r2
 8009490:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d010      	beq.n	80094c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69da      	ldr	r2, [r3, #28]
 80094a2:	4b59      	ldr	r3, [pc, #356]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d908      	bls.n	80094c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80094ae:	4b56      	ldr	r3, [pc, #344]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	4953      	ldr	r1, [pc, #332]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d010      	beq.n	80094ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	4b4d      	ldr	r3, [pc, #308]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	f003 030f 	and.w	r3, r3, #15
 80094d8:	429a      	cmp	r2, r3
 80094da:	d908      	bls.n	80094ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094dc:	4b4a      	ldr	r3, [pc, #296]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f023 020f 	bic.w	r2, r3, #15
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	4947      	ldr	r1, [pc, #284]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d055      	beq.n	80095a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80094fa:	4b43      	ldr	r3, [pc, #268]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	4940      	ldr	r1, [pc, #256]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009508:	4313      	orrs	r3, r2
 800950a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b02      	cmp	r3, #2
 8009512:	d107      	bne.n	8009524 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009514:	4b3c      	ldr	r3, [pc, #240]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d121      	bne.n	8009564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e0f6      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b03      	cmp	r3, #3
 800952a:	d107      	bne.n	800953c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800952c:	4b36      	ldr	r3, [pc, #216]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d115      	bne.n	8009564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e0ea      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d107      	bne.n	8009554 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009544:	4b30      	ldr	r3, [pc, #192]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954c:	2b00      	cmp	r3, #0
 800954e:	d109      	bne.n	8009564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e0de      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009554:	4b2c      	ldr	r3, [pc, #176]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e0d6      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009564:	4b28      	ldr	r3, [pc, #160]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	f023 0207 	bic.w	r2, r3, #7
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4925      	ldr	r1, [pc, #148]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009572:	4313      	orrs	r3, r2
 8009574:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009576:	f7fa fcf7 	bl	8003f68 <HAL_GetTick>
 800957a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800957c:	e00a      	b.n	8009594 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800957e:	f7fa fcf3 	bl	8003f68 <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	f241 3288 	movw	r2, #5000	; 0x1388
 800958c:	4293      	cmp	r3, r2
 800958e:	d901      	bls.n	8009594 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e0be      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009594:	4b1c      	ldr	r3, [pc, #112]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d1eb      	bne.n	800957e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d010      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	4b14      	ldr	r3, [pc, #80]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	429a      	cmp	r2, r3
 80095c0:	d208      	bcs.n	80095d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095c2:	4b11      	ldr	r3, [pc, #68]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	f023 020f 	bic.w	r2, r3, #15
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	490e      	ldr	r1, [pc, #56]	; (8009608 <HAL_RCC_ClockConfig+0x244>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095d4:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d214      	bcs.n	800960c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f023 020f 	bic.w	r2, r3, #15
 80095ea:	4906      	ldr	r1, [pc, #24]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095f2:	4b04      	ldr	r3, [pc, #16]	; (8009604 <HAL_RCC_ClockConfig+0x240>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d005      	beq.n	800960c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e086      	b.n	8009712 <HAL_RCC_ClockConfig+0x34e>
 8009604:	52002000 	.word	0x52002000
 8009608:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d010      	beq.n	800963a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	4b3f      	ldr	r3, [pc, #252]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009624:	429a      	cmp	r2, r3
 8009626:	d208      	bcs.n	800963a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009628:	4b3c      	ldr	r3, [pc, #240]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	4939      	ldr	r1, [pc, #228]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 8009636:	4313      	orrs	r3, r2
 8009638:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0308 	and.w	r3, r3, #8
 8009642:	2b00      	cmp	r3, #0
 8009644:	d010      	beq.n	8009668 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	695a      	ldr	r2, [r3, #20]
 800964a:	4b34      	ldr	r3, [pc, #208]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009652:	429a      	cmp	r2, r3
 8009654:	d208      	bcs.n	8009668 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009656:	4b31      	ldr	r3, [pc, #196]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	492e      	ldr	r1, [pc, #184]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 8009664:	4313      	orrs	r3, r2
 8009666:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0310 	and.w	r3, r3, #16
 8009670:	2b00      	cmp	r3, #0
 8009672:	d010      	beq.n	8009696 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	699a      	ldr	r2, [r3, #24]
 8009678:	4b28      	ldr	r3, [pc, #160]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009680:	429a      	cmp	r2, r3
 8009682:	d208      	bcs.n	8009696 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009684:	4b25      	ldr	r3, [pc, #148]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	4922      	ldr	r1, [pc, #136]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 8009692:	4313      	orrs	r3, r2
 8009694:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0320 	and.w	r3, r3, #32
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d010      	beq.n	80096c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69da      	ldr	r2, [r3, #28]
 80096a6:	4b1d      	ldr	r3, [pc, #116]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d208      	bcs.n	80096c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80096b2:	4b1a      	ldr	r3, [pc, #104]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	4917      	ldr	r1, [pc, #92]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80096c4:	f000 f834 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 80096c8:	4602      	mov	r2, r0
 80096ca:	4b14      	ldr	r3, [pc, #80]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	0a1b      	lsrs	r3, r3, #8
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	4912      	ldr	r1, [pc, #72]	; (8009720 <HAL_RCC_ClockConfig+0x35c>)
 80096d6:	5ccb      	ldrb	r3, [r1, r3]
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	fa22 f303 	lsr.w	r3, r2, r3
 80096e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096e2:	4b0e      	ldr	r3, [pc, #56]	; (800971c <HAL_RCC_ClockConfig+0x358>)
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	f003 030f 	and.w	r3, r3, #15
 80096ea:	4a0d      	ldr	r2, [pc, #52]	; (8009720 <HAL_RCC_ClockConfig+0x35c>)
 80096ec:	5cd3      	ldrb	r3, [r2, r3]
 80096ee:	f003 031f 	and.w	r3, r3, #31
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	fa22 f303 	lsr.w	r3, r2, r3
 80096f8:	4a0a      	ldr	r2, [pc, #40]	; (8009724 <HAL_RCC_ClockConfig+0x360>)
 80096fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096fc:	4a0a      	ldr	r2, [pc, #40]	; (8009728 <HAL_RCC_ClockConfig+0x364>)
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <HAL_RCC_ClockConfig+0x368>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f7f8 fcf2 	bl	80020f0 <HAL_InitTick>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009710:	7bfb      	ldrb	r3, [r7, #15]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400
 8009720:	080214bc 	.word	0x080214bc
 8009724:	24000040 	.word	0x24000040
 8009728:	2400003c 	.word	0x2400003c
 800972c:	24000048 	.word	0x24000048

08009730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009730:	b480      	push	{r7}
 8009732:	b089      	sub	sp, #36	; 0x24
 8009734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009736:	4bb3      	ldr	r3, [pc, #716]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800973e:	2b18      	cmp	r3, #24
 8009740:	f200 8155 	bhi.w	80099ee <HAL_RCC_GetSysClockFreq+0x2be>
 8009744:	a201      	add	r2, pc, #4	; (adr r2, 800974c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	080097b1 	.word	0x080097b1
 8009750:	080099ef 	.word	0x080099ef
 8009754:	080099ef 	.word	0x080099ef
 8009758:	080099ef 	.word	0x080099ef
 800975c:	080099ef 	.word	0x080099ef
 8009760:	080099ef 	.word	0x080099ef
 8009764:	080099ef 	.word	0x080099ef
 8009768:	080099ef 	.word	0x080099ef
 800976c:	080097d7 	.word	0x080097d7
 8009770:	080099ef 	.word	0x080099ef
 8009774:	080099ef 	.word	0x080099ef
 8009778:	080099ef 	.word	0x080099ef
 800977c:	080099ef 	.word	0x080099ef
 8009780:	080099ef 	.word	0x080099ef
 8009784:	080099ef 	.word	0x080099ef
 8009788:	080099ef 	.word	0x080099ef
 800978c:	080097dd 	.word	0x080097dd
 8009790:	080099ef 	.word	0x080099ef
 8009794:	080099ef 	.word	0x080099ef
 8009798:	080099ef 	.word	0x080099ef
 800979c:	080099ef 	.word	0x080099ef
 80097a0:	080099ef 	.word	0x080099ef
 80097a4:	080099ef 	.word	0x080099ef
 80097a8:	080099ef 	.word	0x080099ef
 80097ac:	080097e3 	.word	0x080097e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b0:	4b94      	ldr	r3, [pc, #592]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d009      	beq.n	80097d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097bc:	4b91      	ldr	r3, [pc, #580]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	08db      	lsrs	r3, r3, #3
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	4a90      	ldr	r2, [pc, #576]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097c8:	fa22 f303 	lsr.w	r3, r2, r3
 80097cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80097ce:	e111      	b.n	80099f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80097d0:	4b8d      	ldr	r3, [pc, #564]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097d2:	61bb      	str	r3, [r7, #24]
    break;
 80097d4:	e10e      	b.n	80099f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80097d6:	4b8d      	ldr	r3, [pc, #564]	; (8009a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097d8:	61bb      	str	r3, [r7, #24]
    break;
 80097da:	e10b      	b.n	80099f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80097dc:	4b8c      	ldr	r3, [pc, #560]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80097de:	61bb      	str	r3, [r7, #24]
    break;
 80097e0:	e108      	b.n	80099f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097e2:	4b88      	ldr	r3, [pc, #544]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	f003 0303 	and.w	r3, r3, #3
 80097ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80097ec:	4b85      	ldr	r3, [pc, #532]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	091b      	lsrs	r3, r3, #4
 80097f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097f8:	4b82      	ldr	r3, [pc, #520]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009802:	4b80      	ldr	r3, [pc, #512]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009806:	08db      	lsrs	r3, r3, #3
 8009808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	fb02 f303 	mul.w	r3, r2, r3
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 80e1 	beq.w	80099e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b02      	cmp	r3, #2
 800982a:	f000 8083 	beq.w	8009934 <HAL_RCC_GetSysClockFreq+0x204>
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b02      	cmp	r3, #2
 8009832:	f200 80a1 	bhi.w	8009978 <HAL_RCC_GetSysClockFreq+0x248>
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <HAL_RCC_GetSysClockFreq+0x114>
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d056      	beq.n	80098f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009842:	e099      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009844:	4b6f      	ldr	r3, [pc, #444]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0320 	and.w	r3, r3, #32
 800984c:	2b00      	cmp	r3, #0
 800984e:	d02d      	beq.n	80098ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009850:	4b6c      	ldr	r3, [pc, #432]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	08db      	lsrs	r3, r3, #3
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	4a6b      	ldr	r2, [pc, #428]	; (8009a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800985c:	fa22 f303 	lsr.w	r3, r2, r3
 8009860:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800987a:	4b62      	ldr	r3, [pc, #392]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800988a:	ed97 6a02 	vldr	s12, [r7, #8]
 800988e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800989a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800989e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80098aa:	e087      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80098ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098be:	4b51      	ldr	r3, [pc, #324]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80098d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ee:	e065      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80098fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009902:	4b40      	ldr	r3, [pc, #256]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009912:	ed97 6a02 	vldr	s12, [r7, #8]
 8009916:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800991a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009932:	e043      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009946:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009956:	ed97 6a02 	vldr	s12, [r7, #8]
 800995a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800995e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800996a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009976:	e021      	b.n	80099bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998a:	4b1e      	ldr	r3, [pc, #120]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800998c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999a:	ed97 6a02 	vldr	s12, [r7, #8]
 800999e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80099bc:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c0:	0a5b      	lsrs	r3, r3, #9
 80099c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c6:	3301      	adds	r3, #1
 80099c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	ee07 3a90 	vmov	s15, r3
 80099d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e0:	ee17 3a90 	vmov	r3, s15
 80099e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80099e6:	e005      	b.n	80099f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
    break;
 80099ec:	e002      	b.n	80099f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80099ee:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099f0:	61bb      	str	r3, [r7, #24]
    break;
 80099f2:	bf00      	nop
  }

  return sysclockfreq;
 80099f4:	69bb      	ldr	r3, [r7, #24]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3724      	adds	r7, #36	; 0x24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	58024400 	.word	0x58024400
 8009a08:	03d09000 	.word	0x03d09000
 8009a0c:	003d0900 	.word	0x003d0900
 8009a10:	017d7840 	.word	0x017d7840
 8009a14:	46000000 	.word	0x46000000
 8009a18:	4c742400 	.word	0x4c742400
 8009a1c:	4a742400 	.word	0x4a742400
 8009a20:	4bbebc20 	.word	0x4bbebc20

08009a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a2a:	f7ff fe81 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	0a1b      	lsrs	r3, r3, #8
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	490f      	ldr	r1, [pc, #60]	; (8009a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a3c:	5ccb      	ldrb	r3, [r1, r3]
 8009a3e:	f003 031f 	and.w	r3, r3, #31
 8009a42:	fa22 f303 	lsr.w	r3, r2, r3
 8009a46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	f003 030f 	and.w	r3, r3, #15
 8009a50:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a52:	5cd3      	ldrb	r3, [r2, r3]
 8009a54:	f003 031f 	and.w	r3, r3, #31
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5e:	4a07      	ldr	r2, [pc, #28]	; (8009a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8009a60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a62:	4a07      	ldr	r2, [pc, #28]	; (8009a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a68:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	58024400 	.word	0x58024400
 8009a78:	080214bc 	.word	0x080214bc
 8009a7c:	24000040 	.word	0x24000040
 8009a80:	2400003c 	.word	0x2400003c

08009a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a88:	f7ff ffcc 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	091b      	lsrs	r3, r3, #4
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	4904      	ldr	r1, [pc, #16]	; (8009aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a9a:	5ccb      	ldrb	r3, [r1, r3]
 8009a9c:	f003 031f 	and.w	r3, r3, #31
 8009aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	080214bc 	.word	0x080214bc

08009ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009ab4:	f7ff ffb6 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	f003 0307 	and.w	r3, r3, #7
 8009ac4:	4904      	ldr	r1, [pc, #16]	; (8009ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009ac6:	5ccb      	ldrb	r3, [r1, r3]
 8009ac8:	f003 031f 	and.w	r3, r3, #31
 8009acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	080214bc 	.word	0x080214bc

08009adc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	223f      	movs	r2, #63	; 0x3f
 8009aea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009aec:	4b1a      	ldr	r3, [pc, #104]	; (8009b58 <HAL_RCC_GetClockConfig+0x7c>)
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f003 0207 	and.w	r2, r3, #7
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009af8:	4b17      	ldr	r3, [pc, #92]	; (8009b58 <HAL_RCC_GetClockConfig+0x7c>)
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009b04:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <HAL_RCC_GetClockConfig+0x7c>)
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	f003 020f 	and.w	r2, r3, #15
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009b10:	4b11      	ldr	r3, [pc, #68]	; (8009b58 <HAL_RCC_GetClockConfig+0x7c>)
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009b1c:	4b0e      	ldr	r3, [pc, #56]	; (8009b58 <HAL_RCC_GetClockConfig+0x7c>)
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009b28:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <HAL_RCC_GetClockConfig+0x7c>)
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009b34:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <HAL_RCC_GetClockConfig+0x7c>)
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <HAL_RCC_GetClockConfig+0x80>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 020f 	and.w	r2, r3, #15
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	601a      	str	r2, [r3, #0]
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	52002000 	.word	0x52002000

08009b60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b68:	2300      	movs	r3, #0
 8009b6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d03f      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b84:	d02a      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009b86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b8a:	d824      	bhi.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b90:	d018      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b96:	d81e      	bhi.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba0:	d007      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009ba2:	e018      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba4:	4bab      	ldr	r3, [pc, #684]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	4aaa      	ldr	r2, [pc, #680]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009bb0:	e015      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	2102      	movs	r1, #2
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 f989 	bl	800aed0 <RCCEx_PLL2_Config>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009bc2:	e00c      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3324      	adds	r3, #36	; 0x24
 8009bc8:	2102      	movs	r1, #2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fa32 	bl	800b034 <RCCEx_PLL3_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009bd4:	e003      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8009bda:	e000      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d109      	bne.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009be4:	4b9b      	ldr	r3, [pc, #620]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bf0:	4998      	ldr	r1, [pc, #608]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	650b      	str	r3, [r1, #80]	; 0x50
 8009bf6:	e001      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d03d      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0c:	2b04      	cmp	r3, #4
 8009c0e:	d826      	bhi.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009c10:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c16:	bf00      	nop
 8009c18:	08009c2d 	.word	0x08009c2d
 8009c1c:	08009c3b 	.word	0x08009c3b
 8009c20:	08009c4d 	.word	0x08009c4d
 8009c24:	08009c65 	.word	0x08009c65
 8009c28:	08009c65 	.word	0x08009c65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c2c:	4b89      	ldr	r3, [pc, #548]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	4a88      	ldr	r2, [pc, #544]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c38:	e015      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 f945 	bl	800aed0 <RCCEx_PLL2_Config>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c4a:	e00c      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3324      	adds	r3, #36	; 0x24
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 f9ee 	bl	800b034 <RCCEx_PLL3_Config>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c5c:	e003      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	75fb      	strb	r3, [r7, #23]
      break;
 8009c62:	e000      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c66:	7dfb      	ldrb	r3, [r7, #23]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d109      	bne.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c6c:	4b79      	ldr	r3, [pc, #484]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c70:	f023 0207 	bic.w	r2, r3, #7
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c78:	4976      	ldr	r1, [pc, #472]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8009c7e:	e001      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
 8009c82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d051      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c96:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c9a:	d036      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009c9c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009ca0:	d830      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009ca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ca6:	d032      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cac:	d82a      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009cae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cb2:	d02e      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009cb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cb8:	d824      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cbe:	d018      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cc4:	d81e      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cce:	d007      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009cd0:	e018      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd2:	4b60      	ldr	r3, [pc, #384]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	4a5f      	ldr	r2, [pc, #380]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cde:	e019      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f001 f8f2 	bl	800aed0 <RCCEx_PLL2_Config>
 8009cec:	4603      	mov	r3, r0
 8009cee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009cf0:	e010      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3324      	adds	r3, #36	; 0x24
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 f99b 	bl	800b034 <RCCEx_PLL3_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d02:	e007      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	75fb      	strb	r3, [r7, #23]
      break;
 8009d08:	e004      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009d0a:	bf00      	nop
 8009d0c:	e002      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009d0e:	bf00      	nop
 8009d10:	e000      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d1a:	4b4e      	ldr	r3, [pc, #312]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d1e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d28:	494a      	ldr	r1, [pc, #296]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8009d2e:	e001      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
 8009d32:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d051      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d4a:	d036      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009d4c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d50:	d830      	bhi.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d56:	d032      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d5c:	d82a      	bhi.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d62:	d02e      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009d64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d68:	d824      	bhi.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d6e:	d018      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d74:	d81e      	bhi.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d7e:	d007      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009d80:	e018      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d82:	4b34      	ldr	r3, [pc, #208]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d86:	4a33      	ldr	r2, [pc, #204]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d8e:	e019      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3304      	adds	r3, #4
 8009d94:	2100      	movs	r1, #0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 f89a 	bl	800aed0 <RCCEx_PLL2_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009da0:	e010      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3324      	adds	r3, #36	; 0x24
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 f943 	bl	800b034 <RCCEx_PLL3_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009db2:	e007      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
      break;
 8009db8:	e004      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009dba:	bf00      	nop
 8009dbc:	e002      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009dbe:	bf00      	nop
 8009dc0:	e000      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10a      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009dca:	4b22      	ldr	r3, [pc, #136]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009dd8:	491e      	ldr	r1, [pc, #120]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	658b      	str	r3, [r1, #88]	; 0x58
 8009dde:	e001      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
 8009de2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d035      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df4:	2b30      	cmp	r3, #48	; 0x30
 8009df6:	d01c      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009df8:	2b30      	cmp	r3, #48	; 0x30
 8009dfa:	d817      	bhi.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d00c      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	d813      	bhi.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d016      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d10f      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e0c:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	4a10      	ldr	r2, [pc, #64]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009e18:	e00e      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	2102      	movs	r1, #2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f001 f855 	bl	800aed0 <RCCEx_PLL2_Config>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009e2a:	e005      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e30:	e002      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009e32:	bf00      	nop
 8009e34:	e000      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10c      	bne.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009e3e:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e4a:	4902      	ldr	r1, [pc, #8]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e50:	e004      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009e52:	bf00      	nop
 8009e54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d047      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e70:	d030      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e76:	d82a      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e7c:	d02c      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009e7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e82:	d824      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e88:	d018      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e8e:	d81e      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e98:	d007      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009e9a:	e018      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9c:	4bac      	ldr	r3, [pc, #688]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	4aab      	ldr	r2, [pc, #684]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ea8:	e017      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3304      	adds	r3, #4
 8009eae:	2100      	movs	r1, #0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 f80d 	bl	800aed0 <RCCEx_PLL2_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009eba:	e00e      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3324      	adds	r3, #36	; 0x24
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 f8b6 	bl	800b034 <RCCEx_PLL3_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ecc:	e005      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed2:	e002      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ed4:	bf00      	nop
 8009ed6:	e000      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d109      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ee0:	4b9b      	ldr	r3, [pc, #620]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eec:	4998      	ldr	r1, [pc, #608]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	650b      	str	r3, [r1, #80]	; 0x50
 8009ef2:	e001      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d049      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f0c:	d02e      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f12:	d828      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f18:	d02a      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f1e:	d822      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f24:	d026      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009f26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f2a:	d81c      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f30:	d010      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f36:	d816      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01d      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f40:	d111      	bne.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3304      	adds	r3, #4
 8009f46:	2101      	movs	r1, #1
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 ffc1 	bl	800aed0 <RCCEx_PLL2_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f52:	e012      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	2101      	movs	r1, #1
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 f86a 	bl	800b034 <RCCEx_PLL3_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f64:	e009      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6a:	e006      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e004      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f70:	bf00      	nop
 8009f72:	e002      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d109      	bne.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f80:	4b73      	ldr	r3, [pc, #460]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8c:	4970      	ldr	r1, [pc, #448]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	650b      	str	r3, [r1, #80]	; 0x50
 8009f92:	e001      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
 8009f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d04b      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fae:	d02e      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fb4:	d828      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fba:	d02a      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc0:	d822      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fc6:	d026      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009fc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fcc:	d81c      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd2:	d010      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd8:	d816      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d01d      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fe2:	d111      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	2101      	movs	r1, #1
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 ff70 	bl	800aed0 <RCCEx_PLL2_Config>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ff4:	e012      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3324      	adds	r3, #36	; 0x24
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 f819 	bl	800b034 <RCCEx_PLL3_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a006:	e009      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	75fb      	strb	r3, [r7, #23]
      break;
 800a00c:	e006      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a00e:	bf00      	nop
 800a010:	e004      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a012:	bf00      	nop
 800a014:	e002      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a016:	bf00      	nop
 800a018:	e000      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a01a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10a      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a022:	4b4b      	ldr	r3, [pc, #300]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a026:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a030:	4947      	ldr	r1, [pc, #284]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a032:	4313      	orrs	r3, r2
 800a034:	658b      	str	r3, [r1, #88]	; 0x58
 800a036:	e001      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d02f      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a050:	d00e      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a056:	d814      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d015      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a05c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a060:	d10f      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a062:	4b3b      	ldr	r3, [pc, #236]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	4a3a      	ldr	r2, [pc, #232]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a06c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a06e:	e00c      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3304      	adds	r3, #4
 800a074:	2101      	movs	r1, #1
 800a076:	4618      	mov	r0, r3
 800a078:	f000 ff2a 	bl	800aed0 <RCCEx_PLL2_Config>
 800a07c:	4603      	mov	r3, r0
 800a07e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a080:	e003      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	75fb      	strb	r3, [r7, #23]
      break;
 800a086:	e000      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d109      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a090:	4b2f      	ldr	r3, [pc, #188]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a094:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a09c:	492c      	ldr	r1, [pc, #176]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	650b      	str	r3, [r1, #80]	; 0x50
 800a0a2:	e001      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d032      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d81b      	bhi.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a0bc:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0fb 	.word	0x0800a0fb
 800a0c8:	0800a0d5 	.word	0x0800a0d5
 800a0cc:	0800a0e3 	.word	0x0800a0e3
 800a0d0:	0800a0fb 	.word	0x0800a0fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0d4:	4b1e      	ldr	r3, [pc, #120]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	4a1d      	ldr	r2, [pc, #116]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a0da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0e0:	e00c      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	2102      	movs	r1, #2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fef1 	bl	800aed0 <RCCEx_PLL2_Config>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f8:	e000      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a0fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a102:	4b13      	ldr	r3, [pc, #76]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a106:	f023 0203 	bic.w	r2, r3, #3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a10e:	4910      	ldr	r1, [pc, #64]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a110:	4313      	orrs	r3, r2
 800a112:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a114:	e001      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 808a 	beq.w	800a23c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a128:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a09      	ldr	r2, [pc, #36]	; (800a154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a12e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a134:	f7f9 ff18 	bl	8003f68 <HAL_GetTick>
 800a138:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a13a:	e00d      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a13c:	f7f9 ff14 	bl	8003f68 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b64      	cmp	r3, #100	; 0x64
 800a148:	d906      	bls.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	75fb      	strb	r3, [r7, #23]
        break;
 800a14e:	e009      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a150:	58024400 	.word	0x58024400
 800a154:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a158:	4bb9      	ldr	r3, [pc, #740]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0eb      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d166      	bne.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a16a:	4bb6      	ldr	r3, [pc, #728]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a16c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a174:	4053      	eors	r3, r2
 800a176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d013      	beq.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a17e:	4bb1      	ldr	r3, [pc, #708]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a186:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a188:	4bae      	ldr	r3, [pc, #696]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18c:	4aad      	ldr	r2, [pc, #692]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a18e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a192:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a194:	4bab      	ldr	r3, [pc, #684]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a198:	4aaa      	ldr	r2, [pc, #680]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a19a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a19e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a1a0:	4aa8      	ldr	r2, [pc, #672]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b0:	d115      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b2:	f7f9 fed9 	bl	8003f68 <HAL_GetTick>
 800a1b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1b8:	e00b      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ba:	f7f9 fed5 	bl	8003f68 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d902      	bls.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	75fb      	strb	r3, [r7, #23]
            break;
 800a1d0:	e005      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1d2:	4b9c      	ldr	r3, [pc, #624]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d6:	f003 0302 	and.w	r3, r3, #2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0ed      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d126      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1f2:	d10d      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800a1f4:	4b93      	ldr	r3, [pc, #588]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a202:	0919      	lsrs	r1, r3, #4
 800a204:	4b90      	ldr	r3, [pc, #576]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a206:	400b      	ands	r3, r1
 800a208:	498e      	ldr	r1, [pc, #568]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	610b      	str	r3, [r1, #16]
 800a20e:	e005      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800a210:	4b8c      	ldr	r3, [pc, #560]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	4a8b      	ldr	r2, [pc, #556]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a216:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a21a:	6113      	str	r3, [r2, #16]
 800a21c:	4b89      	ldr	r3, [pc, #548]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a21e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a22a:	4986      	ldr	r1, [pc, #536]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	670b      	str	r3, [r1, #112]	; 0x70
 800a230:	e004      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	75bb      	strb	r3, [r7, #22]
 800a236:	e001      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a238:	7dfb      	ldrb	r3, [r7, #23]
 800a23a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d07e      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24c:	2b28      	cmp	r3, #40	; 0x28
 800a24e:	d867      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800a250:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800a252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a256:	bf00      	nop
 800a258:	0800a327 	.word	0x0800a327
 800a25c:	0800a321 	.word	0x0800a321
 800a260:	0800a321 	.word	0x0800a321
 800a264:	0800a321 	.word	0x0800a321
 800a268:	0800a321 	.word	0x0800a321
 800a26c:	0800a321 	.word	0x0800a321
 800a270:	0800a321 	.word	0x0800a321
 800a274:	0800a321 	.word	0x0800a321
 800a278:	0800a2fd 	.word	0x0800a2fd
 800a27c:	0800a321 	.word	0x0800a321
 800a280:	0800a321 	.word	0x0800a321
 800a284:	0800a321 	.word	0x0800a321
 800a288:	0800a321 	.word	0x0800a321
 800a28c:	0800a321 	.word	0x0800a321
 800a290:	0800a321 	.word	0x0800a321
 800a294:	0800a321 	.word	0x0800a321
 800a298:	0800a30f 	.word	0x0800a30f
 800a29c:	0800a321 	.word	0x0800a321
 800a2a0:	0800a321 	.word	0x0800a321
 800a2a4:	0800a321 	.word	0x0800a321
 800a2a8:	0800a321 	.word	0x0800a321
 800a2ac:	0800a321 	.word	0x0800a321
 800a2b0:	0800a321 	.word	0x0800a321
 800a2b4:	0800a321 	.word	0x0800a321
 800a2b8:	0800a327 	.word	0x0800a327
 800a2bc:	0800a321 	.word	0x0800a321
 800a2c0:	0800a321 	.word	0x0800a321
 800a2c4:	0800a321 	.word	0x0800a321
 800a2c8:	0800a321 	.word	0x0800a321
 800a2cc:	0800a321 	.word	0x0800a321
 800a2d0:	0800a321 	.word	0x0800a321
 800a2d4:	0800a321 	.word	0x0800a321
 800a2d8:	0800a327 	.word	0x0800a327
 800a2dc:	0800a321 	.word	0x0800a321
 800a2e0:	0800a321 	.word	0x0800a321
 800a2e4:	0800a321 	.word	0x0800a321
 800a2e8:	0800a321 	.word	0x0800a321
 800a2ec:	0800a321 	.word	0x0800a321
 800a2f0:	0800a321 	.word	0x0800a321
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	0800a327 	.word	0x0800a327
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3304      	adds	r3, #4
 800a300:	2101      	movs	r1, #1
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fde4 	bl	800aed0 <RCCEx_PLL2_Config>
 800a308:	4603      	mov	r3, r0
 800a30a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a30c:	e00c      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3324      	adds	r3, #36	; 0x24
 800a312:	2101      	movs	r1, #1
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fe8d 	bl	800b034 <RCCEx_PLL3_Config>
 800a31a:	4603      	mov	r3, r0
 800a31c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a31e:	e003      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	75fb      	strb	r3, [r7, #23]
      break;
 800a324:	e000      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800a326:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d109      	bne.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a32e:	4b45      	ldr	r3, [pc, #276]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33a:	4942      	ldr	r1, [pc, #264]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	654b      	str	r3, [r1, #84]	; 0x54
 800a340:	e001      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d037      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a356:	2b05      	cmp	r3, #5
 800a358:	d820      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800a35a:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a3a3 	.word	0x0800a3a3
 800a364:	0800a379 	.word	0x0800a379
 800a368:	0800a38b 	.word	0x0800a38b
 800a36c:	0800a3a3 	.word	0x0800a3a3
 800a370:	0800a3a3 	.word	0x0800a3a3
 800a374:	0800a3a3 	.word	0x0800a3a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3304      	adds	r3, #4
 800a37c:	2101      	movs	r1, #1
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fda6 	bl	800aed0 <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a388:	e00c      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3324      	adds	r3, #36	; 0x24
 800a38e:	2101      	movs	r1, #1
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fe4f 	bl	800b034 <RCCEx_PLL3_Config>
 800a396:	4603      	mov	r3, r0
 800a398:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a39a:	e003      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a0:	e000      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800a3a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d109      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a3aa:	4b26      	ldr	r3, [pc, #152]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ae:	f023 0207 	bic.w	r2, r3, #7
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	4923      	ldr	r1, [pc, #140]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	654b      	str	r3, [r1, #84]	; 0x54
 800a3bc:	e001      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0304 	and.w	r3, r3, #4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d040      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3d4:	2b05      	cmp	r3, #5
 800a3d6:	d821      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a423 	.word	0x0800a423
 800a3e4:	0800a3f9 	.word	0x0800a3f9
 800a3e8:	0800a40b 	.word	0x0800a40b
 800a3ec:	0800a423 	.word	0x0800a423
 800a3f0:	0800a423 	.word	0x0800a423
 800a3f4:	0800a423 	.word	0x0800a423
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fd66 	bl	800aed0 <RCCEx_PLL2_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a408:	e00c      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3324      	adds	r3, #36	; 0x24
 800a40e:	2101      	movs	r1, #1
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fe0f 	bl	800b034 <RCCEx_PLL3_Config>
 800a416:	4603      	mov	r3, r0
 800a418:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a41a:	e003      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
      break;
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800a422:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d110      	bne.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a42a:	4b06      	ldr	r3, [pc, #24]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42e:	f023 0207 	bic.w	r2, r3, #7
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a438:	4902      	ldr	r1, [pc, #8]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	658b      	str	r3, [r1, #88]	; 0x58
 800a43e:	e007      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a440:	58024800 	.word	0x58024800
 800a444:	58024400 	.word	0x58024400
 800a448:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0320 	and.w	r3, r3, #32
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d04b      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a466:	d02e      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a46c:	d828      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a46e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a472:	d02a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a478:	d822      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a47a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a47e:	d026      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a480:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a484:	d81c      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a48a:	d010      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800a48c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a490:	d816      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d01d      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a49a:	d111      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fd14 	bl	800aed0 <RCCEx_PLL2_Config>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a4ac:	e012      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3324      	adds	r3, #36	; 0x24
 800a4b2:	2102      	movs	r1, #2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 fdbd 	bl	800b034 <RCCEx_PLL3_Config>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a4be:	e009      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c4:	e006      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a4c6:	bf00      	nop
 800a4c8:	e004      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a4ca:	bf00      	nop
 800a4cc:	e002      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a4ce:	bf00      	nop
 800a4d0:	e000      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a4d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10a      	bne.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4da:	4bb2      	ldr	r3, [pc, #712]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e8:	49ae      	ldr	r1, [pc, #696]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	654b      	str	r3, [r1, #84]	; 0x54
 800a4ee:	e001      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d04b      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a506:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a50a:	d02e      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a50c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a510:	d828      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a516:	d02a      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a51c:	d822      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a51e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a522:	d026      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a528:	d81c      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a52a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a52e:	d010      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800a530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a534:	d816      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01d      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a53a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a53e:	d111      	bne.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3304      	adds	r3, #4
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fcc2 	bl	800aed0 <RCCEx_PLL2_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a550:	e012      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3324      	adds	r3, #36	; 0x24
 800a556:	2102      	movs	r1, #2
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fd6b 	bl	800b034 <RCCEx_PLL3_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a562:	e009      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	75fb      	strb	r3, [r7, #23]
      break;
 800a568:	e006      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a56a:	bf00      	nop
 800a56c:	e004      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a56e:	bf00      	nop
 800a570:	e002      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a572:	bf00      	nop
 800a574:	e000      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a576:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a57e:	4b89      	ldr	r3, [pc, #548]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a582:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a58c:	4985      	ldr	r1, [pc, #532]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	658b      	str	r3, [r1, #88]	; 0x58
 800a592:	e001      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d04b      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5ae:	d02e      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a5b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5b4:	d828      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a5b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ba:	d02a      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5c0:	d822      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a5c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5c6:	d026      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a5c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5cc:	d81c      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a5ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5d2:	d010      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800a5d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5d8:	d816      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01d      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800a5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e2:	d111      	bne.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 fc70 	bl	800aed0 <RCCEx_PLL2_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5f4:	e012      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3324      	adds	r3, #36	; 0x24
 800a5fa:	2102      	movs	r1, #2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fd19 	bl	800b034 <RCCEx_PLL3_Config>
 800a602:	4603      	mov	r3, r0
 800a604:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a606:	e009      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	75fb      	strb	r3, [r7, #23]
      break;
 800a60c:	e006      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a60e:	bf00      	nop
 800a610:	e004      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a612:	bf00      	nop
 800a614:	e002      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a616:	bf00      	nop
 800a618:	e000      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a61a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10a      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a622:	4b60      	ldr	r3, [pc, #384]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a630:	495c      	ldr	r1, [pc, #368]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a632:	4313      	orrs	r3, r2
 800a634:	658b      	str	r3, [r1, #88]	; 0x58
 800a636:	e001      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0308 	and.w	r3, r3, #8
 800a644:	2b00      	cmp	r3, #0
 800a646:	d018      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a64c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a650:	d10a      	bne.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	3324      	adds	r3, #36	; 0x24
 800a656:	2102      	movs	r1, #2
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fceb 	bl	800b034 <RCCEx_PLL3_Config>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a668:	4b4e      	ldr	r3, [pc, #312]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a674:	494b      	ldr	r1, [pc, #300]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a676:	4313      	orrs	r3, r2
 800a678:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0310 	and.w	r3, r3, #16
 800a682:	2b00      	cmp	r3, #0
 800a684:	d01a      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a690:	d10a      	bne.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3324      	adds	r3, #36	; 0x24
 800a696:	2102      	movs	r1, #2
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fccb 	bl	800b034 <RCCEx_PLL3_Config>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6a8:	4b3e      	ldr	r3, [pc, #248]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b6:	493b      	ldr	r1, [pc, #236]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d034      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6d2:	d01d      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a6d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6d8:	d817      	bhi.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a6de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6e2:	d009      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a6e4:	e011      	b.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fbef 	bl	800aed0 <RCCEx_PLL2_Config>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6f6:	e00c      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3324      	adds	r3, #36	; 0x24
 800a6fc:	2102      	movs	r1, #2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fc98 	bl	800b034 <RCCEx_PLL3_Config>
 800a704:	4603      	mov	r3, r0
 800a706:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a708:	e003      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	75fb      	strb	r3, [r7, #23]
      break;
 800a70e:	e000      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a710:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a718:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a726:	491f      	ldr	r1, [pc, #124]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	658b      	str	r3, [r1, #88]	; 0x58
 800a72c:	e001      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d036      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a748:	d01c      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a74a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a74e:	d816      	bhi.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a754:	d003      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a75a:	d007      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a75c:	e00f      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a75e:	4b11      	ldr	r3, [pc, #68]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a762:	4a10      	ldr	r2, [pc, #64]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a76a:	e00c      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3324      	adds	r3, #36	; 0x24
 800a770:	2101      	movs	r1, #1
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fc5e 	bl	800b034 <RCCEx_PLL3_Config>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a77c:	e003      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	75fb      	strb	r3, [r7, #23]
      break;
 800a782:	e000      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a784:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10d      	bne.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a79a:	4902      	ldr	r1, [pc, #8]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a79c:	4313      	orrs	r3, r2
 800a79e:	654b      	str	r3, [r1, #84]	; 0x54
 800a7a0:	e004      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800a7a2:	bf00      	nop
 800a7a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d029      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a7c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7c4:	d007      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a7c6:	e00f      	b.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7c8:	4b61      	ldr	r3, [pc, #388]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7cc:	4a60      	ldr	r2, [pc, #384]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a7ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7d4:	e00b      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	2102      	movs	r1, #2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 fb77 	bl	800aed0 <RCCEx_PLL2_Config>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7e6:	e002      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7f4:	4b56      	ldr	r3, [pc, #344]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a7f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a800:	4953      	ldr	r1, [pc, #332]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a802:	4313      	orrs	r3, r2
 800a804:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a806:	e001      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00a      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3324      	adds	r3, #36	; 0x24
 800a81c:	2102      	movs	r1, #2
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fc08 	bl	800b034 <RCCEx_PLL3_Config>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a836:	2b00      	cmp	r3, #0
 800a838:	d030      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a83e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a842:	d017      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a848:	d811      	bhi.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a84a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a84e:	d013      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800a850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a854:	d80b      	bhi.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a856:	2b00      	cmp	r3, #0
 800a858:	d010      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800a85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a85e:	d106      	bne.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a860:	4b3b      	ldr	r3, [pc, #236]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	4a3a      	ldr	r2, [pc, #232]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a86a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a86c:	e007      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	75fb      	strb	r3, [r7, #23]
      break;
 800a872:	e004      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a874:	bf00      	nop
 800a876:	e002      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a878:	bf00      	nop
 800a87a:	e000      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a87c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d109      	bne.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a884:	4b32      	ldr	r3, [pc, #200]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a890:	492f      	ldr	r1, [pc, #188]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a892:	4313      	orrs	r3, r2
 800a894:	654b      	str	r3, [r1, #84]	; 0x54
 800a896:	e001      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d008      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8a8:	4b29      	ldr	r3, [pc, #164]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b4:	4926      	ldr	r1, [pc, #152]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d008      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8c6:	4b22      	ldr	r3, [pc, #136]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d2:	491f      	ldr	r1, [pc, #124]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00d      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8e4:	4b1a      	ldr	r3, [pc, #104]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	4a19      	ldr	r2, [pc, #100]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8ee:	6113      	str	r3, [r2, #16]
 800a8f0:	4b17      	ldr	r3, [pc, #92]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8f2:	691a      	ldr	r2, [r3, #16]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a8fa:	4915      	ldr	r1, [pc, #84]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	da08      	bge.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a908:	4b11      	ldr	r3, [pc, #68]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a90a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a90c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a914:	490e      	ldr	r1, [pc, #56]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a916:	4313      	orrs	r3, r2
 800a918:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a926:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a934:	4906      	ldr	r1, [pc, #24]	; (800a950 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a936:	4313      	orrs	r3, r2
 800a938:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a93a:	7dbb      	ldrb	r3, [r7, #22]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	e000      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	58024400 	.word	0x58024400

0800a954 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a958:	f7ff f864 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 800a95c:	4602      	mov	r2, r0
 800a95e:	4b06      	ldr	r3, [pc, #24]	; (800a978 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	091b      	lsrs	r3, r3, #4
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	4904      	ldr	r1, [pc, #16]	; (800a97c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a96a:	5ccb      	ldrb	r3, [r1, r3]
 800a96c:	f003 031f 	and.w	r3, r3, #31
 800a970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a974:	4618      	mov	r0, r3
 800a976:	bd80      	pop	{r7, pc}
 800a978:	58024400 	.word	0x58024400
 800a97c:	080214bc 	.word	0x080214bc

0800a980 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a980:	b480      	push	{r7}
 800a982:	b089      	sub	sp, #36	; 0x24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a988:	4ba1      	ldr	r3, [pc, #644]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98c:	f003 0303 	and.w	r3, r3, #3
 800a990:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a992:	4b9f      	ldr	r3, [pc, #636]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a996:	0b1b      	lsrs	r3, r3, #12
 800a998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a99c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a99e:	4b9c      	ldr	r3, [pc, #624]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	091b      	lsrs	r3, r3, #4
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a9aa:	4b99      	ldr	r3, [pc, #612]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ae:	08db      	lsrs	r3, r3, #3
 800a9b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ba:	ee07 3a90 	vmov	s15, r3
 800a9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 8111 	beq.w	800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	f000 8083 	beq.w	800aadc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	f200 80a1 	bhi.w	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d056      	beq.n	800aa98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9ea:	e099      	b.n	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ec:	4b88      	ldr	r3, [pc, #544]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d02d      	beq.n	800aa54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9f8:	4b85      	ldr	r3, [pc, #532]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	08db      	lsrs	r3, r3, #3
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	4a84      	ldr	r2, [pc, #528]	; (800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa04:	fa22 f303 	lsr.w	r3, r2, r3
 800aa08:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	ee07 3a90 	vmov	s15, r3
 800aa10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	ee07 3a90 	vmov	s15, r3
 800aa1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa22:	4b7b      	ldr	r3, [pc, #492]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa32:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa36:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa52:	e087      	b.n	800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa66:	4b6a      	ldr	r3, [pc, #424]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa76:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa96:	e065      	b.n	800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	ee07 3a90 	vmov	s15, r3
 800aa9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aaa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaaa:	4b59      	ldr	r3, [pc, #356]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaba:	ed97 6a03 	vldr	s12, [r7, #12]
 800aabe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aada:	e043      	b.n	800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aaea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaee:	4b48      	ldr	r3, [pc, #288]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab02:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab1e:	e021      	b.n	800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab32:	4b37      	ldr	r3, [pc, #220]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab46:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab64:	4b2a      	ldr	r3, [pc, #168]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	0a5b      	lsrs	r3, r3, #9
 800ab6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab8a:	ee17 2a90 	vmov	r2, s15
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ab92:	4b1f      	ldr	r3, [pc, #124]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab96:	0c1b      	lsrs	r3, r3, #16
 800ab98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abac:	edd7 6a07 	vldr	s13, [r7, #28]
 800abb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abb8:	ee17 2a90 	vmov	r2, s15
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800abc0:	4b13      	ldr	r3, [pc, #76]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc4:	0e1b      	lsrs	r3, r3, #24
 800abc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abda:	edd7 6a07 	vldr	s13, [r7, #28]
 800abde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe6:	ee17 2a90 	vmov	r2, s15
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abee:	e008      	b.n	800ac02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	609a      	str	r2, [r3, #8]
}
 800ac02:	bf00      	nop
 800ac04:	3724      	adds	r7, #36	; 0x24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	58024400 	.word	0x58024400
 800ac14:	03d09000 	.word	0x03d09000
 800ac18:	46000000 	.word	0x46000000
 800ac1c:	4c742400 	.word	0x4c742400
 800ac20:	4a742400 	.word	0x4a742400
 800ac24:	4bbebc20 	.word	0x4bbebc20

0800ac28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b089      	sub	sp, #36	; 0x24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac30:	4ba1      	ldr	r3, [pc, #644]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ac3a:	4b9f      	ldr	r3, [pc, #636]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	0d1b      	lsrs	r3, r3, #20
 800ac40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac46:	4b9c      	ldr	r3, [pc, #624]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	0a1b      	lsrs	r3, r3, #8
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ac52:	4b99      	ldr	r3, [pc, #612]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	fb02 f303 	mul.w	r3, r2, r3
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 8111 	beq.w	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	f000 8083 	beq.w	800ad84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	f200 80a1 	bhi.w	800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d056      	beq.n	800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac92:	e099      	b.n	800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac94:	4b88      	ldr	r3, [pc, #544]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0320 	and.w	r3, r3, #32
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d02d      	beq.n	800acfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aca0:	4b85      	ldr	r3, [pc, #532]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	08db      	lsrs	r3, r3, #3
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	4a84      	ldr	r2, [pc, #528]	; (800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
 800acb0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b7b      	ldr	r3, [pc, #492]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800acfa:	e087      	b.n	800ae0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b6a      	ldr	r3, [pc, #424]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad22:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad3e:	e065      	b.n	800ae0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad52:	4b59      	ldr	r3, [pc, #356]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad66:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad82:	e043      	b.n	800ae0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b48      	ldr	r3, [pc, #288]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adc6:	e021      	b.n	800ae0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800add6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adda:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adea:	ed97 6a03 	vldr	s12, [r7, #12]
 800adee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ae0c:	4b2a      	ldr	r3, [pc, #168]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae10:	0a5b      	lsrs	r3, r3, #9
 800ae12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae32:	ee17 2a90 	vmov	r2, s15
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae3a:	4b1f      	ldr	r3, [pc, #124]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3e:	0c1b      	lsrs	r3, r3, #16
 800ae40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae44:	ee07 3a90 	vmov	s15, r3
 800ae48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae60:	ee17 2a90 	vmov	r2, s15
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae68:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6c:	0e1b      	lsrs	r3, r3, #24
 800ae6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8e:	ee17 2a90 	vmov	r2, s15
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae96:	e008      	b.n	800aeaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	609a      	str	r2, [r3, #8]
}
 800aeaa:	bf00      	nop
 800aeac:	3724      	adds	r7, #36	; 0x24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	58024400 	.word	0x58024400
 800aebc:	03d09000 	.word	0x03d09000
 800aec0:	46000000 	.word	0x46000000
 800aec4:	4c742400 	.word	0x4c742400
 800aec8:	4a742400 	.word	0x4a742400
 800aecc:	4bbebc20 	.word	0x4bbebc20

0800aed0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aede:	4b53      	ldr	r3, [pc, #332]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800aee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee2:	f003 0303 	and.w	r3, r3, #3
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d101      	bne.n	800aeee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e099      	b.n	800b022 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aeee:	4b4f      	ldr	r3, [pc, #316]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a4e      	ldr	r2, [pc, #312]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800aef4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aefa:	f7f9 f835 	bl	8003f68 <HAL_GetTick>
 800aefe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af00:	e008      	b.n	800af14 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800af02:	f7f9 f831 	bl	8003f68 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d901      	bls.n	800af14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e086      	b.n	800b022 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af14:	4b45      	ldr	r3, [pc, #276]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1f0      	bne.n	800af02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af20:	4b42      	ldr	r3, [pc, #264]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	031b      	lsls	r3, r3, #12
 800af2e:	493f      	ldr	r1, [pc, #252]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af30:	4313      	orrs	r3, r2
 800af32:	628b      	str	r3, [r1, #40]	; 0x28
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	3b01      	subs	r3, #1
 800af3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	3b01      	subs	r3, #1
 800af44:	025b      	lsls	r3, r3, #9
 800af46:	b29b      	uxth	r3, r3
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	3b01      	subs	r3, #1
 800af50:	041b      	lsls	r3, r3, #16
 800af52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af56:	431a      	orrs	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	061b      	lsls	r3, r3, #24
 800af60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af64:	4931      	ldr	r1, [pc, #196]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af66:	4313      	orrs	r3, r2
 800af68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af6a:	4b30      	ldr	r3, [pc, #192]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	492d      	ldr	r1, [pc, #180]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af78:	4313      	orrs	r3, r2
 800af7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af7c:	4b2b      	ldr	r3, [pc, #172]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	f023 0220 	bic.w	r2, r3, #32
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	4928      	ldr	r1, [pc, #160]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af8e:	4b27      	ldr	r3, [pc, #156]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af92:	4a26      	ldr	r2, [pc, #152]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af94:	f023 0310 	bic.w	r3, r3, #16
 800af98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af9a:	4b24      	ldr	r3, [pc, #144]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800af9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af9e:	4b24      	ldr	r3, [pc, #144]	; (800b030 <RCCEx_PLL2_Config+0x160>)
 800afa0:	4013      	ands	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	69d2      	ldr	r2, [r2, #28]
 800afa6:	00d2      	lsls	r2, r2, #3
 800afa8:	4920      	ldr	r1, [pc, #128]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800afae:	4b1f      	ldr	r3, [pc, #124]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb2:	4a1e      	ldr	r2, [pc, #120]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afb4:	f043 0310 	orr.w	r3, r3, #16
 800afb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d106      	bne.n	800afce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800afc0:	4b1a      	ldr	r3, [pc, #104]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	4a19      	ldr	r2, [pc, #100]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afcc:	e00f      	b.n	800afee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d106      	bne.n	800afe2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800afd4:	4b15      	ldr	r3, [pc, #84]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd8:	4a14      	ldr	r2, [pc, #80]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afe0:	e005      	b.n	800afee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800afe2:	4b12      	ldr	r3, [pc, #72]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe6:	4a11      	ldr	r2, [pc, #68]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800afe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800afec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800afee:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a0e      	ldr	r2, [pc, #56]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800aff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800affa:	f7f8 ffb5 	bl	8003f68 <HAL_GetTick>
 800affe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b000:	e008      	b.n	800b014 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b002:	f7f8 ffb1 	bl	8003f68 <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d901      	bls.n	800b014 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	e006      	b.n	800b022 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <RCCEx_PLL2_Config+0x15c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0f0      	beq.n	800b002 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b020:	7bfb      	ldrb	r3, [r7, #15]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	58024400 	.word	0x58024400
 800b030:	ffff0007 	.word	0xffff0007

0800b034 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b042:	4b53      	ldr	r3, [pc, #332]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d101      	bne.n	800b052 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	e099      	b.n	800b186 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b052:	4b4f      	ldr	r3, [pc, #316]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a4e      	ldr	r2, [pc, #312]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b05c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b05e:	f7f8 ff83 	bl	8003f68 <HAL_GetTick>
 800b062:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b064:	e008      	b.n	800b078 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b066:	f7f8 ff7f 	bl	8003f68 <HAL_GetTick>
 800b06a:	4602      	mov	r2, r0
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	2b02      	cmp	r3, #2
 800b072:	d901      	bls.n	800b078 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b074:	2303      	movs	r3, #3
 800b076:	e086      	b.n	800b186 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b078:	4b45      	ldr	r3, [pc, #276]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1f0      	bne.n	800b066 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b084:	4b42      	ldr	r3, [pc, #264]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b088:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	051b      	lsls	r3, r3, #20
 800b092:	493f      	ldr	r1, [pc, #252]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b094:	4313      	orrs	r3, r2
 800b096:	628b      	str	r3, [r1, #40]	; 0x28
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	025b      	lsls	r3, r3, #9
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	041b      	lsls	r3, r3, #16
 800b0b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	061b      	lsls	r3, r3, #24
 800b0c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0c8:	4931      	ldr	r1, [pc, #196]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b0ce:	4b30      	ldr	r3, [pc, #192]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	492d      	ldr	r1, [pc, #180]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b0e0:	4b2b      	ldr	r3, [pc, #172]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	4928      	ldr	r1, [pc, #160]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b0f2:	4b27      	ldr	r3, [pc, #156]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	4a26      	ldr	r2, [pc, #152]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0fe:	4b24      	ldr	r3, [pc, #144]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b102:	4b24      	ldr	r3, [pc, #144]	; (800b194 <RCCEx_PLL3_Config+0x160>)
 800b104:	4013      	ands	r3, r2
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	69d2      	ldr	r2, [r2, #28]
 800b10a:	00d2      	lsls	r2, r2, #3
 800b10c:	4920      	ldr	r1, [pc, #128]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b112:	4b1f      	ldr	r3, [pc, #124]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	4a1e      	ldr	r2, [pc, #120]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b11c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b124:	4b1a      	ldr	r3, [pc, #104]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b128:	4a19      	ldr	r2, [pc, #100]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b12a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b12e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b130:	e00f      	b.n	800b152 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d106      	bne.n	800b146 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b138:	4b15      	ldr	r3, [pc, #84]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	4a14      	ldr	r2, [pc, #80]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b13e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b142:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b144:	e005      	b.n	800b152 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b146:	4b12      	ldr	r3, [pc, #72]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14a:	4a11      	ldr	r2, [pc, #68]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b14c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b150:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b152:	4b0f      	ldr	r3, [pc, #60]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a0e      	ldr	r2, [pc, #56]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b15c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b15e:	f7f8 ff03 	bl	8003f68 <HAL_GetTick>
 800b162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b164:	e008      	b.n	800b178 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b166:	f7f8 feff 	bl	8003f68 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	2b02      	cmp	r3, #2
 800b172:	d901      	bls.n	800b178 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e006      	b.n	800b186 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b178:	4b05      	ldr	r3, [pc, #20]	; (800b190 <RCCEx_PLL3_Config+0x15c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d0f0      	beq.n	800b166 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b184:	7bfb      	ldrb	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	58024400 	.word	0x58024400
 800b194:	ffff0007 	.word	0xffff0007

0800b198 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e0f1      	b.n	800b38e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a78      	ldr	r2, [pc, #480]	; (800b398 <HAL_SPI_Init+0x200>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d00f      	beq.n	800b1da <HAL_SPI_Init+0x42>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a77      	ldr	r2, [pc, #476]	; (800b39c <HAL_SPI_Init+0x204>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00a      	beq.n	800b1da <HAL_SPI_Init+0x42>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a75      	ldr	r2, [pc, #468]	; (800b3a0 <HAL_SPI_Init+0x208>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d005      	beq.n	800b1da <HAL_SPI_Init+0x42>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	2b0f      	cmp	r3, #15
 800b1d4:	d901      	bls.n	800b1da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e0d9      	b.n	800b38e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f8e2 	bl	800b3a4 <SPI_GetPacketSize>
 800b1e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a6c      	ldr	r2, [pc, #432]	; (800b398 <HAL_SPI_Init+0x200>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d00c      	beq.n	800b206 <HAL_SPI_Init+0x6e>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a6a      	ldr	r2, [pc, #424]	; (800b39c <HAL_SPI_Init+0x204>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d007      	beq.n	800b206 <HAL_SPI_Init+0x6e>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a69      	ldr	r2, [pc, #420]	; (800b3a0 <HAL_SPI_Init+0x208>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d002      	beq.n	800b206 <HAL_SPI_Init+0x6e>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b08      	cmp	r3, #8
 800b204:	d811      	bhi.n	800b22a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b20a:	4a63      	ldr	r2, [pc, #396]	; (800b398 <HAL_SPI_Init+0x200>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d009      	beq.n	800b224 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a61      	ldr	r2, [pc, #388]	; (800b39c <HAL_SPI_Init+0x204>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <HAL_SPI_Init+0x8c>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a60      	ldr	r2, [pc, #384]	; (800b3a0 <HAL_SPI_Init+0x208>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d104      	bne.n	800b22e <HAL_SPI_Init+0x96>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b10      	cmp	r3, #16
 800b228:	d901      	bls.n	800b22e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e0af      	b.n	800b38e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7f6 fd5a 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2202      	movs	r2, #2
 800b24c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 0201 	bic.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b26a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b274:	d119      	bne.n	800b2aa <HAL_SPI_Init+0x112>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b27e:	d103      	bne.n	800b288 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b284:	2b00      	cmp	r3, #0
 800b286:	d008      	beq.n	800b29a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10c      	bne.n	800b2aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b298:	d107      	bne.n	800b2aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b2a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	69da      	ldr	r2, [r3, #28]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2bc:	ea42 0103 	orr.w	r1, r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68da      	ldr	r2, [r3, #12]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2fe:	431a      	orrs	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30a:	ea42 0103 	orr.w	r1, r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d113      	bne.n	800b34a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b334:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b348:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0201 	bic.w	r2, r2, #1
 800b358:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00a      	beq.n	800b37c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	430a      	orrs	r2, r1
 800b37a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	40013000 	.word	0x40013000
 800b39c:	40003800 	.word	0x40003800
 800b3a0:	40003c00 	.word	0x40003c00

0800b3a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b0:	095b      	lsrs	r3, r3, #5
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	08db      	lsrs	r3, r3, #3
 800b3c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	fb02 f303 	mul.w	r3, r2, r3
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e049      	b.n	800b480 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d106      	bne.n	800b406 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f841 	bl	800b488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2202      	movs	r2, #2
 800b40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3304      	adds	r3, #4
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f000 fa0d 	bl	800b838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d001      	beq.n	800b4b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e05e      	b.n	800b572 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f042 0201 	orr.w	r2, r2, #1
 800b4ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a2b      	ldr	r2, [pc, #172]	; (800b580 <HAL_TIM_Base_Start_IT+0xe4>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d02c      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4de:	d027      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a27      	ldr	r2, [pc, #156]	; (800b584 <HAL_TIM_Base_Start_IT+0xe8>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d022      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a26      	ldr	r2, [pc, #152]	; (800b588 <HAL_TIM_Base_Start_IT+0xec>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d01d      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a24      	ldr	r2, [pc, #144]	; (800b58c <HAL_TIM_Base_Start_IT+0xf0>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d018      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a23      	ldr	r2, [pc, #140]	; (800b590 <HAL_TIM_Base_Start_IT+0xf4>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d013      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a21      	ldr	r2, [pc, #132]	; (800b594 <HAL_TIM_Base_Start_IT+0xf8>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d00e      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a20      	ldr	r2, [pc, #128]	; (800b598 <HAL_TIM_Base_Start_IT+0xfc>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d009      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a1e      	ldr	r2, [pc, #120]	; (800b59c <HAL_TIM_Base_Start_IT+0x100>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d004      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x94>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a1d      	ldr	r2, [pc, #116]	; (800b5a0 <HAL_TIM_Base_Start_IT+0x104>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d115      	bne.n	800b55c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	4b1b      	ldr	r3, [pc, #108]	; (800b5a4 <HAL_TIM_Base_Start_IT+0x108>)
 800b538:	4013      	ands	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b06      	cmp	r3, #6
 800b540:	d015      	beq.n	800b56e <HAL_TIM_Base_Start_IT+0xd2>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b548:	d011      	beq.n	800b56e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f042 0201 	orr.w	r2, r2, #1
 800b558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b55a:	e008      	b.n	800b56e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f042 0201 	orr.w	r2, r2, #1
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	e000      	b.n	800b570 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	40010000 	.word	0x40010000
 800b584:	40000400 	.word	0x40000400
 800b588:	40000800 	.word	0x40000800
 800b58c:	40000c00 	.word	0x40000c00
 800b590:	40010400 	.word	0x40010400
 800b594:	40001800 	.word	0x40001800
 800b598:	40014000 	.word	0x40014000
 800b59c:	4000e000 	.word	0x4000e000
 800b5a0:	4000e400 	.word	0x4000e400
 800b5a4:	00010007 	.word	0x00010007

0800b5a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d122      	bne.n	800b604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f003 0302 	and.w	r3, r3, #2
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d11b      	bne.n	800b604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f06f 0202 	mvn.w	r2, #2
 800b5d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	f003 0303 	and.w	r3, r3, #3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f905 	bl	800b7fa <HAL_TIM_IC_CaptureCallback>
 800b5f0:	e005      	b.n	800b5fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f8f7 	bl	800b7e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f908 	bl	800b80e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d122      	bne.n	800b658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f003 0304 	and.w	r3, r3, #4
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d11b      	bne.n	800b658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f06f 0204 	mvn.w	r2, #4
 800b628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2202      	movs	r2, #2
 800b62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f8db 	bl	800b7fa <HAL_TIM_IC_CaptureCallback>
 800b644:	e005      	b.n	800b652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f8cd 	bl	800b7e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8de 	bl	800b80e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	f003 0308 	and.w	r3, r3, #8
 800b662:	2b08      	cmp	r3, #8
 800b664:	d122      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b08      	cmp	r3, #8
 800b672:	d11b      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f06f 0208 	mvn.w	r2, #8
 800b67c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2204      	movs	r2, #4
 800b682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	69db      	ldr	r3, [r3, #28]
 800b68a:	f003 0303 	and.w	r3, r3, #3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d003      	beq.n	800b69a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f8b1 	bl	800b7fa <HAL_TIM_IC_CaptureCallback>
 800b698:	e005      	b.n	800b6a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f8a3 	bl	800b7e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f8b4 	bl	800b80e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f003 0310 	and.w	r3, r3, #16
 800b6b6:	2b10      	cmp	r3, #16
 800b6b8:	d122      	bne.n	800b700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f003 0310 	and.w	r3, r3, #16
 800b6c4:	2b10      	cmp	r3, #16
 800b6c6:	d11b      	bne.n	800b700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0210 	mvn.w	r2, #16
 800b6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2208      	movs	r2, #8
 800b6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f887 	bl	800b7fa <HAL_TIM_IC_CaptureCallback>
 800b6ec:	e005      	b.n	800b6fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f879 	bl	800b7e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f88a 	bl	800b80e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d10e      	bne.n	800b72c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d107      	bne.n	800b72c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f06f 0201 	mvn.w	r2, #1
 800b724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7f5 fe84 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b736:	2b80      	cmp	r3, #128	; 0x80
 800b738:	d10e      	bne.n	800b758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b744:	2b80      	cmp	r3, #128	; 0x80
 800b746:	d107      	bne.n	800b758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f920 	bl	800b998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b766:	d10e      	bne.n	800b786 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b772:	2b80      	cmp	r3, #128	; 0x80
 800b774:	d107      	bne.n	800b786 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f913 	bl	800b9ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b790:	2b40      	cmp	r3, #64	; 0x40
 800b792:	d10e      	bne.n	800b7b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79e:	2b40      	cmp	r3, #64	; 0x40
 800b7a0:	d107      	bne.n	800b7b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f838 	bl	800b822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	f003 0320 	and.w	r3, r3, #32
 800b7bc:	2b20      	cmp	r3, #32
 800b7be:	d10e      	bne.n	800b7de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f003 0320 	and.w	r3, r3, #32
 800b7ca:	2b20      	cmp	r3, #32
 800b7cc:	d107      	bne.n	800b7de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f06f 0220 	mvn.w	r2, #32
 800b7d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f8d3 	bl	800b984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b083      	sub	sp, #12
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7ee:	bf00      	nop
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b083      	sub	sp, #12
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b802:	bf00      	nop
 800b804:	370c      	adds	r7, #12
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b80e:	b480      	push	{r7}
 800b810:	b083      	sub	sp, #12
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b816:	bf00      	nop
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b822:	b480      	push	{r7}
 800b824:	b083      	sub	sp, #12
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a44      	ldr	r2, [pc, #272]	; (800b95c <TIM_Base_SetConfig+0x124>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d013      	beq.n	800b878 <TIM_Base_SetConfig+0x40>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b856:	d00f      	beq.n	800b878 <TIM_Base_SetConfig+0x40>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a41      	ldr	r2, [pc, #260]	; (800b960 <TIM_Base_SetConfig+0x128>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d00b      	beq.n	800b878 <TIM_Base_SetConfig+0x40>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a40      	ldr	r2, [pc, #256]	; (800b964 <TIM_Base_SetConfig+0x12c>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d007      	beq.n	800b878 <TIM_Base_SetConfig+0x40>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a3f      	ldr	r2, [pc, #252]	; (800b968 <TIM_Base_SetConfig+0x130>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d003      	beq.n	800b878 <TIM_Base_SetConfig+0x40>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a3e      	ldr	r2, [pc, #248]	; (800b96c <TIM_Base_SetConfig+0x134>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d108      	bne.n	800b88a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	4313      	orrs	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a33      	ldr	r2, [pc, #204]	; (800b95c <TIM_Base_SetConfig+0x124>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d027      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b898:	d023      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a30      	ldr	r2, [pc, #192]	; (800b960 <TIM_Base_SetConfig+0x128>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d01f      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a2f      	ldr	r2, [pc, #188]	; (800b964 <TIM_Base_SetConfig+0x12c>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d01b      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a2e      	ldr	r2, [pc, #184]	; (800b968 <TIM_Base_SetConfig+0x130>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d017      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a2d      	ldr	r2, [pc, #180]	; (800b96c <TIM_Base_SetConfig+0x134>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d013      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a2c      	ldr	r2, [pc, #176]	; (800b970 <TIM_Base_SetConfig+0x138>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d00f      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a2b      	ldr	r2, [pc, #172]	; (800b974 <TIM_Base_SetConfig+0x13c>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00b      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a2a      	ldr	r2, [pc, #168]	; (800b978 <TIM_Base_SetConfig+0x140>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d007      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a29      	ldr	r2, [pc, #164]	; (800b97c <TIM_Base_SetConfig+0x144>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d003      	beq.n	800b8e2 <TIM_Base_SetConfig+0xaa>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a28      	ldr	r2, [pc, #160]	; (800b980 <TIM_Base_SetConfig+0x148>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d108      	bne.n	800b8f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	689a      	ldr	r2, [r3, #8]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a10      	ldr	r2, [pc, #64]	; (800b95c <TIM_Base_SetConfig+0x124>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00f      	beq.n	800b940 <TIM_Base_SetConfig+0x108>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a12      	ldr	r2, [pc, #72]	; (800b96c <TIM_Base_SetConfig+0x134>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00b      	beq.n	800b940 <TIM_Base_SetConfig+0x108>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a11      	ldr	r2, [pc, #68]	; (800b970 <TIM_Base_SetConfig+0x138>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d007      	beq.n	800b940 <TIM_Base_SetConfig+0x108>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a10      	ldr	r2, [pc, #64]	; (800b974 <TIM_Base_SetConfig+0x13c>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d003      	beq.n	800b940 <TIM_Base_SetConfig+0x108>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a0f      	ldr	r2, [pc, #60]	; (800b978 <TIM_Base_SetConfig+0x140>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d103      	bne.n	800b948 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	691a      	ldr	r2, [r3, #16]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	615a      	str	r2, [r3, #20]
}
 800b94e:	bf00      	nop
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	40010000 	.word	0x40010000
 800b960:	40000400 	.word	0x40000400
 800b964:	40000800 	.word	0x40000800
 800b968:	40000c00 	.word	0x40000c00
 800b96c:	40010400 	.word	0x40010400
 800b970:	40014000 	.word	0x40014000
 800b974:	40014400 	.word	0x40014400
 800b978:	40014800 	.word	0x40014800
 800b97c:	4000e000 	.word	0x4000e000
 800b980:	4000e400 	.word	0x4000e400

0800b984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e042      	b.n	800ba58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7f6 fa4d 	bl	8001e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2224      	movs	r2, #36	; 0x24
 800b9ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0201 	bic.w	r2, r2, #1
 800ba00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fcd6 	bl	800c3b4 <UART_SetConfig>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d101      	bne.n	800ba12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e022      	b.n	800ba58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f001 fb28 	bl	800d070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689a      	ldr	r2, [r3, #8]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0201 	orr.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f001 fbaf 	bl	800d1b4 <UART_CheckIdleState>
 800ba56:	4603      	mov	r3, r0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08a      	sub	sp, #40	; 0x28
 800ba64:	af02      	add	r7, sp, #8
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba76:	2b20      	cmp	r3, #32
 800ba78:	f040 8083 	bne.w	800bb82 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <HAL_UART_Transmit+0x28>
 800ba82:	88fb      	ldrh	r3, [r7, #6]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d101      	bne.n	800ba8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e07b      	b.n	800bb84 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_UART_Transmit+0x3a>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e074      	b.n	800bb84 <HAL_UART_Transmit+0x124>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2221      	movs	r2, #33	; 0x21
 800baae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bab2:	f7f8 fa59 	bl	8003f68 <HAL_GetTick>
 800bab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	88fa      	ldrh	r2, [r7, #6]
 800babc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	88fa      	ldrh	r2, [r7, #6]
 800bac4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad0:	d108      	bne.n	800bae4 <HAL_UART_Transmit+0x84>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d104      	bne.n	800bae4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	61bb      	str	r3, [r7, #24]
 800bae2:	e003      	b.n	800baec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800baf4:	e02c      	b.n	800bb50 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2200      	movs	r2, #0
 800bafe:	2180      	movs	r1, #128	; 0x80
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f001 fba2 	bl	800d24a <UART_WaitOnFlagUntilTimeout>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e039      	b.n	800bb84 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10b      	bne.n	800bb2e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	3302      	adds	r3, #2
 800bb2a:	61bb      	str	r3, [r7, #24]
 800bb2c:	e007      	b.n	800bb3e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	781a      	ldrb	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	3b01      	subs	r3, #1
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1cc      	bne.n	800baf6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2200      	movs	r2, #0
 800bb64:	2140      	movs	r1, #64	; 0x40
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f001 fb6f 	bl	800d24a <UART_WaitOnFlagUntilTimeout>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e006      	b.n	800bb84 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e000      	b.n	800bb84 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bb82:	2302      	movs	r3, #2
  }
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3720      	adds	r7, #32
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08a      	sub	sp, #40	; 0x28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	4613      	mov	r3, r2
 800bb98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d142      	bne.n	800bc2a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d002      	beq.n	800bbb0 <HAL_UART_Receive_IT+0x24>
 800bbaa:	88fb      	ldrh	r3, [r7, #6]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e03b      	b.n	800bc2c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d101      	bne.n	800bbc2 <HAL_UART_Receive_IT+0x36>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	e034      	b.n	800bc2c <HAL_UART_Receive_IT+0xa0>
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a17      	ldr	r2, [pc, #92]	; (800bc34 <HAL_UART_Receive_IT+0xa8>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d01f      	beq.n	800bc1a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d018      	beq.n	800bc1a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	e853 3f00 	ldrex	r3, [r3]
 800bbf4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bbfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	623b      	str	r3, [r7, #32]
 800bc08:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0a:	69f9      	ldr	r1, [r7, #28]
 800bc0c:	6a3a      	ldr	r2, [r7, #32]
 800bc0e:	e841 2300 	strex	r3, r2, [r1]
 800bc12:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1e6      	bne.n	800bbe8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	68b9      	ldr	r1, [r7, #8]
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f001 fbdb 	bl	800d3dc <UART_Start_Receive_IT>
 800bc26:	4603      	mov	r3, r0
 800bc28:	e000      	b.n	800bc2c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bc2a:	2302      	movs	r3, #2
  }
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3728      	adds	r7, #40	; 0x28
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	58000c00 	.word	0x58000c00

0800bc38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b0ba      	sub	sp, #232	; 0xe8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	69db      	ldr	r3, [r3, #28]
 800bc46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bc5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bc62:	f640 030f 	movw	r3, #2063	; 0x80f
 800bc66:	4013      	ands	r3, r2
 800bc68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bc6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d11b      	bne.n	800bcac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc78:	f003 0320 	and.w	r3, r3, #32
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d015      	beq.n	800bcac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc84:	f003 0320 	and.w	r3, r3, #32
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d105      	bne.n	800bc98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d009      	beq.n	800bcac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 835a 	beq.w	800c356 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	4798      	blx	r3
      }
      return;
 800bcaa:	e354      	b.n	800c356 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bcac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 811f 	beq.w	800bef4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bcb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bcba:	4b8b      	ldr	r3, [pc, #556]	; (800bee8 <HAL_UART_IRQHandler+0x2b0>)
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d106      	bne.n	800bcd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bcc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bcc6:	4b89      	ldr	r3, [pc, #548]	; (800beec <HAL_UART_IRQHandler+0x2b4>)
 800bcc8:	4013      	ands	r3, r2
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 8112 	beq.w	800bef4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bcd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d011      	beq.n	800bd00 <HAL_UART_IRQHandler+0xc8>
 800bcdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00b      	beq.n	800bd00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2201      	movs	r2, #1
 800bcee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcf6:	f043 0201 	orr.w	r2, r3, #1
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd04:	f003 0302 	and.w	r3, r3, #2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d011      	beq.n	800bd30 <HAL_UART_IRQHandler+0xf8>
 800bd0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd10:	f003 0301 	and.w	r3, r3, #1
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00b      	beq.n	800bd30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd26:	f043 0204 	orr.w	r2, r3, #4
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd34:	f003 0304 	and.w	r3, r3, #4
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d011      	beq.n	800bd60 <HAL_UART_IRQHandler+0x128>
 800bd3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2204      	movs	r2, #4
 800bd4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd56:	f043 0202 	orr.w	r2, r3, #2
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d017      	beq.n	800bd9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d105      	bne.n	800bd84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bd78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bd7c:	4b5a      	ldr	r3, [pc, #360]	; (800bee8 <HAL_UART_IRQHandler+0x2b0>)
 800bd7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00b      	beq.n	800bd9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2208      	movs	r2, #8
 800bd8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd92:	f043 0208 	orr.w	r2, r3, #8
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bda0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d012      	beq.n	800bdce <HAL_UART_IRQHandler+0x196>
 800bda8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00c      	beq.n	800bdce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdc4:	f043 0220 	orr.w	r2, r3, #32
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 82c0 	beq.w	800c35a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bdda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdde:	f003 0320 	and.w	r3, r3, #32
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d013      	beq.n	800be0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bde6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdea:	f003 0320 	and.w	r3, r3, #32
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d105      	bne.n	800bdfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d007      	beq.n	800be0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be22:	2b40      	cmp	r3, #64	; 0x40
 800be24:	d005      	beq.n	800be32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800be26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d04f      	beq.n	800bed2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f001 fbfc 	bl	800d630 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be42:	2b40      	cmp	r3, #64	; 0x40
 800be44:	d141      	bne.n	800beca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3308      	adds	r3, #8
 800be4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800be5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3308      	adds	r3, #8
 800be6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800be7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800be82:	e841 2300 	strex	r3, r2, [r1]
 800be86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1d9      	bne.n	800be46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be96:	2b00      	cmp	r3, #0
 800be98:	d013      	beq.n	800bec2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be9e:	4a14      	ldr	r2, [pc, #80]	; (800bef0 <HAL_UART_IRQHandler+0x2b8>)
 800bea0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7f8 fde2 	bl	8004a70 <HAL_DMA_Abort_IT>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d017      	beq.n	800bee2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec0:	e00f      	b.n	800bee2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa60 	bl	800c388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec8:	e00b      	b.n	800bee2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fa5c 	bl	800c388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed0:	e007      	b.n	800bee2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fa58 	bl	800c388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bee0:	e23b      	b.n	800c35a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee2:	bf00      	nop
    return;
 800bee4:	e239      	b.n	800c35a <HAL_UART_IRQHandler+0x722>
 800bee6:	bf00      	nop
 800bee8:	10000001 	.word	0x10000001
 800beec:	04000120 	.word	0x04000120
 800bef0:	0800d6fd 	.word	0x0800d6fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef8:	2b01      	cmp	r3, #1
 800befa:	f040 81ce 	bne.w	800c29a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800befe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf02:	f003 0310 	and.w	r3, r3, #16
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f000 81c7 	beq.w	800c29a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bf0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf10:	f003 0310 	and.w	r3, r3, #16
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 81c0 	beq.w	800c29a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2210      	movs	r2, #16
 800bf20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2c:	2b40      	cmp	r3, #64	; 0x40
 800bf2e:	f040 813b 	bne.w	800c1a8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a8b      	ldr	r2, [pc, #556]	; (800c168 <HAL_UART_IRQHandler+0x530>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d059      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a89      	ldr	r2, [pc, #548]	; (800c16c <HAL_UART_IRQHandler+0x534>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d053      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a87      	ldr	r2, [pc, #540]	; (800c170 <HAL_UART_IRQHandler+0x538>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d04d      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a85      	ldr	r2, [pc, #532]	; (800c174 <HAL_UART_IRQHandler+0x53c>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d047      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a83      	ldr	r2, [pc, #524]	; (800c178 <HAL_UART_IRQHandler+0x540>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d041      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a81      	ldr	r2, [pc, #516]	; (800c17c <HAL_UART_IRQHandler+0x544>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d03b      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a7f      	ldr	r2, [pc, #508]	; (800c180 <HAL_UART_IRQHandler+0x548>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d035      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a7d      	ldr	r2, [pc, #500]	; (800c184 <HAL_UART_IRQHandler+0x54c>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d02f      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a7b      	ldr	r2, [pc, #492]	; (800c188 <HAL_UART_IRQHandler+0x550>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d029      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a79      	ldr	r2, [pc, #484]	; (800c18c <HAL_UART_IRQHandler+0x554>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d023      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a77      	ldr	r2, [pc, #476]	; (800c190 <HAL_UART_IRQHandler+0x558>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d01d      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a75      	ldr	r2, [pc, #468]	; (800c194 <HAL_UART_IRQHandler+0x55c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d017      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a73      	ldr	r2, [pc, #460]	; (800c198 <HAL_UART_IRQHandler+0x560>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d011      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a71      	ldr	r2, [pc, #452]	; (800c19c <HAL_UART_IRQHandler+0x564>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d00b      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a6f      	ldr	r2, [pc, #444]	; (800c1a0 <HAL_UART_IRQHandler+0x568>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d005      	beq.n	800bff2 <HAL_UART_IRQHandler+0x3ba>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a6d      	ldr	r2, [pc, #436]	; (800c1a4 <HAL_UART_IRQHandler+0x56c>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d105      	bne.n	800bffe <HAL_UART_IRQHandler+0x3c6>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	e004      	b.n	800c008 <HAL_UART_IRQHandler+0x3d0>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	b29b      	uxth	r3, r3
 800c008:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c00c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 81a4 	beq.w	800c35e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c01c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c020:	429a      	cmp	r2, r3
 800c022:	f080 819c 	bcs.w	800c35e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c02c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c03a:	f000 8086 	beq.w	800c14a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c04a:	e853 3f00 	ldrex	r3, [r3]
 800c04e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c05a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c06c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c070:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c074:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c078:	e841 2300 	strex	r3, r2, [r1]
 800c07c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1da      	bne.n	800c03e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3308      	adds	r3, #8
 800c08e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c092:	e853 3f00 	ldrex	r3, [r3]
 800c096:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c09a:	f023 0301 	bic.w	r3, r3, #1
 800c09e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c0b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c0b8:	e841 2300 	strex	r3, r2, [r1]
 800c0bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c0be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e1      	bne.n	800c088 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ce:	e853 3f00 	ldrex	r3, [r3]
 800c0d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c0d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c0e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c0ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c0f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e3      	bne.n	800c0c4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c112:	e853 3f00 	ldrex	r3, [r3]
 800c116:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c11a:	f023 0310 	bic.w	r3, r3, #16
 800c11e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c12c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c12e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c134:	e841 2300 	strex	r3, r2, [r1]
 800c138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1e4      	bne.n	800c10a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c144:	4618      	mov	r0, r3
 800c146:	f7f8 f975 	bl	8004434 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c156:	b29b      	uxth	r3, r3
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	4619      	mov	r1, r3
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f91c 	bl	800c39c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c164:	e0fb      	b.n	800c35e <HAL_UART_IRQHandler+0x726>
 800c166:	bf00      	nop
 800c168:	40020010 	.word	0x40020010
 800c16c:	40020028 	.word	0x40020028
 800c170:	40020040 	.word	0x40020040
 800c174:	40020058 	.word	0x40020058
 800c178:	40020070 	.word	0x40020070
 800c17c:	40020088 	.word	0x40020088
 800c180:	400200a0 	.word	0x400200a0
 800c184:	400200b8 	.word	0x400200b8
 800c188:	40020410 	.word	0x40020410
 800c18c:	40020428 	.word	0x40020428
 800c190:	40020440 	.word	0x40020440
 800c194:	40020458 	.word	0x40020458
 800c198:	40020470 	.word	0x40020470
 800c19c:	40020488 	.word	0x40020488
 800c1a0:	400204a0 	.word	0x400204a0
 800c1a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80cc 	beq.w	800c362 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c1ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 80c7 	beq.w	800c362 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c1f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e4      	bne.n	800c1d4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3308      	adds	r3, #8
 800c210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	623b      	str	r3, [r7, #32]
   return(result);
 800c21a:	6a3a      	ldr	r2, [r7, #32]
 800c21c:	4b54      	ldr	r3, [pc, #336]	; (800c370 <HAL_UART_IRQHandler+0x738>)
 800c21e:	4013      	ands	r3, r2
 800c220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3308      	adds	r3, #8
 800c22a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c22e:	633a      	str	r2, [r7, #48]	; 0x30
 800c230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c236:	e841 2300 	strex	r3, r2, [r1]
 800c23a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1e3      	bne.n	800c20a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2220      	movs	r2, #32
 800c246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	e853 3f00 	ldrex	r3, [r3]
 800c262:	60fb      	str	r3, [r7, #12]
   return(result);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f023 0310 	bic.w	r3, r3, #16
 800c26a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c278:	61fb      	str	r3, [r7, #28]
 800c27a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	69b9      	ldr	r1, [r7, #24]
 800c27e:	69fa      	ldr	r2, [r7, #28]
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	617b      	str	r3, [r7, #20]
   return(result);
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e4      	bne.n	800c256 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c28c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c290:	4619      	mov	r1, r3
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f882 	bl	800c39c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c298:	e063      	b.n	800c362 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c29e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00e      	beq.n	800c2c4 <HAL_UART_IRQHandler+0x68c>
 800c2a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d008      	beq.n	800c2c4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c2ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 febb 	bl	800e038 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2c2:	e051      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d014      	beq.n	800c2fa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d105      	bne.n	800c2e8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d008      	beq.n	800c2fa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d03a      	beq.n	800c366 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	4798      	blx	r3
    }
    return;
 800c2f8:	e035      	b.n	800c366 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c302:	2b00      	cmp	r3, #0
 800c304:	d009      	beq.n	800c31a <HAL_UART_IRQHandler+0x6e2>
 800c306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f001 fa08 	bl	800d728 <UART_EndTransmit_IT>
    return;
 800c318:	e026      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c31e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c322:	2b00      	cmp	r3, #0
 800c324:	d009      	beq.n	800c33a <HAL_UART_IRQHandler+0x702>
 800c326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c32a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f001 fe94 	bl	800e060 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c338:	e016      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c33e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d010      	beq.n	800c368 <HAL_UART_IRQHandler+0x730>
 800c346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	da0c      	bge.n	800c368 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f001 fe7c 	bl	800e04c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c354:	e008      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
      return;
 800c356:	bf00      	nop
 800c358:	e006      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
    return;
 800c35a:	bf00      	nop
 800c35c:	e004      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
      return;
 800c35e:	bf00      	nop
 800c360:	e002      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
      return;
 800c362:	bf00      	nop
 800c364:	e000      	b.n	800c368 <HAL_UART_IRQHandler+0x730>
    return;
 800c366:	bf00      	nop
  }
}
 800c368:	37e8      	adds	r7, #232	; 0xe8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	effffffe 	.word	0xeffffffe

0800c374 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3b4:	b5b0      	push	{r4, r5, r7, lr}
 800c3b6:	b08e      	sub	sp, #56	; 0x38
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	689a      	ldr	r2, [r3, #8]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	431a      	orrs	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	695b      	ldr	r3, [r3, #20]
 800c3d0:	431a      	orrs	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	69db      	ldr	r3, [r3, #28]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	4bbf      	ldr	r3, [pc, #764]	; (800c6e0 <UART_SetConfig+0x32c>)
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	6812      	ldr	r2, [r2, #0]
 800c3e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	430a      	orrs	r2, r1
 800c402:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4ab5      	ldr	r2, [pc, #724]	; (800c6e4 <UART_SetConfig+0x330>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d004      	beq.n	800c41e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c41a:	4313      	orrs	r3, r2
 800c41c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	689a      	ldr	r2, [r3, #8]
 800c424:	4bb0      	ldr	r3, [pc, #704]	; (800c6e8 <UART_SetConfig+0x334>)
 800c426:	4013      	ands	r3, r2
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6812      	ldr	r2, [r2, #0]
 800c42c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c42e:	430b      	orrs	r3, r1
 800c430:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	f023 010f 	bic.w	r1, r3, #15
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	430a      	orrs	r2, r1
 800c446:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4aa7      	ldr	r2, [pc, #668]	; (800c6ec <UART_SetConfig+0x338>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d176      	bne.n	800c540 <UART_SetConfig+0x18c>
 800c452:	4ba7      	ldr	r3, [pc, #668]	; (800c6f0 <UART_SetConfig+0x33c>)
 800c454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c45a:	2b28      	cmp	r3, #40	; 0x28
 800c45c:	d86c      	bhi.n	800c538 <UART_SetConfig+0x184>
 800c45e:	a201      	add	r2, pc, #4	; (adr r2, 800c464 <UART_SetConfig+0xb0>)
 800c460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c464:	0800c509 	.word	0x0800c509
 800c468:	0800c539 	.word	0x0800c539
 800c46c:	0800c539 	.word	0x0800c539
 800c470:	0800c539 	.word	0x0800c539
 800c474:	0800c539 	.word	0x0800c539
 800c478:	0800c539 	.word	0x0800c539
 800c47c:	0800c539 	.word	0x0800c539
 800c480:	0800c539 	.word	0x0800c539
 800c484:	0800c511 	.word	0x0800c511
 800c488:	0800c539 	.word	0x0800c539
 800c48c:	0800c539 	.word	0x0800c539
 800c490:	0800c539 	.word	0x0800c539
 800c494:	0800c539 	.word	0x0800c539
 800c498:	0800c539 	.word	0x0800c539
 800c49c:	0800c539 	.word	0x0800c539
 800c4a0:	0800c539 	.word	0x0800c539
 800c4a4:	0800c519 	.word	0x0800c519
 800c4a8:	0800c539 	.word	0x0800c539
 800c4ac:	0800c539 	.word	0x0800c539
 800c4b0:	0800c539 	.word	0x0800c539
 800c4b4:	0800c539 	.word	0x0800c539
 800c4b8:	0800c539 	.word	0x0800c539
 800c4bc:	0800c539 	.word	0x0800c539
 800c4c0:	0800c539 	.word	0x0800c539
 800c4c4:	0800c521 	.word	0x0800c521
 800c4c8:	0800c539 	.word	0x0800c539
 800c4cc:	0800c539 	.word	0x0800c539
 800c4d0:	0800c539 	.word	0x0800c539
 800c4d4:	0800c539 	.word	0x0800c539
 800c4d8:	0800c539 	.word	0x0800c539
 800c4dc:	0800c539 	.word	0x0800c539
 800c4e0:	0800c539 	.word	0x0800c539
 800c4e4:	0800c529 	.word	0x0800c529
 800c4e8:	0800c539 	.word	0x0800c539
 800c4ec:	0800c539 	.word	0x0800c539
 800c4f0:	0800c539 	.word	0x0800c539
 800c4f4:	0800c539 	.word	0x0800c539
 800c4f8:	0800c539 	.word	0x0800c539
 800c4fc:	0800c539 	.word	0x0800c539
 800c500:	0800c539 	.word	0x0800c539
 800c504:	0800c531 	.word	0x0800c531
 800c508:	2301      	movs	r3, #1
 800c50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c50e:	e326      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c510:	2304      	movs	r3, #4
 800c512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c516:	e322      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c518:	2308      	movs	r3, #8
 800c51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c51e:	e31e      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c520:	2310      	movs	r3, #16
 800c522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c526:	e31a      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c528:	2320      	movs	r3, #32
 800c52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52e:	e316      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c530:	2340      	movs	r3, #64	; 0x40
 800c532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c536:	e312      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c538:	2380      	movs	r3, #128	; 0x80
 800c53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53e:	e30e      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a6b      	ldr	r2, [pc, #428]	; (800c6f4 <UART_SetConfig+0x340>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d130      	bne.n	800c5ac <UART_SetConfig+0x1f8>
 800c54a:	4b69      	ldr	r3, [pc, #420]	; (800c6f0 <UART_SetConfig+0x33c>)
 800c54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c54e:	f003 0307 	and.w	r3, r3, #7
 800c552:	2b05      	cmp	r3, #5
 800c554:	d826      	bhi.n	800c5a4 <UART_SetConfig+0x1f0>
 800c556:	a201      	add	r2, pc, #4	; (adr r2, 800c55c <UART_SetConfig+0x1a8>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c575 	.word	0x0800c575
 800c560:	0800c57d 	.word	0x0800c57d
 800c564:	0800c585 	.word	0x0800c585
 800c568:	0800c58d 	.word	0x0800c58d
 800c56c:	0800c595 	.word	0x0800c595
 800c570:	0800c59d 	.word	0x0800c59d
 800c574:	2300      	movs	r3, #0
 800c576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57a:	e2f0      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c57c:	2304      	movs	r3, #4
 800c57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c582:	e2ec      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c584:	2308      	movs	r3, #8
 800c586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58a:	e2e8      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c58c:	2310      	movs	r3, #16
 800c58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c592:	e2e4      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c594:	2320      	movs	r3, #32
 800c596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59a:	e2e0      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c59c:	2340      	movs	r3, #64	; 0x40
 800c59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a2:	e2dc      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c5a4:	2380      	movs	r3, #128	; 0x80
 800c5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5aa:	e2d8      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a51      	ldr	r2, [pc, #324]	; (800c6f8 <UART_SetConfig+0x344>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d130      	bne.n	800c618 <UART_SetConfig+0x264>
 800c5b6:	4b4e      	ldr	r3, [pc, #312]	; (800c6f0 <UART_SetConfig+0x33c>)
 800c5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ba:	f003 0307 	and.w	r3, r3, #7
 800c5be:	2b05      	cmp	r3, #5
 800c5c0:	d826      	bhi.n	800c610 <UART_SetConfig+0x25c>
 800c5c2:	a201      	add	r2, pc, #4	; (adr r2, 800c5c8 <UART_SetConfig+0x214>)
 800c5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c8:	0800c5e1 	.word	0x0800c5e1
 800c5cc:	0800c5e9 	.word	0x0800c5e9
 800c5d0:	0800c5f1 	.word	0x0800c5f1
 800c5d4:	0800c5f9 	.word	0x0800c5f9
 800c5d8:	0800c601 	.word	0x0800c601
 800c5dc:	0800c609 	.word	0x0800c609
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e6:	e2ba      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ee:	e2b6      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f6:	e2b2      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5fe:	e2ae      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c600:	2320      	movs	r3, #32
 800c602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c606:	e2aa      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c60e:	e2a6      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c610:	2380      	movs	r3, #128	; 0x80
 800c612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c616:	e2a2      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a37      	ldr	r2, [pc, #220]	; (800c6fc <UART_SetConfig+0x348>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d130      	bne.n	800c684 <UART_SetConfig+0x2d0>
 800c622:	4b33      	ldr	r3, [pc, #204]	; (800c6f0 <UART_SetConfig+0x33c>)
 800c624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c626:	f003 0307 	and.w	r3, r3, #7
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	d826      	bhi.n	800c67c <UART_SetConfig+0x2c8>
 800c62e:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <UART_SetConfig+0x280>)
 800c630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c634:	0800c64d 	.word	0x0800c64d
 800c638:	0800c655 	.word	0x0800c655
 800c63c:	0800c65d 	.word	0x0800c65d
 800c640:	0800c665 	.word	0x0800c665
 800c644:	0800c66d 	.word	0x0800c66d
 800c648:	0800c675 	.word	0x0800c675
 800c64c:	2300      	movs	r3, #0
 800c64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c652:	e284      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c654:	2304      	movs	r3, #4
 800c656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c65a:	e280      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c65c:	2308      	movs	r3, #8
 800c65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c662:	e27c      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c664:	2310      	movs	r3, #16
 800c666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c66a:	e278      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c66c:	2320      	movs	r3, #32
 800c66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c672:	e274      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c674:	2340      	movs	r3, #64	; 0x40
 800c676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c67a:	e270      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c67c:	2380      	movs	r3, #128	; 0x80
 800c67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c682:	e26c      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a1d      	ldr	r2, [pc, #116]	; (800c700 <UART_SetConfig+0x34c>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d142      	bne.n	800c714 <UART_SetConfig+0x360>
 800c68e:	4b18      	ldr	r3, [pc, #96]	; (800c6f0 <UART_SetConfig+0x33c>)
 800c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	2b05      	cmp	r3, #5
 800c698:	d838      	bhi.n	800c70c <UART_SetConfig+0x358>
 800c69a:	a201      	add	r2, pc, #4	; (adr r2, 800c6a0 <UART_SetConfig+0x2ec>)
 800c69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a0:	0800c6b9 	.word	0x0800c6b9
 800c6a4:	0800c6c1 	.word	0x0800c6c1
 800c6a8:	0800c6c9 	.word	0x0800c6c9
 800c6ac:	0800c6d1 	.word	0x0800c6d1
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c705 	.word	0x0800c705
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6be:	e24e      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c6:	e24a      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c6c8:	2308      	movs	r3, #8
 800c6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ce:	e246      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6d6:	e242      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c6d8:	2320      	movs	r3, #32
 800c6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6de:	e23e      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c6e0:	cfff69f3 	.word	0xcfff69f3
 800c6e4:	58000c00 	.word	0x58000c00
 800c6e8:	11fff4ff 	.word	0x11fff4ff
 800c6ec:	40011000 	.word	0x40011000
 800c6f0:	58024400 	.word	0x58024400
 800c6f4:	40004400 	.word	0x40004400
 800c6f8:	40004800 	.word	0x40004800
 800c6fc:	40004c00 	.word	0x40004c00
 800c700:	40005000 	.word	0x40005000
 800c704:	2340      	movs	r3, #64	; 0x40
 800c706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c70a:	e228      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c70c:	2380      	movs	r3, #128	; 0x80
 800c70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c712:	e224      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4ab1      	ldr	r2, [pc, #708]	; (800c9e0 <UART_SetConfig+0x62c>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d176      	bne.n	800c80c <UART_SetConfig+0x458>
 800c71e:	4bb1      	ldr	r3, [pc, #708]	; (800c9e4 <UART_SetConfig+0x630>)
 800c720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c726:	2b28      	cmp	r3, #40	; 0x28
 800c728:	d86c      	bhi.n	800c804 <UART_SetConfig+0x450>
 800c72a:	a201      	add	r2, pc, #4	; (adr r2, 800c730 <UART_SetConfig+0x37c>)
 800c72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c730:	0800c7d5 	.word	0x0800c7d5
 800c734:	0800c805 	.word	0x0800c805
 800c738:	0800c805 	.word	0x0800c805
 800c73c:	0800c805 	.word	0x0800c805
 800c740:	0800c805 	.word	0x0800c805
 800c744:	0800c805 	.word	0x0800c805
 800c748:	0800c805 	.word	0x0800c805
 800c74c:	0800c805 	.word	0x0800c805
 800c750:	0800c7dd 	.word	0x0800c7dd
 800c754:	0800c805 	.word	0x0800c805
 800c758:	0800c805 	.word	0x0800c805
 800c75c:	0800c805 	.word	0x0800c805
 800c760:	0800c805 	.word	0x0800c805
 800c764:	0800c805 	.word	0x0800c805
 800c768:	0800c805 	.word	0x0800c805
 800c76c:	0800c805 	.word	0x0800c805
 800c770:	0800c7e5 	.word	0x0800c7e5
 800c774:	0800c805 	.word	0x0800c805
 800c778:	0800c805 	.word	0x0800c805
 800c77c:	0800c805 	.word	0x0800c805
 800c780:	0800c805 	.word	0x0800c805
 800c784:	0800c805 	.word	0x0800c805
 800c788:	0800c805 	.word	0x0800c805
 800c78c:	0800c805 	.word	0x0800c805
 800c790:	0800c7ed 	.word	0x0800c7ed
 800c794:	0800c805 	.word	0x0800c805
 800c798:	0800c805 	.word	0x0800c805
 800c79c:	0800c805 	.word	0x0800c805
 800c7a0:	0800c805 	.word	0x0800c805
 800c7a4:	0800c805 	.word	0x0800c805
 800c7a8:	0800c805 	.word	0x0800c805
 800c7ac:	0800c805 	.word	0x0800c805
 800c7b0:	0800c7f5 	.word	0x0800c7f5
 800c7b4:	0800c805 	.word	0x0800c805
 800c7b8:	0800c805 	.word	0x0800c805
 800c7bc:	0800c805 	.word	0x0800c805
 800c7c0:	0800c805 	.word	0x0800c805
 800c7c4:	0800c805 	.word	0x0800c805
 800c7c8:	0800c805 	.word	0x0800c805
 800c7cc:	0800c805 	.word	0x0800c805
 800c7d0:	0800c7fd 	.word	0x0800c7fd
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7da:	e1c0      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c7dc:	2304      	movs	r3, #4
 800c7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7e2:	e1bc      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c7e4:	2308      	movs	r3, #8
 800c7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ea:	e1b8      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c7ec:	2310      	movs	r3, #16
 800c7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7f2:	e1b4      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c7f4:	2320      	movs	r3, #32
 800c7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7fa:	e1b0      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c7fc:	2340      	movs	r3, #64	; 0x40
 800c7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c802:	e1ac      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c804:	2380      	movs	r3, #128	; 0x80
 800c806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c80a:	e1a8      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a75      	ldr	r2, [pc, #468]	; (800c9e8 <UART_SetConfig+0x634>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d130      	bne.n	800c878 <UART_SetConfig+0x4c4>
 800c816:	4b73      	ldr	r3, [pc, #460]	; (800c9e4 <UART_SetConfig+0x630>)
 800c818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c81a:	f003 0307 	and.w	r3, r3, #7
 800c81e:	2b05      	cmp	r3, #5
 800c820:	d826      	bhi.n	800c870 <UART_SetConfig+0x4bc>
 800c822:	a201      	add	r2, pc, #4	; (adr r2, 800c828 <UART_SetConfig+0x474>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c841 	.word	0x0800c841
 800c82c:	0800c849 	.word	0x0800c849
 800c830:	0800c851 	.word	0x0800c851
 800c834:	0800c859 	.word	0x0800c859
 800c838:	0800c861 	.word	0x0800c861
 800c83c:	0800c869 	.word	0x0800c869
 800c840:	2300      	movs	r3, #0
 800c842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c846:	e18a      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c848:	2304      	movs	r3, #4
 800c84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84e:	e186      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c850:	2308      	movs	r3, #8
 800c852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c856:	e182      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c858:	2310      	movs	r3, #16
 800c85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85e:	e17e      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c860:	2320      	movs	r3, #32
 800c862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c866:	e17a      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c868:	2340      	movs	r3, #64	; 0x40
 800c86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c86e:	e176      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c870:	2380      	movs	r3, #128	; 0x80
 800c872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c876:	e172      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a5b      	ldr	r2, [pc, #364]	; (800c9ec <UART_SetConfig+0x638>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d130      	bne.n	800c8e4 <UART_SetConfig+0x530>
 800c882:	4b58      	ldr	r3, [pc, #352]	; (800c9e4 <UART_SetConfig+0x630>)
 800c884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b05      	cmp	r3, #5
 800c88c:	d826      	bhi.n	800c8dc <UART_SetConfig+0x528>
 800c88e:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <UART_SetConfig+0x4e0>)
 800c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c894:	0800c8ad 	.word	0x0800c8ad
 800c898:	0800c8b5 	.word	0x0800c8b5
 800c89c:	0800c8bd 	.word	0x0800c8bd
 800c8a0:	0800c8c5 	.word	0x0800c8c5
 800c8a4:	0800c8cd 	.word	0x0800c8cd
 800c8a8:	0800c8d5 	.word	0x0800c8d5
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b2:	e154      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c8b4:	2304      	movs	r3, #4
 800c8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ba:	e150      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c8bc:	2308      	movs	r3, #8
 800c8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c2:	e14c      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ca:	e148      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c8cc:	2320      	movs	r3, #32
 800c8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d2:	e144      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c8d4:	2340      	movs	r3, #64	; 0x40
 800c8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8da:	e140      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c8dc:	2380      	movs	r3, #128	; 0x80
 800c8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e2:	e13c      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a41      	ldr	r2, [pc, #260]	; (800c9f0 <UART_SetConfig+0x63c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	f040 8082 	bne.w	800c9f4 <UART_SetConfig+0x640>
 800c8f0:	4b3c      	ldr	r3, [pc, #240]	; (800c9e4 <UART_SetConfig+0x630>)
 800c8f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8f8:	2b28      	cmp	r3, #40	; 0x28
 800c8fa:	d86d      	bhi.n	800c9d8 <UART_SetConfig+0x624>
 800c8fc:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <UART_SetConfig+0x550>)
 800c8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c902:	bf00      	nop
 800c904:	0800c9a9 	.word	0x0800c9a9
 800c908:	0800c9d9 	.word	0x0800c9d9
 800c90c:	0800c9d9 	.word	0x0800c9d9
 800c910:	0800c9d9 	.word	0x0800c9d9
 800c914:	0800c9d9 	.word	0x0800c9d9
 800c918:	0800c9d9 	.word	0x0800c9d9
 800c91c:	0800c9d9 	.word	0x0800c9d9
 800c920:	0800c9d9 	.word	0x0800c9d9
 800c924:	0800c9b1 	.word	0x0800c9b1
 800c928:	0800c9d9 	.word	0x0800c9d9
 800c92c:	0800c9d9 	.word	0x0800c9d9
 800c930:	0800c9d9 	.word	0x0800c9d9
 800c934:	0800c9d9 	.word	0x0800c9d9
 800c938:	0800c9d9 	.word	0x0800c9d9
 800c93c:	0800c9d9 	.word	0x0800c9d9
 800c940:	0800c9d9 	.word	0x0800c9d9
 800c944:	0800c9b9 	.word	0x0800c9b9
 800c948:	0800c9d9 	.word	0x0800c9d9
 800c94c:	0800c9d9 	.word	0x0800c9d9
 800c950:	0800c9d9 	.word	0x0800c9d9
 800c954:	0800c9d9 	.word	0x0800c9d9
 800c958:	0800c9d9 	.word	0x0800c9d9
 800c95c:	0800c9d9 	.word	0x0800c9d9
 800c960:	0800c9d9 	.word	0x0800c9d9
 800c964:	0800c9c1 	.word	0x0800c9c1
 800c968:	0800c9d9 	.word	0x0800c9d9
 800c96c:	0800c9d9 	.word	0x0800c9d9
 800c970:	0800c9d9 	.word	0x0800c9d9
 800c974:	0800c9d9 	.word	0x0800c9d9
 800c978:	0800c9d9 	.word	0x0800c9d9
 800c97c:	0800c9d9 	.word	0x0800c9d9
 800c980:	0800c9d9 	.word	0x0800c9d9
 800c984:	0800c9c9 	.word	0x0800c9c9
 800c988:	0800c9d9 	.word	0x0800c9d9
 800c98c:	0800c9d9 	.word	0x0800c9d9
 800c990:	0800c9d9 	.word	0x0800c9d9
 800c994:	0800c9d9 	.word	0x0800c9d9
 800c998:	0800c9d9 	.word	0x0800c9d9
 800c99c:	0800c9d9 	.word	0x0800c9d9
 800c9a0:	0800c9d9 	.word	0x0800c9d9
 800c9a4:	0800c9d1 	.word	0x0800c9d1
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e0d6      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e0d2      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c9b8:	2308      	movs	r3, #8
 800c9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9be:	e0ce      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c9c0:	2310      	movs	r3, #16
 800c9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c6:	e0ca      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c9c8:	2320      	movs	r3, #32
 800c9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ce:	e0c6      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c9d0:	2340      	movs	r3, #64	; 0x40
 800c9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9d6:	e0c2      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c9d8:	2380      	movs	r3, #128	; 0x80
 800c9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9de:	e0be      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800c9e0:	40011400 	.word	0x40011400
 800c9e4:	58024400 	.word	0x58024400
 800c9e8:	40007800 	.word	0x40007800
 800c9ec:	40007c00 	.word	0x40007c00
 800c9f0:	40011800 	.word	0x40011800
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4aad      	ldr	r2, [pc, #692]	; (800ccb0 <UART_SetConfig+0x8fc>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d176      	bne.n	800caec <UART_SetConfig+0x738>
 800c9fe:	4bad      	ldr	r3, [pc, #692]	; (800ccb4 <UART_SetConfig+0x900>)
 800ca00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca06:	2b28      	cmp	r3, #40	; 0x28
 800ca08:	d86c      	bhi.n	800cae4 <UART_SetConfig+0x730>
 800ca0a:	a201      	add	r2, pc, #4	; (adr r2, 800ca10 <UART_SetConfig+0x65c>)
 800ca0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca10:	0800cab5 	.word	0x0800cab5
 800ca14:	0800cae5 	.word	0x0800cae5
 800ca18:	0800cae5 	.word	0x0800cae5
 800ca1c:	0800cae5 	.word	0x0800cae5
 800ca20:	0800cae5 	.word	0x0800cae5
 800ca24:	0800cae5 	.word	0x0800cae5
 800ca28:	0800cae5 	.word	0x0800cae5
 800ca2c:	0800cae5 	.word	0x0800cae5
 800ca30:	0800cabd 	.word	0x0800cabd
 800ca34:	0800cae5 	.word	0x0800cae5
 800ca38:	0800cae5 	.word	0x0800cae5
 800ca3c:	0800cae5 	.word	0x0800cae5
 800ca40:	0800cae5 	.word	0x0800cae5
 800ca44:	0800cae5 	.word	0x0800cae5
 800ca48:	0800cae5 	.word	0x0800cae5
 800ca4c:	0800cae5 	.word	0x0800cae5
 800ca50:	0800cac5 	.word	0x0800cac5
 800ca54:	0800cae5 	.word	0x0800cae5
 800ca58:	0800cae5 	.word	0x0800cae5
 800ca5c:	0800cae5 	.word	0x0800cae5
 800ca60:	0800cae5 	.word	0x0800cae5
 800ca64:	0800cae5 	.word	0x0800cae5
 800ca68:	0800cae5 	.word	0x0800cae5
 800ca6c:	0800cae5 	.word	0x0800cae5
 800ca70:	0800cacd 	.word	0x0800cacd
 800ca74:	0800cae5 	.word	0x0800cae5
 800ca78:	0800cae5 	.word	0x0800cae5
 800ca7c:	0800cae5 	.word	0x0800cae5
 800ca80:	0800cae5 	.word	0x0800cae5
 800ca84:	0800cae5 	.word	0x0800cae5
 800ca88:	0800cae5 	.word	0x0800cae5
 800ca8c:	0800cae5 	.word	0x0800cae5
 800ca90:	0800cad5 	.word	0x0800cad5
 800ca94:	0800cae5 	.word	0x0800cae5
 800ca98:	0800cae5 	.word	0x0800cae5
 800ca9c:	0800cae5 	.word	0x0800cae5
 800caa0:	0800cae5 	.word	0x0800cae5
 800caa4:	0800cae5 	.word	0x0800cae5
 800caa8:	0800cae5 	.word	0x0800cae5
 800caac:	0800cae5 	.word	0x0800cae5
 800cab0:	0800cadd 	.word	0x0800cadd
 800cab4:	2301      	movs	r3, #1
 800cab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caba:	e050      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cabc:	2304      	movs	r3, #4
 800cabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cac2:	e04c      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cac4:	2308      	movs	r3, #8
 800cac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caca:	e048      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cacc:	2310      	movs	r3, #16
 800cace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cad2:	e044      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cad4:	2320      	movs	r3, #32
 800cad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cada:	e040      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cadc:	2340      	movs	r3, #64	; 0x40
 800cade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae2:	e03c      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cae4:	2380      	movs	r3, #128	; 0x80
 800cae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caea:	e038      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a71      	ldr	r2, [pc, #452]	; (800ccb8 <UART_SetConfig+0x904>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d130      	bne.n	800cb58 <UART_SetConfig+0x7a4>
 800caf6:	4b6f      	ldr	r3, [pc, #444]	; (800ccb4 <UART_SetConfig+0x900>)
 800caf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cafa:	f003 0307 	and.w	r3, r3, #7
 800cafe:	2b05      	cmp	r3, #5
 800cb00:	d826      	bhi.n	800cb50 <UART_SetConfig+0x79c>
 800cb02:	a201      	add	r2, pc, #4	; (adr r2, 800cb08 <UART_SetConfig+0x754>)
 800cb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb08:	0800cb21 	.word	0x0800cb21
 800cb0c:	0800cb29 	.word	0x0800cb29
 800cb10:	0800cb31 	.word	0x0800cb31
 800cb14:	0800cb39 	.word	0x0800cb39
 800cb18:	0800cb41 	.word	0x0800cb41
 800cb1c:	0800cb49 	.word	0x0800cb49
 800cb20:	2302      	movs	r3, #2
 800cb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb26:	e01a      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cb28:	2304      	movs	r3, #4
 800cb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2e:	e016      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cb30:	2308      	movs	r3, #8
 800cb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb36:	e012      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cb38:	2310      	movs	r3, #16
 800cb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb3e:	e00e      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cb40:	2320      	movs	r3, #32
 800cb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb46:	e00a      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cb48:	2340      	movs	r3, #64	; 0x40
 800cb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb4e:	e006      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cb50:	2380      	movs	r3, #128	; 0x80
 800cb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb56:	e002      	b.n	800cb5e <UART_SetConfig+0x7aa>
 800cb58:	2380      	movs	r3, #128	; 0x80
 800cb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a55      	ldr	r2, [pc, #340]	; (800ccb8 <UART_SetConfig+0x904>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	f040 80f0 	bne.w	800cd4a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb6e:	2b20      	cmp	r3, #32
 800cb70:	dc46      	bgt.n	800cc00 <UART_SetConfig+0x84c>
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	db75      	blt.n	800cc62 <UART_SetConfig+0x8ae>
 800cb76:	3b02      	subs	r3, #2
 800cb78:	2b1e      	cmp	r3, #30
 800cb7a:	d872      	bhi.n	800cc62 <UART_SetConfig+0x8ae>
 800cb7c:	a201      	add	r2, pc, #4	; (adr r2, 800cb84 <UART_SetConfig+0x7d0>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cc07 	.word	0x0800cc07
 800cb88:	0800cc63 	.word	0x0800cc63
 800cb8c:	0800cc0f 	.word	0x0800cc0f
 800cb90:	0800cc63 	.word	0x0800cc63
 800cb94:	0800cc63 	.word	0x0800cc63
 800cb98:	0800cc63 	.word	0x0800cc63
 800cb9c:	0800cc1f 	.word	0x0800cc1f
 800cba0:	0800cc63 	.word	0x0800cc63
 800cba4:	0800cc63 	.word	0x0800cc63
 800cba8:	0800cc63 	.word	0x0800cc63
 800cbac:	0800cc63 	.word	0x0800cc63
 800cbb0:	0800cc63 	.word	0x0800cc63
 800cbb4:	0800cc63 	.word	0x0800cc63
 800cbb8:	0800cc63 	.word	0x0800cc63
 800cbbc:	0800cc2f 	.word	0x0800cc2f
 800cbc0:	0800cc63 	.word	0x0800cc63
 800cbc4:	0800cc63 	.word	0x0800cc63
 800cbc8:	0800cc63 	.word	0x0800cc63
 800cbcc:	0800cc63 	.word	0x0800cc63
 800cbd0:	0800cc63 	.word	0x0800cc63
 800cbd4:	0800cc63 	.word	0x0800cc63
 800cbd8:	0800cc63 	.word	0x0800cc63
 800cbdc:	0800cc63 	.word	0x0800cc63
 800cbe0:	0800cc63 	.word	0x0800cc63
 800cbe4:	0800cc63 	.word	0x0800cc63
 800cbe8:	0800cc63 	.word	0x0800cc63
 800cbec:	0800cc63 	.word	0x0800cc63
 800cbf0:	0800cc63 	.word	0x0800cc63
 800cbf4:	0800cc63 	.word	0x0800cc63
 800cbf8:	0800cc63 	.word	0x0800cc63
 800cbfc:	0800cc55 	.word	0x0800cc55
 800cc00:	2b40      	cmp	r3, #64	; 0x40
 800cc02:	d02a      	beq.n	800cc5a <UART_SetConfig+0x8a6>
 800cc04:	e02d      	b.n	800cc62 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cc06:	f7fd fea5 	bl	800a954 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc0c:	e02f      	b.n	800cc6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc0e:	f107 0314 	add.w	r3, r7, #20
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fd feb4 	bl	800a980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc1c:	e027      	b.n	800cc6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc1e:	f107 0308 	add.w	r3, r7, #8
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe f800 	bl	800ac28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc2c:	e01f      	b.n	800cc6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc2e:	4b21      	ldr	r3, [pc, #132]	; (800ccb4 <UART_SetConfig+0x900>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0320 	and.w	r3, r3, #32
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc3a:	4b1e      	ldr	r3, [pc, #120]	; (800ccb4 <UART_SetConfig+0x900>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	08db      	lsrs	r3, r3, #3
 800cc40:	f003 0303 	and.w	r3, r3, #3
 800cc44:	4a1d      	ldr	r2, [pc, #116]	; (800ccbc <UART_SetConfig+0x908>)
 800cc46:	fa22 f303 	lsr.w	r3, r2, r3
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc4c:	e00f      	b.n	800cc6e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800cc4e:	4b1b      	ldr	r3, [pc, #108]	; (800ccbc <UART_SetConfig+0x908>)
 800cc50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc52:	e00c      	b.n	800cc6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc54:	4b1a      	ldr	r3, [pc, #104]	; (800ccc0 <UART_SetConfig+0x90c>)
 800cc56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc58:	e009      	b.n	800cc6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc60:	e005      	b.n	800cc6e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cc6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 81e6 	beq.w	800d042 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7a:	4a12      	ldr	r2, [pc, #72]	; (800ccc4 <UART_SetConfig+0x910>)
 800cc7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc80:	461a      	mov	r2, r3
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc88:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	4413      	add	r3, r2
 800cc94:	6a3a      	ldr	r2, [r7, #32]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d305      	bcc.n	800cca6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cca0:	6a3a      	ldr	r2, [r7, #32]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d910      	bls.n	800ccc8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ccac:	e1c9      	b.n	800d042 <UART_SetConfig+0xc8e>
 800ccae:	bf00      	nop
 800ccb0:	40011c00 	.word	0x40011c00
 800ccb4:	58024400 	.word	0x58024400
 800ccb8:	58000c00 	.word	0x58000c00
 800ccbc:	03d09000 	.word	0x03d09000
 800ccc0:	003d0900 	.word	0x003d0900
 800ccc4:	080214dc 	.word	0x080214dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	4618      	mov	r0, r3
 800cccc:	f04f 0100 	mov.w	r1, #0
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	4ac1      	ldr	r2, [pc, #772]	; (800cfdc <UART_SetConfig+0xc28>)
 800ccd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	f04f 0300 	mov.w	r3, #0
 800cce0:	f7f3 fb7e 	bl	80003e0 <__aeabi_uldivmod>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4610      	mov	r0, r2
 800ccea:	4619      	mov	r1, r3
 800ccec:	f04f 0200 	mov.w	r2, #0
 800ccf0:	f04f 0300 	mov.w	r3, #0
 800ccf4:	020b      	lsls	r3, r1, #8
 800ccf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ccfa:	0202      	lsls	r2, r0, #8
 800ccfc:	6879      	ldr	r1, [r7, #4]
 800ccfe:	6849      	ldr	r1, [r1, #4]
 800cd00:	0849      	lsrs	r1, r1, #1
 800cd02:	4608      	mov	r0, r1
 800cd04:	f04f 0100 	mov.w	r1, #0
 800cd08:	1814      	adds	r4, r2, r0
 800cd0a:	eb43 0501 	adc.w	r5, r3, r1
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	461a      	mov	r2, r3
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	4620      	mov	r0, r4
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	f7f3 fb60 	bl	80003e0 <__aeabi_uldivmod>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4613      	mov	r3, r2
 800cd26:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd2e:	d308      	bcc.n	800cd42 <UART_SetConfig+0x98e>
 800cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd36:	d204      	bcs.n	800cd42 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd3e:	60da      	str	r2, [r3, #12]
 800cd40:	e17f      	b.n	800d042 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cd48:	e17b      	b.n	800d042 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	69db      	ldr	r3, [r3, #28]
 800cd4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd52:	f040 80bd 	bne.w	800ced0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800cd56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	dc48      	bgt.n	800cdf0 <UART_SetConfig+0xa3c>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	db7b      	blt.n	800ce5a <UART_SetConfig+0xaa6>
 800cd62:	2b20      	cmp	r3, #32
 800cd64:	d879      	bhi.n	800ce5a <UART_SetConfig+0xaa6>
 800cd66:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <UART_SetConfig+0x9b8>)
 800cd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6c:	0800cdf7 	.word	0x0800cdf7
 800cd70:	0800cdff 	.word	0x0800cdff
 800cd74:	0800ce5b 	.word	0x0800ce5b
 800cd78:	0800ce5b 	.word	0x0800ce5b
 800cd7c:	0800ce07 	.word	0x0800ce07
 800cd80:	0800ce5b 	.word	0x0800ce5b
 800cd84:	0800ce5b 	.word	0x0800ce5b
 800cd88:	0800ce5b 	.word	0x0800ce5b
 800cd8c:	0800ce17 	.word	0x0800ce17
 800cd90:	0800ce5b 	.word	0x0800ce5b
 800cd94:	0800ce5b 	.word	0x0800ce5b
 800cd98:	0800ce5b 	.word	0x0800ce5b
 800cd9c:	0800ce5b 	.word	0x0800ce5b
 800cda0:	0800ce5b 	.word	0x0800ce5b
 800cda4:	0800ce5b 	.word	0x0800ce5b
 800cda8:	0800ce5b 	.word	0x0800ce5b
 800cdac:	0800ce27 	.word	0x0800ce27
 800cdb0:	0800ce5b 	.word	0x0800ce5b
 800cdb4:	0800ce5b 	.word	0x0800ce5b
 800cdb8:	0800ce5b 	.word	0x0800ce5b
 800cdbc:	0800ce5b 	.word	0x0800ce5b
 800cdc0:	0800ce5b 	.word	0x0800ce5b
 800cdc4:	0800ce5b 	.word	0x0800ce5b
 800cdc8:	0800ce5b 	.word	0x0800ce5b
 800cdcc:	0800ce5b 	.word	0x0800ce5b
 800cdd0:	0800ce5b 	.word	0x0800ce5b
 800cdd4:	0800ce5b 	.word	0x0800ce5b
 800cdd8:	0800ce5b 	.word	0x0800ce5b
 800cddc:	0800ce5b 	.word	0x0800ce5b
 800cde0:	0800ce5b 	.word	0x0800ce5b
 800cde4:	0800ce5b 	.word	0x0800ce5b
 800cde8:	0800ce5b 	.word	0x0800ce5b
 800cdec:	0800ce4d 	.word	0x0800ce4d
 800cdf0:	2b40      	cmp	r3, #64	; 0x40
 800cdf2:	d02e      	beq.n	800ce52 <UART_SetConfig+0xa9e>
 800cdf4:	e031      	b.n	800ce5a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdf6:	f7fc fe45 	bl	8009a84 <HAL_RCC_GetPCLK1Freq>
 800cdfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdfc:	e033      	b.n	800ce66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdfe:	f7fc fe57 	bl	8009ab0 <HAL_RCC_GetPCLK2Freq>
 800ce02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce04:	e02f      	b.n	800ce66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce06:	f107 0314 	add.w	r3, r7, #20
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fd fdb8 	bl	800a980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce14:	e027      	b.n	800ce66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce16:	f107 0308 	add.w	r3, r7, #8
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fd ff04 	bl	800ac28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce24:	e01f      	b.n	800ce66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce26:	4b6e      	ldr	r3, [pc, #440]	; (800cfe0 <UART_SetConfig+0xc2c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 0320 	and.w	r3, r3, #32
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d009      	beq.n	800ce46 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce32:	4b6b      	ldr	r3, [pc, #428]	; (800cfe0 <UART_SetConfig+0xc2c>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	08db      	lsrs	r3, r3, #3
 800ce38:	f003 0303 	and.w	r3, r3, #3
 800ce3c:	4a69      	ldr	r2, [pc, #420]	; (800cfe4 <UART_SetConfig+0xc30>)
 800ce3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce44:	e00f      	b.n	800ce66 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ce46:	4b67      	ldr	r3, [pc, #412]	; (800cfe4 <UART_SetConfig+0xc30>)
 800ce48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce4a:	e00c      	b.n	800ce66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce4c:	4b66      	ldr	r3, [pc, #408]	; (800cfe8 <UART_SetConfig+0xc34>)
 800ce4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce50:	e009      	b.n	800ce66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce58:	e005      	b.n	800ce66 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 80ea 	beq.w	800d042 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce72:	4a5a      	ldr	r2, [pc, #360]	; (800cfdc <UART_SetConfig+0xc28>)
 800ce74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce80:	005a      	lsls	r2, r3, #1
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	085b      	lsrs	r3, r3, #1
 800ce88:	441a      	add	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	2b0f      	cmp	r3, #15
 800ce98:	d916      	bls.n	800cec8 <UART_SetConfig+0xb14>
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cea0:	d212      	bcs.n	800cec8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	f023 030f 	bic.w	r3, r3, #15
 800ceaa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	085b      	lsrs	r3, r3, #1
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	f003 0307 	and.w	r3, r3, #7
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ceba:	4313      	orrs	r3, r2
 800cebc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cec4:	60da      	str	r2, [r3, #12]
 800cec6:	e0bc      	b.n	800d042 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cece:	e0b8      	b.n	800d042 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ced0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ced4:	2b20      	cmp	r3, #32
 800ced6:	dc4b      	bgt.n	800cf70 <UART_SetConfig+0xbbc>
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f2c0 8087 	blt.w	800cfec <UART_SetConfig+0xc38>
 800cede:	2b20      	cmp	r3, #32
 800cee0:	f200 8084 	bhi.w	800cfec <UART_SetConfig+0xc38>
 800cee4:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <UART_SetConfig+0xb38>)
 800cee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceea:	bf00      	nop
 800ceec:	0800cf77 	.word	0x0800cf77
 800cef0:	0800cf7f 	.word	0x0800cf7f
 800cef4:	0800cfed 	.word	0x0800cfed
 800cef8:	0800cfed 	.word	0x0800cfed
 800cefc:	0800cf87 	.word	0x0800cf87
 800cf00:	0800cfed 	.word	0x0800cfed
 800cf04:	0800cfed 	.word	0x0800cfed
 800cf08:	0800cfed 	.word	0x0800cfed
 800cf0c:	0800cf97 	.word	0x0800cf97
 800cf10:	0800cfed 	.word	0x0800cfed
 800cf14:	0800cfed 	.word	0x0800cfed
 800cf18:	0800cfed 	.word	0x0800cfed
 800cf1c:	0800cfed 	.word	0x0800cfed
 800cf20:	0800cfed 	.word	0x0800cfed
 800cf24:	0800cfed 	.word	0x0800cfed
 800cf28:	0800cfed 	.word	0x0800cfed
 800cf2c:	0800cfa7 	.word	0x0800cfa7
 800cf30:	0800cfed 	.word	0x0800cfed
 800cf34:	0800cfed 	.word	0x0800cfed
 800cf38:	0800cfed 	.word	0x0800cfed
 800cf3c:	0800cfed 	.word	0x0800cfed
 800cf40:	0800cfed 	.word	0x0800cfed
 800cf44:	0800cfed 	.word	0x0800cfed
 800cf48:	0800cfed 	.word	0x0800cfed
 800cf4c:	0800cfed 	.word	0x0800cfed
 800cf50:	0800cfed 	.word	0x0800cfed
 800cf54:	0800cfed 	.word	0x0800cfed
 800cf58:	0800cfed 	.word	0x0800cfed
 800cf5c:	0800cfed 	.word	0x0800cfed
 800cf60:	0800cfed 	.word	0x0800cfed
 800cf64:	0800cfed 	.word	0x0800cfed
 800cf68:	0800cfed 	.word	0x0800cfed
 800cf6c:	0800cfcd 	.word	0x0800cfcd
 800cf70:	2b40      	cmp	r3, #64	; 0x40
 800cf72:	d02e      	beq.n	800cfd2 <UART_SetConfig+0xc1e>
 800cf74:	e03a      	b.n	800cfec <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf76:	f7fc fd85 	bl	8009a84 <HAL_RCC_GetPCLK1Freq>
 800cf7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf7c:	e03c      	b.n	800cff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf7e:	f7fc fd97 	bl	8009ab0 <HAL_RCC_GetPCLK2Freq>
 800cf82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf84:	e038      	b.n	800cff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf86:	f107 0314 	add.w	r3, r7, #20
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fd fcf8 	bl	800a980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf94:	e030      	b.n	800cff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf96:	f107 0308 	add.w	r3, r7, #8
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fd fe44 	bl	800ac28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfa4:	e028      	b.n	800cff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfa6:	4b0e      	ldr	r3, [pc, #56]	; (800cfe0 <UART_SetConfig+0xc2c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0320 	and.w	r3, r3, #32
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d009      	beq.n	800cfc6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfb2:	4b0b      	ldr	r3, [pc, #44]	; (800cfe0 <UART_SetConfig+0xc2c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	08db      	lsrs	r3, r3, #3
 800cfb8:	f003 0303 	and.w	r3, r3, #3
 800cfbc:	4a09      	ldr	r2, [pc, #36]	; (800cfe4 <UART_SetConfig+0xc30>)
 800cfbe:	fa22 f303 	lsr.w	r3, r2, r3
 800cfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfc4:	e018      	b.n	800cff8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800cfc6:	4b07      	ldr	r3, [pc, #28]	; (800cfe4 <UART_SetConfig+0xc30>)
 800cfc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfca:	e015      	b.n	800cff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfcc:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <UART_SetConfig+0xc34>)
 800cfce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfd0:	e012      	b.n	800cff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfd8:	e00e      	b.n	800cff8 <UART_SetConfig+0xc44>
 800cfda:	bf00      	nop
 800cfdc:	080214dc 	.word	0x080214dc
 800cfe0:	58024400 	.word	0x58024400
 800cfe4:	03d09000 	.word	0x03d09000
 800cfe8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cff6:	bf00      	nop
    }

    if (pclk != 0U)
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d021      	beq.n	800d042 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d002:	4a1a      	ldr	r2, [pc, #104]	; (800d06c <UART_SetConfig+0xcb8>)
 800d004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d008:	461a      	mov	r2, r3
 800d00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	085b      	lsrs	r3, r3, #1
 800d016:	441a      	add	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d020:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d024:	2b0f      	cmp	r3, #15
 800d026:	d909      	bls.n	800d03c <UART_SetConfig+0xc88>
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d02e:	d205      	bcs.n	800d03c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	b29a      	uxth	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	60da      	str	r2, [r3, #12]
 800d03a:	e002      	b.n	800d042 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2201      	movs	r2, #1
 800d046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d05e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d062:	4618      	mov	r0, r3
 800d064:	3738      	adds	r7, #56	; 0x38
 800d066:	46bd      	mov	sp, r7
 800d068:	bdb0      	pop	{r4, r5, r7, pc}
 800d06a:	bf00      	nop
 800d06c:	080214dc 	.word	0x080214dc

0800d070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07c:	f003 0301 	and.w	r3, r3, #1
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00a      	beq.n	800d09a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	430a      	orrs	r2, r1
 800d098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d09e:	f003 0302 	and.w	r3, r3, #2
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00a      	beq.n	800d0bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	430a      	orrs	r2, r1
 800d0ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c0:	f003 0304 	and.w	r3, r3, #4
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00a      	beq.n	800d0de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	430a      	orrs	r2, r1
 800d0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e2:	f003 0308 	and.w	r3, r3, #8
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00a      	beq.n	800d100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	430a      	orrs	r2, r1
 800d0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d104:	f003 0310 	and.w	r3, r3, #16
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00a      	beq.n	800d122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d126:	f003 0320 	and.w	r3, r3, #32
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	430a      	orrs	r2, r1
 800d142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d01a      	beq.n	800d186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	430a      	orrs	r2, r1
 800d164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d16a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d16e:	d10a      	bne.n	800d186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	430a      	orrs	r2, r1
 800d184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00a      	beq.n	800d1a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	430a      	orrs	r2, r1
 800d1a6:	605a      	str	r2, [r3, #4]
  }
}
 800d1a8:	bf00      	nop
 800d1aa:	370c      	adds	r7, #12
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af02      	add	r7, sp, #8
 800d1ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d1c4:	f7f6 fed0 	bl	8003f68 <HAL_GetTick>
 800d1c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 0308 	and.w	r3, r3, #8
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d10e      	bne.n	800d1f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f82f 	bl	800d24a <UART_WaitOnFlagUntilTimeout>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e025      	b.n	800d242 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b04      	cmp	r3, #4
 800d202:	d10e      	bne.n	800d222 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f819 	bl	800d24a <UART_WaitOnFlagUntilTimeout>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d21e:	2303      	movs	r3, #3
 800d220:	e00f      	b.n	800d242 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2220      	movs	r2, #32
 800d226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2220      	movs	r2, #32
 800d22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b09c      	sub	sp, #112	; 0x70
 800d24e:	af00      	add	r7, sp, #0
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	603b      	str	r3, [r7, #0]
 800d256:	4613      	mov	r3, r2
 800d258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d25a:	e0a9      	b.n	800d3b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d25c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d262:	f000 80a5 	beq.w	800d3b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d266:	f7f6 fe7f 	bl	8003f68 <HAL_GetTick>
 800d26a:	4602      	mov	r2, r0
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d272:	429a      	cmp	r2, r3
 800d274:	d302      	bcc.n	800d27c <UART_WaitOnFlagUntilTimeout+0x32>
 800d276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d140      	bne.n	800d2fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d284:	e853 3f00 	ldrex	r3, [r3]
 800d288:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d28c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d290:	667b      	str	r3, [r7, #100]	; 0x64
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d29a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d29c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d2a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2a2:	e841 2300 	strex	r3, r2, [r1]
 800d2a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d2a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1e6      	bne.n	800d27c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	3308      	adds	r3, #8
 800d2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b8:	e853 3f00 	ldrex	r3, [r3]
 800d2bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c0:	f023 0301 	bic.w	r3, r3, #1
 800d2c4:	663b      	str	r3, [r7, #96]	; 0x60
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800d2d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2d6:	e841 2300 	strex	r3, r2, [r1]
 800d2da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1e5      	bne.n	800d2ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2220      	movs	r2, #32
 800d2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e069      	b.n	800d3d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d051      	beq.n	800d3b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d31a:	d149      	bne.n	800d3b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d324:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	e853 3f00 	ldrex	r3, [r3]
 800d332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d33a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	461a      	mov	r2, r3
 800d342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d344:	637b      	str	r3, [r7, #52]	; 0x34
 800d346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d34a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d34c:	e841 2300 	strex	r3, r2, [r1]
 800d350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1e6      	bne.n	800d326 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3308      	adds	r3, #8
 800d35e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	e853 3f00 	ldrex	r3, [r3]
 800d366:	613b      	str	r3, [r7, #16]
   return(result);
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f023 0301 	bic.w	r3, r3, #1
 800d36e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3308      	adds	r3, #8
 800d376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d378:	623a      	str	r2, [r7, #32]
 800d37a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37c:	69f9      	ldr	r1, [r7, #28]
 800d37e:	6a3a      	ldr	r2, [r7, #32]
 800d380:	e841 2300 	strex	r3, r2, [r1]
 800d384:	61bb      	str	r3, [r7, #24]
   return(result);
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1e5      	bne.n	800d358 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2220      	movs	r2, #32
 800d390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2220      	movs	r2, #32
 800d398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2220      	movs	r2, #32
 800d3a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e010      	b.n	800d3d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	69da      	ldr	r2, [r3, #28]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	68ba      	ldr	r2, [r7, #8]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	bf0c      	ite	eq
 800d3c0:	2301      	moveq	r3, #1
 800d3c2:	2300      	movne	r3, #0
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	f43f af46 	beq.w	800d25c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3770      	adds	r7, #112	; 0x70
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
	...

0800d3dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b0a3      	sub	sp, #140	; 0x8c
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	88fa      	ldrh	r2, [r7, #6]
 800d3f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	88fa      	ldrh	r2, [r7, #6]
 800d3fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d40e:	d10e      	bne.n	800d42e <UART_Start_Receive_IT+0x52>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d105      	bne.n	800d424 <UART_Start_Receive_IT+0x48>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d41e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d422:	e02d      	b.n	800d480 <UART_Start_Receive_IT+0xa4>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	22ff      	movs	r2, #255	; 0xff
 800d428:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d42c:	e028      	b.n	800d480 <UART_Start_Receive_IT+0xa4>
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10d      	bne.n	800d452 <UART_Start_Receive_IT+0x76>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d104      	bne.n	800d448 <UART_Start_Receive_IT+0x6c>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	22ff      	movs	r2, #255	; 0xff
 800d442:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d446:	e01b      	b.n	800d480 <UART_Start_Receive_IT+0xa4>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	227f      	movs	r2, #127	; 0x7f
 800d44c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d450:	e016      	b.n	800d480 <UART_Start_Receive_IT+0xa4>
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d45a:	d10d      	bne.n	800d478 <UART_Start_Receive_IT+0x9c>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d104      	bne.n	800d46e <UART_Start_Receive_IT+0x92>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	227f      	movs	r2, #127	; 0x7f
 800d468:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d46c:	e008      	b.n	800d480 <UART_Start_Receive_IT+0xa4>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	223f      	movs	r2, #63	; 0x3f
 800d472:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d476:	e003      	b.n	800d480 <UART_Start_Receive_IT+0xa4>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2222      	movs	r2, #34	; 0x22
 800d48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	3308      	adds	r3, #8
 800d496:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d49a:	e853 3f00 	ldrex	r3, [r3]
 800d49e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d4a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4a2:	f043 0301 	orr.w	r3, r3, #1
 800d4a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3308      	adds	r3, #8
 800d4b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d4b4:	673a      	str	r2, [r7, #112]	; 0x70
 800d4b6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d4ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4bc:	e841 2300 	strex	r3, r2, [r1]
 800d4c0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d4c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1e3      	bne.n	800d490 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4d0:	d153      	bne.n	800d57a <UART_Start_Receive_IT+0x19e>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4d8:	88fa      	ldrh	r2, [r7, #6]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d34d      	bcc.n	800d57a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4e6:	d107      	bne.n	800d4f8 <UART_Start_Receive_IT+0x11c>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4a4b      	ldr	r2, [pc, #300]	; (800d620 <UART_Start_Receive_IT+0x244>)
 800d4f4:	671a      	str	r2, [r3, #112]	; 0x70
 800d4f6:	e002      	b.n	800d4fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	4a4a      	ldr	r2, [pc, #296]	; (800d624 <UART_Start_Receive_IT+0x248>)
 800d4fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d01a      	beq.n	800d544 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d516:	e853 3f00 	ldrex	r3, [r3]
 800d51a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d51e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d530:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d532:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d534:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d536:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d538:	e841 2300 	strex	r3, r2, [r1]
 800d53c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1e4      	bne.n	800d50e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3308      	adds	r3, #8
 800d54a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d55a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	3308      	adds	r3, #8
 800d562:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d564:	64ba      	str	r2, [r7, #72]	; 0x48
 800d566:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d56a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d56c:	e841 2300 	strex	r3, r2, [r1]
 800d570:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1e5      	bne.n	800d544 <UART_Start_Receive_IT+0x168>
 800d578:	e04a      	b.n	800d610 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d582:	d107      	bne.n	800d594 <UART_Start_Receive_IT+0x1b8>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d103      	bne.n	800d594 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4a26      	ldr	r2, [pc, #152]	; (800d628 <UART_Start_Receive_IT+0x24c>)
 800d590:	671a      	str	r2, [r3, #112]	; 0x70
 800d592:	e002      	b.n	800d59a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	4a25      	ldr	r2, [pc, #148]	; (800d62c <UART_Start_Receive_IT+0x250>)
 800d598:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d019      	beq.n	800d5de <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b2:	e853 3f00 	ldrex	r3, [r3]
 800d5b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d5be:	677b      	str	r3, [r7, #116]	; 0x74
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5d0:	e841 2300 	strex	r3, r2, [r1]
 800d5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1e6      	bne.n	800d5aa <UART_Start_Receive_IT+0x1ce>
 800d5dc:	e018      	b.n	800d610 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	e853 3f00 	ldrex	r3, [r3]
 800d5ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f043 0320 	orr.w	r3, r3, #32
 800d5f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5fc:	623b      	str	r3, [r7, #32]
 800d5fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d600:	69f9      	ldr	r1, [r7, #28]
 800d602:	6a3a      	ldr	r2, [r7, #32]
 800d604:	e841 2300 	strex	r3, r2, [r1]
 800d608:	61bb      	str	r3, [r7, #24]
   return(result);
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e6      	bne.n	800d5de <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	378c      	adds	r7, #140	; 0x8c
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	0800dd39 	.word	0x0800dd39
 800d624:	0800da41 	.word	0x0800da41
 800d628:	0800d8df 	.word	0x0800d8df
 800d62c:	0800d77f 	.word	0x0800d77f

0800d630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d630:	b480      	push	{r7}
 800d632:	b095      	sub	sp, #84	; 0x54
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d640:	e853 3f00 	ldrex	r3, [r3]
 800d644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d64c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	461a      	mov	r2, r3
 800d654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d656:	643b      	str	r3, [r7, #64]	; 0x40
 800d658:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d65a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d65c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d65e:	e841 2300 	strex	r3, r2, [r1]
 800d662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1e6      	bne.n	800d638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	3308      	adds	r3, #8
 800d670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	e853 3f00 	ldrex	r3, [r3]
 800d678:	61fb      	str	r3, [r7, #28]
   return(result);
 800d67a:	69fa      	ldr	r2, [r7, #28]
 800d67c:	4b1e      	ldr	r3, [pc, #120]	; (800d6f8 <UART_EndRxTransfer+0xc8>)
 800d67e:	4013      	ands	r3, r2
 800d680:	64bb      	str	r3, [r7, #72]	; 0x48
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3308      	adds	r3, #8
 800d688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d68a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d68c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d68e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d692:	e841 2300 	strex	r3, r2, [r1]
 800d696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1e5      	bne.n	800d66a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d118      	bne.n	800d6d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	e853 3f00 	ldrex	r3, [r3]
 800d6b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	f023 0310 	bic.w	r3, r3, #16
 800d6ba:	647b      	str	r3, [r7, #68]	; 0x44
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6c4:	61bb      	str	r3, [r7, #24]
 800d6c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c8:	6979      	ldr	r1, [r7, #20]
 800d6ca:	69ba      	ldr	r2, [r7, #24]
 800d6cc:	e841 2300 	strex	r3, r2, [r1]
 800d6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e6      	bne.n	800d6a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d6ec:	bf00      	nop
 800d6ee:	3754      	adds	r7, #84	; 0x54
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	effffffe 	.word	0xeffffffe

0800d6fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d708:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2200      	movs	r2, #0
 800d716:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f7fe fe34 	bl	800c388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d720:	bf00      	nop
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	e853 3f00 	ldrex	r3, [r3]
 800d73c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d744:	61fb      	str	r3, [r7, #28]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	61bb      	str	r3, [r7, #24]
 800d750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d752:	6979      	ldr	r1, [r7, #20]
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	e841 2300 	strex	r3, r2, [r1]
 800d75a:	613b      	str	r3, [r7, #16]
   return(result);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1e6      	bne.n	800d730 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2220      	movs	r2, #32
 800d766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7fe fdff 	bl	800c374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d776:	bf00      	nop
 800d778:	3720      	adds	r7, #32
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b096      	sub	sp, #88	; 0x58
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d78c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d796:	2b22      	cmp	r3, #34	; 0x22
 800d798:	f040 8095 	bne.w	800d8c6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d7a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d7aa:	b2d9      	uxtb	r1, r3
 800d7ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7b6:	400a      	ands	r2, r1
 800d7b8:	b2d2      	uxtb	r2, r2
 800d7ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d178      	bne.n	800d8d6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ec:	e853 3f00 	ldrex	r3, [r3]
 800d7f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7f8:	653b      	str	r3, [r7, #80]	; 0x50
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	461a      	mov	r2, r3
 800d800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d802:	647b      	str	r3, [r7, #68]	; 0x44
 800d804:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d80a:	e841 2300 	strex	r3, r2, [r1]
 800d80e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1e6      	bne.n	800d7e4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	3308      	adds	r3, #8
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	623b      	str	r3, [r7, #32]
   return(result);
 800d826:	6a3b      	ldr	r3, [r7, #32]
 800d828:	f023 0301 	bic.w	r3, r3, #1
 800d82c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3308      	adds	r3, #8
 800d834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d836:	633a      	str	r2, [r7, #48]	; 0x30
 800d838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e5      	bne.n	800d816 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2220      	movs	r2, #32
 800d84e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d12e      	bne.n	800d8be <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	e853 3f00 	ldrex	r3, [r3]
 800d872:	60fb      	str	r3, [r7, #12]
   return(result);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f023 0310 	bic.w	r3, r3, #16
 800d87a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	461a      	mov	r2, r3
 800d882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d884:	61fb      	str	r3, [r7, #28]
 800d886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d888:	69b9      	ldr	r1, [r7, #24]
 800d88a:	69fa      	ldr	r2, [r7, #28]
 800d88c:	e841 2300 	strex	r3, r2, [r1]
 800d890:	617b      	str	r3, [r7, #20]
   return(result);
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1e6      	bne.n	800d866 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	69db      	ldr	r3, [r3, #28]
 800d89e:	f003 0310 	and.w	r3, r3, #16
 800d8a2:	2b10      	cmp	r3, #16
 800d8a4:	d103      	bne.n	800d8ae <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2210      	movs	r2, #16
 800d8ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7fe fd70 	bl	800c39c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8bc:	e00b      	b.n	800d8d6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f7f3 fd56 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 800d8c4:	e007      	b.n	800d8d6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	699a      	ldr	r2, [r3, #24]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0208 	orr.w	r2, r2, #8
 800d8d4:	619a      	str	r2, [r3, #24]
}
 800d8d6:	bf00      	nop
 800d8d8:	3758      	adds	r7, #88	; 0x58
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b096      	sub	sp, #88	; 0x58
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8f6:	2b22      	cmp	r3, #34	; 0x22
 800d8f8:	f040 8095 	bne.w	800da26 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d902:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d90a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d90c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d910:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d914:	4013      	ands	r3, r2
 800d916:	b29a      	uxth	r2, r3
 800d918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d91a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d920:	1c9a      	adds	r2, r3, #2
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	3b01      	subs	r3, #1
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d93e:	b29b      	uxth	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d178      	bne.n	800da36 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94c:	e853 3f00 	ldrex	r3, [r3]
 800d950:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	461a      	mov	r2, r3
 800d960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d962:	643b      	str	r3, [r7, #64]	; 0x40
 800d964:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d96a:	e841 2300 	strex	r3, r2, [r1]
 800d96e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e6      	bne.n	800d944 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3308      	adds	r3, #8
 800d97c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	e853 3f00 	ldrex	r3, [r3]
 800d984:	61fb      	str	r3, [r7, #28]
   return(result);
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	f023 0301 	bic.w	r3, r3, #1
 800d98c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3308      	adds	r3, #8
 800d994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d996:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d998:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d99e:	e841 2300 	strex	r3, r2, [r1]
 800d9a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1e5      	bne.n	800d976 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2220      	movs	r2, #32
 800d9ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d12e      	bne.n	800da1e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	e853 3f00 	ldrex	r3, [r3]
 800d9d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	f023 0310 	bic.w	r3, r3, #16
 800d9da:	647b      	str	r3, [r7, #68]	; 0x44
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9e4:	61bb      	str	r3, [r7, #24]
 800d9e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e8:	6979      	ldr	r1, [r7, #20]
 800d9ea:	69ba      	ldr	r2, [r7, #24]
 800d9ec:	e841 2300 	strex	r3, r2, [r1]
 800d9f0:	613b      	str	r3, [r7, #16]
   return(result);
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1e6      	bne.n	800d9c6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	69db      	ldr	r3, [r3, #28]
 800d9fe:	f003 0310 	and.w	r3, r3, #16
 800da02:	2b10      	cmp	r3, #16
 800da04:	d103      	bne.n	800da0e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2210      	movs	r2, #16
 800da0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da14:	4619      	mov	r1, r3
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7fe fcc0 	bl	800c39c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da1c:	e00b      	b.n	800da36 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7f3 fca6 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 800da24:	e007      	b.n	800da36 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	699a      	ldr	r2, [r3, #24]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f042 0208 	orr.w	r2, r2, #8
 800da34:	619a      	str	r2, [r3, #24]
}
 800da36:	bf00      	nop
 800da38:	3758      	adds	r7, #88	; 0x58
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b0a6      	sub	sp, #152	; 0x98
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da4e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da76:	2b22      	cmp	r3, #34	; 0x22
 800da78:	f040 814d 	bne.w	800dd16 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800da82:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da86:	e0f4      	b.n	800dc72 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da92:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800da96:	b2d9      	uxtb	r1, r3
 800da98:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa2:	400a      	ands	r2, r1
 800daa4:	b2d2      	uxtb	r2, r2
 800daa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daac:	1c5a      	adds	r2, r3, #1
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dab8:	b29b      	uxth	r3, r3
 800daba:	3b01      	subs	r3, #1
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dace:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dad2:	f003 0307 	and.w	r3, r3, #7
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d053      	beq.n	800db82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d011      	beq.n	800db0a <UART_RxISR_8BIT_FIFOEN+0xca>
 800dae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800daea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00b      	beq.n	800db0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2201      	movs	r2, #1
 800daf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db00:	f043 0201 	orr.w	r2, r3, #1
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d011      	beq.n	800db3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800db16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db1a:	f003 0301 	and.w	r3, r3, #1
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00b      	beq.n	800db3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2202      	movs	r2, #2
 800db28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db30:	f043 0204 	orr.w	r2, r3, #4
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db3e:	f003 0304 	and.w	r3, r3, #4
 800db42:	2b00      	cmp	r3, #0
 800db44:	d011      	beq.n	800db6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800db46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00b      	beq.n	800db6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2204      	movs	r2, #4
 800db58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db60:	f043 0202 	orr.w	r2, r3, #2
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d006      	beq.n	800db82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f7fe fc07 	bl	800c388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db88:	b29b      	uxth	r3, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d171      	bne.n	800dc72 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db96:	e853 3f00 	ldrex	r3, [r3]
 800db9a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800db9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dbb0:	66bb      	str	r3, [r7, #104]	; 0x68
 800dbb2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dbb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbb8:	e841 2300 	strex	r3, r2, [r1]
 800dbbc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800dbbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d1e4      	bne.n	800db8e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3308      	adds	r3, #8
 800dbca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbce:	e853 3f00 	ldrex	r3, [r3]
 800dbd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dbd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbd6:	4b56      	ldr	r3, [pc, #344]	; (800dd30 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800dbd8:	4013      	ands	r3, r2
 800dbda:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dbe4:	657a      	str	r2, [r7, #84]	; 0x54
 800dbe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbec:	e841 2300 	strex	r3, r2, [r1]
 800dbf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1e5      	bne.n	800dbc4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2220      	movs	r2, #32
 800dbfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d12e      	bne.n	800dc6c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc1c:	e853 3f00 	ldrex	r3, [r3]
 800dc20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	f023 0310 	bic.w	r3, r3, #16
 800dc28:	67bb      	str	r3, [r7, #120]	; 0x78
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc32:	643b      	str	r3, [r7, #64]	; 0x40
 800dc34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc3a:	e841 2300 	strex	r3, r2, [r1]
 800dc3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d1e6      	bne.n	800dc14 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	69db      	ldr	r3, [r3, #28]
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b10      	cmp	r3, #16
 800dc52:	d103      	bne.n	800dc5c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2210      	movs	r2, #16
 800dc5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7fe fb99 	bl	800c39c <HAL_UARTEx_RxEventCallback>
 800dc6a:	e002      	b.n	800dc72 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7f3 fb7f 	bl	8001370 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <UART_RxISR_8BIT_FIFOEN+0x248>
 800dc7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc7e:	f003 0320 	and.w	r3, r3, #32
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f47f af00 	bne.w	800da88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dc92:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d045      	beq.n	800dd26 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d23e      	bcs.n	800dd26 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3308      	adds	r3, #8
 800dcae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	e853 3f00 	ldrex	r3, [r3]
 800dcb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dcbe:	673b      	str	r3, [r7, #112]	; 0x70
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3308      	adds	r3, #8
 800dcc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dcc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dcca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcd0:	e841 2300 	strex	r3, r2, [r1]
 800dcd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e5      	bne.n	800dca8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4a15      	ldr	r2, [pc, #84]	; (800dd34 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800dce0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	e853 3f00 	ldrex	r3, [r3]
 800dcee:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	f043 0320 	orr.w	r3, r3, #32
 800dcf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd00:	61bb      	str	r3, [r7, #24]
 800dd02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd04:	6979      	ldr	r1, [r7, #20]
 800dd06:	69ba      	ldr	r2, [r7, #24]
 800dd08:	e841 2300 	strex	r3, r2, [r1]
 800dd0c:	613b      	str	r3, [r7, #16]
   return(result);
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1e6      	bne.n	800dce2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd14:	e007      	b.n	800dd26 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	699a      	ldr	r2, [r3, #24]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f042 0208 	orr.w	r2, r2, #8
 800dd24:	619a      	str	r2, [r3, #24]
}
 800dd26:	bf00      	nop
 800dd28:	3798      	adds	r7, #152	; 0x98
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	effffffe 	.word	0xeffffffe
 800dd34:	0800d77f 	.word	0x0800d77f

0800dd38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b0a8      	sub	sp, #160	; 0xa0
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd46:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd6e:	2b22      	cmp	r3, #34	; 0x22
 800dd70:	f040 8151 	bne.w	800e016 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd7a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd7e:	e0f8      	b.n	800df72 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800dd92:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800dd96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800dd9a:	4013      	ands	r3, r2
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dda2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dda8:	1c9a      	adds	r2, r3, #2
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	69db      	ldr	r3, [r3, #28]
 800ddc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ddca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ddce:	f003 0307 	and.w	r3, r3, #7
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d053      	beq.n	800de7e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ddd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d011      	beq.n	800de06 <UART_RxISR_16BIT_FIFOEN+0xce>
 800dde2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dde6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00b      	beq.n	800de06 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddfc:	f043 0201 	orr.w	r2, r3, #1
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de0a:	f003 0302 	and.w	r3, r3, #2
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d011      	beq.n	800de36 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800de12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00b      	beq.n	800de36 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2202      	movs	r2, #2
 800de24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de2c:	f043 0204 	orr.w	r2, r3, #4
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de3a:	f003 0304 	and.w	r3, r3, #4
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d011      	beq.n	800de66 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800de42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de46:	f003 0301 	and.w	r3, r3, #1
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00b      	beq.n	800de66 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2204      	movs	r2, #4
 800de54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de5c:	f043 0202 	orr.w	r2, r3, #2
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d006      	beq.n	800de7e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7fe fa89 	bl	800c388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de84:	b29b      	uxth	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	d173      	bne.n	800df72 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800de98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	461a      	mov	r2, r3
 800dea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800deac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800deae:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800deb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800deb4:	e841 2300 	strex	r3, r2, [r1]
 800deb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800deba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1e4      	bne.n	800de8a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3308      	adds	r3, #8
 800dec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deca:	e853 3f00 	ldrex	r3, [r3]
 800dece:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ded0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ded2:	4b57      	ldr	r3, [pc, #348]	; (800e030 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800ded4:	4013      	ands	r3, r2
 800ded6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3308      	adds	r3, #8
 800dee0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dee4:	65ba      	str	r2, [r7, #88]	; 0x58
 800dee6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800deea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800deec:	e841 2300 	strex	r3, r2, [r1]
 800def0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800def2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1e3      	bne.n	800dec0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2220      	movs	r2, #32
 800defc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d12e      	bne.n	800df6c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	e853 3f00 	ldrex	r3, [r3]
 800df20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df24:	f023 0310 	bic.w	r3, r3, #16
 800df28:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	461a      	mov	r2, r3
 800df30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df32:	647b      	str	r3, [r7, #68]	; 0x44
 800df34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df3a:	e841 2300 	strex	r3, r2, [r1]
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1e6      	bne.n	800df14 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	69db      	ldr	r3, [r3, #28]
 800df4c:	f003 0310 	and.w	r3, r3, #16
 800df50:	2b10      	cmp	r3, #16
 800df52:	d103      	bne.n	800df5c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2210      	movs	r2, #16
 800df5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7fe fa19 	bl	800c39c <HAL_UARTEx_RxEventCallback>
 800df6a:	e002      	b.n	800df72 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7f3 f9ff 	bl	8001370 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df72:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800df76:	2b00      	cmp	r3, #0
 800df78:	d006      	beq.n	800df88 <UART_RxISR_16BIT_FIFOEN+0x250>
 800df7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df7e:	f003 0320 	and.w	r3, r3, #32
 800df82:	2b00      	cmp	r3, #0
 800df84:	f47f aefc 	bne.w	800dd80 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df8e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df92:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800df96:	2b00      	cmp	r3, #0
 800df98:	d045      	beq.n	800e026 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dfa0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d23e      	bcs.n	800e026 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3308      	adds	r3, #8
 800dfae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	e853 3f00 	ldrex	r3, [r3]
 800dfb6:	623b      	str	r3, [r7, #32]
   return(result);
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfbe:	677b      	str	r3, [r7, #116]	; 0x74
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3308      	adds	r3, #8
 800dfc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dfc8:	633a      	str	r2, [r7, #48]	; 0x30
 800dfca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfd0:	e841 2300 	strex	r3, r2, [r1]
 800dfd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1e5      	bne.n	800dfa8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a15      	ldr	r2, [pc, #84]	; (800e034 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800dfe0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	e853 3f00 	ldrex	r3, [r3]
 800dfee:	60fb      	str	r3, [r7, #12]
   return(result);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f043 0320 	orr.w	r3, r3, #32
 800dff6:	673b      	str	r3, [r7, #112]	; 0x70
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	461a      	mov	r2, r3
 800dffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e004:	69b9      	ldr	r1, [r7, #24]
 800e006:	69fa      	ldr	r2, [r7, #28]
 800e008:	e841 2300 	strex	r3, r2, [r1]
 800e00c:	617b      	str	r3, [r7, #20]
   return(result);
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d1e6      	bne.n	800dfe2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e014:	e007      	b.n	800e026 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	699a      	ldr	r2, [r3, #24]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f042 0208 	orr.w	r2, r2, #8
 800e024:	619a      	str	r2, [r3, #24]
}
 800e026:	bf00      	nop
 800e028:	37a0      	adds	r7, #160	; 0xa0
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	effffffe 	.word	0xeffffffe
 800e034:	0800d8df 	.word	0x0800d8df

0800e038 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e040:	bf00      	nop
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e082:	2b01      	cmp	r3, #1
 800e084:	d101      	bne.n	800e08a <HAL_UARTEx_DisableFifoMode+0x16>
 800e086:	2302      	movs	r3, #2
 800e088:	e027      	b.n	800e0da <HAL_UARTEx_DisableFifoMode+0x66>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2224      	movs	r2, #36	; 0x24
 800e096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f022 0201 	bic.w	r2, r2, #1
 800e0b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e0b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3714      	adds	r7, #20
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b084      	sub	sp, #16
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d101      	bne.n	800e0fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e02d      	b.n	800e15a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2224      	movs	r2, #36	; 0x24
 800e10a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f022 0201 	bic.w	r2, r2, #1
 800e124:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	683a      	ldr	r2, [r7, #0]
 800e136:	430a      	orrs	r2, r1
 800e138:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f850 	bl	800e1e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2220      	movs	r2, #32
 800e14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e172:	2b01      	cmp	r3, #1
 800e174:	d101      	bne.n	800e17a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e176:	2302      	movs	r3, #2
 800e178:	e02d      	b.n	800e1d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2201      	movs	r2, #1
 800e17e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2224      	movs	r2, #36	; 0x24
 800e186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f022 0201 	bic.w	r2, r2, #1
 800e1a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	683a      	ldr	r2, [r7, #0]
 800e1b2:	430a      	orrs	r2, r1
 800e1b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f812 	bl	800e1e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2220      	movs	r2, #32
 800e1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1d4:	2300      	movs	r3, #0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d108      	bne.n	800e202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e200:	e031      	b.n	800e266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e202:	2310      	movs	r3, #16
 800e204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e206:	2310      	movs	r3, #16
 800e208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	0e5b      	lsrs	r3, r3, #25
 800e212:	b2db      	uxtb	r3, r3
 800e214:	f003 0307 	and.w	r3, r3, #7
 800e218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	0f5b      	lsrs	r3, r3, #29
 800e222:	b2db      	uxtb	r3, r3
 800e224:	f003 0307 	and.w	r3, r3, #7
 800e228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e22a:	7bbb      	ldrb	r3, [r7, #14]
 800e22c:	7b3a      	ldrb	r2, [r7, #12]
 800e22e:	4911      	ldr	r1, [pc, #68]	; (800e274 <UARTEx_SetNbDataToProcess+0x94>)
 800e230:	5c8a      	ldrb	r2, [r1, r2]
 800e232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e236:	7b3a      	ldrb	r2, [r7, #12]
 800e238:	490f      	ldr	r1, [pc, #60]	; (800e278 <UARTEx_SetNbDataToProcess+0x98>)
 800e23a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e23c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e240:	b29a      	uxth	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	7b7a      	ldrb	r2, [r7, #13]
 800e24c:	4909      	ldr	r1, [pc, #36]	; (800e274 <UARTEx_SetNbDataToProcess+0x94>)
 800e24e:	5c8a      	ldrb	r2, [r1, r2]
 800e250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e254:	7b7a      	ldrb	r2, [r7, #13]
 800e256:	4908      	ldr	r1, [pc, #32]	; (800e278 <UARTEx_SetNbDataToProcess+0x98>)
 800e258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e25a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e25e:	b29a      	uxth	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e266:	bf00      	nop
 800e268:	3714      	adds	r7, #20
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	080214f4 	.word	0x080214f4
 800e278:	080214fc 	.word	0x080214fc

0800e27c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e282:	4b98      	ldr	r3, [pc, #608]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e284:	22c0      	movs	r2, #192	; 0xc0
 800e286:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e288:	4b96      	ldr	r3, [pc, #600]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e28a:	22a8      	movs	r2, #168	; 0xa8
 800e28c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800e28e:	4b95      	ldr	r3, [pc, #596]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e290:	2200      	movs	r2, #0
 800e292:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800e294:	4b93      	ldr	r3, [pc, #588]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e296:	220a      	movs	r2, #10
 800e298:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e29a:	4b93      	ldr	r3, [pc, #588]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e29c:	22ff      	movs	r2, #255	; 0xff
 800e29e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e2a0:	4b91      	ldr	r3, [pc, #580]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e2a2:	22ff      	movs	r2, #255	; 0xff
 800e2a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800e2a6:	4b90      	ldr	r3, [pc, #576]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e2a8:	22ff      	movs	r2, #255	; 0xff
 800e2aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e2ac:	4b8e      	ldr	r3, [pc, #568]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800e2b2:	4b8e      	ldr	r3, [pc, #568]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800e2b8:	4b8c      	ldr	r3, [pc, #560]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e2be:	4b8b      	ldr	r3, [pc, #556]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800e2c4:	4b89      	ldr	r3, [pc, #548]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	f004 ff87 	bl	80131e0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e2d2:	4b84      	ldr	r3, [pc, #528]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	061a      	lsls	r2, r3, #24
 800e2d8:	4b82      	ldr	r3, [pc, #520]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e2da:	785b      	ldrb	r3, [r3, #1]
 800e2dc:	041b      	lsls	r3, r3, #16
 800e2de:	431a      	orrs	r2, r3
 800e2e0:	4b80      	ldr	r3, [pc, #512]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e2e2:	789b      	ldrb	r3, [r3, #2]
 800e2e4:	021b      	lsls	r3, r3, #8
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	4a7e      	ldr	r2, [pc, #504]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e2ea:	78d2      	ldrb	r2, [r2, #3]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	061a      	lsls	r2, r3, #24
 800e2f0:	4b7c      	ldr	r3, [pc, #496]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	0619      	lsls	r1, r3, #24
 800e2f6:	4b7b      	ldr	r3, [pc, #492]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e2f8:	785b      	ldrb	r3, [r3, #1]
 800e2fa:	041b      	lsls	r3, r3, #16
 800e2fc:	4319      	orrs	r1, r3
 800e2fe:	4b79      	ldr	r3, [pc, #484]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e300:	789b      	ldrb	r3, [r3, #2]
 800e302:	021b      	lsls	r3, r3, #8
 800e304:	430b      	orrs	r3, r1
 800e306:	4977      	ldr	r1, [pc, #476]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e308:	78c9      	ldrb	r1, [r1, #3]
 800e30a:	430b      	orrs	r3, r1
 800e30c:	021b      	lsls	r3, r3, #8
 800e30e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e312:	431a      	orrs	r2, r3
 800e314:	4b73      	ldr	r3, [pc, #460]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	0619      	lsls	r1, r3, #24
 800e31a:	4b72      	ldr	r3, [pc, #456]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e31c:	785b      	ldrb	r3, [r3, #1]
 800e31e:	041b      	lsls	r3, r3, #16
 800e320:	4319      	orrs	r1, r3
 800e322:	4b70      	ldr	r3, [pc, #448]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e324:	789b      	ldrb	r3, [r3, #2]
 800e326:	021b      	lsls	r3, r3, #8
 800e328:	430b      	orrs	r3, r1
 800e32a:	496e      	ldr	r1, [pc, #440]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e32c:	78c9      	ldrb	r1, [r1, #3]
 800e32e:	430b      	orrs	r3, r1
 800e330:	0a1b      	lsrs	r3, r3, #8
 800e332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e336:	431a      	orrs	r2, r3
 800e338:	4b6a      	ldr	r3, [pc, #424]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	0619      	lsls	r1, r3, #24
 800e33e:	4b69      	ldr	r3, [pc, #420]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e340:	785b      	ldrb	r3, [r3, #1]
 800e342:	041b      	lsls	r3, r3, #16
 800e344:	4319      	orrs	r1, r3
 800e346:	4b67      	ldr	r3, [pc, #412]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e348:	789b      	ldrb	r3, [r3, #2]
 800e34a:	021b      	lsls	r3, r3, #8
 800e34c:	430b      	orrs	r3, r1
 800e34e:	4965      	ldr	r1, [pc, #404]	; (800e4e4 <MX_LWIP_Init+0x268>)
 800e350:	78c9      	ldrb	r1, [r1, #3]
 800e352:	430b      	orrs	r3, r1
 800e354:	0e1b      	lsrs	r3, r3, #24
 800e356:	4313      	orrs	r3, r2
 800e358:	4a65      	ldr	r2, [pc, #404]	; (800e4f0 <MX_LWIP_Init+0x274>)
 800e35a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e35c:	4b62      	ldr	r3, [pc, #392]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	061a      	lsls	r2, r3, #24
 800e362:	4b61      	ldr	r3, [pc, #388]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e364:	785b      	ldrb	r3, [r3, #1]
 800e366:	041b      	lsls	r3, r3, #16
 800e368:	431a      	orrs	r2, r3
 800e36a:	4b5f      	ldr	r3, [pc, #380]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e36c:	789b      	ldrb	r3, [r3, #2]
 800e36e:	021b      	lsls	r3, r3, #8
 800e370:	4313      	orrs	r3, r2
 800e372:	4a5d      	ldr	r2, [pc, #372]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e374:	78d2      	ldrb	r2, [r2, #3]
 800e376:	4313      	orrs	r3, r2
 800e378:	061a      	lsls	r2, r3, #24
 800e37a:	4b5b      	ldr	r3, [pc, #364]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	0619      	lsls	r1, r3, #24
 800e380:	4b59      	ldr	r3, [pc, #356]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	041b      	lsls	r3, r3, #16
 800e386:	4319      	orrs	r1, r3
 800e388:	4b57      	ldr	r3, [pc, #348]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e38a:	789b      	ldrb	r3, [r3, #2]
 800e38c:	021b      	lsls	r3, r3, #8
 800e38e:	430b      	orrs	r3, r1
 800e390:	4955      	ldr	r1, [pc, #340]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e392:	78c9      	ldrb	r1, [r1, #3]
 800e394:	430b      	orrs	r3, r1
 800e396:	021b      	lsls	r3, r3, #8
 800e398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e39c:	431a      	orrs	r2, r3
 800e39e:	4b52      	ldr	r3, [pc, #328]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	0619      	lsls	r1, r3, #24
 800e3a4:	4b50      	ldr	r3, [pc, #320]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3a6:	785b      	ldrb	r3, [r3, #1]
 800e3a8:	041b      	lsls	r3, r3, #16
 800e3aa:	4319      	orrs	r1, r3
 800e3ac:	4b4e      	ldr	r3, [pc, #312]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3ae:	789b      	ldrb	r3, [r3, #2]
 800e3b0:	021b      	lsls	r3, r3, #8
 800e3b2:	430b      	orrs	r3, r1
 800e3b4:	494c      	ldr	r1, [pc, #304]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3b6:	78c9      	ldrb	r1, [r1, #3]
 800e3b8:	430b      	orrs	r3, r1
 800e3ba:	0a1b      	lsrs	r3, r3, #8
 800e3bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e3c0:	431a      	orrs	r2, r3
 800e3c2:	4b49      	ldr	r3, [pc, #292]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	0619      	lsls	r1, r3, #24
 800e3c8:	4b47      	ldr	r3, [pc, #284]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3ca:	785b      	ldrb	r3, [r3, #1]
 800e3cc:	041b      	lsls	r3, r3, #16
 800e3ce:	4319      	orrs	r1, r3
 800e3d0:	4b45      	ldr	r3, [pc, #276]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3d2:	789b      	ldrb	r3, [r3, #2]
 800e3d4:	021b      	lsls	r3, r3, #8
 800e3d6:	430b      	orrs	r3, r1
 800e3d8:	4943      	ldr	r1, [pc, #268]	; (800e4e8 <MX_LWIP_Init+0x26c>)
 800e3da:	78c9      	ldrb	r1, [r1, #3]
 800e3dc:	430b      	orrs	r3, r1
 800e3de:	0e1b      	lsrs	r3, r3, #24
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	4a44      	ldr	r2, [pc, #272]	; (800e4f4 <MX_LWIP_Init+0x278>)
 800e3e4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e3e6:	4b41      	ldr	r3, [pc, #260]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	061a      	lsls	r2, r3, #24
 800e3ec:	4b3f      	ldr	r3, [pc, #252]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e3ee:	785b      	ldrb	r3, [r3, #1]
 800e3f0:	041b      	lsls	r3, r3, #16
 800e3f2:	431a      	orrs	r2, r3
 800e3f4:	4b3d      	ldr	r3, [pc, #244]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e3f6:	789b      	ldrb	r3, [r3, #2]
 800e3f8:	021b      	lsls	r3, r3, #8
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	4a3b      	ldr	r2, [pc, #236]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e3fe:	78d2      	ldrb	r2, [r2, #3]
 800e400:	4313      	orrs	r3, r2
 800e402:	061a      	lsls	r2, r3, #24
 800e404:	4b39      	ldr	r3, [pc, #228]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	0619      	lsls	r1, r3, #24
 800e40a:	4b38      	ldr	r3, [pc, #224]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e40c:	785b      	ldrb	r3, [r3, #1]
 800e40e:	041b      	lsls	r3, r3, #16
 800e410:	4319      	orrs	r1, r3
 800e412:	4b36      	ldr	r3, [pc, #216]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e414:	789b      	ldrb	r3, [r3, #2]
 800e416:	021b      	lsls	r3, r3, #8
 800e418:	430b      	orrs	r3, r1
 800e41a:	4934      	ldr	r1, [pc, #208]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e41c:	78c9      	ldrb	r1, [r1, #3]
 800e41e:	430b      	orrs	r3, r1
 800e420:	021b      	lsls	r3, r3, #8
 800e422:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e426:	431a      	orrs	r2, r3
 800e428:	4b30      	ldr	r3, [pc, #192]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	0619      	lsls	r1, r3, #24
 800e42e:	4b2f      	ldr	r3, [pc, #188]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e430:	785b      	ldrb	r3, [r3, #1]
 800e432:	041b      	lsls	r3, r3, #16
 800e434:	4319      	orrs	r1, r3
 800e436:	4b2d      	ldr	r3, [pc, #180]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e438:	789b      	ldrb	r3, [r3, #2]
 800e43a:	021b      	lsls	r3, r3, #8
 800e43c:	430b      	orrs	r3, r1
 800e43e:	492b      	ldr	r1, [pc, #172]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e440:	78c9      	ldrb	r1, [r1, #3]
 800e442:	430b      	orrs	r3, r1
 800e444:	0a1b      	lsrs	r3, r3, #8
 800e446:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e44a:	431a      	orrs	r2, r3
 800e44c:	4b27      	ldr	r3, [pc, #156]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	0619      	lsls	r1, r3, #24
 800e452:	4b26      	ldr	r3, [pc, #152]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e454:	785b      	ldrb	r3, [r3, #1]
 800e456:	041b      	lsls	r3, r3, #16
 800e458:	4319      	orrs	r1, r3
 800e45a:	4b24      	ldr	r3, [pc, #144]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e45c:	789b      	ldrb	r3, [r3, #2]
 800e45e:	021b      	lsls	r3, r3, #8
 800e460:	430b      	orrs	r3, r1
 800e462:	4922      	ldr	r1, [pc, #136]	; (800e4ec <MX_LWIP_Init+0x270>)
 800e464:	78c9      	ldrb	r1, [r1, #3]
 800e466:	430b      	orrs	r3, r1
 800e468:	0e1b      	lsrs	r3, r3, #24
 800e46a:	4313      	orrs	r3, r2
 800e46c:	4a22      	ldr	r2, [pc, #136]	; (800e4f8 <MX_LWIP_Init+0x27c>)
 800e46e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e470:	4b22      	ldr	r3, [pc, #136]	; (800e4fc <MX_LWIP_Init+0x280>)
 800e472:	9302      	str	r3, [sp, #8]
 800e474:	4b22      	ldr	r3, [pc, #136]	; (800e500 <MX_LWIP_Init+0x284>)
 800e476:	9301      	str	r3, [sp, #4]
 800e478:	2300      	movs	r3, #0
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	4b1e      	ldr	r3, [pc, #120]	; (800e4f8 <MX_LWIP_Init+0x27c>)
 800e47e:	4a1d      	ldr	r2, [pc, #116]	; (800e4f4 <MX_LWIP_Init+0x278>)
 800e480:	491b      	ldr	r1, [pc, #108]	; (800e4f0 <MX_LWIP_Init+0x274>)
 800e482:	4820      	ldr	r0, [pc, #128]	; (800e504 <MX_LWIP_Init+0x288>)
 800e484:	f005 fd3e 	bl	8013f04 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e488:	481e      	ldr	r0, [pc, #120]	; (800e504 <MX_LWIP_Init+0x288>)
 800e48a:	f005 feed 	bl	8014268 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e48e:	4b1d      	ldr	r3, [pc, #116]	; (800e504 <MX_LWIP_Init+0x288>)
 800e490:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e494:	089b      	lsrs	r3, r3, #2
 800e496:	f003 0301 	and.w	r3, r3, #1
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d003      	beq.n	800e4a8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e4a0:	4818      	ldr	r0, [pc, #96]	; (800e504 <MX_LWIP_Init+0x288>)
 800e4a2:	f005 fef1 	bl	8014288 <netif_set_up>
 800e4a6:	e002      	b.n	800e4ae <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e4a8:	4816      	ldr	r0, [pc, #88]	; (800e504 <MX_LWIP_Init+0x288>)
 800e4aa:	f005 ff59 	bl	8014360 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e4ae:	4916      	ldr	r1, [pc, #88]	; (800e508 <MX_LWIP_Init+0x28c>)
 800e4b0:	4814      	ldr	r0, [pc, #80]	; (800e504 <MX_LWIP_Init+0x288>)
 800e4b2:	f005 ffeb 	bl	801448c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800e4b6:	2224      	movs	r2, #36	; 0x24
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	4814      	ldr	r0, [pc, #80]	; (800e50c <MX_LWIP_Init+0x290>)
 800e4bc:	f00e fff8 	bl	801d4b0 <memset>
  attributes.name = "EthLink";
 800e4c0:	4b12      	ldr	r3, [pc, #72]	; (800e50c <MX_LWIP_Init+0x290>)
 800e4c2:	4a13      	ldr	r2, [pc, #76]	; (800e510 <MX_LWIP_Init+0x294>)
 800e4c4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800e4c6:	4b11      	ldr	r3, [pc, #68]	; (800e50c <MX_LWIP_Init+0x290>)
 800e4c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e4cc:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800e4ce:	4b0f      	ldr	r3, [pc, #60]	; (800e50c <MX_LWIP_Init+0x290>)
 800e4d0:	2210      	movs	r2, #16
 800e4d2:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800e4d4:	4a0d      	ldr	r2, [pc, #52]	; (800e50c <MX_LWIP_Init+0x290>)
 800e4d6:	490b      	ldr	r1, [pc, #44]	; (800e504 <MX_LWIP_Init+0x288>)
 800e4d8:	480e      	ldr	r0, [pc, #56]	; (800e514 <MX_LWIP_Init+0x298>)
 800e4da:	f000 fd18 	bl	800ef0e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e4de:	bf00      	nop
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	2401b5a8 	.word	0x2401b5a8
 800e4e8:	2401b5a4 	.word	0x2401b5a4
 800e4ec:	2401b544 	.word	0x2401b544
 800e4f0:	2401b5a0 	.word	0x2401b5a0
 800e4f4:	2401b5ac 	.word	0x2401b5ac
 800e4f8:	2401b5b0 	.word	0x2401b5b0
 800e4fc:	0801311d 	.word	0x0801311d
 800e500:	0800eb95 	.word	0x0800eb95
 800e504:	2401b56c 	.word	0x2401b56c
 800e508:	0800e519 	.word	0x0800e519
 800e50c:	2401b548 	.word	0x2401b548
 800e510:	0801e984 	.word	0x0801e984
 800e514:	0800ecbd 	.word	0x0800ecbd

0800e518 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b08e      	sub	sp, #56	; 0x38
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]
 800e53c:	605a      	str	r2, [r3, #4]
 800e53e:	609a      	str	r2, [r3, #8]
 800e540:	60da      	str	r2, [r3, #12]
 800e542:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a4d      	ldr	r2, [pc, #308]	; (800e680 <HAL_ETH_MspInit+0x154>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	f040 8093 	bne.w	800e676 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e550:	4b4c      	ldr	r3, [pc, #304]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e556:	4a4b      	ldr	r2, [pc, #300]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e55c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e560:	4b48      	ldr	r3, [pc, #288]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e562:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e56a:	623b      	str	r3, [r7, #32]
 800e56c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e56e:	4b45      	ldr	r3, [pc, #276]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e574:	4a43      	ldr	r2, [pc, #268]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e57a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e57e:	4b41      	ldr	r3, [pc, #260]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e588:	61fb      	str	r3, [r7, #28]
 800e58a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e58c:	4b3d      	ldr	r3, [pc, #244]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e58e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e592:	4a3c      	ldr	r2, [pc, #240]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e598:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e59c:	4b39      	ldr	r3, [pc, #228]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e59e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e5a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5a6:	61bb      	str	r3, [r7, #24]
 800e5a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e5aa:	4b36      	ldr	r3, [pc, #216]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5b0:	4a34      	ldr	r2, [pc, #208]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5b2:	f043 0304 	orr.w	r3, r3, #4
 800e5b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5ba:	4b32      	ldr	r3, [pc, #200]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5c0:	f003 0304 	and.w	r3, r3, #4
 800e5c4:	617b      	str	r3, [r7, #20]
 800e5c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e5c8:	4b2e      	ldr	r3, [pc, #184]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5ce:	4a2d      	ldr	r2, [pc, #180]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5d0:	f043 0302 	orr.w	r3, r3, #2
 800e5d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5d8:	4b2a      	ldr	r3, [pc, #168]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5de:	f003 0302 	and.w	r3, r3, #2
 800e5e2:	613b      	str	r3, [r7, #16]
 800e5e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5e6:	4b27      	ldr	r3, [pc, #156]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5ec:	4a25      	ldr	r2, [pc, #148]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5ee:	f043 0301 	orr.w	r3, r3, #1
 800e5f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5f6:	4b23      	ldr	r3, [pc, #140]	; (800e684 <HAL_ETH_MspInit+0x158>)
 800e5f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	60fb      	str	r3, [r7, #12]
 800e602:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PB11     ------> ETH_TX_EN
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 800e604:	2332      	movs	r3, #50	; 0x32
 800e606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e608:	2302      	movs	r3, #2
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e60c:	2300      	movs	r3, #0
 800e60e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e610:	2303      	movs	r3, #3
 800e612:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e614:	230b      	movs	r3, #11
 800e616:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e61c:	4619      	mov	r1, r3
 800e61e:	481a      	ldr	r0, [pc, #104]	; (800e688 <HAL_ETH_MspInit+0x15c>)
 800e620:	f7f8 fd3e 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11;
 800e624:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e62a:	2302      	movs	r3, #2
 800e62c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e62e:	2300      	movs	r3, #0
 800e630:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e632:	2303      	movs	r3, #3
 800e634:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e636:	230b      	movs	r3, #11
 800e638:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e63a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e63e:	4619      	mov	r1, r3
 800e640:	4812      	ldr	r0, [pc, #72]	; (800e68c <HAL_ETH_MspInit+0x160>)
 800e642:	f7f8 fd2d 	bl	80070a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 800e646:	2386      	movs	r3, #134	; 0x86
 800e648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e64a:	2302      	movs	r3, #2
 800e64c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e652:	2303      	movs	r3, #3
 800e654:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e656:	230b      	movs	r3, #11
 800e658:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e65e:	4619      	mov	r1, r3
 800e660:	480b      	ldr	r0, [pc, #44]	; (800e690 <HAL_ETH_MspInit+0x164>)
 800e662:	f7f8 fd1d 	bl	80070a0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e666:	2200      	movs	r2, #0
 800e668:	2105      	movs	r1, #5
 800e66a:	203d      	movs	r0, #61	; 0x3d
 800e66c:	f7f5 fd54 	bl	8004118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e670:	203d      	movs	r0, #61	; 0x3d
 800e672:	f7f5 fd6b 	bl	800414c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e676:	bf00      	nop
 800e678:	3738      	adds	r7, #56	; 0x38
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	40028000 	.word	0x40028000
 800e684:	58024400 	.word	0x58024400
 800e688:	58020800 	.word	0x58020800
 800e68c:	58020400 	.word	0x58020400
 800e690:	58020000 	.word	0x58020000

0800e694 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800e69c:	4b04      	ldr	r3, [pc, #16]	; (800e6b0 <HAL_ETH_RxCpltCallback+0x1c>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f000 fecb 	bl	800f43c <osSemaphoreRelease>
}
 800e6a6:	bf00      	nop
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	240019d0 	.word	0x240019d0

0800e6b4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b0ac      	sub	sp, #176	; 0xb0
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e6ce:	4b8f      	ldr	r3, [pc, #572]	; (800e90c <low_level_init+0x258>)
 800e6d0:	4a8f      	ldr	r2, [pc, #572]	; (800e910 <low_level_init+0x25c>)
 800e6d2:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800e6d8:	2380      	movs	r3, #128	; 0x80
 800e6da:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800e6dc:	23e1      	movs	r3, #225	; 0xe1
 800e6de:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800e6ec:	4a87      	ldr	r2, [pc, #540]	; (800e90c <low_level_init+0x258>)
 800e6ee:	f107 030c 	add.w	r3, r7, #12
 800e6f2:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e6f4:	4b85      	ldr	r3, [pc, #532]	; (800e90c <low_level_init+0x258>)
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e6fa:	4b84      	ldr	r3, [pc, #528]	; (800e90c <low_level_init+0x258>)
 800e6fc:	4a85      	ldr	r2, [pc, #532]	; (800e914 <low_level_init+0x260>)
 800e6fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e700:	4b82      	ldr	r3, [pc, #520]	; (800e90c <low_level_init+0x258>)
 800e702:	4a85      	ldr	r2, [pc, #532]	; (800e918 <low_level_init+0x264>)
 800e704:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800e706:	4b81      	ldr	r3, [pc, #516]	; (800e90c <low_level_init+0x258>)
 800e708:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e70c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e70e:	487f      	ldr	r0, [pc, #508]	; (800e90c <low_level_init+0x258>)
 800e710:	f7f6 fe1a 	bl	8005348 <HAL_ETH_Init>
 800e714:	4603      	mov	r3, r0
 800e716:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e71a:	2234      	movs	r2, #52	; 0x34
 800e71c:	2100      	movs	r1, #0
 800e71e:	487f      	ldr	r0, [pc, #508]	; (800e91c <low_level_init+0x268>)
 800e720:	f00e fec6 	bl	801d4b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e724:	4b7d      	ldr	r3, [pc, #500]	; (800e91c <low_level_init+0x268>)
 800e726:	2221      	movs	r2, #33	; 0x21
 800e728:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e72a:	4b7c      	ldr	r3, [pc, #496]	; (800e91c <low_level_init+0x268>)
 800e72c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e730:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e732:	4b7a      	ldr	r3, [pc, #488]	; (800e91c <low_level_init+0x268>)
 800e734:	2200      	movs	r2, #0
 800e736:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e738:	4879      	ldr	r0, [pc, #484]	; (800e920 <low_level_init+0x26c>)
 800e73a:	f005 fa9d 	bl	8013c78 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2206      	movs	r2, #6
 800e742:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e746:	4b71      	ldr	r3, [pc, #452]	; (800e90c <low_level_init+0x258>)
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	781a      	ldrb	r2, [r3, #0]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e752:	4b6e      	ldr	r3, [pc, #440]	; (800e90c <low_level_init+0x258>)
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	785a      	ldrb	r2, [r3, #1]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e75e:	4b6b      	ldr	r3, [pc, #428]	; (800e90c <low_level_init+0x258>)
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	789a      	ldrb	r2, [r3, #2]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e76a:	4b68      	ldr	r3, [pc, #416]	; (800e90c <low_level_init+0x258>)
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	78da      	ldrb	r2, [r3, #3]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e776:	4b65      	ldr	r3, [pc, #404]	; (800e90c <low_level_init+0x258>)
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	791a      	ldrb	r2, [r3, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e782:	4b62      	ldr	r3, [pc, #392]	; (800e90c <low_level_init+0x258>)
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	795a      	ldrb	r2, [r3, #5]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e794:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e79c:	f043 030a 	orr.w	r3, r3, #10
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e7ae:	e012      	b.n	800e7d6 <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800e7b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	4413      	add	r3, r2
 800e7ba:	025b      	lsls	r3, r3, #9
 800e7bc:	4a59      	ldr	r2, [pc, #356]	; (800e924 <low_level_init+0x270>)
 800e7be:	441a      	add	r2, r3
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800e7c6:	4851      	ldr	r0, [pc, #324]	; (800e90c <low_level_init+0x258>)
 800e7c8:	f7f6 fe98 	bl	80054fc <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e7cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e7d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d9e8      	bls.n	800e7b0 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	2001      	movs	r0, #1
 800e7e4:	f000 fd4e 	bl	800f284 <osSemaphoreNew>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	4a4f      	ldr	r2, [pc, #316]	; (800e928 <low_level_init+0x274>)
 800e7ec:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800e7ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e7f2:	2224      	movs	r2, #36	; 0x24
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f00e fe5a 	bl	801d4b0 <memset>
  attributes.name = "EthIf";
 800e7fc:	4b4b      	ldr	r3, [pc, #300]	; (800e92c <low_level_init+0x278>)
 800e7fe:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800e800:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800e804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 800e808:	2330      	movs	r3, #48	; 0x30
 800e80a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 800e80e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e812:	461a      	mov	r2, r3
 800e814:	6879      	ldr	r1, [r7, #4]
 800e816:	4846      	ldr	r0, [pc, #280]	; (800e930 <low_level_init+0x27c>)
 800e818:	f000 fb79 	bl	800ef0e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e81c:	4945      	ldr	r1, [pc, #276]	; (800e934 <low_level_init+0x280>)
 800e81e:	4846      	ldr	r0, [pc, #280]	; (800e938 <low_level_init+0x284>)
 800e820:	f7f5 f9f0 	bl	8003c04 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e824:	4844      	ldr	r0, [pc, #272]	; (800e938 <low_level_init+0x284>)
 800e826:	f7f5 fa1f 	bl	8003c68 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e82a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d165      	bne.n	800e8fe <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e832:	4841      	ldr	r0, [pc, #260]	; (800e938 <low_level_init+0x284>)
 800e834:	f7f5 fac0 	bl	8003db8 <LAN8742_GetLinkState>
 800e838:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800e83c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e840:	2b01      	cmp	r3, #1
 800e842:	dc06      	bgt.n	800e852 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f005 fdf1 	bl	801442c <netif_set_link_down>
      netif_set_down(netif);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f005 fd88 	bl	8014360 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e850:	e057      	b.n	800e902 <low_level_init+0x24e>
 800e852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e856:	3b02      	subs	r3, #2
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d82b      	bhi.n	800e8b4 <low_level_init+0x200>
 800e85c:	a201      	add	r2, pc, #4	; (adr r2, 800e864 <low_level_init+0x1b0>)
 800e85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e862:	bf00      	nop
 800e864:	0800e875 	.word	0x0800e875
 800e868:	0800e887 	.word	0x0800e887
 800e86c:	0800e897 	.word	0x0800e897
 800e870:	0800e8a7 	.word	0x0800e8a7
        duplex = ETH_FULLDUPLEX_MODE;
 800e874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800e87c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800e884:	e01f      	b.n	800e8c6 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800e886:	2300      	movs	r3, #0
 800e888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800e88c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800e894:	e017      	b.n	800e8c6 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800e896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e89a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800e8a4:	e00f      	b.n	800e8c6 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800e8b2:	e008      	b.n	800e8c6 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800e8b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800e8bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800e8c4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e8c6:	f107 0314 	add.w	r3, r7, #20
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	480f      	ldr	r0, [pc, #60]	; (800e90c <low_level_init+0x258>)
 800e8ce:	f7f7 fbe7 	bl	80060a0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800e8d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 800e8d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e8dc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e8de:	f107 0314 	add.w	r3, r7, #20
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4809      	ldr	r0, [pc, #36]	; (800e90c <low_level_init+0x258>)
 800e8e6:	f7f7 fdaf 	bl	8006448 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800e8ea:	4808      	ldr	r0, [pc, #32]	; (800e90c <low_level_init+0x258>)
 800e8ec:	f7f6 fe47 	bl	800557e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f005 fcc9 	bl	8014288 <netif_set_up>
    netif_set_link_up(netif);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f005 fd64 	bl	80143c4 <netif_set_link_up>
}
 800e8fc:	e001      	b.n	800e902 <low_level_init+0x24e>
    Error_Handler();
 800e8fe:	f7f2 fdab 	bl	8001458 <Error_Handler>
}
 800e902:	bf00      	nop
 800e904:	37b0      	adds	r7, #176	; 0xb0
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	2401b6a0 	.word	0x2401b6a0
 800e910:	40028000 	.word	0x40028000
 800e914:	24000138 	.word	0x24000138
 800e918:	240000d8 	.word	0x240000d8
 800e91c:	2401b728 	.word	0x2401b728
 800e920:	08021504 	.word	0x08021504
 800e924:	24000198 	.word	0x24000198
 800e928:	240019d0 	.word	0x240019d0
 800e92c:	0801e98c 	.word	0x0801e98c
 800e930:	0800eb45 	.word	0x0800eb45
 800e934:	24000050 	.word	0x24000050
 800e938:	2401b680 	.word	0x2401b680

0800e93c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b092      	sub	sp, #72	; 0x48
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800e946:	2300      	movs	r3, #0
 800e948:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e950:	f107 030c 	add.w	r3, r7, #12
 800e954:	2230      	movs	r2, #48	; 0x30
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f00e fda9 	bl	801d4b0 <memset>

  for(q = p; q != NULL; q = q->next)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	643b      	str	r3, [r7, #64]	; 0x40
 800e962:	e049      	b.n	800e9f8 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e966:	2b03      	cmp	r3, #3
 800e968:	d902      	bls.n	800e970 <low_level_output+0x34>
      return ERR_IF;
 800e96a:	f06f 030b 	mvn.w	r3, #11
 800e96e:	e056      	b.n	800ea1e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800e970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e972:	6859      	ldr	r1, [r3, #4]
 800e974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e976:	4613      	mov	r3, r2
 800e978:	005b      	lsls	r3, r3, #1
 800e97a:	4413      	add	r3, r2
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e982:	4413      	add	r3, r2
 800e984:	3b3c      	subs	r3, #60	; 0x3c
 800e986:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e98a:	895b      	ldrh	r3, [r3, #10]
 800e98c:	4619      	mov	r1, r3
 800e98e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e990:	4613      	mov	r3, r2
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	4413      	add	r3, r2
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e99c:	4413      	add	r3, r2
 800e99e:	3b38      	subs	r3, #56	; 0x38
 800e9a0:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d012      	beq.n	800e9ce <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9aa:	1e5a      	subs	r2, r3, #1
 800e9ac:	f107 000c 	add.w	r0, r7, #12
 800e9b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	440b      	add	r3, r1
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	18c1      	adds	r1, r0, r3
 800e9bc:	4613      	mov	r3, r2
 800e9be:	005b      	lsls	r3, r3, #1
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e9c8:	4413      	add	r3, r2
 800e9ca:	3b34      	subs	r3, #52	; 0x34
 800e9cc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10a      	bne.n	800e9ec <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800e9d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9d8:	4613      	mov	r3, r2
 800e9da:	005b      	lsls	r3, r3, #1
 800e9dc:	4413      	add	r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e9e4:	4413      	add	r3, r2
 800e9e6:	3b34      	subs	r3, #52	; 0x34
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1b2      	bne.n	800e964 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	891b      	ldrh	r3, [r3, #8]
 800ea02:	461a      	mov	r2, r3
 800ea04:	4b08      	ldr	r3, [pc, #32]	; (800ea28 <low_level_output+0xec>)
 800ea06:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ea08:	4a07      	ldr	r2, [pc, #28]	; (800ea28 <low_level_output+0xec>)
 800ea0a:	f107 030c 	add.w	r3, r7, #12
 800ea0e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800ea10:	2214      	movs	r2, #20
 800ea12:	4905      	ldr	r1, [pc, #20]	; (800ea28 <low_level_output+0xec>)
 800ea14:	4805      	ldr	r0, [pc, #20]	; (800ea2c <low_level_output+0xf0>)
 800ea16:	f7f6 feb1 	bl	800577c <HAL_ETH_Transmit>

  return errval;
 800ea1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3748      	adds	r7, #72	; 0x48
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	2401b728 	.word	0x2401b728
 800ea2c:	2401b6a0 	.word	0x2401b6a0

0800ea30 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b098      	sub	sp, #96	; 0x60
 800ea34:	af02      	add	r7, sp, #8
 800ea36:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	60bb      	str	r3, [r7, #8]
 800ea40:	2300      	movs	r3, #0
 800ea42:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ea44:	f107 030c 	add.w	r3, r7, #12
 800ea48:	2230      	movs	r2, #48	; 0x30
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f00e fd2f 	bl	801d4b0 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800ea52:	2300      	movs	r3, #0
 800ea54:	653b      	str	r3, [r7, #80]	; 0x50
 800ea56:	e015      	b.n	800ea84 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800ea58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea5a:	1c5a      	adds	r2, r3, #1
 800ea5c:	f107 010c 	add.w	r1, r7, #12
 800ea60:	4613      	mov	r3, r2
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	4413      	add	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	4419      	add	r1, r3
 800ea6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	005b      	lsls	r3, r3, #1
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ea78:	4413      	add	r3, r2
 800ea7a:	3b44      	subs	r3, #68	; 0x44
 800ea7c:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800ea7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea80:	3301      	adds	r3, #1
 800ea82:	653b      	str	r3, [r7, #80]	; 0x50
 800ea84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d9e6      	bls.n	800ea58 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800ea8a:	f107 030c 	add.w	r3, r7, #12
 800ea8e:	4619      	mov	r1, r3
 800ea90:	4828      	ldr	r0, [pc, #160]	; (800eb34 <low_level_input+0x104>)
 800ea92:	f7f6 ffec 	bl	8005a6e <HAL_ETH_GetRxDataBuffer>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d145      	bne.n	800eb28 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800ea9c:	f107 0308 	add.w	r3, r7, #8
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	4824      	ldr	r0, [pc, #144]	; (800eb34 <low_level_input+0x104>)
 800eaa4:	f7f7 f881 	bl	8005baa <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800eaa8:	4822      	ldr	r0, [pc, #136]	; (800eb34 <low_level_input+0x104>)
 800eaaa:	f7f7 f8b1 	bl	8005c10 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eab4:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800eab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dd1d      	ble.n	800eaf8 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800eabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eabe:	f003 021f 	and.w	r2, r3, #31
 800eac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eac4:	4413      	add	r3, r2
 800eac6:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800eac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800eacc:	f3bf 8f4f 	dsb	sy
}
 800ead0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ead2:	4a19      	ldr	r2, [pc, #100]	; (800eb38 <low_level_input+0x108>)
 800ead4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800eada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eadc:	3320      	adds	r3, #32
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800eae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eae2:	3b20      	subs	r3, #32
 800eae4:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800eae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	dcf2      	bgt.n	800ead2 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800eaec:	f3bf 8f4f 	dsb	sy
}
 800eaf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800eaf2:	f3bf 8f6f 	isb	sy
}
 800eaf6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800eaf8:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800eafa:	4810      	ldr	r0, [pc, #64]	; (800eb3c <low_level_input+0x10c>)
 800eafc:	f005 f938 	bl	8013d70 <memp_malloc_pool>
 800eb00:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800eb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00f      	beq.n	800eb28 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800eb08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb0a:	4a0d      	ldr	r2, [pc, #52]	; (800eb40 <low_level_input+0x110>)
 800eb0c:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	b299      	uxth	r1, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	b292      	uxth	r2, r2
 800eb18:	9201      	str	r2, [sp, #4]
 800eb1a:	9300      	str	r3, [sp, #0]
 800eb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb1e:	2241      	movs	r2, #65	; 0x41
 800eb20:	2000      	movs	r0, #0
 800eb22:	f005 feab 	bl	801487c <pbuf_alloced_custom>
 800eb26:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800eb28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3758      	adds	r7, #88	; 0x58
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	2401b6a0 	.word	0x2401b6a0
 800eb38:	e000ed00 	.word	0xe000ed00
 800eb3c:	08021504 	.word	0x08021504
 800eb40:	0800ebf1 	.word	0x0800ebf1

0800eb44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800eb50:	4b0f      	ldr	r3, [pc, #60]	; (800eb90 <ethernetif_input+0x4c>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f04f 31ff 	mov.w	r1, #4294967295
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f000 fc1d 	bl	800f398 <osSemaphoreAcquire>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1f5      	bne.n	800eb50 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f7ff ff63 	bl	800ea30 <low_level_input>
 800eb6a:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00a      	beq.n	800eb88 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	68f9      	ldr	r1, [r7, #12]
 800eb78:	68b8      	ldr	r0, [r7, #8]
 800eb7a:	4798      	blx	r3
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800eb82:	68b8      	ldr	r0, [r7, #8]
 800eb84:	f006 f834 	bl	8014bf0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d1ea      	bne.n	800eb64 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800eb8e:	e7df      	b.n	800eb50 <ethernetif_input+0xc>
 800eb90:	240019d0 	.word	0x240019d0

0800eb94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d106      	bne.n	800ebb0 <ethernetif_init+0x1c>
 800eba2:	4b0e      	ldr	r3, [pc, #56]	; (800ebdc <ethernetif_init+0x48>)
 800eba4:	f44f 7211 	mov.w	r2, #580	; 0x244
 800eba8:	490d      	ldr	r1, [pc, #52]	; (800ebe0 <ethernetif_init+0x4c>)
 800ebaa:	480e      	ldr	r0, [pc, #56]	; (800ebe4 <ethernetif_init+0x50>)
 800ebac:	f00e fd32 	bl	801d614 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2273      	movs	r2, #115	; 0x73
 800ebb4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2274      	movs	r2, #116	; 0x74
 800ebbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a09      	ldr	r2, [pc, #36]	; (800ebe8 <ethernetif_init+0x54>)
 800ebc4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a08      	ldr	r2, [pc, #32]	; (800ebec <ethernetif_init+0x58>)
 800ebca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7ff fd71 	bl	800e6b4 <low_level_init>

  return ERR_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	0801e994 	.word	0x0801e994
 800ebe0:	0801e9b0 	.word	0x0801e9b0
 800ebe4:	0801e9c0 	.word	0x0801e9c0
 800ebe8:	0801b2e1 	.word	0x0801b2e1
 800ebec:	0800e93d 	.word	0x0800e93d

0800ebf0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ebfc:	68f9      	ldr	r1, [r7, #12]
 800ebfe:	4803      	ldr	r0, [pc, #12]	; (800ec0c <pbuf_free_custom+0x1c>)
 800ec00:	f005 f92a 	bl	8013e58 <memp_free_pool>
}
 800ec04:	bf00      	nop
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	08021504 	.word	0x08021504

0800ec10 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ec14:	f7f5 f9a8 	bl	8003f68 <HAL_GetTick>
 800ec18:	4603      	mov	r3, r0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ec24:	4802      	ldr	r0, [pc, #8]	; (800ec30 <ETH_PHY_IO_Init+0x10>)
 800ec26:	f7f7 fc29 	bl	800647c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	2401b6a0 	.word	0x2401b6a0

0800ec34 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ec34:	b480      	push	{r7}
 800ec36:	af00      	add	r7, sp, #0
  return 0;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	68f9      	ldr	r1, [r7, #12]
 800ec56:	4807      	ldr	r0, [pc, #28]	; (800ec74 <ETH_PHY_IO_ReadReg+0x30>)
 800ec58:	f7f7 f97a 	bl	8005f50 <HAL_ETH_ReadPHYRegister>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ec62:	f04f 33ff 	mov.w	r3, #4294967295
 800ec66:	e000      	b.n	800ec6a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	2401b6a0 	.word	0x2401b6a0

0800ec78 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	68f9      	ldr	r1, [r7, #12]
 800ec8a:	4807      	ldr	r0, [pc, #28]	; (800eca8 <ETH_PHY_IO_WriteReg+0x30>)
 800ec8c:	f7f7 f9b4 	bl	8005ff8 <HAL_ETH_WritePHYRegister>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ec96:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9a:	e000      	b.n	800ec9e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	2401b6a0 	.word	0x2401b6a0

0800ecac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ecb0:	f7f5 f95a 	bl	8003f68 <HAL_GetTick>
 800ecb4:	4603      	mov	r3, r0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b0a0      	sub	sp, #128	; 0x80
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ecc8:	2300      	movs	r3, #0
 800ecca:	67bb      	str	r3, [r7, #120]	; 0x78
 800eccc:	2300      	movs	r3, #0
 800ecce:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ecd4:	483a      	ldr	r0, [pc, #232]	; (800edc0 <ethernet_link_thread+0x104>)
 800ecd6:	f7f5 f86f 	bl	8003db8 <LAN8742_GetLinkState>
 800ecda:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ecdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ece2:	089b      	lsrs	r3, r3, #2
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00c      	beq.n	800ed08 <ethernet_link_thread+0x4c>
 800ecee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	dc09      	bgt.n	800ed08 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800ecf4:	4833      	ldr	r0, [pc, #204]	; (800edc4 <ethernet_link_thread+0x108>)
 800ecf6:	f7f6 fcc7 	bl	8005688 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ecfa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ecfc:	f005 fb30 	bl	8014360 <netif_set_down>
    netif_set_link_down(netif);
 800ed00:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ed02:	f005 fb93 	bl	801442c <netif_set_link_down>
 800ed06:	e056      	b.n	800edb6 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ed08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed0e:	f003 0304 	and.w	r3, r3, #4
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d14f      	bne.n	800edb6 <ethernet_link_thread+0xfa>
 800ed16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	dd4c      	ble.n	800edb6 <ethernet_link_thread+0xfa>
 800ed1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed1e:	3b02      	subs	r3, #2
 800ed20:	2b03      	cmp	r3, #3
 800ed22:	d82b      	bhi.n	800ed7c <ethernet_link_thread+0xc0>
 800ed24:	a201      	add	r2, pc, #4	; (adr r2, 800ed2c <ethernet_link_thread+0x70>)
 800ed26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed2a:	bf00      	nop
 800ed2c:	0800ed3d 	.word	0x0800ed3d
 800ed30:	0800ed4f 	.word	0x0800ed4f
 800ed34:	0800ed5f 	.word	0x0800ed5f
 800ed38:	0800ed6f 	.word	0x0800ed6f
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ed3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed40:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ed42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed46:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ed4c:	e017      	b.n	800ed7e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ed52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed56:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ed5c:	e00f      	b.n	800ed7e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ed5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed62:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ed64:	2300      	movs	r3, #0
 800ed66:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ed6c:	e007      	b.n	800ed7e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ed72:	2300      	movs	r3, #0
 800ed74:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ed76:	2301      	movs	r3, #1
 800ed78:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ed7a:	e000      	b.n	800ed7e <ethernet_link_thread+0xc2>
    default:
      break;
 800ed7c:	bf00      	nop
    }

    if(linkchanged)
 800ed7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d018      	beq.n	800edb6 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ed84:	f107 0308 	add.w	r3, r7, #8
 800ed88:	4619      	mov	r1, r3
 800ed8a:	480e      	ldr	r0, [pc, #56]	; (800edc4 <ethernet_link_thread+0x108>)
 800ed8c:	f7f7 f988 	bl	80060a0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ed90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed92:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800ed94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed96:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ed98:	f107 0308 	add.w	r3, r7, #8
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4809      	ldr	r0, [pc, #36]	; (800edc4 <ethernet_link_thread+0x108>)
 800eda0:	f7f7 fb52 	bl	8006448 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800eda4:	4807      	ldr	r0, [pc, #28]	; (800edc4 <ethernet_link_thread+0x108>)
 800eda6:	f7f6 fbea 	bl	800557e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800edaa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800edac:	f005 fa6c 	bl	8014288 <netif_set_up>
      netif_set_link_up(netif);
 800edb0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800edb2:	f005 fb07 	bl	80143c4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800edb6:	2064      	movs	r0, #100	; 0x64
 800edb8:	f000 f93b 	bl	800f032 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800edbc:	e78a      	b.n	800ecd4 <ethernet_link_thread+0x18>
 800edbe:	bf00      	nop
 800edc0:	2401b680 	.word	0x2401b680
 800edc4:	2401b6a0 	.word	0x2401b6a0

0800edc8 <__NVIC_SetPriority>:
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	4603      	mov	r3, r0
 800edd0:	6039      	str	r1, [r7, #0]
 800edd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800edd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	db0a      	blt.n	800edf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	490c      	ldr	r1, [pc, #48]	; (800ee14 <__NVIC_SetPriority+0x4c>)
 800ede2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ede6:	0112      	lsls	r2, r2, #4
 800ede8:	b2d2      	uxtb	r2, r2
 800edea:	440b      	add	r3, r1
 800edec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800edf0:	e00a      	b.n	800ee08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	4908      	ldr	r1, [pc, #32]	; (800ee18 <__NVIC_SetPriority+0x50>)
 800edf8:	88fb      	ldrh	r3, [r7, #6]
 800edfa:	f003 030f 	and.w	r3, r3, #15
 800edfe:	3b04      	subs	r3, #4
 800ee00:	0112      	lsls	r2, r2, #4
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	440b      	add	r3, r1
 800ee06:	761a      	strb	r2, [r3, #24]
}
 800ee08:	bf00      	nop
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	e000e100 	.word	0xe000e100
 800ee18:	e000ed00 	.word	0xe000ed00

0800ee1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ee20:	4b05      	ldr	r3, [pc, #20]	; (800ee38 <SysTick_Handler+0x1c>)
 800ee22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ee24:	f002 fe5e 	bl	8011ae4 <xTaskGetSchedulerState>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d001      	beq.n	800ee32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ee2e:	f003 fe03 	bl	8012a38 <xPortSysTickHandler>
  }
}
 800ee32:	bf00      	nop
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	e000e010 	.word	0xe000e010

0800ee3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ee40:	2100      	movs	r1, #0
 800ee42:	f06f 0004 	mvn.w	r0, #4
 800ee46:	f7ff ffbf 	bl	800edc8 <__NVIC_SetPriority>
#endif
}
 800ee4a:	bf00      	nop
 800ee4c:	bd80      	pop	{r7, pc}
	...

0800ee50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee56:	f3ef 8305 	mrs	r3, IPSR
 800ee5a:	603b      	str	r3, [r7, #0]
  return(result);
 800ee5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d003      	beq.n	800ee6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ee62:	f06f 0305 	mvn.w	r3, #5
 800ee66:	607b      	str	r3, [r7, #4]
 800ee68:	e00c      	b.n	800ee84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ee6a:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <osKernelInitialize+0x44>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d105      	bne.n	800ee7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ee72:	4b08      	ldr	r3, [pc, #32]	; (800ee94 <osKernelInitialize+0x44>)
 800ee74:	2201      	movs	r2, #1
 800ee76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	607b      	str	r3, [r7, #4]
 800ee7c:	e002      	b.n	800ee84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ee7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ee84:	687b      	ldr	r3, [r7, #4]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	240019d8 	.word	0x240019d8

0800ee98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee9e:	f3ef 8305 	mrs	r3, IPSR
 800eea2:	603b      	str	r3, [r7, #0]
  return(result);
 800eea4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d003      	beq.n	800eeb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800eeaa:	f06f 0305 	mvn.w	r3, #5
 800eeae:	607b      	str	r3, [r7, #4]
 800eeb0:	e010      	b.n	800eed4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800eeb2:	4b0b      	ldr	r3, [pc, #44]	; (800eee0 <osKernelStart+0x48>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d109      	bne.n	800eece <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800eeba:	f7ff ffbf 	bl	800ee3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800eebe:	4b08      	ldr	r3, [pc, #32]	; (800eee0 <osKernelStart+0x48>)
 800eec0:	2202      	movs	r2, #2
 800eec2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800eec4:	f002 f82e 	bl	8010f24 <vTaskStartScheduler>
      stat = osOK;
 800eec8:	2300      	movs	r3, #0
 800eeca:	607b      	str	r3, [r7, #4]
 800eecc:	e002      	b.n	800eed4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eece:	f04f 33ff 	mov.w	r3, #4294967295
 800eed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eed4:	687b      	ldr	r3, [r7, #4]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3708      	adds	r7, #8
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	240019d8 	.word	0x240019d8

0800eee4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eeea:	f3ef 8305 	mrs	r3, IPSR
 800eeee:	603b      	str	r3, [r7, #0]
  return(result);
 800eef0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800eef6:	f002 f941 	bl	801117c <xTaskGetTickCountFromISR>
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	e002      	b.n	800ef04 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800eefe:	f002 f92d 	bl	801115c <xTaskGetTickCount>
 800ef02:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ef04:	687b      	ldr	r3, [r7, #4]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3708      	adds	r7, #8
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b08e      	sub	sp, #56	; 0x38
 800ef12:	af04      	add	r7, sp, #16
 800ef14:	60f8      	str	r0, [r7, #12]
 800ef16:	60b9      	str	r1, [r7, #8]
 800ef18:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef1e:	f3ef 8305 	mrs	r3, IPSR
 800ef22:	617b      	str	r3, [r7, #20]
  return(result);
 800ef24:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d17e      	bne.n	800f028 <osThreadNew+0x11a>
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d07b      	beq.n	800f028 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ef30:	2380      	movs	r3, #128	; 0x80
 800ef32:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ef34:	2318      	movs	r3, #24
 800ef36:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ef3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d045      	beq.n	800efd4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <osThreadNew+0x48>
        name = attr->name;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	699b      	ldr	r3, [r3, #24]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d002      	beq.n	800ef64 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d008      	beq.n	800ef7c <osThreadNew+0x6e>
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	2b38      	cmp	r3, #56	; 0x38
 800ef6e:	d805      	bhi.n	800ef7c <osThreadNew+0x6e>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <osThreadNew+0x72>
        return (NULL);
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	e054      	b.n	800f02a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	695b      	ldr	r3, [r3, #20]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d003      	beq.n	800ef90 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	089b      	lsrs	r3, r3, #2
 800ef8e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00e      	beq.n	800efb6 <osThreadNew+0xa8>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	2bbb      	cmp	r3, #187	; 0xbb
 800ef9e:	d90a      	bls.n	800efb6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d006      	beq.n	800efb6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	695b      	ldr	r3, [r3, #20]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d002      	beq.n	800efb6 <osThreadNew+0xa8>
        mem = 1;
 800efb0:	2301      	movs	r3, #1
 800efb2:	61bb      	str	r3, [r7, #24]
 800efb4:	e010      	b.n	800efd8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	689b      	ldr	r3, [r3, #8]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10c      	bne.n	800efd8 <osThreadNew+0xca>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d108      	bne.n	800efd8 <osThreadNew+0xca>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	691b      	ldr	r3, [r3, #16]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d104      	bne.n	800efd8 <osThreadNew+0xca>
          mem = 0;
 800efce:	2300      	movs	r3, #0
 800efd0:	61bb      	str	r3, [r7, #24]
 800efd2:	e001      	b.n	800efd8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800efd4:	2300      	movs	r3, #0
 800efd6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d110      	bne.n	800f000 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800efe6:	9202      	str	r2, [sp, #8]
 800efe8:	9301      	str	r3, [sp, #4]
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	6a3a      	ldr	r2, [r7, #32]
 800eff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f001 fd43 	bl	8010a80 <xTaskCreateStatic>
 800effa:	4603      	mov	r3, r0
 800effc:	613b      	str	r3, [r7, #16]
 800effe:	e013      	b.n	800f028 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d110      	bne.n	800f028 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f006:	6a3b      	ldr	r3, [r7, #32]
 800f008:	b29a      	uxth	r2, r3
 800f00a:	f107 0310 	add.w	r3, r7, #16
 800f00e:	9301      	str	r3, [sp, #4]
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f001 fd8e 	bl	8010b3a <xTaskCreate>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b01      	cmp	r3, #1
 800f022:	d001      	beq.n	800f028 <osThreadNew+0x11a>
            hTask = NULL;
 800f024:	2300      	movs	r3, #0
 800f026:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f028:	693b      	ldr	r3, [r7, #16]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3728      	adds	r7, #40	; 0x28
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f032:	b580      	push	{r7, lr}
 800f034:	b084      	sub	sp, #16
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f03a:	f3ef 8305 	mrs	r3, IPSR
 800f03e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f040:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f042:	2b00      	cmp	r3, #0
 800f044:	d003      	beq.n	800f04e <osDelay+0x1c>
    stat = osErrorISR;
 800f046:	f06f 0305 	mvn.w	r3, #5
 800f04a:	60fb      	str	r3, [r7, #12]
 800f04c:	e007      	b.n	800f05e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f04e:	2300      	movs	r3, #0
 800f050:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d002      	beq.n	800f05e <osDelay+0x2c>
      vTaskDelay(ticks);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f001 fec9 	bl	8010df0 <vTaskDelay>
    }
  }

  return (stat);
 800f05e:	68fb      	ldr	r3, [r7, #12]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	b088      	sub	sp, #32
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f070:	2300      	movs	r3, #0
 800f072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f074:	f3ef 8305 	mrs	r3, IPSR
 800f078:	60bb      	str	r3, [r7, #8]
  return(result);
 800f07a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d174      	bne.n	800f16a <osMutexNew+0x102>
    if (attr != NULL) {
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <osMutexNew+0x26>
      type = attr->attr_bits;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	61bb      	str	r3, [r7, #24]
 800f08c:	e001      	b.n	800f092 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f08e:	2300      	movs	r3, #0
 800f090:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	f003 0301 	and.w	r3, r3, #1
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d002      	beq.n	800f0a2 <osMutexNew+0x3a>
      rmtx = 1U;
 800f09c:	2301      	movs	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
 800f0a0:	e001      	b.n	800f0a6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	f003 0308 	and.w	r3, r3, #8
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d15c      	bne.n	800f16a <osMutexNew+0x102>
      mem = -1;
 800f0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d015      	beq.n	800f0e8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d006      	beq.n	800f0d2 <osMutexNew+0x6a>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	2b4f      	cmp	r3, #79	; 0x4f
 800f0ca:	d902      	bls.n	800f0d2 <osMutexNew+0x6a>
          mem = 1;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	613b      	str	r3, [r7, #16]
 800f0d0:	e00c      	b.n	800f0ec <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d108      	bne.n	800f0ec <osMutexNew+0x84>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d104      	bne.n	800f0ec <osMutexNew+0x84>
            mem = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	613b      	str	r3, [r7, #16]
 800f0e6:	e001      	b.n	800f0ec <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d112      	bne.n	800f118 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d007      	beq.n	800f108 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	2004      	movs	r0, #4
 800f100:	f000 fd69 	bl	800fbd6 <xQueueCreateMutexStatic>
 800f104:	61f8      	str	r0, [r7, #28]
 800f106:	e016      	b.n	800f136 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	4619      	mov	r1, r3
 800f10e:	2001      	movs	r0, #1
 800f110:	f000 fd61 	bl	800fbd6 <xQueueCreateMutexStatic>
 800f114:	61f8      	str	r0, [r7, #28]
 800f116:	e00e      	b.n	800f136 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10b      	bne.n	800f136 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d004      	beq.n	800f12e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f124:	2004      	movs	r0, #4
 800f126:	f000 fd3e 	bl	800fba6 <xQueueCreateMutex>
 800f12a:	61f8      	str	r0, [r7, #28]
 800f12c:	e003      	b.n	800f136 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f12e:	2001      	movs	r0, #1
 800f130:	f000 fd39 	bl	800fba6 <xQueueCreateMutex>
 800f134:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00c      	beq.n	800f156 <osMutexNew+0xee>
        if (attr != NULL) {
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d003      	beq.n	800f14a <osMutexNew+0xe2>
          name = attr->name;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	e001      	b.n	800f14e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f14a:	2300      	movs	r3, #0
 800f14c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f14e:	68f9      	ldr	r1, [r7, #12]
 800f150:	69f8      	ldr	r0, [r7, #28]
 800f152:	f001 fc0d 	bl	8010970 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d006      	beq.n	800f16a <osMutexNew+0x102>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d003      	beq.n	800f16a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	f043 0301 	orr.w	r3, r3, #1
 800f168:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f16a:	69fb      	ldr	r3, [r7, #28]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3720      	adds	r7, #32
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f023 0301 	bic.w	r3, r3, #1
 800f184:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f003 0301 	and.w	r3, r3, #1
 800f18c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f18e:	2300      	movs	r3, #0
 800f190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f192:	f3ef 8305 	mrs	r3, IPSR
 800f196:	60bb      	str	r3, [r7, #8]
  return(result);
 800f198:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d003      	beq.n	800f1a6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f19e:	f06f 0305 	mvn.w	r3, #5
 800f1a2:	617b      	str	r3, [r7, #20]
 800f1a4:	e02c      	b.n	800f200 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d103      	bne.n	800f1b4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f1ac:	f06f 0303 	mvn.w	r3, #3
 800f1b0:	617b      	str	r3, [r7, #20]
 800f1b2:	e025      	b.n	800f200 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d011      	beq.n	800f1de <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6938      	ldr	r0, [r7, #16]
 800f1be:	f000 fd59 	bl	800fc74 <xQueueTakeMutexRecursive>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d01b      	beq.n	800f200 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f1ce:	f06f 0301 	mvn.w	r3, #1
 800f1d2:	617b      	str	r3, [r7, #20]
 800f1d4:	e014      	b.n	800f200 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f1d6:	f06f 0302 	mvn.w	r3, #2
 800f1da:	617b      	str	r3, [r7, #20]
 800f1dc:	e010      	b.n	800f200 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6938      	ldr	r0, [r7, #16]
 800f1e2:	f001 f8ed 	bl	80103c0 <xQueueSemaphoreTake>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d009      	beq.n	800f200 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d003      	beq.n	800f1fa <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f1f2:	f06f 0301 	mvn.w	r3, #1
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	e002      	b.n	800f200 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f1fa:	f06f 0302 	mvn.w	r3, #2
 800f1fe:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f200:	697b      	ldr	r3, [r7, #20]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b086      	sub	sp, #24
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f023 0301 	bic.w	r3, r3, #1
 800f218:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f222:	2300      	movs	r3, #0
 800f224:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f226:	f3ef 8305 	mrs	r3, IPSR
 800f22a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f22c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d003      	beq.n	800f23a <osMutexRelease+0x30>
    stat = osErrorISR;
 800f232:	f06f 0305 	mvn.w	r3, #5
 800f236:	617b      	str	r3, [r7, #20]
 800f238:	e01f      	b.n	800f27a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d103      	bne.n	800f248 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f240:	f06f 0303 	mvn.w	r3, #3
 800f244:	617b      	str	r3, [r7, #20]
 800f246:	e018      	b.n	800f27a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d009      	beq.n	800f262 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f24e:	6938      	ldr	r0, [r7, #16]
 800f250:	f000 fcdc 	bl	800fc0c <xQueueGiveMutexRecursive>
 800f254:	4603      	mov	r3, r0
 800f256:	2b01      	cmp	r3, #1
 800f258:	d00f      	beq.n	800f27a <osMutexRelease+0x70>
        stat = osErrorResource;
 800f25a:	f06f 0302 	mvn.w	r3, #2
 800f25e:	617b      	str	r3, [r7, #20]
 800f260:	e00b      	b.n	800f27a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f262:	2300      	movs	r3, #0
 800f264:	2200      	movs	r2, #0
 800f266:	2100      	movs	r1, #0
 800f268:	6938      	ldr	r0, [r7, #16]
 800f26a:	f000 fda3 	bl	800fdb4 <xQueueGenericSend>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b01      	cmp	r3, #1
 800f272:	d002      	beq.n	800f27a <osMutexRelease+0x70>
        stat = osErrorResource;
 800f274:	f06f 0302 	mvn.w	r3, #2
 800f278:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f27a:	697b      	ldr	r3, [r7, #20]
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3718      	adds	r7, #24
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f284:	b580      	push	{r7, lr}
 800f286:	b08a      	sub	sp, #40	; 0x28
 800f288:	af02      	add	r7, sp, #8
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f290:	2300      	movs	r3, #0
 800f292:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f294:	f3ef 8305 	mrs	r3, IPSR
 800f298:	613b      	str	r3, [r7, #16]
  return(result);
 800f29a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d175      	bne.n	800f38c <osSemaphoreNew+0x108>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d072      	beq.n	800f38c <osSemaphoreNew+0x108>
 800f2a6:	68ba      	ldr	r2, [r7, #8]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d86e      	bhi.n	800f38c <osSemaphoreNew+0x108>
    mem = -1;
 800f2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d015      	beq.n	800f2e6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d006      	beq.n	800f2d0 <osSemaphoreNew+0x4c>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	2b4f      	cmp	r3, #79	; 0x4f
 800f2c8:	d902      	bls.n	800f2d0 <osSemaphoreNew+0x4c>
        mem = 1;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	61bb      	str	r3, [r7, #24]
 800f2ce:	e00c      	b.n	800f2ea <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d108      	bne.n	800f2ea <osSemaphoreNew+0x66>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d104      	bne.n	800f2ea <osSemaphoreNew+0x66>
          mem = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	61bb      	str	r3, [r7, #24]
 800f2e4:	e001      	b.n	800f2ea <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f0:	d04c      	beq.n	800f38c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d128      	bne.n	800f34a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d10a      	bne.n	800f314 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	2203      	movs	r2, #3
 800f304:	9200      	str	r2, [sp, #0]
 800f306:	2200      	movs	r2, #0
 800f308:	2100      	movs	r1, #0
 800f30a:	2001      	movs	r0, #1
 800f30c:	f000 fb5c 	bl	800f9c8 <xQueueGenericCreateStatic>
 800f310:	61f8      	str	r0, [r7, #28]
 800f312:	e005      	b.n	800f320 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f314:	2203      	movs	r2, #3
 800f316:	2100      	movs	r1, #0
 800f318:	2001      	movs	r0, #1
 800f31a:	f000 fbcd 	bl	800fab8 <xQueueGenericCreate>
 800f31e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d022      	beq.n	800f36c <osSemaphoreNew+0xe8>
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d01f      	beq.n	800f36c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f32c:	2300      	movs	r3, #0
 800f32e:	2200      	movs	r2, #0
 800f330:	2100      	movs	r1, #0
 800f332:	69f8      	ldr	r0, [r7, #28]
 800f334:	f000 fd3e 	bl	800fdb4 <xQueueGenericSend>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d016      	beq.n	800f36c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f33e:	69f8      	ldr	r0, [r7, #28]
 800f340:	f001 f9ca 	bl	80106d8 <vQueueDelete>
            hSemaphore = NULL;
 800f344:	2300      	movs	r3, #0
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	e010      	b.n	800f36c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d108      	bne.n	800f362 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	461a      	mov	r2, r3
 800f356:	68b9      	ldr	r1, [r7, #8]
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f000 fcc1 	bl	800fce0 <xQueueCreateCountingSemaphoreStatic>
 800f35e:	61f8      	str	r0, [r7, #28]
 800f360:	e004      	b.n	800f36c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f362:	68b9      	ldr	r1, [r7, #8]
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f000 fcf2 	bl	800fd4e <xQueueCreateCountingSemaphore>
 800f36a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00c      	beq.n	800f38c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d003      	beq.n	800f380 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	617b      	str	r3, [r7, #20]
 800f37e:	e001      	b.n	800f384 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f380:	2300      	movs	r3, #0
 800f382:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f384:	6979      	ldr	r1, [r7, #20]
 800f386:	69f8      	ldr	r0, [r7, #28]
 800f388:	f001 faf2 	bl	8010970 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f38c:	69fb      	ldr	r3, [r7, #28]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3720      	adds	r7, #32
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
	...

0800f398 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d103      	bne.n	800f3b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f3b0:	f06f 0303 	mvn.w	r3, #3
 800f3b4:	617b      	str	r3, [r7, #20]
 800f3b6:	e039      	b.n	800f42c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3b8:	f3ef 8305 	mrs	r3, IPSR
 800f3bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800f3be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d022      	beq.n	800f40a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d003      	beq.n	800f3d2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f3ca:	f06f 0303 	mvn.w	r3, #3
 800f3ce:	617b      	str	r3, [r7, #20]
 800f3d0:	e02c      	b.n	800f42c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f3d6:	f107 0308 	add.w	r3, r7, #8
 800f3da:	461a      	mov	r2, r3
 800f3dc:	2100      	movs	r1, #0
 800f3de:	6938      	ldr	r0, [r7, #16]
 800f3e0:	f001 f8fa 	bl	80105d8 <xQueueReceiveFromISR>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d003      	beq.n	800f3f2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f3ea:	f06f 0302 	mvn.w	r3, #2
 800f3ee:	617b      	str	r3, [r7, #20]
 800f3f0:	e01c      	b.n	800f42c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d019      	beq.n	800f42c <osSemaphoreAcquire+0x94>
 800f3f8:	4b0f      	ldr	r3, [pc, #60]	; (800f438 <osSemaphoreAcquire+0xa0>)
 800f3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	e010      	b.n	800f42c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6938      	ldr	r0, [r7, #16]
 800f40e:	f000 ffd7 	bl	80103c0 <xQueueSemaphoreTake>
 800f412:	4603      	mov	r3, r0
 800f414:	2b01      	cmp	r3, #1
 800f416:	d009      	beq.n	800f42c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d003      	beq.n	800f426 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f41e:	f06f 0301 	mvn.w	r3, #1
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	e002      	b.n	800f42c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f426:	f06f 0302 	mvn.w	r3, #2
 800f42a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f42c:	697b      	ldr	r3, [r7, #20]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3718      	adds	r7, #24
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	e000ed04 	.word	0xe000ed04

0800f43c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f448:	2300      	movs	r3, #0
 800f44a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d103      	bne.n	800f45a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f452:	f06f 0303 	mvn.w	r3, #3
 800f456:	617b      	str	r3, [r7, #20]
 800f458:	e02c      	b.n	800f4b4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f45a:	f3ef 8305 	mrs	r3, IPSR
 800f45e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f460:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f462:	2b00      	cmp	r3, #0
 800f464:	d01a      	beq.n	800f49c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f466:	2300      	movs	r3, #0
 800f468:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f46a:	f107 0308 	add.w	r3, r7, #8
 800f46e:	4619      	mov	r1, r3
 800f470:	6938      	ldr	r0, [r7, #16]
 800f472:	f000 fe38 	bl	80100e6 <xQueueGiveFromISR>
 800f476:	4603      	mov	r3, r0
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d003      	beq.n	800f484 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f47c:	f06f 0302 	mvn.w	r3, #2
 800f480:	617b      	str	r3, [r7, #20]
 800f482:	e017      	b.n	800f4b4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d014      	beq.n	800f4b4 <osSemaphoreRelease+0x78>
 800f48a:	4b0d      	ldr	r3, [pc, #52]	; (800f4c0 <osSemaphoreRelease+0x84>)
 800f48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f490:	601a      	str	r2, [r3, #0]
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	e00b      	b.n	800f4b4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f49c:	2300      	movs	r3, #0
 800f49e:	2200      	movs	r2, #0
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	6938      	ldr	r0, [r7, #16]
 800f4a4:	f000 fc86 	bl	800fdb4 <xQueueGenericSend>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d002      	beq.n	800f4b4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f4ae:	f06f 0302 	mvn.w	r3, #2
 800f4b2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f4b4:	697b      	ldr	r3, [r7, #20]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	e000ed04 	.word	0xe000ed04

0800f4c4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08a      	sub	sp, #40	; 0x28
 800f4c8:	af02      	add	r7, sp, #8
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4d4:	f3ef 8305 	mrs	r3, IPSR
 800f4d8:	613b      	str	r3, [r7, #16]
  return(result);
 800f4da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d15f      	bne.n	800f5a0 <osMessageQueueNew+0xdc>
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d05c      	beq.n	800f5a0 <osMessageQueueNew+0xdc>
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d059      	beq.n	800f5a0 <osMessageQueueNew+0xdc>
    mem = -1;
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d029      	beq.n	800f54c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d012      	beq.n	800f526 <osMessageQueueNew+0x62>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	2b4f      	cmp	r3, #79	; 0x4f
 800f506:	d90e      	bls.n	800f526 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00a      	beq.n	800f526 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	695a      	ldr	r2, [r3, #20]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	68b9      	ldr	r1, [r7, #8]
 800f518:	fb01 f303 	mul.w	r3, r1, r3
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d302      	bcc.n	800f526 <osMessageQueueNew+0x62>
        mem = 1;
 800f520:	2301      	movs	r3, #1
 800f522:	61bb      	str	r3, [r7, #24]
 800f524:	e014      	b.n	800f550 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	689b      	ldr	r3, [r3, #8]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d110      	bne.n	800f550 <osMessageQueueNew+0x8c>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d10c      	bne.n	800f550 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d108      	bne.n	800f550 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	695b      	ldr	r3, [r3, #20]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d104      	bne.n	800f550 <osMessageQueueNew+0x8c>
          mem = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	61bb      	str	r3, [r7, #24]
 800f54a:	e001      	b.n	800f550 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	2b01      	cmp	r3, #1
 800f554:	d10b      	bne.n	800f56e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	691a      	ldr	r2, [r3, #16]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	2100      	movs	r1, #0
 800f560:	9100      	str	r1, [sp, #0]
 800f562:	68b9      	ldr	r1, [r7, #8]
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f000 fa2f 	bl	800f9c8 <xQueueGenericCreateStatic>
 800f56a:	61f8      	str	r0, [r7, #28]
 800f56c:	e008      	b.n	800f580 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d105      	bne.n	800f580 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f574:	2200      	movs	r2, #0
 800f576:	68b9      	ldr	r1, [r7, #8]
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 fa9d 	bl	800fab8 <xQueueGenericCreate>
 800f57e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00c      	beq.n	800f5a0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d003      	beq.n	800f594 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	617b      	str	r3, [r7, #20]
 800f592:	e001      	b.n	800f598 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f594:	2300      	movs	r3, #0
 800f596:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f598:	6979      	ldr	r1, [r7, #20]
 800f59a:	69f8      	ldr	r0, [r7, #28]
 800f59c:	f001 f9e8 	bl	8010970 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f5a0:	69fb      	ldr	r3, [r7, #28]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3720      	adds	r7, #32
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
	...

0800f5ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b088      	sub	sp, #32
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	603b      	str	r3, [r7, #0]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5c4:	f3ef 8305 	mrs	r3, IPSR
 800f5c8:	617b      	str	r3, [r7, #20]
  return(result);
 800f5ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d028      	beq.n	800f622 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d005      	beq.n	800f5e2 <osMessageQueuePut+0x36>
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <osMessageQueuePut+0x36>
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d003      	beq.n	800f5ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f5e2:	f06f 0303 	mvn.w	r3, #3
 800f5e6:	61fb      	str	r3, [r7, #28]
 800f5e8:	e038      	b.n	800f65c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f5ee:	f107 0210 	add.w	r2, r7, #16
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	69b8      	ldr	r0, [r7, #24]
 800f5f8:	f000 fcda 	bl	800ffb0 <xQueueGenericSendFromISR>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d003      	beq.n	800f60a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f602:	f06f 0302 	mvn.w	r3, #2
 800f606:	61fb      	str	r3, [r7, #28]
 800f608:	e028      	b.n	800f65c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d025      	beq.n	800f65c <osMessageQueuePut+0xb0>
 800f610:	4b15      	ldr	r3, [pc, #84]	; (800f668 <osMessageQueuePut+0xbc>)
 800f612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f616:	601a      	str	r2, [r3, #0]
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	e01c      	b.n	800f65c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d002      	beq.n	800f62e <osMessageQueuePut+0x82>
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d103      	bne.n	800f636 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f62e:	f06f 0303 	mvn.w	r3, #3
 800f632:	61fb      	str	r3, [r7, #28]
 800f634:	e012      	b.n	800f65c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f636:	2300      	movs	r3, #0
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	68b9      	ldr	r1, [r7, #8]
 800f63c:	69b8      	ldr	r0, [r7, #24]
 800f63e:	f000 fbb9 	bl	800fdb4 <xQueueGenericSend>
 800f642:	4603      	mov	r3, r0
 800f644:	2b01      	cmp	r3, #1
 800f646:	d009      	beq.n	800f65c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d003      	beq.n	800f656 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f64e:	f06f 0301 	mvn.w	r3, #1
 800f652:	61fb      	str	r3, [r7, #28]
 800f654:	e002      	b.n	800f65c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f656:	f06f 0302 	mvn.w	r3, #2
 800f65a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f65c:	69fb      	ldr	r3, [r7, #28]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3720      	adds	r7, #32
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	e000ed04 	.word	0xe000ed04

0800f66c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b088      	sub	sp, #32
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	607a      	str	r2, [r7, #4]
 800f678:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f67e:	2300      	movs	r3, #0
 800f680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f682:	f3ef 8305 	mrs	r3, IPSR
 800f686:	617b      	str	r3, [r7, #20]
  return(result);
 800f688:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d028      	beq.n	800f6e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d005      	beq.n	800f6a0 <osMessageQueueGet+0x34>
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d002      	beq.n	800f6a0 <osMessageQueueGet+0x34>
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d003      	beq.n	800f6a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f6a0:	f06f 0303 	mvn.w	r3, #3
 800f6a4:	61fb      	str	r3, [r7, #28]
 800f6a6:	e037      	b.n	800f718 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f6ac:	f107 0310 	add.w	r3, r7, #16
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	68b9      	ldr	r1, [r7, #8]
 800f6b4:	69b8      	ldr	r0, [r7, #24]
 800f6b6:	f000 ff8f 	bl	80105d8 <xQueueReceiveFromISR>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d003      	beq.n	800f6c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f6c0:	f06f 0302 	mvn.w	r3, #2
 800f6c4:	61fb      	str	r3, [r7, #28]
 800f6c6:	e027      	b.n	800f718 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d024      	beq.n	800f718 <osMessageQueueGet+0xac>
 800f6ce:	4b15      	ldr	r3, [pc, #84]	; (800f724 <osMessageQueueGet+0xb8>)
 800f6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6d4:	601a      	str	r2, [r3, #0]
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	e01b      	b.n	800f718 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d002      	beq.n	800f6ec <osMessageQueueGet+0x80>
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d103      	bne.n	800f6f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f6ec:	f06f 0303 	mvn.w	r3, #3
 800f6f0:	61fb      	str	r3, [r7, #28]
 800f6f2:	e011      	b.n	800f718 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	69b8      	ldr	r0, [r7, #24]
 800f6fa:	f000 fd81 	bl	8010200 <xQueueReceive>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b01      	cmp	r3, #1
 800f702:	d009      	beq.n	800f718 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d003      	beq.n	800f712 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f70a:	f06f 0301 	mvn.w	r3, #1
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	e002      	b.n	800f718 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f712:	f06f 0302 	mvn.w	r3, #2
 800f716:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f718:	69fb      	ldr	r3, [r7, #28]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3720      	adds	r7, #32
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	e000ed04 	.word	0xe000ed04

0800f728 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	4a07      	ldr	r2, [pc, #28]	; (800f754 <vApplicationGetIdleTaskMemory+0x2c>)
 800f738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	4a06      	ldr	r2, [pc, #24]	; (800f758 <vApplicationGetIdleTaskMemory+0x30>)
 800f73e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2280      	movs	r2, #128	; 0x80
 800f744:	601a      	str	r2, [r3, #0]
}
 800f746:	bf00      	nop
 800f748:	3714      	adds	r7, #20
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	240019dc 	.word	0x240019dc
 800f758:	24001a98 	.word	0x24001a98

0800f75c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	4a07      	ldr	r2, [pc, #28]	; (800f788 <vApplicationGetTimerTaskMemory+0x2c>)
 800f76c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	4a06      	ldr	r2, [pc, #24]	; (800f78c <vApplicationGetTimerTaskMemory+0x30>)
 800f772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f77a:	601a      	str	r2, [r3, #0]
}
 800f77c:	bf00      	nop
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	24001c98 	.word	0x24001c98
 800f78c:	24001d54 	.word	0x24001d54

0800f790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f103 0208 	add.w	r2, r3, #8
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f103 0208 	add.w	r2, r3, #8
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f103 0208 	add.w	r2, r3, #8
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f7c4:	bf00      	nop
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f7de:	bf00      	nop
 800f7e0:	370c      	adds	r7, #12
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	b085      	sub	sp, #20
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	689a      	ldr	r2, [r3, #8]
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	683a      	ldr	r2, [r7, #0]
 800f80e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	601a      	str	r2, [r3, #0]
}
 800f826:	bf00      	nop
 800f828:	3714      	adds	r7, #20
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr

0800f832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f832:	b480      	push	{r7}
 800f834:	b085      	sub	sp, #20
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f848:	d103      	bne.n	800f852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	60fb      	str	r3, [r7, #12]
 800f850:	e00c      	b.n	800f86c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	3308      	adds	r3, #8
 800f856:	60fb      	str	r3, [r7, #12]
 800f858:	e002      	b.n	800f860 <vListInsert+0x2e>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68ba      	ldr	r2, [r7, #8]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d2f6      	bcs.n	800f85a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	683a      	ldr	r2, [r7, #0]
 800f87a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	601a      	str	r2, [r3, #0]
}
 800f898:	bf00      	nop
 800f89a:	3714      	adds	r7, #20
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	6892      	ldr	r2, [r2, #8]
 800f8ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	6852      	ldr	r2, [r2, #4]
 800f8c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d103      	bne.n	800f8d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	689a      	ldr	r2, [r3, #8]
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	1e5a      	subs	r2, r3, #1
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3714      	adds	r7, #20
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d10a      	bne.n	800f922 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f910:	f383 8811 	msr	BASEPRI, r3
 800f914:	f3bf 8f6f 	isb	sy
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f91e:	bf00      	nop
 800f920:	e7fe      	b.n	800f920 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f922:	f002 fff7 	bl	8012914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f92e:	68f9      	ldr	r1, [r7, #12]
 800f930:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f932:	fb01 f303 	mul.w	r3, r1, r3
 800f936:	441a      	add	r2, r3
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2200      	movs	r2, #0
 800f940:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f952:	3b01      	subs	r3, #1
 800f954:	68f9      	ldr	r1, [r7, #12]
 800f956:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f958:	fb01 f303 	mul.w	r3, r1, r3
 800f95c:	441a      	add	r2, r3
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	22ff      	movs	r2, #255	; 0xff
 800f966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	22ff      	movs	r2, #255	; 0xff
 800f96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d114      	bne.n	800f9a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	691b      	ldr	r3, [r3, #16]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d01a      	beq.n	800f9b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3310      	adds	r3, #16
 800f984:	4618      	mov	r0, r3
 800f986:	f001 fe07 	bl	8011598 <xTaskRemoveFromEventList>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d012      	beq.n	800f9b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f990:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <xQueueGenericReset+0xcc>)
 800f992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f996:	601a      	str	r2, [r3, #0]
 800f998:	f3bf 8f4f 	dsb	sy
 800f99c:	f3bf 8f6f 	isb	sy
 800f9a0:	e009      	b.n	800f9b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	3310      	adds	r3, #16
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7ff fef2 	bl	800f790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	3324      	adds	r3, #36	; 0x24
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7ff feed 	bl	800f790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f9b6:	f002 ffdd 	bl	8012974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f9ba:	2301      	movs	r3, #1
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	e000ed04 	.word	0xe000ed04

0800f9c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b08e      	sub	sp, #56	; 0x38
 800f9cc:	af02      	add	r7, sp, #8
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
 800f9d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10a      	bne.n	800f9f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e0:	f383 8811 	msr	BASEPRI, r3
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f9ee:	bf00      	nop
 800f9f0:	e7fe      	b.n	800f9f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d10a      	bne.n	800fa0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fc:	f383 8811 	msr	BASEPRI, r3
 800fa00:	f3bf 8f6f 	isb	sy
 800fa04:	f3bf 8f4f 	dsb	sy
 800fa08:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa0a:	bf00      	nop
 800fa0c:	e7fe      	b.n	800fa0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <xQueueGenericCreateStatic+0x52>
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d001      	beq.n	800fa1e <xQueueGenericCreateStatic+0x56>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e000      	b.n	800fa20 <xQueueGenericCreateStatic+0x58>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10a      	bne.n	800fa3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa28:	f383 8811 	msr	BASEPRI, r3
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f3bf 8f4f 	dsb	sy
 800fa34:	623b      	str	r3, [r7, #32]
}
 800fa36:	bf00      	nop
 800fa38:	e7fe      	b.n	800fa38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d102      	bne.n	800fa46 <xQueueGenericCreateStatic+0x7e>
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d101      	bne.n	800fa4a <xQueueGenericCreateStatic+0x82>
 800fa46:	2301      	movs	r3, #1
 800fa48:	e000      	b.n	800fa4c <xQueueGenericCreateStatic+0x84>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d10a      	bne.n	800fa66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa54:	f383 8811 	msr	BASEPRI, r3
 800fa58:	f3bf 8f6f 	isb	sy
 800fa5c:	f3bf 8f4f 	dsb	sy
 800fa60:	61fb      	str	r3, [r7, #28]
}
 800fa62:	bf00      	nop
 800fa64:	e7fe      	b.n	800fa64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fa66:	2350      	movs	r3, #80	; 0x50
 800fa68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b50      	cmp	r3, #80	; 0x50
 800fa6e:	d00a      	beq.n	800fa86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	61bb      	str	r3, [r7, #24]
}
 800fa82:	bf00      	nop
 800fa84:	e7fe      	b.n	800fa84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fa86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00d      	beq.n	800faae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	2201      	movs	r2, #1
 800fa96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	4613      	mov	r3, r2
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	68b9      	ldr	r1, [r7, #8]
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	f000 f83f 	bl	800fb2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800faae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3730      	adds	r7, #48	; 0x30
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b08a      	sub	sp, #40	; 0x28
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	4613      	mov	r3, r2
 800fac4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10a      	bne.n	800fae2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad0:	f383 8811 	msr	BASEPRI, r3
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	613b      	str	r3, [r7, #16]
}
 800fade:	bf00      	nop
 800fae0:	e7fe      	b.n	800fae0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	fb02 f303 	mul.w	r3, r2, r3
 800faea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	3350      	adds	r3, #80	; 0x50
 800faf0:	4618      	mov	r0, r3
 800faf2:	f003 f831 	bl	8012b58 <pvPortMalloc>
 800faf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d011      	beq.n	800fb22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	3350      	adds	r3, #80	; 0x50
 800fb06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fb08:	69bb      	ldr	r3, [r7, #24]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb10:	79fa      	ldrb	r2, [r7, #7]
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	4613      	mov	r3, r2
 800fb18:	697a      	ldr	r2, [r7, #20]
 800fb1a:	68b9      	ldr	r1, [r7, #8]
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f000 f805 	bl	800fb2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb22:	69bb      	ldr	r3, [r7, #24]
	}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3720      	adds	r7, #32
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d103      	bne.n	800fb48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	69ba      	ldr	r2, [r7, #24]
 800fb44:	601a      	str	r2, [r3, #0]
 800fb46:	e002      	b.n	800fb4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	68ba      	ldr	r2, [r7, #8]
 800fb58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fb5a:	2101      	movs	r1, #1
 800fb5c:	69b8      	ldr	r0, [r7, #24]
 800fb5e:	f7ff fecb 	bl	800f8f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	78fa      	ldrb	r2, [r7, #3]
 800fb66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fb6a:	bf00      	nop
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00e      	beq.n	800fb9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2200      	movs	r2, #0
 800fb84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fb92:	2300      	movs	r3, #0
 800fb94:	2200      	movs	r2, #0
 800fb96:	2100      	movs	r1, #0
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 f90b 	bl	800fdb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fb9e:	bf00      	nop
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b086      	sub	sp, #24
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	4603      	mov	r3, r0
 800fbae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	617b      	str	r3, [r7, #20]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	6939      	ldr	r1, [r7, #16]
 800fbbe:	6978      	ldr	r0, [r7, #20]
 800fbc0:	f7ff ff7a 	bl	800fab8 <xQueueGenericCreate>
 800fbc4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7ff ffd3 	bl	800fb72 <prvInitialiseMutex>

		return xNewQueue;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
	}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3718      	adds	r7, #24
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b088      	sub	sp, #32
 800fbda:	af02      	add	r7, sp, #8
 800fbdc:	4603      	mov	r3, r0
 800fbde:	6039      	str	r1, [r7, #0]
 800fbe0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	617b      	str	r3, [r7, #20]
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fbea:	79fb      	ldrb	r3, [r7, #7]
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	6939      	ldr	r1, [r7, #16]
 800fbf4:	6978      	ldr	r0, [r7, #20]
 800fbf6:	f7ff fee7 	bl	800f9c8 <xQueueGenericCreateStatic>
 800fbfa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f7ff ffb8 	bl	800fb72 <prvInitialiseMutex>

		return xNewQueue;
 800fc02:	68fb      	ldr	r3, [r7, #12]
	}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3718      	adds	r7, #24
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fc0c:	b590      	push	{r4, r7, lr}
 800fc0e:	b087      	sub	sp, #28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d10a      	bne.n	800fc34 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800fc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc22:	f383 8811 	msr	BASEPRI, r3
 800fc26:	f3bf 8f6f 	isb	sy
 800fc2a:	f3bf 8f4f 	dsb	sy
 800fc2e:	60fb      	str	r3, [r7, #12]
}
 800fc30:	bf00      	nop
 800fc32:	e7fe      	b.n	800fc32 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	689c      	ldr	r4, [r3, #8]
 800fc38:	f001 ff44 	bl	8011ac4 <xTaskGetCurrentTaskHandle>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	429c      	cmp	r4, r3
 800fc40:	d111      	bne.n	800fc66 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	68db      	ldr	r3, [r3, #12]
 800fc46:	1e5a      	subs	r2, r3, #1
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d105      	bne.n	800fc60 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fc54:	2300      	movs	r3, #0
 800fc56:	2200      	movs	r2, #0
 800fc58:	2100      	movs	r1, #0
 800fc5a:	6938      	ldr	r0, [r7, #16]
 800fc5c:	f000 f8aa 	bl	800fdb4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fc60:	2301      	movs	r3, #1
 800fc62:	617b      	str	r3, [r7, #20]
 800fc64:	e001      	b.n	800fc6a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fc66:	2300      	movs	r3, #0
 800fc68:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fc6a:	697b      	ldr	r3, [r7, #20]
	}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	371c      	adds	r7, #28
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd90      	pop	{r4, r7, pc}

0800fc74 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fc74:	b590      	push	{r4, r7, lr}
 800fc76:	b087      	sub	sp, #28
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10a      	bne.n	800fc9e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	f383 8811 	msr	BASEPRI, r3
 800fc90:	f3bf 8f6f 	isb	sy
 800fc94:	f3bf 8f4f 	dsb	sy
 800fc98:	60fb      	str	r3, [r7, #12]
}
 800fc9a:	bf00      	nop
 800fc9c:	e7fe      	b.n	800fc9c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	689c      	ldr	r4, [r3, #8]
 800fca2:	f001 ff0f 	bl	8011ac4 <xTaskGetCurrentTaskHandle>
 800fca6:	4603      	mov	r3, r0
 800fca8:	429c      	cmp	r4, r3
 800fcaa:	d107      	bne.n	800fcbc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	1c5a      	adds	r2, r3, #1
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	617b      	str	r3, [r7, #20]
 800fcba:	e00c      	b.n	800fcd6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	6938      	ldr	r0, [r7, #16]
 800fcc0:	f000 fb7e 	bl	80103c0 <xQueueSemaphoreTake>
 800fcc4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d004      	beq.n	800fcd6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	1c5a      	adds	r2, r3, #1
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fcd6:	697b      	ldr	r3, [r7, #20]
	}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	371c      	adds	r7, #28
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd90      	pop	{r4, r7, pc}

0800fce0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b08a      	sub	sp, #40	; 0x28
 800fce4:	af02      	add	r7, sp, #8
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10a      	bne.n	800fd08 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800fcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	61bb      	str	r3, [r7, #24]
}
 800fd04:	bf00      	nop
 800fd06:	e7fe      	b.n	800fd06 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fd08:	68ba      	ldr	r2, [r7, #8]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d90a      	bls.n	800fd26 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	617b      	str	r3, [r7, #20]
}
 800fd22:	bf00      	nop
 800fd24:	e7fe      	b.n	800fd24 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd26:	2302      	movs	r3, #2
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	2100      	movs	r1, #0
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f7ff fe49 	bl	800f9c8 <xQueueGenericCreateStatic>
 800fd36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d002      	beq.n	800fd44 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	68ba      	ldr	r2, [r7, #8]
 800fd42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fd44:	69fb      	ldr	r3, [r7, #28]
	}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3720      	adds	r7, #32
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b086      	sub	sp, #24
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
 800fd56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d10a      	bne.n	800fd74 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	613b      	str	r3, [r7, #16]
}
 800fd70:	bf00      	nop
 800fd72:	e7fe      	b.n	800fd72 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fd74:	683a      	ldr	r2, [r7, #0]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d90a      	bls.n	800fd92 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800fd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd80:	f383 8811 	msr	BASEPRI, r3
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	60fb      	str	r3, [r7, #12]
}
 800fd8e:	bf00      	nop
 800fd90:	e7fe      	b.n	800fd90 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd92:	2202      	movs	r2, #2
 800fd94:	2100      	movs	r1, #0
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7ff fe8e 	bl	800fab8 <xQueueGenericCreate>
 800fd9c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	683a      	ldr	r2, [r7, #0]
 800fda8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fdaa:	697b      	ldr	r3, [r7, #20]
	}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3718      	adds	r7, #24
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b08e      	sub	sp, #56	; 0x38
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
 800fdc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d10a      	bne.n	800fde6 <xQueueGenericSend+0x32>
	__asm volatile
 800fdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd4:	f383 8811 	msr	BASEPRI, r3
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fde2:	bf00      	nop
 800fde4:	e7fe      	b.n	800fde4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d103      	bne.n	800fdf4 <xQueueGenericSend+0x40>
 800fdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d101      	bne.n	800fdf8 <xQueueGenericSend+0x44>
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e000      	b.n	800fdfa <xQueueGenericSend+0x46>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10a      	bne.n	800fe14 <xQueueGenericSend+0x60>
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe10:	bf00      	nop
 800fe12:	e7fe      	b.n	800fe12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	d103      	bne.n	800fe22 <xQueueGenericSend+0x6e>
 800fe1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d101      	bne.n	800fe26 <xQueueGenericSend+0x72>
 800fe22:	2301      	movs	r3, #1
 800fe24:	e000      	b.n	800fe28 <xQueueGenericSend+0x74>
 800fe26:	2300      	movs	r3, #0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10a      	bne.n	800fe42 <xQueueGenericSend+0x8e>
	__asm volatile
 800fe2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	623b      	str	r3, [r7, #32]
}
 800fe3e:	bf00      	nop
 800fe40:	e7fe      	b.n	800fe40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe42:	f001 fe4f 	bl	8011ae4 <xTaskGetSchedulerState>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d102      	bne.n	800fe52 <xQueueGenericSend+0x9e>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d101      	bne.n	800fe56 <xQueueGenericSend+0xa2>
 800fe52:	2301      	movs	r3, #1
 800fe54:	e000      	b.n	800fe58 <xQueueGenericSend+0xa4>
 800fe56:	2300      	movs	r3, #0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10a      	bne.n	800fe72 <xQueueGenericSend+0xbe>
	__asm volatile
 800fe5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	61fb      	str	r3, [r7, #28]
}
 800fe6e:	bf00      	nop
 800fe70:	e7fe      	b.n	800fe70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe72:	f002 fd4f 	bl	8012914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d302      	bcc.n	800fe88 <xQueueGenericSend+0xd4>
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d129      	bne.n	800fedc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe88:	683a      	ldr	r2, [r7, #0]
 800fe8a:	68b9      	ldr	r1, [r7, #8]
 800fe8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe8e:	f000 fc5e 	bl	801074e <prvCopyDataToQueue>
 800fe92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d010      	beq.n	800febe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9e:	3324      	adds	r3, #36	; 0x24
 800fea0:	4618      	mov	r0, r3
 800fea2:	f001 fb79 	bl	8011598 <xTaskRemoveFromEventList>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d013      	beq.n	800fed4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800feac:	4b3f      	ldr	r3, [pc, #252]	; (800ffac <xQueueGenericSend+0x1f8>)
 800feae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	e00a      	b.n	800fed4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d007      	beq.n	800fed4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fec4:	4b39      	ldr	r3, [pc, #228]	; (800ffac <xQueueGenericSend+0x1f8>)
 800fec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feca:	601a      	str	r2, [r3, #0]
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fed4:	f002 fd4e 	bl	8012974 <vPortExitCritical>
				return pdPASS;
 800fed8:	2301      	movs	r3, #1
 800feda:	e063      	b.n	800ffa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d103      	bne.n	800feea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fee2:	f002 fd47 	bl	8012974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fee6:	2300      	movs	r3, #0
 800fee8:	e05c      	b.n	800ffa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800feea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feec:	2b00      	cmp	r3, #0
 800feee:	d106      	bne.n	800fefe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fef0:	f107 0314 	add.w	r3, r7, #20
 800fef4:	4618      	mov	r0, r3
 800fef6:	f001 fbb3 	bl	8011660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fefa:	2301      	movs	r3, #1
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fefe:	f002 fd39 	bl	8012974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff02:	f001 f87f 	bl	8011004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff06:	f002 fd05 	bl	8012914 <vPortEnterCritical>
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff10:	b25b      	sxtb	r3, r3
 800ff12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff16:	d103      	bne.n	800ff20 <xQueueGenericSend+0x16c>
 800ff18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff26:	b25b      	sxtb	r3, r3
 800ff28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff2c:	d103      	bne.n	800ff36 <xQueueGenericSend+0x182>
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	2200      	movs	r2, #0
 800ff32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff36:	f002 fd1d 	bl	8012974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff3a:	1d3a      	adds	r2, r7, #4
 800ff3c:	f107 0314 	add.w	r3, r7, #20
 800ff40:	4611      	mov	r1, r2
 800ff42:	4618      	mov	r0, r3
 800ff44:	f001 fba2 	bl	801168c <xTaskCheckForTimeOut>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d124      	bne.n	800ff98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ff4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff50:	f000 fcf5 	bl	801093e <prvIsQueueFull>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d018      	beq.n	800ff8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	3310      	adds	r3, #16
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	4611      	mov	r1, r2
 800ff62:	4618      	mov	r0, r3
 800ff64:	f001 fac8 	bl	80114f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ff68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff6a:	f000 fc80 	bl	801086e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ff6e:	f001 f857 	bl	8011020 <xTaskResumeAll>
 800ff72:	4603      	mov	r3, r0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f47f af7c 	bne.w	800fe72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ff7a:	4b0c      	ldr	r3, [pc, #48]	; (800ffac <xQueueGenericSend+0x1f8>)
 800ff7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff80:	601a      	str	r2, [r3, #0]
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	e772      	b.n	800fe72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ff8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff8e:	f000 fc6e 	bl	801086e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff92:	f001 f845 	bl	8011020 <xTaskResumeAll>
 800ff96:	e76c      	b.n	800fe72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ff98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff9a:	f000 fc68 	bl	801086e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff9e:	f001 f83f 	bl	8011020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ffa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3738      	adds	r7, #56	; 0x38
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	e000ed04 	.word	0xe000ed04

0800ffb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b090      	sub	sp, #64	; 0x40
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	607a      	str	r2, [r7, #4]
 800ffbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10a      	bne.n	800ffde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ffc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffcc:	f383 8811 	msr	BASEPRI, r3
 800ffd0:	f3bf 8f6f 	isb	sy
 800ffd4:	f3bf 8f4f 	dsb	sy
 800ffd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ffda:	bf00      	nop
 800ffdc:	e7fe      	b.n	800ffdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d103      	bne.n	800ffec <xQueueGenericSendFromISR+0x3c>
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d101      	bne.n	800fff0 <xQueueGenericSendFromISR+0x40>
 800ffec:	2301      	movs	r3, #1
 800ffee:	e000      	b.n	800fff2 <xQueueGenericSendFromISR+0x42>
 800fff0:	2300      	movs	r3, #0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10a      	bne.n	801000c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010008:	bf00      	nop
 801000a:	e7fe      	b.n	801000a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2b02      	cmp	r3, #2
 8010010:	d103      	bne.n	801001a <xQueueGenericSendFromISR+0x6a>
 8010012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010016:	2b01      	cmp	r3, #1
 8010018:	d101      	bne.n	801001e <xQueueGenericSendFromISR+0x6e>
 801001a:	2301      	movs	r3, #1
 801001c:	e000      	b.n	8010020 <xQueueGenericSendFromISR+0x70>
 801001e:	2300      	movs	r3, #0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10a      	bne.n	801003a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	623b      	str	r3, [r7, #32]
}
 8010036:	bf00      	nop
 8010038:	e7fe      	b.n	8010038 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801003a:	f002 fd4d 	bl	8012ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801003e:	f3ef 8211 	mrs	r2, BASEPRI
 8010042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010046:	f383 8811 	msr	BASEPRI, r3
 801004a:	f3bf 8f6f 	isb	sy
 801004e:	f3bf 8f4f 	dsb	sy
 8010052:	61fa      	str	r2, [r7, #28]
 8010054:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010056:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010058:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801005e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010062:	429a      	cmp	r2, r3
 8010064:	d302      	bcc.n	801006c <xQueueGenericSendFromISR+0xbc>
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	2b02      	cmp	r3, #2
 801006a:	d12f      	bne.n	80100cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801006c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801007a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801007c:	683a      	ldr	r2, [r7, #0]
 801007e:	68b9      	ldr	r1, [r7, #8]
 8010080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010082:	f000 fb64 	bl	801074e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010086:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801008a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008e:	d112      	bne.n	80100b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010094:	2b00      	cmp	r3, #0
 8010096:	d016      	beq.n	80100c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	3324      	adds	r3, #36	; 0x24
 801009c:	4618      	mov	r0, r3
 801009e:	f001 fa7b 	bl	8011598 <xTaskRemoveFromEventList>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00e      	beq.n	80100c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d00b      	beq.n	80100c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2201      	movs	r2, #1
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	e007      	b.n	80100c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80100b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100ba:	3301      	adds	r3, #1
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	b25a      	sxtb	r2, r3
 80100c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80100c6:	2301      	movs	r3, #1
 80100c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80100ca:	e001      	b.n	80100d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80100cc:	2300      	movs	r3, #0
 80100ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80100da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3740      	adds	r7, #64	; 0x40
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b08e      	sub	sp, #56	; 0x38
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80100f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d10a      	bne.n	8010110 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	623b      	str	r3, [r7, #32]
}
 801010c:	bf00      	nop
 801010e:	e7fe      	b.n	801010e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010114:	2b00      	cmp	r3, #0
 8010116:	d00a      	beq.n	801012e <xQueueGiveFromISR+0x48>
	__asm volatile
 8010118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011c:	f383 8811 	msr	BASEPRI, r3
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	61fb      	str	r3, [r7, #28]
}
 801012a:	bf00      	nop
 801012c:	e7fe      	b.n	801012c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d103      	bne.n	801013e <xQueueGiveFromISR+0x58>
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d101      	bne.n	8010142 <xQueueGiveFromISR+0x5c>
 801013e:	2301      	movs	r3, #1
 8010140:	e000      	b.n	8010144 <xQueueGiveFromISR+0x5e>
 8010142:	2300      	movs	r3, #0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10a      	bne.n	801015e <xQueueGiveFromISR+0x78>
	__asm volatile
 8010148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014c:	f383 8811 	msr	BASEPRI, r3
 8010150:	f3bf 8f6f 	isb	sy
 8010154:	f3bf 8f4f 	dsb	sy
 8010158:	61bb      	str	r3, [r7, #24]
}
 801015a:	bf00      	nop
 801015c:	e7fe      	b.n	801015c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801015e:	f002 fcbb 	bl	8012ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8010162:	f3ef 8211 	mrs	r2, BASEPRI
 8010166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016a:	f383 8811 	msr	BASEPRI, r3
 801016e:	f3bf 8f6f 	isb	sy
 8010172:	f3bf 8f4f 	dsb	sy
 8010176:	617a      	str	r2, [r7, #20]
 8010178:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801017a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801017c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801018a:	429a      	cmp	r2, r3
 801018c:	d22b      	bcs.n	80101e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801018e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80101a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a8:	d112      	bne.n	80101d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d016      	beq.n	80101e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b4:	3324      	adds	r3, #36	; 0x24
 80101b6:	4618      	mov	r0, r3
 80101b8:	f001 f9ee 	bl	8011598 <xTaskRemoveFromEventList>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d00e      	beq.n	80101e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00b      	beq.n	80101e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	2201      	movs	r2, #1
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	e007      	b.n	80101e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101d4:	3301      	adds	r3, #1
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	b25a      	sxtb	r2, r3
 80101da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80101e0:	2301      	movs	r3, #1
 80101e2:	637b      	str	r3, [r7, #52]	; 0x34
 80101e4:	e001      	b.n	80101ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101e6:	2300      	movs	r3, #0
 80101e8:	637b      	str	r3, [r7, #52]	; 0x34
 80101ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	f383 8811 	msr	BASEPRI, r3
}
 80101f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3738      	adds	r7, #56	; 0x38
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08c      	sub	sp, #48	; 0x30
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801020c:	2300      	movs	r3, #0
 801020e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010216:	2b00      	cmp	r3, #0
 8010218:	d10a      	bne.n	8010230 <xQueueReceive+0x30>
	__asm volatile
 801021a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021e:	f383 8811 	msr	BASEPRI, r3
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	623b      	str	r3, [r7, #32]
}
 801022c:	bf00      	nop
 801022e:	e7fe      	b.n	801022e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d103      	bne.n	801023e <xQueueReceive+0x3e>
 8010236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <xQueueReceive+0x42>
 801023e:	2301      	movs	r3, #1
 8010240:	e000      	b.n	8010244 <xQueueReceive+0x44>
 8010242:	2300      	movs	r3, #0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d10a      	bne.n	801025e <xQueueReceive+0x5e>
	__asm volatile
 8010248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801024c:	f383 8811 	msr	BASEPRI, r3
 8010250:	f3bf 8f6f 	isb	sy
 8010254:	f3bf 8f4f 	dsb	sy
 8010258:	61fb      	str	r3, [r7, #28]
}
 801025a:	bf00      	nop
 801025c:	e7fe      	b.n	801025c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801025e:	f001 fc41 	bl	8011ae4 <xTaskGetSchedulerState>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d102      	bne.n	801026e <xQueueReceive+0x6e>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d101      	bne.n	8010272 <xQueueReceive+0x72>
 801026e:	2301      	movs	r3, #1
 8010270:	e000      	b.n	8010274 <xQueueReceive+0x74>
 8010272:	2300      	movs	r3, #0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d10a      	bne.n	801028e <xQueueReceive+0x8e>
	__asm volatile
 8010278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027c:	f383 8811 	msr	BASEPRI, r3
 8010280:	f3bf 8f6f 	isb	sy
 8010284:	f3bf 8f4f 	dsb	sy
 8010288:	61bb      	str	r3, [r7, #24]
}
 801028a:	bf00      	nop
 801028c:	e7fe      	b.n	801028c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801028e:	f002 fb41 	bl	8012914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029a:	2b00      	cmp	r3, #0
 801029c:	d01f      	beq.n	80102de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801029e:	68b9      	ldr	r1, [r7, #8]
 80102a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a2:	f000 fabe 	bl	8010822 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a8:	1e5a      	subs	r2, r3, #1
 80102aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d00f      	beq.n	80102d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	3310      	adds	r3, #16
 80102ba:	4618      	mov	r0, r3
 80102bc:	f001 f96c 	bl	8011598 <xTaskRemoveFromEventList>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d007      	beq.n	80102d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102c6:	4b3d      	ldr	r3, [pc, #244]	; (80103bc <xQueueReceive+0x1bc>)
 80102c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	f3bf 8f4f 	dsb	sy
 80102d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102d6:	f002 fb4d 	bl	8012974 <vPortExitCritical>
				return pdPASS;
 80102da:	2301      	movs	r3, #1
 80102dc:	e069      	b.n	80103b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d103      	bne.n	80102ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102e4:	f002 fb46 	bl	8012974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102e8:	2300      	movs	r3, #0
 80102ea:	e062      	b.n	80103b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d106      	bne.n	8010300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102f2:	f107 0310 	add.w	r3, r7, #16
 80102f6:	4618      	mov	r0, r3
 80102f8:	f001 f9b2 	bl	8011660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102fc:	2301      	movs	r3, #1
 80102fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010300:	f002 fb38 	bl	8012974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010304:	f000 fe7e 	bl	8011004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010308:	f002 fb04 	bl	8012914 <vPortEnterCritical>
 801030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010312:	b25b      	sxtb	r3, r3
 8010314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010318:	d103      	bne.n	8010322 <xQueueReceive+0x122>
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	2200      	movs	r2, #0
 801031e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010328:	b25b      	sxtb	r3, r3
 801032a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801032e:	d103      	bne.n	8010338 <xQueueReceive+0x138>
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	2200      	movs	r2, #0
 8010334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010338:	f002 fb1c 	bl	8012974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801033c:	1d3a      	adds	r2, r7, #4
 801033e:	f107 0310 	add.w	r3, r7, #16
 8010342:	4611      	mov	r1, r2
 8010344:	4618      	mov	r0, r3
 8010346:	f001 f9a1 	bl	801168c <xTaskCheckForTimeOut>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d123      	bne.n	8010398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010352:	f000 fade 	bl	8010912 <prvIsQueueEmpty>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d017      	beq.n	801038c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801035c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035e:	3324      	adds	r3, #36	; 0x24
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	4611      	mov	r1, r2
 8010364:	4618      	mov	r0, r3
 8010366:	f001 f8c7 	bl	80114f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801036a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801036c:	f000 fa7f 	bl	801086e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010370:	f000 fe56 	bl	8011020 <xTaskResumeAll>
 8010374:	4603      	mov	r3, r0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d189      	bne.n	801028e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801037a:	4b10      	ldr	r3, [pc, #64]	; (80103bc <xQueueReceive+0x1bc>)
 801037c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010380:	601a      	str	r2, [r3, #0]
 8010382:	f3bf 8f4f 	dsb	sy
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	e780      	b.n	801028e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801038c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801038e:	f000 fa6e 	bl	801086e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010392:	f000 fe45 	bl	8011020 <xTaskResumeAll>
 8010396:	e77a      	b.n	801028e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801039a:	f000 fa68 	bl	801086e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801039e:	f000 fe3f 	bl	8011020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103a4:	f000 fab5 	bl	8010912 <prvIsQueueEmpty>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	f43f af6f 	beq.w	801028e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3730      	adds	r7, #48	; 0x30
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	e000ed04 	.word	0xe000ed04

080103c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b08e      	sub	sp, #56	; 0x38
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80103ca:	2300      	movs	r3, #0
 80103cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80103d2:	2300      	movs	r3, #0
 80103d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80103d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10a      	bne.n	80103f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	623b      	str	r3, [r7, #32]
}
 80103ee:	bf00      	nop
 80103f0:	e7fe      	b.n	80103f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80103f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00a      	beq.n	8010410 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80103fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103fe:	f383 8811 	msr	BASEPRI, r3
 8010402:	f3bf 8f6f 	isb	sy
 8010406:	f3bf 8f4f 	dsb	sy
 801040a:	61fb      	str	r3, [r7, #28]
}
 801040c:	bf00      	nop
 801040e:	e7fe      	b.n	801040e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010410:	f001 fb68 	bl	8011ae4 <xTaskGetSchedulerState>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d102      	bne.n	8010420 <xQueueSemaphoreTake+0x60>
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d101      	bne.n	8010424 <xQueueSemaphoreTake+0x64>
 8010420:	2301      	movs	r3, #1
 8010422:	e000      	b.n	8010426 <xQueueSemaphoreTake+0x66>
 8010424:	2300      	movs	r3, #0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d10a      	bne.n	8010440 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801042a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042e:	f383 8811 	msr	BASEPRI, r3
 8010432:	f3bf 8f6f 	isb	sy
 8010436:	f3bf 8f4f 	dsb	sy
 801043a:	61bb      	str	r3, [r7, #24]
}
 801043c:	bf00      	nop
 801043e:	e7fe      	b.n	801043e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010440:	f002 fa68 	bl	8012914 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010448:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	2b00      	cmp	r3, #0
 801044e:	d024      	beq.n	801049a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010452:	1e5a      	subs	r2, r3, #1
 8010454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010456:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d104      	bne.n	801046a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010460:	f001 fd72 	bl	8011f48 <pvTaskIncrementMutexHeldCount>
 8010464:	4602      	mov	r2, r0
 8010466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010468:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	691b      	ldr	r3, [r3, #16]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d00f      	beq.n	8010492 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010474:	3310      	adds	r3, #16
 8010476:	4618      	mov	r0, r3
 8010478:	f001 f88e 	bl	8011598 <xTaskRemoveFromEventList>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d007      	beq.n	8010492 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010482:	4b54      	ldr	r3, [pc, #336]	; (80105d4 <xQueueSemaphoreTake+0x214>)
 8010484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010492:	f002 fa6f 	bl	8012974 <vPortExitCritical>
				return pdPASS;
 8010496:	2301      	movs	r3, #1
 8010498:	e097      	b.n	80105ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d111      	bne.n	80104c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80104a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00a      	beq.n	80104bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80104a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104aa:	f383 8811 	msr	BASEPRI, r3
 80104ae:	f3bf 8f6f 	isb	sy
 80104b2:	f3bf 8f4f 	dsb	sy
 80104b6:	617b      	str	r3, [r7, #20]
}
 80104b8:	bf00      	nop
 80104ba:	e7fe      	b.n	80104ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80104bc:	f002 fa5a 	bl	8012974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104c0:	2300      	movs	r3, #0
 80104c2:	e082      	b.n	80105ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d106      	bne.n	80104d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104ca:	f107 030c 	add.w	r3, r7, #12
 80104ce:	4618      	mov	r0, r3
 80104d0:	f001 f8c6 	bl	8011660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80104d4:	2301      	movs	r3, #1
 80104d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80104d8:	f002 fa4c 	bl	8012974 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104dc:	f000 fd92 	bl	8011004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104e0:	f002 fa18 	bl	8012914 <vPortEnterCritical>
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104ea:	b25b      	sxtb	r3, r3
 80104ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f0:	d103      	bne.n	80104fa <xQueueSemaphoreTake+0x13a>
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	2200      	movs	r2, #0
 80104f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010500:	b25b      	sxtb	r3, r3
 8010502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010506:	d103      	bne.n	8010510 <xQueueSemaphoreTake+0x150>
 8010508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050a:	2200      	movs	r2, #0
 801050c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010510:	f002 fa30 	bl	8012974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010514:	463a      	mov	r2, r7
 8010516:	f107 030c 	add.w	r3, r7, #12
 801051a:	4611      	mov	r1, r2
 801051c:	4618      	mov	r0, r3
 801051e:	f001 f8b5 	bl	801168c <xTaskCheckForTimeOut>
 8010522:	4603      	mov	r3, r0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d132      	bne.n	801058e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801052a:	f000 f9f2 	bl	8010912 <prvIsQueueEmpty>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d026      	beq.n	8010582 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d109      	bne.n	8010550 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801053c:	f002 f9ea 	bl	8012914 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010542:	689b      	ldr	r3, [r3, #8]
 8010544:	4618      	mov	r0, r3
 8010546:	f001 faeb 	bl	8011b20 <xTaskPriorityInherit>
 801054a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801054c:	f002 fa12 	bl	8012974 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	3324      	adds	r3, #36	; 0x24
 8010554:	683a      	ldr	r2, [r7, #0]
 8010556:	4611      	mov	r1, r2
 8010558:	4618      	mov	r0, r3
 801055a:	f000 ffcd 	bl	80114f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801055e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010560:	f000 f985 	bl	801086e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010564:	f000 fd5c 	bl	8011020 <xTaskResumeAll>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	f47f af68 	bne.w	8010440 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010570:	4b18      	ldr	r3, [pc, #96]	; (80105d4 <xQueueSemaphoreTake+0x214>)
 8010572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010576:	601a      	str	r2, [r3, #0]
 8010578:	f3bf 8f4f 	dsb	sy
 801057c:	f3bf 8f6f 	isb	sy
 8010580:	e75e      	b.n	8010440 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010584:	f000 f973 	bl	801086e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010588:	f000 fd4a 	bl	8011020 <xTaskResumeAll>
 801058c:	e758      	b.n	8010440 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801058e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010590:	f000 f96d 	bl	801086e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010594:	f000 fd44 	bl	8011020 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801059a:	f000 f9ba 	bl	8010912 <prvIsQueueEmpty>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f43f af4d 	beq.w	8010440 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80105a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00d      	beq.n	80105c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80105ac:	f002 f9b2 	bl	8012914 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80105b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105b2:	f000 f8b4 	bl	801071e <prvGetDisinheritPriorityAfterTimeout>
 80105b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80105b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105be:	4618      	mov	r0, r3
 80105c0:	f001 fb84 	bl	8011ccc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80105c4:	f002 f9d6 	bl	8012974 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80105c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3738      	adds	r7, #56	; 0x38
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	e000ed04 	.word	0xe000ed04

080105d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b08e      	sub	sp, #56	; 0x38
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80105e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d10a      	bne.n	8010604 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80105ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f2:	f383 8811 	msr	BASEPRI, r3
 80105f6:	f3bf 8f6f 	isb	sy
 80105fa:	f3bf 8f4f 	dsb	sy
 80105fe:	623b      	str	r3, [r7, #32]
}
 8010600:	bf00      	nop
 8010602:	e7fe      	b.n	8010602 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d103      	bne.n	8010612 <xQueueReceiveFromISR+0x3a>
 801060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801060e:	2b00      	cmp	r3, #0
 8010610:	d101      	bne.n	8010616 <xQueueReceiveFromISR+0x3e>
 8010612:	2301      	movs	r3, #1
 8010614:	e000      	b.n	8010618 <xQueueReceiveFromISR+0x40>
 8010616:	2300      	movs	r3, #0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d10a      	bne.n	8010632 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	61fb      	str	r3, [r7, #28]
}
 801062e:	bf00      	nop
 8010630:	e7fe      	b.n	8010630 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010632:	f002 fa51 	bl	8012ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8010636:	f3ef 8211 	mrs	r2, BASEPRI
 801063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063e:	f383 8811 	msr	BASEPRI, r3
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	61ba      	str	r2, [r7, #24]
 801064c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801064e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010656:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065a:	2b00      	cmp	r3, #0
 801065c:	d02f      	beq.n	80106be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010668:	68b9      	ldr	r1, [r7, #8]
 801066a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801066c:	f000 f8d9 	bl	8010822 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	1e5a      	subs	r2, r3, #1
 8010674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010676:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010680:	d112      	bne.n	80106a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d016      	beq.n	80106b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	3310      	adds	r3, #16
 801068e:	4618      	mov	r0, r3
 8010690:	f000 ff82 	bl	8011598 <xTaskRemoveFromEventList>
 8010694:	4603      	mov	r3, r0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00e      	beq.n	80106b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00b      	beq.n	80106b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	601a      	str	r2, [r3, #0]
 80106a6:	e007      	b.n	80106b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ac:	3301      	adds	r3, #1
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	b25a      	sxtb	r2, r3
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80106b8:	2301      	movs	r3, #1
 80106ba:	637b      	str	r3, [r7, #52]	; 0x34
 80106bc:	e001      	b.n	80106c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80106be:	2300      	movs	r3, #0
 80106c0:	637b      	str	r3, [r7, #52]	; 0x34
 80106c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	f383 8811 	msr	BASEPRI, r3
}
 80106cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3738      	adds	r7, #56	; 0x38
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10a      	bne.n	8010700 <vQueueDelete+0x28>
	__asm volatile
 80106ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ee:	f383 8811 	msr	BASEPRI, r3
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	60bb      	str	r3, [r7, #8]
}
 80106fc:	bf00      	nop
 80106fe:	e7fe      	b.n	80106fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f000 f95f 	bl	80109c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801070c:	2b00      	cmp	r3, #0
 801070e:	d102      	bne.n	8010716 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f002 faed 	bl	8012cf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010716:	bf00      	nop
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801071e:	b480      	push	{r7}
 8010720:	b085      	sub	sp, #20
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072a:	2b00      	cmp	r3, #0
 801072c:	d006      	beq.n	801073c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010738:	60fb      	str	r3, [r7, #12]
 801073a:	e001      	b.n	8010740 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801073c:	2300      	movs	r3, #0
 801073e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010740:	68fb      	ldr	r3, [r7, #12]
	}
 8010742:	4618      	mov	r0, r3
 8010744:	3714      	adds	r7, #20
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr

0801074e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801074e:	b580      	push	{r7, lr}
 8010750:	b086      	sub	sp, #24
 8010752:	af00      	add	r7, sp, #0
 8010754:	60f8      	str	r0, [r7, #12]
 8010756:	60b9      	str	r1, [r7, #8]
 8010758:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801075a:	2300      	movs	r3, #0
 801075c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010762:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010768:	2b00      	cmp	r3, #0
 801076a:	d10d      	bne.n	8010788 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d14d      	bne.n	8010810 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	4618      	mov	r0, r3
 801077a:	f001 fa39 	bl	8011bf0 <xTaskPriorityDisinherit>
 801077e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2200      	movs	r2, #0
 8010784:	609a      	str	r2, [r3, #8]
 8010786:	e043      	b.n	8010810 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d119      	bne.n	80107c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6858      	ldr	r0, [r3, #4]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010796:	461a      	mov	r2, r3
 8010798:	68b9      	ldr	r1, [r7, #8]
 801079a:	f00c fe61 	bl	801d460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a6:	441a      	add	r2, r3
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	685a      	ldr	r2, [r3, #4]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d32b      	bcc.n	8010810 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	605a      	str	r2, [r3, #4]
 80107c0:	e026      	b.n	8010810 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	68d8      	ldr	r0, [r3, #12]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ca:	461a      	mov	r2, r3
 80107cc:	68b9      	ldr	r1, [r7, #8]
 80107ce:	f00c fe47 	bl	801d460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	68da      	ldr	r2, [r3, #12]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107da:	425b      	negs	r3, r3
 80107dc:	441a      	add	r2, r3
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	68da      	ldr	r2, [r3, #12]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d207      	bcs.n	80107fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	689a      	ldr	r2, [r3, #8]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f6:	425b      	negs	r3, r3
 80107f8:	441a      	add	r2, r3
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b02      	cmp	r3, #2
 8010802:	d105      	bne.n	8010810 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d002      	beq.n	8010810 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	3b01      	subs	r3, #1
 801080e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	1c5a      	adds	r2, r3, #1
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010818:	697b      	ldr	r3, [r7, #20]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3718      	adds	r7, #24
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b082      	sub	sp, #8
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
 801082a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010830:	2b00      	cmp	r3, #0
 8010832:	d018      	beq.n	8010866 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	68da      	ldr	r2, [r3, #12]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083c:	441a      	add	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	68da      	ldr	r2, [r3, #12]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	429a      	cmp	r2, r3
 801084c:	d303      	bcc.n	8010856 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	68d9      	ldr	r1, [r3, #12]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801085e:	461a      	mov	r2, r3
 8010860:	6838      	ldr	r0, [r7, #0]
 8010862:	f00c fdfd 	bl	801d460 <memcpy>
	}
}
 8010866:	bf00      	nop
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}

0801086e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b084      	sub	sp, #16
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010876:	f002 f84d 	bl	8012914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010880:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010882:	e011      	b.n	80108a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010888:	2b00      	cmp	r3, #0
 801088a:	d012      	beq.n	80108b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	3324      	adds	r3, #36	; 0x24
 8010890:	4618      	mov	r0, r3
 8010892:	f000 fe81 	bl	8011598 <xTaskRemoveFromEventList>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801089c:	f000 ff58 	bl	8011750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
 80108a2:	3b01      	subs	r3, #1
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	dce9      	bgt.n	8010884 <prvUnlockQueue+0x16>
 80108b0:	e000      	b.n	80108b4 <prvUnlockQueue+0x46>
					break;
 80108b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	22ff      	movs	r2, #255	; 0xff
 80108b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80108bc:	f002 f85a 	bl	8012974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108c0:	f002 f828 	bl	8012914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108cc:	e011      	b.n	80108f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d012      	beq.n	80108fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	3310      	adds	r3, #16
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 fe5c 	bl	8011598 <xTaskRemoveFromEventList>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80108e6:	f000 ff33 	bl	8011750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80108ea:	7bbb      	ldrb	r3, [r7, #14]
 80108ec:	3b01      	subs	r3, #1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	dce9      	bgt.n	80108ce <prvUnlockQueue+0x60>
 80108fa:	e000      	b.n	80108fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80108fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	22ff      	movs	r2, #255	; 0xff
 8010902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010906:	f002 f835 	bl	8012974 <vPortExitCritical>
}
 801090a:	bf00      	nop
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b084      	sub	sp, #16
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801091a:	f001 fffb 	bl	8012914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010922:	2b00      	cmp	r3, #0
 8010924:	d102      	bne.n	801092c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010926:	2301      	movs	r3, #1
 8010928:	60fb      	str	r3, [r7, #12]
 801092a:	e001      	b.n	8010930 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801092c:	2300      	movs	r3, #0
 801092e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010930:	f002 f820 	bl	8012974 <vPortExitCritical>

	return xReturn;
 8010934:	68fb      	ldr	r3, [r7, #12]
}
 8010936:	4618      	mov	r0, r3
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}

0801093e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b084      	sub	sp, #16
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010946:	f001 ffe5 	bl	8012914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010952:	429a      	cmp	r2, r3
 8010954:	d102      	bne.n	801095c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010956:	2301      	movs	r3, #1
 8010958:	60fb      	str	r3, [r7, #12]
 801095a:	e001      	b.n	8010960 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801095c:	2300      	movs	r3, #0
 801095e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010960:	f002 f808 	bl	8012974 <vPortExitCritical>

	return xReturn;
 8010964:	68fb      	ldr	r3, [r7, #12]
}
 8010966:	4618      	mov	r0, r3
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
	...

08010970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801097a:	2300      	movs	r3, #0
 801097c:	60fb      	str	r3, [r7, #12]
 801097e:	e014      	b.n	80109aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010980:	4a0f      	ldr	r2, [pc, #60]	; (80109c0 <vQueueAddToRegistry+0x50>)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d10b      	bne.n	80109a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801098c:	490c      	ldr	r1, [pc, #48]	; (80109c0 <vQueueAddToRegistry+0x50>)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010996:	4a0a      	ldr	r2, [pc, #40]	; (80109c0 <vQueueAddToRegistry+0x50>)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	00db      	lsls	r3, r3, #3
 801099c:	4413      	add	r3, r2
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80109a2:	e006      	b.n	80109b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	3301      	adds	r3, #1
 80109a8:	60fb      	str	r3, [r7, #12]
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2b07      	cmp	r3, #7
 80109ae:	d9e7      	bls.n	8010980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80109b0:	bf00      	nop
 80109b2:	bf00      	nop
 80109b4:	3714      	adds	r7, #20
 80109b6:	46bd      	mov	sp, r7
 80109b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109bc:	4770      	bx	lr
 80109be:	bf00      	nop
 80109c0:	2401b75c 	.word	0x2401b75c

080109c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80109c4:	b480      	push	{r7}
 80109c6:	b085      	sub	sp, #20
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109cc:	2300      	movs	r3, #0
 80109ce:	60fb      	str	r3, [r7, #12]
 80109d0:	e016      	b.n	8010a00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80109d2:	4a10      	ldr	r2, [pc, #64]	; (8010a14 <vQueueUnregisterQueue+0x50>)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	00db      	lsls	r3, r3, #3
 80109d8:	4413      	add	r3, r2
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d10b      	bne.n	80109fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80109e2:	4a0c      	ldr	r2, [pc, #48]	; (8010a14 <vQueueUnregisterQueue+0x50>)
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2100      	movs	r1, #0
 80109e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80109ec:	4a09      	ldr	r2, [pc, #36]	; (8010a14 <vQueueUnregisterQueue+0x50>)
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	00db      	lsls	r3, r3, #3
 80109f2:	4413      	add	r3, r2
 80109f4:	2200      	movs	r2, #0
 80109f6:	605a      	str	r2, [r3, #4]
				break;
 80109f8:	e006      	b.n	8010a08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	3301      	adds	r3, #1
 80109fe:	60fb      	str	r3, [r7, #12]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b07      	cmp	r3, #7
 8010a04:	d9e5      	bls.n	80109d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010a06:	bf00      	nop
 8010a08:	bf00      	nop
 8010a0a:	3714      	adds	r7, #20
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr
 8010a14:	2401b75c 	.word	0x2401b75c

08010a18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010a28:	f001 ff74 	bl	8012914 <vPortEnterCritical>
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a32:	b25b      	sxtb	r3, r3
 8010a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a38:	d103      	bne.n	8010a42 <vQueueWaitForMessageRestricted+0x2a>
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a48:	b25b      	sxtb	r3, r3
 8010a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4e:	d103      	bne.n	8010a58 <vQueueWaitForMessageRestricted+0x40>
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a58:	f001 ff8c 	bl	8012974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d106      	bne.n	8010a72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	3324      	adds	r3, #36	; 0x24
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	68b9      	ldr	r1, [r7, #8]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 fd67 	bl	8011540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a72:	6978      	ldr	r0, [r7, #20]
 8010a74:	f7ff fefb 	bl	801086e <prvUnlockQueue>
	}
 8010a78:	bf00      	nop
 8010a7a:	3718      	adds	r7, #24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b08e      	sub	sp, #56	; 0x38
 8010a84:	af04      	add	r7, sp, #16
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10a      	bne.n	8010aaa <xTaskCreateStatic+0x2a>
	__asm volatile
 8010a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a98:	f383 8811 	msr	BASEPRI, r3
 8010a9c:	f3bf 8f6f 	isb	sy
 8010aa0:	f3bf 8f4f 	dsb	sy
 8010aa4:	623b      	str	r3, [r7, #32]
}
 8010aa6:	bf00      	nop
 8010aa8:	e7fe      	b.n	8010aa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d10a      	bne.n	8010ac6 <xTaskCreateStatic+0x46>
	__asm volatile
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	61fb      	str	r3, [r7, #28]
}
 8010ac2:	bf00      	nop
 8010ac4:	e7fe      	b.n	8010ac4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010ac6:	23bc      	movs	r3, #188	; 0xbc
 8010ac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	2bbc      	cmp	r3, #188	; 0xbc
 8010ace:	d00a      	beq.n	8010ae6 <xTaskCreateStatic+0x66>
	__asm volatile
 8010ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad4:	f383 8811 	msr	BASEPRI, r3
 8010ad8:	f3bf 8f6f 	isb	sy
 8010adc:	f3bf 8f4f 	dsb	sy
 8010ae0:	61bb      	str	r3, [r7, #24]
}
 8010ae2:	bf00      	nop
 8010ae4:	e7fe      	b.n	8010ae4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010ae6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d01e      	beq.n	8010b2c <xTaskCreateStatic+0xac>
 8010aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d01b      	beq.n	8010b2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010afc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b00:	2202      	movs	r2, #2
 8010b02:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b06:	2300      	movs	r3, #0
 8010b08:	9303      	str	r3, [sp, #12]
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0c:	9302      	str	r3, [sp, #8]
 8010b0e:	f107 0314 	add.w	r3, r7, #20
 8010b12:	9301      	str	r3, [sp, #4]
 8010b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b16:	9300      	str	r3, [sp, #0]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	68b9      	ldr	r1, [r7, #8]
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f000 f850 	bl	8010bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b26:	f000 f8f3 	bl	8010d10 <prvAddNewTaskToReadyList>
 8010b2a:	e001      	b.n	8010b30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010b30:	697b      	ldr	r3, [r7, #20]
	}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3728      	adds	r7, #40	; 0x28
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b08c      	sub	sp, #48	; 0x30
 8010b3e:	af04      	add	r7, sp, #16
 8010b40:	60f8      	str	r0, [r7, #12]
 8010b42:	60b9      	str	r1, [r7, #8]
 8010b44:	603b      	str	r3, [r7, #0]
 8010b46:	4613      	mov	r3, r2
 8010b48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b4a:	88fb      	ldrh	r3, [r7, #6]
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f002 f802 	bl	8012b58 <pvPortMalloc>
 8010b54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00e      	beq.n	8010b7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010b5c:	20bc      	movs	r0, #188	; 0xbc
 8010b5e:	f001 fffb 	bl	8012b58 <pvPortMalloc>
 8010b62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d003      	beq.n	8010b72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	697a      	ldr	r2, [r7, #20]
 8010b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8010b70:	e005      	b.n	8010b7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b72:	6978      	ldr	r0, [r7, #20]
 8010b74:	f002 f8bc 	bl	8012cf0 <vPortFree>
 8010b78:	e001      	b.n	8010b7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d017      	beq.n	8010bb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	2200      	movs	r2, #0
 8010b88:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b8c:	88fa      	ldrh	r2, [r7, #6]
 8010b8e:	2300      	movs	r3, #0
 8010b90:	9303      	str	r3, [sp, #12]
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	9302      	str	r3, [sp, #8]
 8010b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b98:	9301      	str	r3, [sp, #4]
 8010b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	68b9      	ldr	r1, [r7, #8]
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f000 f80e 	bl	8010bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ba8:	69f8      	ldr	r0, [r7, #28]
 8010baa:	f000 f8b1 	bl	8010d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	61bb      	str	r3, [r7, #24]
 8010bb2:	e002      	b.n	8010bba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010bba:	69bb      	ldr	r3, [r7, #24]
	}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3720      	adds	r7, #32
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
 8010bd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	461a      	mov	r2, r3
 8010bdc:	21a5      	movs	r1, #165	; 0xa5
 8010bde:	f00c fc67 	bl	801d4b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010be6:	6879      	ldr	r1, [r7, #4]
 8010be8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010bec:	440b      	add	r3, r1
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	4413      	add	r3, r2
 8010bf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	f023 0307 	bic.w	r3, r3, #7
 8010bfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	f003 0307 	and.w	r3, r3, #7
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d00a      	beq.n	8010c1c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0a:	f383 8811 	msr	BASEPRI, r3
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	f3bf 8f4f 	dsb	sy
 8010c16:	617b      	str	r3, [r7, #20]
}
 8010c18:	bf00      	nop
 8010c1a:	e7fe      	b.n	8010c1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d01f      	beq.n	8010c62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c22:	2300      	movs	r3, #0
 8010c24:	61fb      	str	r3, [r7, #28]
 8010c26:	e012      	b.n	8010c4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c28:	68ba      	ldr	r2, [r7, #8]
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	7819      	ldrb	r1, [r3, #0]
 8010c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	4413      	add	r3, r2
 8010c36:	3334      	adds	r3, #52	; 0x34
 8010c38:	460a      	mov	r2, r1
 8010c3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010c3c:	68ba      	ldr	r2, [r7, #8]
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	4413      	add	r3, r2
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d006      	beq.n	8010c56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	61fb      	str	r3, [r7, #28]
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	2b0f      	cmp	r3, #15
 8010c52:	d9e9      	bls.n	8010c28 <prvInitialiseNewTask+0x64>
 8010c54:	e000      	b.n	8010c58 <prvInitialiseNewTask+0x94>
			{
				break;
 8010c56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c60:	e003      	b.n	8010c6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	2200      	movs	r2, #0
 8010c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6c:	2b37      	cmp	r3, #55	; 0x37
 8010c6e:	d901      	bls.n	8010c74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c70:	2337      	movs	r3, #55	; 0x37
 8010c72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c82:	2200      	movs	r2, #0
 8010c84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c88:	3304      	adds	r3, #4
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fe fda0 	bl	800f7d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c92:	3318      	adds	r3, #24
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fe fd9b 	bl	800f7d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cba:	2200      	movs	r2, #0
 8010cbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc2:	3354      	adds	r3, #84	; 0x54
 8010cc4:	2260      	movs	r2, #96	; 0x60
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f00c fbf1 	bl	801d4b0 <memset>
 8010cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd0:	4a0c      	ldr	r2, [pc, #48]	; (8010d04 <prvInitialiseNewTask+0x140>)
 8010cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8010cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd6:	4a0c      	ldr	r2, [pc, #48]	; (8010d08 <prvInitialiseNewTask+0x144>)
 8010cd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8010cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cdc:	4a0b      	ldr	r2, [pc, #44]	; (8010d0c <prvInitialiseNewTask+0x148>)
 8010cde:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ce0:	683a      	ldr	r2, [r7, #0]
 8010ce2:	68f9      	ldr	r1, [r7, #12]
 8010ce4:	69b8      	ldr	r0, [r7, #24]
 8010ce6:	f001 fce5 	bl	80126b4 <pxPortInitialiseStack>
 8010cea:	4602      	mov	r2, r0
 8010cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d002      	beq.n	8010cfc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cfc:	bf00      	nop
 8010cfe:	3720      	adds	r7, #32
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	08021654 	.word	0x08021654
 8010d08:	08021674 	.word	0x08021674
 8010d0c:	08021634 	.word	0x08021634

08010d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d18:	f001 fdfc 	bl	8012914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d1c:	4b2d      	ldr	r3, [pc, #180]	; (8010dd4 <prvAddNewTaskToReadyList+0xc4>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	3301      	adds	r3, #1
 8010d22:	4a2c      	ldr	r2, [pc, #176]	; (8010dd4 <prvAddNewTaskToReadyList+0xc4>)
 8010d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010d26:	4b2c      	ldr	r3, [pc, #176]	; (8010dd8 <prvAddNewTaskToReadyList+0xc8>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d109      	bne.n	8010d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d2e:	4a2a      	ldr	r2, [pc, #168]	; (8010dd8 <prvAddNewTaskToReadyList+0xc8>)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010d34:	4b27      	ldr	r3, [pc, #156]	; (8010dd4 <prvAddNewTaskToReadyList+0xc4>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d110      	bne.n	8010d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010d3c:	f000 fd2c 	bl	8011798 <prvInitialiseTaskLists>
 8010d40:	e00d      	b.n	8010d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010d42:	4b26      	ldr	r3, [pc, #152]	; (8010ddc <prvAddNewTaskToReadyList+0xcc>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d109      	bne.n	8010d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d4a:	4b23      	ldr	r3, [pc, #140]	; (8010dd8 <prvAddNewTaskToReadyList+0xc8>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d802      	bhi.n	8010d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d58:	4a1f      	ldr	r2, [pc, #124]	; (8010dd8 <prvAddNewTaskToReadyList+0xc8>)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d5e:	4b20      	ldr	r3, [pc, #128]	; (8010de0 <prvAddNewTaskToReadyList+0xd0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	3301      	adds	r3, #1
 8010d64:	4a1e      	ldr	r2, [pc, #120]	; (8010de0 <prvAddNewTaskToReadyList+0xd0>)
 8010d66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d68:	4b1d      	ldr	r3, [pc, #116]	; (8010de0 <prvAddNewTaskToReadyList+0xd0>)
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d74:	4b1b      	ldr	r3, [pc, #108]	; (8010de4 <prvAddNewTaskToReadyList+0xd4>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d903      	bls.n	8010d84 <prvAddNewTaskToReadyList+0x74>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d80:	4a18      	ldr	r2, [pc, #96]	; (8010de4 <prvAddNewTaskToReadyList+0xd4>)
 8010d82:	6013      	str	r3, [r2, #0]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d88:	4613      	mov	r3, r2
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4413      	add	r3, r2
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	4a15      	ldr	r2, [pc, #84]	; (8010de8 <prvAddNewTaskToReadyList+0xd8>)
 8010d92:	441a      	add	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	3304      	adds	r3, #4
 8010d98:	4619      	mov	r1, r3
 8010d9a:	4610      	mov	r0, r2
 8010d9c:	f7fe fd25 	bl	800f7ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010da0:	f001 fde8 	bl	8012974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010da4:	4b0d      	ldr	r3, [pc, #52]	; (8010ddc <prvAddNewTaskToReadyList+0xcc>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00e      	beq.n	8010dca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010dac:	4b0a      	ldr	r3, [pc, #40]	; (8010dd8 <prvAddNewTaskToReadyList+0xc8>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d207      	bcs.n	8010dca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010dba:	4b0c      	ldr	r3, [pc, #48]	; (8010dec <prvAddNewTaskToReadyList+0xdc>)
 8010dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dc0:	601a      	str	r2, [r3, #0]
 8010dc2:	f3bf 8f4f 	dsb	sy
 8010dc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010dca:	bf00      	nop
 8010dcc:	3708      	adds	r7, #8
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	24002628 	.word	0x24002628
 8010dd8:	24002154 	.word	0x24002154
 8010ddc:	24002634 	.word	0x24002634
 8010de0:	24002644 	.word	0x24002644
 8010de4:	24002630 	.word	0x24002630
 8010de8:	24002158 	.word	0x24002158
 8010dec:	e000ed04 	.word	0xe000ed04

08010df0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d017      	beq.n	8010e32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010e02:	4b13      	ldr	r3, [pc, #76]	; (8010e50 <vTaskDelay+0x60>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00a      	beq.n	8010e20 <vTaskDelay+0x30>
	__asm volatile
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	60bb      	str	r3, [r7, #8]
}
 8010e1c:	bf00      	nop
 8010e1e:	e7fe      	b.n	8010e1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010e20:	f000 f8f0 	bl	8011004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010e24:	2100      	movs	r1, #0
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f001 f8a2 	bl	8011f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010e2c:	f000 f8f8 	bl	8011020 <xTaskResumeAll>
 8010e30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d107      	bne.n	8010e48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010e38:	4b06      	ldr	r3, [pc, #24]	; (8010e54 <vTaskDelay+0x64>)
 8010e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e3e:	601a      	str	r2, [r3, #0]
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e48:	bf00      	nop
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	24002650 	.word	0x24002650
 8010e54:	e000ed04 	.word	0xe000ed04

08010e58 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b088      	sub	sp, #32
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d10a      	bne.n	8010e80 <eTaskGetState+0x28>
	__asm volatile
 8010e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e6e:	f383 8811 	msr	BASEPRI, r3
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	f3bf 8f4f 	dsb	sy
 8010e7a:	60bb      	str	r3, [r7, #8]
}
 8010e7c:	bf00      	nop
 8010e7e:	e7fe      	b.n	8010e7e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8010e80:	4b23      	ldr	r3, [pc, #140]	; (8010f10 <eTaskGetState+0xb8>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	69ba      	ldr	r2, [r7, #24]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d102      	bne.n	8010e90 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	77fb      	strb	r3, [r7, #31]
 8010e8e:	e03a      	b.n	8010f06 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8010e90:	f001 fd40 	bl	8012914 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	695b      	ldr	r3, [r3, #20]
 8010e98:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8010e9a:	4b1e      	ldr	r3, [pc, #120]	; (8010f14 <eTaskGetState+0xbc>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8010ea0:	4b1d      	ldr	r3, [pc, #116]	; (8010f18 <eTaskGetState+0xc0>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8010ea6:	f001 fd65 	bl	8012974 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8010eaa:	697a      	ldr	r2, [r7, #20]
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d003      	beq.n	8010eba <eTaskGetState+0x62>
 8010eb2:	697a      	ldr	r2, [r7, #20]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d102      	bne.n	8010ec0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8010eba:	2302      	movs	r3, #2
 8010ebc:	77fb      	strb	r3, [r7, #31]
 8010ebe:	e022      	b.n	8010f06 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	4a16      	ldr	r2, [pc, #88]	; (8010f1c <eTaskGetState+0xc4>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d112      	bne.n	8010eee <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d10b      	bne.n	8010ee8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d102      	bne.n	8010ee2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8010edc:	2302      	movs	r3, #2
 8010ede:	77fb      	strb	r3, [r7, #31]
 8010ee0:	e011      	b.n	8010f06 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8010ee2:	2303      	movs	r3, #3
 8010ee4:	77fb      	strb	r3, [r7, #31]
 8010ee6:	e00e      	b.n	8010f06 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8010ee8:	2302      	movs	r3, #2
 8010eea:	77fb      	strb	r3, [r7, #31]
 8010eec:	e00b      	b.n	8010f06 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	4a0b      	ldr	r2, [pc, #44]	; (8010f20 <eTaskGetState+0xc8>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d002      	beq.n	8010efc <eTaskGetState+0xa4>
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d102      	bne.n	8010f02 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8010efc:	2304      	movs	r3, #4
 8010efe:	77fb      	strb	r3, [r7, #31]
 8010f00:	e001      	b.n	8010f06 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8010f02:	2301      	movs	r3, #1
 8010f04:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8010f06:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3720      	adds	r7, #32
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	24002154 	.word	0x24002154
 8010f14:	240025e0 	.word	0x240025e0
 8010f18:	240025e4 	.word	0x240025e4
 8010f1c:	24002614 	.word	0x24002614
 8010f20:	240025fc 	.word	0x240025fc

08010f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b08a      	sub	sp, #40	; 0x28
 8010f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010f32:	463a      	mov	r2, r7
 8010f34:	1d39      	adds	r1, r7, #4
 8010f36:	f107 0308 	add.w	r3, r7, #8
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fe fbf4 	bl	800f728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010f40:	6839      	ldr	r1, [r7, #0]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	68ba      	ldr	r2, [r7, #8]
 8010f46:	9202      	str	r2, [sp, #8]
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	2300      	movs	r3, #0
 8010f50:	460a      	mov	r2, r1
 8010f52:	4924      	ldr	r1, [pc, #144]	; (8010fe4 <vTaskStartScheduler+0xc0>)
 8010f54:	4824      	ldr	r0, [pc, #144]	; (8010fe8 <vTaskStartScheduler+0xc4>)
 8010f56:	f7ff fd93 	bl	8010a80 <xTaskCreateStatic>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	4a23      	ldr	r2, [pc, #140]	; (8010fec <vTaskStartScheduler+0xc8>)
 8010f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010f60:	4b22      	ldr	r3, [pc, #136]	; (8010fec <vTaskStartScheduler+0xc8>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d002      	beq.n	8010f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	617b      	str	r3, [r7, #20]
 8010f6c:	e001      	b.n	8010f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d102      	bne.n	8010f7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010f78:	f001 f84e 	bl	8012018 <xTimerCreateTimerTask>
 8010f7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d11b      	bne.n	8010fbc <vTaskStartScheduler+0x98>
	__asm volatile
 8010f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f88:	f383 8811 	msr	BASEPRI, r3
 8010f8c:	f3bf 8f6f 	isb	sy
 8010f90:	f3bf 8f4f 	dsb	sy
 8010f94:	613b      	str	r3, [r7, #16]
}
 8010f96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f98:	4b15      	ldr	r3, [pc, #84]	; (8010ff0 <vTaskStartScheduler+0xcc>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	3354      	adds	r3, #84	; 0x54
 8010f9e:	4a15      	ldr	r2, [pc, #84]	; (8010ff4 <vTaskStartScheduler+0xd0>)
 8010fa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010fa2:	4b15      	ldr	r3, [pc, #84]	; (8010ff8 <vTaskStartScheduler+0xd4>)
 8010fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010faa:	4b14      	ldr	r3, [pc, #80]	; (8010ffc <vTaskStartScheduler+0xd8>)
 8010fac:	2201      	movs	r2, #1
 8010fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010fb0:	4b13      	ldr	r3, [pc, #76]	; (8011000 <vTaskStartScheduler+0xdc>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010fb6:	f001 fc0b 	bl	80127d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010fba:	e00e      	b.n	8010fda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc2:	d10a      	bne.n	8010fda <vTaskStartScheduler+0xb6>
	__asm volatile
 8010fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	60fb      	str	r3, [r7, #12]
}
 8010fd6:	bf00      	nop
 8010fd8:	e7fe      	b.n	8010fd8 <vTaskStartScheduler+0xb4>
}
 8010fda:	bf00      	nop
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	0801e9e8 	.word	0x0801e9e8
 8010fe8:	08011769 	.word	0x08011769
 8010fec:	2400264c 	.word	0x2400264c
 8010ff0:	24002154 	.word	0x24002154
 8010ff4:	24000074 	.word	0x24000074
 8010ff8:	24002648 	.word	0x24002648
 8010ffc:	24002634 	.word	0x24002634
 8011000:	2400262c 	.word	0x2400262c

08011004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011004:	b480      	push	{r7}
 8011006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011008:	4b04      	ldr	r3, [pc, #16]	; (801101c <vTaskSuspendAll+0x18>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3301      	adds	r3, #1
 801100e:	4a03      	ldr	r2, [pc, #12]	; (801101c <vTaskSuspendAll+0x18>)
 8011010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011012:	bf00      	nop
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	24002650 	.word	0x24002650

08011020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801102a:	2300      	movs	r3, #0
 801102c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801102e:	4b42      	ldr	r3, [pc, #264]	; (8011138 <xTaskResumeAll+0x118>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d10a      	bne.n	801104c <xTaskResumeAll+0x2c>
	__asm volatile
 8011036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103a:	f383 8811 	msr	BASEPRI, r3
 801103e:	f3bf 8f6f 	isb	sy
 8011042:	f3bf 8f4f 	dsb	sy
 8011046:	603b      	str	r3, [r7, #0]
}
 8011048:	bf00      	nop
 801104a:	e7fe      	b.n	801104a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801104c:	f001 fc62 	bl	8012914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011050:	4b39      	ldr	r3, [pc, #228]	; (8011138 <xTaskResumeAll+0x118>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	3b01      	subs	r3, #1
 8011056:	4a38      	ldr	r2, [pc, #224]	; (8011138 <xTaskResumeAll+0x118>)
 8011058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801105a:	4b37      	ldr	r3, [pc, #220]	; (8011138 <xTaskResumeAll+0x118>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d162      	bne.n	8011128 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011062:	4b36      	ldr	r3, [pc, #216]	; (801113c <xTaskResumeAll+0x11c>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d05e      	beq.n	8011128 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801106a:	e02f      	b.n	80110cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801106c:	4b34      	ldr	r3, [pc, #208]	; (8011140 <xTaskResumeAll+0x120>)
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	68db      	ldr	r3, [r3, #12]
 8011072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	3318      	adds	r3, #24
 8011078:	4618      	mov	r0, r3
 801107a:	f7fe fc13 	bl	800f8a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	3304      	adds	r3, #4
 8011082:	4618      	mov	r0, r3
 8011084:	f7fe fc0e 	bl	800f8a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801108c:	4b2d      	ldr	r3, [pc, #180]	; (8011144 <xTaskResumeAll+0x124>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	429a      	cmp	r2, r3
 8011092:	d903      	bls.n	801109c <xTaskResumeAll+0x7c>
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011098:	4a2a      	ldr	r2, [pc, #168]	; (8011144 <xTaskResumeAll+0x124>)
 801109a:	6013      	str	r3, [r2, #0]
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a0:	4613      	mov	r3, r2
 80110a2:	009b      	lsls	r3, r3, #2
 80110a4:	4413      	add	r3, r2
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	4a27      	ldr	r2, [pc, #156]	; (8011148 <xTaskResumeAll+0x128>)
 80110aa:	441a      	add	r2, r3
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	3304      	adds	r3, #4
 80110b0:	4619      	mov	r1, r3
 80110b2:	4610      	mov	r0, r2
 80110b4:	f7fe fb99 	bl	800f7ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110bc:	4b23      	ldr	r3, [pc, #140]	; (801114c <xTaskResumeAll+0x12c>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d302      	bcc.n	80110cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80110c6:	4b22      	ldr	r3, [pc, #136]	; (8011150 <xTaskResumeAll+0x130>)
 80110c8:	2201      	movs	r2, #1
 80110ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80110cc:	4b1c      	ldr	r3, [pc, #112]	; (8011140 <xTaskResumeAll+0x120>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d1cb      	bne.n	801106c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80110da:	f000 fcd3 	bl	8011a84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80110de:	4b1d      	ldr	r3, [pc, #116]	; (8011154 <xTaskResumeAll+0x134>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d010      	beq.n	801110c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80110ea:	f000 f8e7 	bl	80112bc <xTaskIncrementTick>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d002      	beq.n	80110fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80110f4:	4b16      	ldr	r3, [pc, #88]	; (8011150 <xTaskResumeAll+0x130>)
 80110f6:	2201      	movs	r2, #1
 80110f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3b01      	subs	r3, #1
 80110fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1f1      	bne.n	80110ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011106:	4b13      	ldr	r3, [pc, #76]	; (8011154 <xTaskResumeAll+0x134>)
 8011108:	2200      	movs	r2, #0
 801110a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801110c:	4b10      	ldr	r3, [pc, #64]	; (8011150 <xTaskResumeAll+0x130>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d009      	beq.n	8011128 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011114:	2301      	movs	r3, #1
 8011116:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011118:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <xTaskResumeAll+0x138>)
 801111a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801111e:	601a      	str	r2, [r3, #0]
 8011120:	f3bf 8f4f 	dsb	sy
 8011124:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011128:	f001 fc24 	bl	8012974 <vPortExitCritical>

	return xAlreadyYielded;
 801112c:	68bb      	ldr	r3, [r7, #8]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	24002650 	.word	0x24002650
 801113c:	24002628 	.word	0x24002628
 8011140:	240025e8 	.word	0x240025e8
 8011144:	24002630 	.word	0x24002630
 8011148:	24002158 	.word	0x24002158
 801114c:	24002154 	.word	0x24002154
 8011150:	2400263c 	.word	0x2400263c
 8011154:	24002638 	.word	0x24002638
 8011158:	e000ed04 	.word	0xe000ed04

0801115c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801115c:	b480      	push	{r7}
 801115e:	b083      	sub	sp, #12
 8011160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011162:	4b05      	ldr	r3, [pc, #20]	; (8011178 <xTaskGetTickCount+0x1c>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011168:	687b      	ldr	r3, [r7, #4]
}
 801116a:	4618      	mov	r0, r3
 801116c:	370c      	adds	r7, #12
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop
 8011178:	2400262c 	.word	0x2400262c

0801117c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011182:	f001 fca9 	bl	8012ad8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011186:	2300      	movs	r3, #0
 8011188:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801118a:	4b04      	ldr	r3, [pc, #16]	; (801119c <xTaskGetTickCountFromISR+0x20>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011190:	683b      	ldr	r3, [r7, #0]
}
 8011192:	4618      	mov	r0, r3
 8011194:	3708      	adds	r7, #8
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	2400262c 	.word	0x2400262c

080111a0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b086      	sub	sp, #24
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80111ac:	2300      	movs	r3, #0
 80111ae:	617b      	str	r3, [r7, #20]
 80111b0:	2338      	movs	r3, #56	; 0x38
 80111b2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80111b4:	f7ff ff26 	bl	8011004 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80111b8:	4b3a      	ldr	r3, [pc, #232]	; (80112a4 <uxTaskGetSystemState+0x104>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	68ba      	ldr	r2, [r7, #8]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d368      	bcc.n	8011294 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80111c8:	697a      	ldr	r2, [r7, #20]
 80111ca:	4613      	mov	r3, r2
 80111cc:	00db      	lsls	r3, r3, #3
 80111ce:	4413      	add	r3, r2
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	461a      	mov	r2, r3
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	1898      	adds	r0, r3, r2
 80111d8:	693a      	ldr	r2, [r7, #16]
 80111da:	4613      	mov	r3, r2
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	4413      	add	r3, r2
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	4a31      	ldr	r2, [pc, #196]	; (80112a8 <uxTaskGetSystemState+0x108>)
 80111e4:	4413      	add	r3, r2
 80111e6:	2201      	movs	r2, #1
 80111e8:	4619      	mov	r1, r3
 80111ea:	f000 fba9 	bl	8011940 <prvListTasksWithinSingleList>
 80111ee:	4602      	mov	r2, r0
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	4413      	add	r3, r2
 80111f4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d1e2      	bne.n	80111c2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	4613      	mov	r3, r2
 8011200:	00db      	lsls	r3, r3, #3
 8011202:	4413      	add	r3, r2
 8011204:	009b      	lsls	r3, r3, #2
 8011206:	461a      	mov	r2, r3
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	4413      	add	r3, r2
 801120c:	4a27      	ldr	r2, [pc, #156]	; (80112ac <uxTaskGetSystemState+0x10c>)
 801120e:	6811      	ldr	r1, [r2, #0]
 8011210:	2202      	movs	r2, #2
 8011212:	4618      	mov	r0, r3
 8011214:	f000 fb94 	bl	8011940 <prvListTasksWithinSingleList>
 8011218:	4602      	mov	r2, r0
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	4413      	add	r3, r2
 801121e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	4613      	mov	r3, r2
 8011224:	00db      	lsls	r3, r3, #3
 8011226:	4413      	add	r3, r2
 8011228:	009b      	lsls	r3, r3, #2
 801122a:	461a      	mov	r2, r3
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	4413      	add	r3, r2
 8011230:	4a1f      	ldr	r2, [pc, #124]	; (80112b0 <uxTaskGetSystemState+0x110>)
 8011232:	6811      	ldr	r1, [r2, #0]
 8011234:	2202      	movs	r2, #2
 8011236:	4618      	mov	r0, r3
 8011238:	f000 fb82 	bl	8011940 <prvListTasksWithinSingleList>
 801123c:	4602      	mov	r2, r0
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	4413      	add	r3, r2
 8011242:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8011244:	697a      	ldr	r2, [r7, #20]
 8011246:	4613      	mov	r3, r2
 8011248:	00db      	lsls	r3, r3, #3
 801124a:	4413      	add	r3, r2
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	461a      	mov	r2, r3
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	4413      	add	r3, r2
 8011254:	2204      	movs	r2, #4
 8011256:	4917      	ldr	r1, [pc, #92]	; (80112b4 <uxTaskGetSystemState+0x114>)
 8011258:	4618      	mov	r0, r3
 801125a:	f000 fb71 	bl	8011940 <prvListTasksWithinSingleList>
 801125e:	4602      	mov	r2, r0
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	4413      	add	r3, r2
 8011264:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8011266:	697a      	ldr	r2, [r7, #20]
 8011268:	4613      	mov	r3, r2
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	4413      	add	r3, r2
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	461a      	mov	r2, r3
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	4413      	add	r3, r2
 8011276:	2203      	movs	r2, #3
 8011278:	490f      	ldr	r1, [pc, #60]	; (80112b8 <uxTaskGetSystemState+0x118>)
 801127a:	4618      	mov	r0, r3
 801127c:	f000 fb60 	bl	8011940 <prvListTasksWithinSingleList>
 8011280:	4602      	mov	r2, r0
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	4413      	add	r3, r2
 8011286:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d002      	beq.n	8011294 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2200      	movs	r2, #0
 8011292:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8011294:	f7ff fec4 	bl	8011020 <xTaskResumeAll>

		return uxTask;
 8011298:	697b      	ldr	r3, [r7, #20]
	}
 801129a:	4618      	mov	r0, r3
 801129c:	3718      	adds	r7, #24
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	24002628 	.word	0x24002628
 80112a8:	24002158 	.word	0x24002158
 80112ac:	240025e0 	.word	0x240025e0
 80112b0:	240025e4 	.word	0x240025e4
 80112b4:	240025fc 	.word	0x240025fc
 80112b8:	24002614 	.word	0x24002614

080112bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80112c2:	2300      	movs	r3, #0
 80112c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112c6:	4b4f      	ldr	r3, [pc, #316]	; (8011404 <xTaskIncrementTick+0x148>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f040 808f 	bne.w	80113ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80112d0:	4b4d      	ldr	r3, [pc, #308]	; (8011408 <xTaskIncrementTick+0x14c>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	3301      	adds	r3, #1
 80112d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112d8:	4a4b      	ldr	r2, [pc, #300]	; (8011408 <xTaskIncrementTick+0x14c>)
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d120      	bne.n	8011326 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80112e4:	4b49      	ldr	r3, [pc, #292]	; (801140c <xTaskIncrementTick+0x150>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d00a      	beq.n	8011304 <xTaskIncrementTick+0x48>
	__asm volatile
 80112ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f2:	f383 8811 	msr	BASEPRI, r3
 80112f6:	f3bf 8f6f 	isb	sy
 80112fa:	f3bf 8f4f 	dsb	sy
 80112fe:	603b      	str	r3, [r7, #0]
}
 8011300:	bf00      	nop
 8011302:	e7fe      	b.n	8011302 <xTaskIncrementTick+0x46>
 8011304:	4b41      	ldr	r3, [pc, #260]	; (801140c <xTaskIncrementTick+0x150>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	60fb      	str	r3, [r7, #12]
 801130a:	4b41      	ldr	r3, [pc, #260]	; (8011410 <xTaskIncrementTick+0x154>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4a3f      	ldr	r2, [pc, #252]	; (801140c <xTaskIncrementTick+0x150>)
 8011310:	6013      	str	r3, [r2, #0]
 8011312:	4a3f      	ldr	r2, [pc, #252]	; (8011410 <xTaskIncrementTick+0x154>)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	6013      	str	r3, [r2, #0]
 8011318:	4b3e      	ldr	r3, [pc, #248]	; (8011414 <xTaskIncrementTick+0x158>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	3301      	adds	r3, #1
 801131e:	4a3d      	ldr	r2, [pc, #244]	; (8011414 <xTaskIncrementTick+0x158>)
 8011320:	6013      	str	r3, [r2, #0]
 8011322:	f000 fbaf 	bl	8011a84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011326:	4b3c      	ldr	r3, [pc, #240]	; (8011418 <xTaskIncrementTick+0x15c>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	693a      	ldr	r2, [r7, #16]
 801132c:	429a      	cmp	r2, r3
 801132e:	d349      	bcc.n	80113c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011330:	4b36      	ldr	r3, [pc, #216]	; (801140c <xTaskIncrementTick+0x150>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d104      	bne.n	8011344 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801133a:	4b37      	ldr	r3, [pc, #220]	; (8011418 <xTaskIncrementTick+0x15c>)
 801133c:	f04f 32ff 	mov.w	r2, #4294967295
 8011340:	601a      	str	r2, [r3, #0]
					break;
 8011342:	e03f      	b.n	80113c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011344:	4b31      	ldr	r3, [pc, #196]	; (801140c <xTaskIncrementTick+0x150>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011354:	693a      	ldr	r2, [r7, #16]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	429a      	cmp	r2, r3
 801135a:	d203      	bcs.n	8011364 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801135c:	4a2e      	ldr	r2, [pc, #184]	; (8011418 <xTaskIncrementTick+0x15c>)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011362:	e02f      	b.n	80113c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	3304      	adds	r3, #4
 8011368:	4618      	mov	r0, r3
 801136a:	f7fe fa9b 	bl	800f8a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011372:	2b00      	cmp	r3, #0
 8011374:	d004      	beq.n	8011380 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3318      	adds	r3, #24
 801137a:	4618      	mov	r0, r3
 801137c:	f7fe fa92 	bl	800f8a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011384:	4b25      	ldr	r3, [pc, #148]	; (801141c <xTaskIncrementTick+0x160>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	429a      	cmp	r2, r3
 801138a:	d903      	bls.n	8011394 <xTaskIncrementTick+0xd8>
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011390:	4a22      	ldr	r2, [pc, #136]	; (801141c <xTaskIncrementTick+0x160>)
 8011392:	6013      	str	r3, [r2, #0]
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011398:	4613      	mov	r3, r2
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	4413      	add	r3, r2
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	4a1f      	ldr	r2, [pc, #124]	; (8011420 <xTaskIncrementTick+0x164>)
 80113a2:	441a      	add	r2, r3
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	3304      	adds	r3, #4
 80113a8:	4619      	mov	r1, r3
 80113aa:	4610      	mov	r0, r2
 80113ac:	f7fe fa1d 	bl	800f7ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b4:	4b1b      	ldr	r3, [pc, #108]	; (8011424 <xTaskIncrementTick+0x168>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d3b8      	bcc.n	8011330 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80113be:	2301      	movs	r3, #1
 80113c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113c2:	e7b5      	b.n	8011330 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80113c4:	4b17      	ldr	r3, [pc, #92]	; (8011424 <xTaskIncrementTick+0x168>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ca:	4915      	ldr	r1, [pc, #84]	; (8011420 <xTaskIncrementTick+0x164>)
 80113cc:	4613      	mov	r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4413      	add	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	440b      	add	r3, r1
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d901      	bls.n	80113e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80113dc:	2301      	movs	r3, #1
 80113de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80113e0:	4b11      	ldr	r3, [pc, #68]	; (8011428 <xTaskIncrementTick+0x16c>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d007      	beq.n	80113f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80113e8:	2301      	movs	r3, #1
 80113ea:	617b      	str	r3, [r7, #20]
 80113ec:	e004      	b.n	80113f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80113ee:	4b0f      	ldr	r3, [pc, #60]	; (801142c <xTaskIncrementTick+0x170>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	3301      	adds	r3, #1
 80113f4:	4a0d      	ldr	r2, [pc, #52]	; (801142c <xTaskIncrementTick+0x170>)
 80113f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113f8:	697b      	ldr	r3, [r7, #20]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3718      	adds	r7, #24
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	24002650 	.word	0x24002650
 8011408:	2400262c 	.word	0x2400262c
 801140c:	240025e0 	.word	0x240025e0
 8011410:	240025e4 	.word	0x240025e4
 8011414:	24002640 	.word	0x24002640
 8011418:	24002648 	.word	0x24002648
 801141c:	24002630 	.word	0x24002630
 8011420:	24002158 	.word	0x24002158
 8011424:	24002154 	.word	0x24002154
 8011428:	2400263c 	.word	0x2400263c
 801142c:	24002638 	.word	0x24002638

08011430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011430:	b480      	push	{r7}
 8011432:	b085      	sub	sp, #20
 8011434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011436:	4b2a      	ldr	r3, [pc, #168]	; (80114e0 <vTaskSwitchContext+0xb0>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d003      	beq.n	8011446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801143e:	4b29      	ldr	r3, [pc, #164]	; (80114e4 <vTaskSwitchContext+0xb4>)
 8011440:	2201      	movs	r2, #1
 8011442:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011444:	e046      	b.n	80114d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011446:	4b27      	ldr	r3, [pc, #156]	; (80114e4 <vTaskSwitchContext+0xb4>)
 8011448:	2200      	movs	r2, #0
 801144a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801144c:	4b26      	ldr	r3, [pc, #152]	; (80114e8 <vTaskSwitchContext+0xb8>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	60fb      	str	r3, [r7, #12]
 8011452:	e010      	b.n	8011476 <vTaskSwitchContext+0x46>
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d10a      	bne.n	8011470 <vTaskSwitchContext+0x40>
	__asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	607b      	str	r3, [r7, #4]
}
 801146c:	bf00      	nop
 801146e:	e7fe      	b.n	801146e <vTaskSwitchContext+0x3e>
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	3b01      	subs	r3, #1
 8011474:	60fb      	str	r3, [r7, #12]
 8011476:	491d      	ldr	r1, [pc, #116]	; (80114ec <vTaskSwitchContext+0xbc>)
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	4613      	mov	r3, r2
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	4413      	add	r3, r2
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	440b      	add	r3, r1
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d0e4      	beq.n	8011454 <vTaskSwitchContext+0x24>
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	4613      	mov	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4413      	add	r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4a15      	ldr	r2, [pc, #84]	; (80114ec <vTaskSwitchContext+0xbc>)
 8011496:	4413      	add	r3, r2
 8011498:	60bb      	str	r3, [r7, #8]
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	685a      	ldr	r2, [r3, #4]
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	605a      	str	r2, [r3, #4]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	685a      	ldr	r2, [r3, #4]
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	3308      	adds	r3, #8
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d104      	bne.n	80114ba <vTaskSwitchContext+0x8a>
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	685a      	ldr	r2, [r3, #4]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	605a      	str	r2, [r3, #4]
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	4a0b      	ldr	r2, [pc, #44]	; (80114f0 <vTaskSwitchContext+0xc0>)
 80114c2:	6013      	str	r3, [r2, #0]
 80114c4:	4a08      	ldr	r2, [pc, #32]	; (80114e8 <vTaskSwitchContext+0xb8>)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114ca:	4b09      	ldr	r3, [pc, #36]	; (80114f0 <vTaskSwitchContext+0xc0>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	3354      	adds	r3, #84	; 0x54
 80114d0:	4a08      	ldr	r2, [pc, #32]	; (80114f4 <vTaskSwitchContext+0xc4>)
 80114d2:	6013      	str	r3, [r2, #0]
}
 80114d4:	bf00      	nop
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr
 80114e0:	24002650 	.word	0x24002650
 80114e4:	2400263c 	.word	0x2400263c
 80114e8:	24002630 	.word	0x24002630
 80114ec:	24002158 	.word	0x24002158
 80114f0:	24002154 	.word	0x24002154
 80114f4:	24000074 	.word	0x24000074

080114f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d10a      	bne.n	801151e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150c:	f383 8811 	msr	BASEPRI, r3
 8011510:	f3bf 8f6f 	isb	sy
 8011514:	f3bf 8f4f 	dsb	sy
 8011518:	60fb      	str	r3, [r7, #12]
}
 801151a:	bf00      	nop
 801151c:	e7fe      	b.n	801151c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801151e:	4b07      	ldr	r3, [pc, #28]	; (801153c <vTaskPlaceOnEventList+0x44>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	3318      	adds	r3, #24
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7fe f983 	bl	800f832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801152c:	2101      	movs	r1, #1
 801152e:	6838      	ldr	r0, [r7, #0]
 8011530:	f000 fd1e 	bl	8011f70 <prvAddCurrentTaskToDelayedList>
}
 8011534:	bf00      	nop
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	24002154 	.word	0x24002154

08011540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011540:	b580      	push	{r7, lr}
 8011542:	b086      	sub	sp, #24
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d10a      	bne.n	8011568 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011556:	f383 8811 	msr	BASEPRI, r3
 801155a:	f3bf 8f6f 	isb	sy
 801155e:	f3bf 8f4f 	dsb	sy
 8011562:	617b      	str	r3, [r7, #20]
}
 8011564:	bf00      	nop
 8011566:	e7fe      	b.n	8011566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011568:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <vTaskPlaceOnEventListRestricted+0x54>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	3318      	adds	r3, #24
 801156e:	4619      	mov	r1, r3
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f7fe f93a 	bl	800f7ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801157c:	f04f 33ff 	mov.w	r3, #4294967295
 8011580:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011582:	6879      	ldr	r1, [r7, #4]
 8011584:	68b8      	ldr	r0, [r7, #8]
 8011586:	f000 fcf3 	bl	8011f70 <prvAddCurrentTaskToDelayedList>
	}
 801158a:	bf00      	nop
 801158c:	3718      	adds	r7, #24
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	24002154 	.word	0x24002154

08011598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b086      	sub	sp, #24
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d10a      	bne.n	80115c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80115ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b2:	f383 8811 	msr	BASEPRI, r3
 80115b6:	f3bf 8f6f 	isb	sy
 80115ba:	f3bf 8f4f 	dsb	sy
 80115be:	60fb      	str	r3, [r7, #12]
}
 80115c0:	bf00      	nop
 80115c2:	e7fe      	b.n	80115c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	3318      	adds	r3, #24
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fe f96b 	bl	800f8a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115ce:	4b1e      	ldr	r3, [pc, #120]	; (8011648 <xTaskRemoveFromEventList+0xb0>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d11d      	bne.n	8011612 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	3304      	adds	r3, #4
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fe f962 	bl	800f8a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e4:	4b19      	ldr	r3, [pc, #100]	; (801164c <xTaskRemoveFromEventList+0xb4>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d903      	bls.n	80115f4 <xTaskRemoveFromEventList+0x5c>
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f0:	4a16      	ldr	r2, [pc, #88]	; (801164c <xTaskRemoveFromEventList+0xb4>)
 80115f2:	6013      	str	r3, [r2, #0]
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f8:	4613      	mov	r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4413      	add	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	4a13      	ldr	r2, [pc, #76]	; (8011650 <xTaskRemoveFromEventList+0xb8>)
 8011602:	441a      	add	r2, r3
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	3304      	adds	r3, #4
 8011608:	4619      	mov	r1, r3
 801160a:	4610      	mov	r0, r2
 801160c:	f7fe f8ed 	bl	800f7ea <vListInsertEnd>
 8011610:	e005      	b.n	801161e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	3318      	adds	r3, #24
 8011616:	4619      	mov	r1, r3
 8011618:	480e      	ldr	r0, [pc, #56]	; (8011654 <xTaskRemoveFromEventList+0xbc>)
 801161a:	f7fe f8e6 	bl	800f7ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011622:	4b0d      	ldr	r3, [pc, #52]	; (8011658 <xTaskRemoveFromEventList+0xc0>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011628:	429a      	cmp	r2, r3
 801162a:	d905      	bls.n	8011638 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801162c:	2301      	movs	r3, #1
 801162e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011630:	4b0a      	ldr	r3, [pc, #40]	; (801165c <xTaskRemoveFromEventList+0xc4>)
 8011632:	2201      	movs	r2, #1
 8011634:	601a      	str	r2, [r3, #0]
 8011636:	e001      	b.n	801163c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011638:	2300      	movs	r3, #0
 801163a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801163c:	697b      	ldr	r3, [r7, #20]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3718      	adds	r7, #24
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	24002650 	.word	0x24002650
 801164c:	24002630 	.word	0x24002630
 8011650:	24002158 	.word	0x24002158
 8011654:	240025e8 	.word	0x240025e8
 8011658:	24002154 	.word	0x24002154
 801165c:	2400263c 	.word	0x2400263c

08011660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011668:	4b06      	ldr	r3, [pc, #24]	; (8011684 <vTaskInternalSetTimeOutState+0x24>)
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011670:	4b05      	ldr	r3, [pc, #20]	; (8011688 <vTaskInternalSetTimeOutState+0x28>)
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	605a      	str	r2, [r3, #4]
}
 8011678:	bf00      	nop
 801167a:	370c      	adds	r7, #12
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr
 8011684:	24002640 	.word	0x24002640
 8011688:	2400262c 	.word	0x2400262c

0801168c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b088      	sub	sp, #32
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d10a      	bne.n	80116b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a0:	f383 8811 	msr	BASEPRI, r3
 80116a4:	f3bf 8f6f 	isb	sy
 80116a8:	f3bf 8f4f 	dsb	sy
 80116ac:	613b      	str	r3, [r7, #16]
}
 80116ae:	bf00      	nop
 80116b0:	e7fe      	b.n	80116b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d10a      	bne.n	80116ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80116b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116bc:	f383 8811 	msr	BASEPRI, r3
 80116c0:	f3bf 8f6f 	isb	sy
 80116c4:	f3bf 8f4f 	dsb	sy
 80116c8:	60fb      	str	r3, [r7, #12]
}
 80116ca:	bf00      	nop
 80116cc:	e7fe      	b.n	80116cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80116ce:	f001 f921 	bl	8012914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80116d2:	4b1d      	ldr	r3, [pc, #116]	; (8011748 <xTaskCheckForTimeOut+0xbc>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	69ba      	ldr	r2, [r7, #24]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ea:	d102      	bne.n	80116f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116ec:	2300      	movs	r3, #0
 80116ee:	61fb      	str	r3, [r7, #28]
 80116f0:	e023      	b.n	801173a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	4b15      	ldr	r3, [pc, #84]	; (801174c <xTaskCheckForTimeOut+0xc0>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d007      	beq.n	801170e <xTaskCheckForTimeOut+0x82>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	69ba      	ldr	r2, [r7, #24]
 8011704:	429a      	cmp	r2, r3
 8011706:	d302      	bcc.n	801170e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011708:	2301      	movs	r3, #1
 801170a:	61fb      	str	r3, [r7, #28]
 801170c:	e015      	b.n	801173a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	429a      	cmp	r2, r3
 8011716:	d20b      	bcs.n	8011730 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	1ad2      	subs	r2, r2, r3
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7ff ff9b 	bl	8011660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801172a:	2300      	movs	r3, #0
 801172c:	61fb      	str	r3, [r7, #28]
 801172e:	e004      	b.n	801173a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011736:	2301      	movs	r3, #1
 8011738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801173a:	f001 f91b 	bl	8012974 <vPortExitCritical>

	return xReturn;
 801173e:	69fb      	ldr	r3, [r7, #28]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3720      	adds	r7, #32
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	2400262c 	.word	0x2400262c
 801174c:	24002640 	.word	0x24002640

08011750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011750:	b480      	push	{r7}
 8011752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011754:	4b03      	ldr	r3, [pc, #12]	; (8011764 <vTaskMissedYield+0x14>)
 8011756:	2201      	movs	r2, #1
 8011758:	601a      	str	r2, [r3, #0]
}
 801175a:	bf00      	nop
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr
 8011764:	2400263c 	.word	0x2400263c

08011768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011770:	f000 f852 	bl	8011818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011774:	4b06      	ldr	r3, [pc, #24]	; (8011790 <prvIdleTask+0x28>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b01      	cmp	r3, #1
 801177a:	d9f9      	bls.n	8011770 <prvIdleTask+0x8>
			{
				taskYIELD();
 801177c:	4b05      	ldr	r3, [pc, #20]	; (8011794 <prvIdleTask+0x2c>)
 801177e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801178c:	e7f0      	b.n	8011770 <prvIdleTask+0x8>
 801178e:	bf00      	nop
 8011790:	24002158 	.word	0x24002158
 8011794:	e000ed04 	.word	0xe000ed04

08011798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801179e:	2300      	movs	r3, #0
 80117a0:	607b      	str	r3, [r7, #4]
 80117a2:	e00c      	b.n	80117be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	4613      	mov	r3, r2
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	4413      	add	r3, r2
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	4a12      	ldr	r2, [pc, #72]	; (80117f8 <prvInitialiseTaskLists+0x60>)
 80117b0:	4413      	add	r3, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fd ffec 	bl	800f790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	3301      	adds	r3, #1
 80117bc:	607b      	str	r3, [r7, #4]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2b37      	cmp	r3, #55	; 0x37
 80117c2:	d9ef      	bls.n	80117a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117c4:	480d      	ldr	r0, [pc, #52]	; (80117fc <prvInitialiseTaskLists+0x64>)
 80117c6:	f7fd ffe3 	bl	800f790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117ca:	480d      	ldr	r0, [pc, #52]	; (8011800 <prvInitialiseTaskLists+0x68>)
 80117cc:	f7fd ffe0 	bl	800f790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117d0:	480c      	ldr	r0, [pc, #48]	; (8011804 <prvInitialiseTaskLists+0x6c>)
 80117d2:	f7fd ffdd 	bl	800f790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117d6:	480c      	ldr	r0, [pc, #48]	; (8011808 <prvInitialiseTaskLists+0x70>)
 80117d8:	f7fd ffda 	bl	800f790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80117dc:	480b      	ldr	r0, [pc, #44]	; (801180c <prvInitialiseTaskLists+0x74>)
 80117de:	f7fd ffd7 	bl	800f790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117e2:	4b0b      	ldr	r3, [pc, #44]	; (8011810 <prvInitialiseTaskLists+0x78>)
 80117e4:	4a05      	ldr	r2, [pc, #20]	; (80117fc <prvInitialiseTaskLists+0x64>)
 80117e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80117e8:	4b0a      	ldr	r3, [pc, #40]	; (8011814 <prvInitialiseTaskLists+0x7c>)
 80117ea:	4a05      	ldr	r2, [pc, #20]	; (8011800 <prvInitialiseTaskLists+0x68>)
 80117ec:	601a      	str	r2, [r3, #0]
}
 80117ee:	bf00      	nop
 80117f0:	3708      	adds	r7, #8
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	24002158 	.word	0x24002158
 80117fc:	240025b8 	.word	0x240025b8
 8011800:	240025cc 	.word	0x240025cc
 8011804:	240025e8 	.word	0x240025e8
 8011808:	240025fc 	.word	0x240025fc
 801180c:	24002614 	.word	0x24002614
 8011810:	240025e0 	.word	0x240025e0
 8011814:	240025e4 	.word	0x240025e4

08011818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801181e:	e019      	b.n	8011854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011820:	f001 f878 	bl	8012914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011824:	4b10      	ldr	r3, [pc, #64]	; (8011868 <prvCheckTasksWaitingTermination+0x50>)
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	3304      	adds	r3, #4
 8011830:	4618      	mov	r0, r3
 8011832:	f7fe f837 	bl	800f8a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011836:	4b0d      	ldr	r3, [pc, #52]	; (801186c <prvCheckTasksWaitingTermination+0x54>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	3b01      	subs	r3, #1
 801183c:	4a0b      	ldr	r2, [pc, #44]	; (801186c <prvCheckTasksWaitingTermination+0x54>)
 801183e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011840:	4b0b      	ldr	r3, [pc, #44]	; (8011870 <prvCheckTasksWaitingTermination+0x58>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	3b01      	subs	r3, #1
 8011846:	4a0a      	ldr	r2, [pc, #40]	; (8011870 <prvCheckTasksWaitingTermination+0x58>)
 8011848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801184a:	f001 f893 	bl	8012974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 f8e4 	bl	8011a1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011854:	4b06      	ldr	r3, [pc, #24]	; (8011870 <prvCheckTasksWaitingTermination+0x58>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d1e1      	bne.n	8011820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801185c:	bf00      	nop
 801185e:	bf00      	nop
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	240025fc 	.word	0x240025fc
 801186c:	24002628 	.word	0x24002628
 8011870:	24002610 	.word	0x24002610

08011874 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8011874:	b580      	push	{r7, lr}
 8011876:	b086      	sub	sp, #24
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	607a      	str	r2, [r7, #4]
 8011880:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d102      	bne.n	801188e <vTaskGetInfo+0x1a>
 8011888:	4b2c      	ldr	r3, [pc, #176]	; (801193c <vTaskGetInfo+0xc8>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	e000      	b.n	8011890 <vTaskGetInfo+0x1c>
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	697a      	ldr	r2, [r7, #20]
 8011896:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	2200      	movs	r2, #0
 80118c6:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80118c8:	78fb      	ldrb	r3, [r7, #3]
 80118ca:	2b05      	cmp	r3, #5
 80118cc:	d01a      	beq.n	8011904 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 80118ce:	4b1b      	ldr	r3, [pc, #108]	; (801193c <vTaskGetInfo+0xc8>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d103      	bne.n	80118e0 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	2200      	movs	r2, #0
 80118dc:	731a      	strb	r2, [r3, #12]
 80118de:	e018      	b.n	8011912 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	78fa      	ldrb	r2, [r7, #3]
 80118e4:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80118e6:	78fb      	ldrb	r3, [r7, #3]
 80118e8:	2b03      	cmp	r3, #3
 80118ea:	d112      	bne.n	8011912 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 80118ec:	f7ff fb8a 	bl	8011004 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d002      	beq.n	80118fe <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	2202      	movs	r2, #2
 80118fc:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80118fe:	f7ff fb8f 	bl	8011020 <xTaskResumeAll>
 8011902:	e006      	b.n	8011912 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8011904:	6978      	ldr	r0, [r7, #20]
 8011906:	f7ff faa7 	bl	8010e58 <eTaskGetState>
 801190a:	4603      	mov	r3, r0
 801190c:	461a      	mov	r2, r3
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d009      	beq.n	801192c <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801191c:	4618      	mov	r0, r3
 801191e:	f000 f861 	bl	80119e4 <prvTaskCheckFreeStackSpace>
 8011922:	4603      	mov	r3, r0
 8011924:	461a      	mov	r2, r3
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 801192a:	e002      	b.n	8011932 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	2200      	movs	r2, #0
 8011930:	841a      	strh	r2, [r3, #32]
	}
 8011932:	bf00      	nop
 8011934:	3718      	adds	r7, #24
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	24002154 	.word	0x24002154

08011940 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8011940:	b580      	push	{r7, lr}
 8011942:	b08a      	sub	sp, #40	; 0x28
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	4613      	mov	r3, r2
 801194c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 801194e:	2300      	movs	r3, #0
 8011950:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d03f      	beq.n	80119da <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	623b      	str	r3, [r7, #32]
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	685a      	ldr	r2, [r3, #4]
 8011964:	6a3b      	ldr	r3, [r7, #32]
 8011966:	605a      	str	r2, [r3, #4]
 8011968:	6a3b      	ldr	r3, [r7, #32]
 801196a:	685a      	ldr	r2, [r3, #4]
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	3308      	adds	r3, #8
 8011970:	429a      	cmp	r2, r3
 8011972:	d104      	bne.n	801197e <prvListTasksWithinSingleList+0x3e>
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	685a      	ldr	r2, [r3, #4]
 801197a:	6a3b      	ldr	r3, [r7, #32]
 801197c:	605a      	str	r2, [r3, #4]
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	61bb      	str	r3, [r7, #24]
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	685a      	ldr	r2, [r3, #4]
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	605a      	str	r2, [r3, #4]
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	685a      	ldr	r2, [r3, #4]
 8011998:	69bb      	ldr	r3, [r7, #24]
 801199a:	3308      	adds	r3, #8
 801199c:	429a      	cmp	r2, r3
 801199e:	d104      	bne.n	80119aa <prvListTasksWithinSingleList+0x6a>
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	685a      	ldr	r2, [r3, #4]
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	605a      	str	r2, [r3, #4]
 80119aa:	69bb      	ldr	r3, [r7, #24]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80119b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119b4:	4613      	mov	r3, r2
 80119b6:	00db      	lsls	r3, r3, #3
 80119b8:	4413      	add	r3, r2
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	461a      	mov	r2, r3
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	1899      	adds	r1, r3, r2
 80119c2:	79fb      	ldrb	r3, [r7, #7]
 80119c4:	2201      	movs	r2, #1
 80119c6:	6978      	ldr	r0, [r7, #20]
 80119c8:	f7ff ff54 	bl	8011874 <vTaskGetInfo>
				uxTask++;
 80119cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ce:	3301      	adds	r3, #1
 80119d0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80119d2:	697a      	ldr	r2, [r7, #20]
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d1d5      	bne.n	8011986 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80119da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80119dc:	4618      	mov	r0, r3
 80119de:	3728      	adds	r7, #40	; 0x28
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80119e4:	b480      	push	{r7}
 80119e6:	b085      	sub	sp, #20
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80119ec:	2300      	movs	r3, #0
 80119ee:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80119f0:	e005      	b.n	80119fe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	3301      	adds	r3, #1
 80119f6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	3301      	adds	r3, #1
 80119fc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	2ba5      	cmp	r3, #165	; 0xa5
 8011a04:	d0f5      	beq.n	80119f2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	089b      	lsrs	r3, r3, #2
 8011a0a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	b29b      	uxth	r3, r3
	}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3714      	adds	r7, #20
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	3354      	adds	r3, #84	; 0x54
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f00b fe59 	bl	801d6e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d108      	bne.n	8011a4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f001 f957 	bl	8012cf0 <vPortFree>
				vPortFree( pxTCB );
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f001 f954 	bl	8012cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a48:	e018      	b.n	8011a7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011a50:	2b01      	cmp	r3, #1
 8011a52:	d103      	bne.n	8011a5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f001 f94b 	bl	8012cf0 <vPortFree>
	}
 8011a5a:	e00f      	b.n	8011a7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d00a      	beq.n	8011a7c <prvDeleteTCB+0x60>
	__asm volatile
 8011a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6a:	f383 8811 	msr	BASEPRI, r3
 8011a6e:	f3bf 8f6f 	isb	sy
 8011a72:	f3bf 8f4f 	dsb	sy
 8011a76:	60fb      	str	r3, [r7, #12]
}
 8011a78:	bf00      	nop
 8011a7a:	e7fe      	b.n	8011a7a <prvDeleteTCB+0x5e>
	}
 8011a7c:	bf00      	nop
 8011a7e:	3710      	adds	r7, #16
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}

08011a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a8a:	4b0c      	ldr	r3, [pc, #48]	; (8011abc <prvResetNextTaskUnblockTime+0x38>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d104      	bne.n	8011a9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a94:	4b0a      	ldr	r3, [pc, #40]	; (8011ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8011a96:	f04f 32ff 	mov.w	r2, #4294967295
 8011a9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a9c:	e008      	b.n	8011ab0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a9e:	4b07      	ldr	r3, [pc, #28]	; (8011abc <prvResetNextTaskUnblockTime+0x38>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	4a04      	ldr	r2, [pc, #16]	; (8011ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8011aae:	6013      	str	r3, [r2, #0]
}
 8011ab0:	bf00      	nop
 8011ab2:	370c      	adds	r7, #12
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr
 8011abc:	240025e0 	.word	0x240025e0
 8011ac0:	24002648 	.word	0x24002648

08011ac4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011aca:	4b05      	ldr	r3, [pc, #20]	; (8011ae0 <xTaskGetCurrentTaskHandle+0x1c>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011ad0:	687b      	ldr	r3, [r7, #4]
	}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	370c      	adds	r7, #12
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	24002154 	.word	0x24002154

08011ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011aea:	4b0b      	ldr	r3, [pc, #44]	; (8011b18 <xTaskGetSchedulerState+0x34>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d102      	bne.n	8011af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011af2:	2301      	movs	r3, #1
 8011af4:	607b      	str	r3, [r7, #4]
 8011af6:	e008      	b.n	8011b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011af8:	4b08      	ldr	r3, [pc, #32]	; (8011b1c <xTaskGetSchedulerState+0x38>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011b00:	2302      	movs	r3, #2
 8011b02:	607b      	str	r3, [r7, #4]
 8011b04:	e001      	b.n	8011b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011b06:	2300      	movs	r3, #0
 8011b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011b0a:	687b      	ldr	r3, [r7, #4]
	}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	370c      	adds	r7, #12
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr
 8011b18:	24002634 	.word	0x24002634
 8011b1c:	24002650 	.word	0x24002650

08011b20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b084      	sub	sp, #16
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d051      	beq.n	8011bda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b3a:	4b2a      	ldr	r3, [pc, #168]	; (8011be4 <xTaskPriorityInherit+0xc4>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d241      	bcs.n	8011bc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	699b      	ldr	r3, [r3, #24]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	db06      	blt.n	8011b5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b4c:	4b25      	ldr	r3, [pc, #148]	; (8011be4 <xTaskPriorityInherit+0xc4>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	6959      	ldr	r1, [r3, #20]
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b62:	4613      	mov	r3, r2
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	4413      	add	r3, r2
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	4a1f      	ldr	r2, [pc, #124]	; (8011be8 <xTaskPriorityInherit+0xc8>)
 8011b6c:	4413      	add	r3, r2
 8011b6e:	4299      	cmp	r1, r3
 8011b70:	d122      	bne.n	8011bb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	3304      	adds	r3, #4
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fd fe94 	bl	800f8a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b7c:	4b19      	ldr	r3, [pc, #100]	; (8011be4 <xTaskPriorityInherit+0xc4>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b8a:	4b18      	ldr	r3, [pc, #96]	; (8011bec <xTaskPriorityInherit+0xcc>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d903      	bls.n	8011b9a <xTaskPriorityInherit+0x7a>
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b96:	4a15      	ldr	r2, [pc, #84]	; (8011bec <xTaskPriorityInherit+0xcc>)
 8011b98:	6013      	str	r3, [r2, #0]
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	4413      	add	r3, r2
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	4a10      	ldr	r2, [pc, #64]	; (8011be8 <xTaskPriorityInherit+0xc8>)
 8011ba8:	441a      	add	r2, r3
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	3304      	adds	r3, #4
 8011bae:	4619      	mov	r1, r3
 8011bb0:	4610      	mov	r0, r2
 8011bb2:	f7fd fe1a 	bl	800f7ea <vListInsertEnd>
 8011bb6:	e004      	b.n	8011bc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011bb8:	4b0a      	ldr	r3, [pc, #40]	; (8011be4 <xTaskPriorityInherit+0xc4>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	60fb      	str	r3, [r7, #12]
 8011bc6:	e008      	b.n	8011bda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011bcc:	4b05      	ldr	r3, [pc, #20]	; (8011be4 <xTaskPriorityInherit+0xc4>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d201      	bcs.n	8011bda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011bda:	68fb      	ldr	r3, [r7, #12]
	}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3710      	adds	r7, #16
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}
 8011be4:	24002154 	.word	0x24002154
 8011be8:	24002158 	.word	0x24002158
 8011bec:	24002630 	.word	0x24002630

08011bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b086      	sub	sp, #24
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d056      	beq.n	8011cb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011c06:	4b2e      	ldr	r3, [pc, #184]	; (8011cc0 <xTaskPriorityDisinherit+0xd0>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	693a      	ldr	r2, [r7, #16]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d00a      	beq.n	8011c26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c14:	f383 8811 	msr	BASEPRI, r3
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	60fb      	str	r3, [r7, #12]
}
 8011c22:	bf00      	nop
 8011c24:	e7fe      	b.n	8011c24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d10a      	bne.n	8011c44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	60bb      	str	r3, [r7, #8]
}
 8011c40:	bf00      	nop
 8011c42:	e7fe      	b.n	8011c42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c48:	1e5a      	subs	r2, r3, #1
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d02c      	beq.n	8011cb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d128      	bne.n	8011cb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	3304      	adds	r3, #4
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fd fe1c 	bl	800f8a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c84:	4b0f      	ldr	r3, [pc, #60]	; (8011cc4 <xTaskPriorityDisinherit+0xd4>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d903      	bls.n	8011c94 <xTaskPriorityDisinherit+0xa4>
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c90:	4a0c      	ldr	r2, [pc, #48]	; (8011cc4 <xTaskPriorityDisinherit+0xd4>)
 8011c92:	6013      	str	r3, [r2, #0]
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c98:	4613      	mov	r3, r2
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	4413      	add	r3, r2
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	4a09      	ldr	r2, [pc, #36]	; (8011cc8 <xTaskPriorityDisinherit+0xd8>)
 8011ca2:	441a      	add	r2, r3
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	3304      	adds	r3, #4
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4610      	mov	r0, r2
 8011cac:	f7fd fd9d 	bl	800f7ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011cb4:	697b      	ldr	r3, [r7, #20]
	}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3718      	adds	r7, #24
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	24002154 	.word	0x24002154
 8011cc4:	24002630 	.word	0x24002630
 8011cc8:	24002158 	.word	0x24002158

08011ccc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b088      	sub	sp, #32
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d06a      	beq.n	8011dba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ce4:	69bb      	ldr	r3, [r7, #24]
 8011ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d10a      	bne.n	8011d02 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf0:	f383 8811 	msr	BASEPRI, r3
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	60fb      	str	r3, [r7, #12]
}
 8011cfe:	bf00      	nop
 8011d00:	e7fe      	b.n	8011d00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011d02:	69bb      	ldr	r3, [r7, #24]
 8011d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d06:	683a      	ldr	r2, [r7, #0]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d902      	bls.n	8011d12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	61fb      	str	r3, [r7, #28]
 8011d10:	e002      	b.n	8011d18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1c:	69fa      	ldr	r2, [r7, #28]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d04b      	beq.n	8011dba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d26:	697a      	ldr	r2, [r7, #20]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d146      	bne.n	8011dba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011d2c:	4b25      	ldr	r3, [pc, #148]	; (8011dc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	69ba      	ldr	r2, [r7, #24]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d10a      	bne.n	8011d4c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3a:	f383 8811 	msr	BASEPRI, r3
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	60bb      	str	r3, [r7, #8]
}
 8011d48:	bf00      	nop
 8011d4a:	e7fe      	b.n	8011d4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	69fa      	ldr	r2, [r7, #28]
 8011d56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	699b      	ldr	r3, [r3, #24]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	db04      	blt.n	8011d6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	6959      	ldr	r1, [r3, #20]
 8011d6e:	693a      	ldr	r2, [r7, #16]
 8011d70:	4613      	mov	r3, r2
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	4413      	add	r3, r2
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	4a13      	ldr	r2, [pc, #76]	; (8011dc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011d7a:	4413      	add	r3, r2
 8011d7c:	4299      	cmp	r1, r3
 8011d7e:	d11c      	bne.n	8011dba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d80:	69bb      	ldr	r3, [r7, #24]
 8011d82:	3304      	adds	r3, #4
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fd fd8d 	bl	800f8a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d8e:	4b0f      	ldr	r3, [pc, #60]	; (8011dcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d903      	bls.n	8011d9e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d9a:	4a0c      	ldr	r2, [pc, #48]	; (8011dcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	69bb      	ldr	r3, [r7, #24]
 8011da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011da2:	4613      	mov	r3, r2
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	4413      	add	r3, r2
 8011da8:	009b      	lsls	r3, r3, #2
 8011daa:	4a07      	ldr	r2, [pc, #28]	; (8011dc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011dac:	441a      	add	r2, r3
 8011dae:	69bb      	ldr	r3, [r7, #24]
 8011db0:	3304      	adds	r3, #4
 8011db2:	4619      	mov	r1, r3
 8011db4:	4610      	mov	r0, r2
 8011db6:	f7fd fd18 	bl	800f7ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011dba:	bf00      	nop
 8011dbc:	3720      	adds	r7, #32
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	24002154 	.word	0x24002154
 8011dc8:	24002158 	.word	0x24002158
 8011dcc:	24002630 	.word	0x24002630

08011dd0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8011dda:	6839      	ldr	r1, [r7, #0]
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f00b fd5b 	bl	801d898 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ee fa9e 	bl	8000324 <strlen>
 8011de8:	60f8      	str	r0, [r7, #12]
 8011dea:	e007      	b.n	8011dfc <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	4413      	add	r3, r2
 8011df2:	2220      	movs	r2, #32
 8011df4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	3301      	adds	r3, #1
 8011dfa:	60fb      	str	r3, [r7, #12]
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2b0e      	cmp	r3, #14
 8011e00:	d9f4      	bls.n	8011dec <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	4413      	add	r3, r2
 8011e08:	2200      	movs	r2, #0
 8011e0a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	4413      	add	r3, r2
	}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3710      	adds	r7, #16
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b089      	sub	sp, #36	; 0x24
 8011e20:	af02      	add	r7, sp, #8
 8011e22:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8011e2a:	4b45      	ldr	r3, [pc, #276]	; (8011f40 <vTaskList+0x124>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8011e30:	4b43      	ldr	r3, [pc, #268]	; (8011f40 <vTaskList+0x124>)
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	4613      	mov	r3, r2
 8011e36:	00db      	lsls	r3, r3, #3
 8011e38:	4413      	add	r3, r2
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f000 fe8b 	bl	8012b58 <pvPortMalloc>
 8011e42:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d076      	beq.n	8011f38 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	68f9      	ldr	r1, [r7, #12]
 8011e4e:	68b8      	ldr	r0, [r7, #8]
 8011e50:	f7ff f9a6 	bl	80111a0 <uxTaskGetSystemState>
 8011e54:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8011e56:	2300      	movs	r3, #0
 8011e58:	617b      	str	r3, [r7, #20]
 8011e5a:	e066      	b.n	8011f2a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8011e5c:	697a      	ldr	r2, [r7, #20]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	00db      	lsls	r3, r3, #3
 8011e62:	4413      	add	r3, r2
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	461a      	mov	r2, r3
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	7b1b      	ldrb	r3, [r3, #12]
 8011e6e:	2b04      	cmp	r3, #4
 8011e70:	d81b      	bhi.n	8011eaa <vTaskList+0x8e>
 8011e72:	a201      	add	r2, pc, #4	; (adr r2, 8011e78 <vTaskList+0x5c>)
 8011e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e78:	08011e8d 	.word	0x08011e8d
 8011e7c:	08011e93 	.word	0x08011e93
 8011e80:	08011e99 	.word	0x08011e99
 8011e84:	08011e9f 	.word	0x08011e9f
 8011e88:	08011ea5 	.word	0x08011ea5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8011e8c:	2358      	movs	r3, #88	; 0x58
 8011e8e:	74fb      	strb	r3, [r7, #19]
										break;
 8011e90:	e00e      	b.n	8011eb0 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8011e92:	2352      	movs	r3, #82	; 0x52
 8011e94:	74fb      	strb	r3, [r7, #19]
										break;
 8011e96:	e00b      	b.n	8011eb0 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8011e98:	2342      	movs	r3, #66	; 0x42
 8011e9a:	74fb      	strb	r3, [r7, #19]
										break;
 8011e9c:	e008      	b.n	8011eb0 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8011e9e:	2353      	movs	r3, #83	; 0x53
 8011ea0:	74fb      	strb	r3, [r7, #19]
										break;
 8011ea2:	e005      	b.n	8011eb0 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8011ea4:	2344      	movs	r3, #68	; 0x44
 8011ea6:	74fb      	strb	r3, [r7, #19]
										break;
 8011ea8:	e002      	b.n	8011eb0 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	74fb      	strb	r3, [r7, #19]
										break;
 8011eae:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8011eb0:	697a      	ldr	r2, [r7, #20]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	00db      	lsls	r3, r3, #3
 8011eb6:	4413      	add	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	461a      	mov	r2, r3
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f7ff ff83 	bl	8011dd0 <prvWriteNameToBuffer>
 8011eca:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8011ecc:	7cf9      	ldrb	r1, [r7, #19]
 8011ece:	697a      	ldr	r2, [r7, #20]
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	00db      	lsls	r3, r3, #3
 8011ed4:	4413      	add	r3, r2
 8011ed6:	009b      	lsls	r3, r3, #2
 8011ed8:	461a      	mov	r2, r3
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	4413      	add	r3, r2
 8011ede:	6918      	ldr	r0, [r3, #16]
 8011ee0:	697a      	ldr	r2, [r7, #20]
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	00db      	lsls	r3, r3, #3
 8011ee6:	4413      	add	r3, r2
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	461a      	mov	r2, r3
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	4413      	add	r3, r2
 8011ef0:	8c1b      	ldrh	r3, [r3, #32]
 8011ef2:	461c      	mov	r4, r3
 8011ef4:	697a      	ldr	r2, [r7, #20]
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	00db      	lsls	r3, r3, #3
 8011efa:	4413      	add	r3, r2
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	461a      	mov	r2, r3
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	4413      	add	r3, r2
 8011f04:	689b      	ldr	r3, [r3, #8]
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	9400      	str	r4, [sp, #0]
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	460a      	mov	r2, r1
 8011f0e:	490d      	ldr	r1, [pc, #52]	; (8011f44 <vTaskList+0x128>)
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f00b fc51 	bl	801d7b8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ee fa04 	bl	8000324 <strlen>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	4413      	add	r3, r2
 8011f22:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	3301      	adds	r3, #1
 8011f28:	617b      	str	r3, [r7, #20]
 8011f2a:	697a      	ldr	r2, [r7, #20]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d394      	bcc.n	8011e5c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8011f32:	68b8      	ldr	r0, [r7, #8]
 8011f34:	f000 fedc 	bl	8012cf0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011f38:	bf00      	nop
 8011f3a:	371c      	adds	r7, #28
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd90      	pop	{r4, r7, pc}
 8011f40:	24002628 	.word	0x24002628
 8011f44:	0801e9f0 	.word	0x0801e9f0

08011f48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011f48:	b480      	push	{r7}
 8011f4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011f4c:	4b07      	ldr	r3, [pc, #28]	; (8011f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d004      	beq.n	8011f5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011f54:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f5a:	3201      	adds	r2, #1
 8011f5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011f5e:	4b03      	ldr	r3, [pc, #12]	; (8011f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8011f60:	681b      	ldr	r3, [r3, #0]
	}
 8011f62:	4618      	mov	r0, r3
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr
 8011f6c:	24002154 	.word	0x24002154

08011f70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f7a:	4b21      	ldr	r3, [pc, #132]	; (8012000 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f80:	4b20      	ldr	r3, [pc, #128]	; (8012004 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	3304      	adds	r3, #4
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fd fc8c 	bl	800f8a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f92:	d10a      	bne.n	8011faa <prvAddCurrentTaskToDelayedList+0x3a>
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d007      	beq.n	8011faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f9a:	4b1a      	ldr	r3, [pc, #104]	; (8012004 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	4819      	ldr	r0, [pc, #100]	; (8012008 <prvAddCurrentTaskToDelayedList+0x98>)
 8011fa4:	f7fd fc21 	bl	800f7ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011fa8:	e026      	b.n	8011ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011faa:	68fa      	ldr	r2, [r7, #12]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	4413      	add	r3, r2
 8011fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011fb2:	4b14      	ldr	r3, [pc, #80]	; (8012004 <prvAddCurrentTaskToDelayedList+0x94>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011fba:	68ba      	ldr	r2, [r7, #8]
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d209      	bcs.n	8011fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fc2:	4b12      	ldr	r3, [pc, #72]	; (801200c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011fc4:	681a      	ldr	r2, [r3, #0]
 8011fc6:	4b0f      	ldr	r3, [pc, #60]	; (8012004 <prvAddCurrentTaskToDelayedList+0x94>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	3304      	adds	r3, #4
 8011fcc:	4619      	mov	r1, r3
 8011fce:	4610      	mov	r0, r2
 8011fd0:	f7fd fc2f 	bl	800f832 <vListInsert>
}
 8011fd4:	e010      	b.n	8011ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fd6:	4b0e      	ldr	r3, [pc, #56]	; (8012010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	4b0a      	ldr	r3, [pc, #40]	; (8012004 <prvAddCurrentTaskToDelayedList+0x94>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	3304      	adds	r3, #4
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	4610      	mov	r0, r2
 8011fe4:	f7fd fc25 	bl	800f832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011fe8:	4b0a      	ldr	r3, [pc, #40]	; (8012014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	68ba      	ldr	r2, [r7, #8]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d202      	bcs.n	8011ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011ff2:	4a08      	ldr	r2, [pc, #32]	; (8012014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	6013      	str	r3, [r2, #0]
}
 8011ff8:	bf00      	nop
 8011ffa:	3710      	adds	r7, #16
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	2400262c 	.word	0x2400262c
 8012004:	24002154 	.word	0x24002154
 8012008:	24002614 	.word	0x24002614
 801200c:	240025e4 	.word	0x240025e4
 8012010:	240025e0 	.word	0x240025e0
 8012014:	24002648 	.word	0x24002648

08012018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b08a      	sub	sp, #40	; 0x28
 801201c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801201e:	2300      	movs	r3, #0
 8012020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012022:	f000 fb07 	bl	8012634 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012026:	4b1c      	ldr	r3, [pc, #112]	; (8012098 <xTimerCreateTimerTask+0x80>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d021      	beq.n	8012072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801202e:	2300      	movs	r3, #0
 8012030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012032:	2300      	movs	r3, #0
 8012034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012036:	1d3a      	adds	r2, r7, #4
 8012038:	f107 0108 	add.w	r1, r7, #8
 801203c:	f107 030c 	add.w	r3, r7, #12
 8012040:	4618      	mov	r0, r3
 8012042:	f7fd fb8b 	bl	800f75c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012046:	6879      	ldr	r1, [r7, #4]
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	68fa      	ldr	r2, [r7, #12]
 801204c:	9202      	str	r2, [sp, #8]
 801204e:	9301      	str	r3, [sp, #4]
 8012050:	2302      	movs	r3, #2
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	2300      	movs	r3, #0
 8012056:	460a      	mov	r2, r1
 8012058:	4910      	ldr	r1, [pc, #64]	; (801209c <xTimerCreateTimerTask+0x84>)
 801205a:	4811      	ldr	r0, [pc, #68]	; (80120a0 <xTimerCreateTimerTask+0x88>)
 801205c:	f7fe fd10 	bl	8010a80 <xTaskCreateStatic>
 8012060:	4603      	mov	r3, r0
 8012062:	4a10      	ldr	r2, [pc, #64]	; (80120a4 <xTimerCreateTimerTask+0x8c>)
 8012064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012066:	4b0f      	ldr	r3, [pc, #60]	; (80120a4 <xTimerCreateTimerTask+0x8c>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d001      	beq.n	8012072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801206e:	2301      	movs	r3, #1
 8012070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d10a      	bne.n	801208e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801207c:	f383 8811 	msr	BASEPRI, r3
 8012080:	f3bf 8f6f 	isb	sy
 8012084:	f3bf 8f4f 	dsb	sy
 8012088:	613b      	str	r3, [r7, #16]
}
 801208a:	bf00      	nop
 801208c:	e7fe      	b.n	801208c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801208e:	697b      	ldr	r3, [r7, #20]
}
 8012090:	4618      	mov	r0, r3
 8012092:	3718      	adds	r7, #24
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	24002684 	.word	0x24002684
 801209c:	0801ea00 	.word	0x0801ea00
 80120a0:	080121dd 	.word	0x080121dd
 80120a4:	24002688 	.word	0x24002688

080120a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b08a      	sub	sp, #40	; 0x28
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80120b6:	2300      	movs	r3, #0
 80120b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d10a      	bne.n	80120d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80120c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c4:	f383 8811 	msr	BASEPRI, r3
 80120c8:	f3bf 8f6f 	isb	sy
 80120cc:	f3bf 8f4f 	dsb	sy
 80120d0:	623b      	str	r3, [r7, #32]
}
 80120d2:	bf00      	nop
 80120d4:	e7fe      	b.n	80120d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80120d6:	4b1a      	ldr	r3, [pc, #104]	; (8012140 <xTimerGenericCommand+0x98>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d02a      	beq.n	8012134 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	2b05      	cmp	r3, #5
 80120ee:	dc18      	bgt.n	8012122 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80120f0:	f7ff fcf8 	bl	8011ae4 <xTaskGetSchedulerState>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b02      	cmp	r3, #2
 80120f8:	d109      	bne.n	801210e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80120fa:	4b11      	ldr	r3, [pc, #68]	; (8012140 <xTimerGenericCommand+0x98>)
 80120fc:	6818      	ldr	r0, [r3, #0]
 80120fe:	f107 0110 	add.w	r1, r7, #16
 8012102:	2300      	movs	r3, #0
 8012104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012106:	f7fd fe55 	bl	800fdb4 <xQueueGenericSend>
 801210a:	6278      	str	r0, [r7, #36]	; 0x24
 801210c:	e012      	b.n	8012134 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801210e:	4b0c      	ldr	r3, [pc, #48]	; (8012140 <xTimerGenericCommand+0x98>)
 8012110:	6818      	ldr	r0, [r3, #0]
 8012112:	f107 0110 	add.w	r1, r7, #16
 8012116:	2300      	movs	r3, #0
 8012118:	2200      	movs	r2, #0
 801211a:	f7fd fe4b 	bl	800fdb4 <xQueueGenericSend>
 801211e:	6278      	str	r0, [r7, #36]	; 0x24
 8012120:	e008      	b.n	8012134 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012122:	4b07      	ldr	r3, [pc, #28]	; (8012140 <xTimerGenericCommand+0x98>)
 8012124:	6818      	ldr	r0, [r3, #0]
 8012126:	f107 0110 	add.w	r1, r7, #16
 801212a:	2300      	movs	r3, #0
 801212c:	683a      	ldr	r2, [r7, #0]
 801212e:	f7fd ff3f 	bl	800ffb0 <xQueueGenericSendFromISR>
 8012132:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012136:	4618      	mov	r0, r3
 8012138:	3728      	adds	r7, #40	; 0x28
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
 801213e:	bf00      	nop
 8012140:	24002684 	.word	0x24002684

08012144 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b088      	sub	sp, #32
 8012148:	af02      	add	r7, sp, #8
 801214a:	6078      	str	r0, [r7, #4]
 801214c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801214e:	4b22      	ldr	r3, [pc, #136]	; (80121d8 <prvProcessExpiredTimer+0x94>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	3304      	adds	r3, #4
 801215c:	4618      	mov	r0, r3
 801215e:	f7fd fba1 	bl	800f8a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012168:	f003 0304 	and.w	r3, r3, #4
 801216c:	2b00      	cmp	r3, #0
 801216e:	d022      	beq.n	80121b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	699a      	ldr	r2, [r3, #24]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	18d1      	adds	r1, r2, r3
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	683a      	ldr	r2, [r7, #0]
 801217c:	6978      	ldr	r0, [r7, #20]
 801217e:	f000 f8d1 	bl	8012324 <prvInsertTimerInActiveList>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d01f      	beq.n	80121c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012188:	2300      	movs	r3, #0
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	2300      	movs	r3, #0
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	2100      	movs	r1, #0
 8012192:	6978      	ldr	r0, [r7, #20]
 8012194:	f7ff ff88 	bl	80120a8 <xTimerGenericCommand>
 8012198:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d113      	bne.n	80121c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80121a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a4:	f383 8811 	msr	BASEPRI, r3
 80121a8:	f3bf 8f6f 	isb	sy
 80121ac:	f3bf 8f4f 	dsb	sy
 80121b0:	60fb      	str	r3, [r7, #12]
}
 80121b2:	bf00      	nop
 80121b4:	e7fe      	b.n	80121b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121bc:	f023 0301 	bic.w	r3, r3, #1
 80121c0:	b2da      	uxtb	r2, r3
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	6a1b      	ldr	r3, [r3, #32]
 80121cc:	6978      	ldr	r0, [r7, #20]
 80121ce:	4798      	blx	r3
}
 80121d0:	bf00      	nop
 80121d2:	3718      	adds	r7, #24
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	2400267c 	.word	0x2400267c

080121dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121e4:	f107 0308 	add.w	r3, r7, #8
 80121e8:	4618      	mov	r0, r3
 80121ea:	f000 f857 	bl	801229c <prvGetNextExpireTime>
 80121ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	4619      	mov	r1, r3
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f000 f803 	bl	8012200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80121fa:	f000 f8d5 	bl	80123a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121fe:	e7f1      	b.n	80121e4 <prvTimerTask+0x8>

08012200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801220a:	f7fe fefb 	bl	8011004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801220e:	f107 0308 	add.w	r3, r7, #8
 8012212:	4618      	mov	r0, r3
 8012214:	f000 f866 	bl	80122e4 <prvSampleTimeNow>
 8012218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d130      	bne.n	8012282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d10a      	bne.n	801223c <prvProcessTimerOrBlockTask+0x3c>
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	429a      	cmp	r2, r3
 801222c:	d806      	bhi.n	801223c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801222e:	f7fe fef7 	bl	8011020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012232:	68f9      	ldr	r1, [r7, #12]
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f7ff ff85 	bl	8012144 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801223a:	e024      	b.n	8012286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d008      	beq.n	8012254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012242:	4b13      	ldr	r3, [pc, #76]	; (8012290 <prvProcessTimerOrBlockTask+0x90>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d101      	bne.n	8012250 <prvProcessTimerOrBlockTask+0x50>
 801224c:	2301      	movs	r3, #1
 801224e:	e000      	b.n	8012252 <prvProcessTimerOrBlockTask+0x52>
 8012250:	2300      	movs	r3, #0
 8012252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012254:	4b0f      	ldr	r3, [pc, #60]	; (8012294 <prvProcessTimerOrBlockTask+0x94>)
 8012256:	6818      	ldr	r0, [r3, #0]
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	1ad3      	subs	r3, r2, r3
 801225e:	683a      	ldr	r2, [r7, #0]
 8012260:	4619      	mov	r1, r3
 8012262:	f7fe fbd9 	bl	8010a18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012266:	f7fe fedb 	bl	8011020 <xTaskResumeAll>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10a      	bne.n	8012286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012270:	4b09      	ldr	r3, [pc, #36]	; (8012298 <prvProcessTimerOrBlockTask+0x98>)
 8012272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	f3bf 8f4f 	dsb	sy
 801227c:	f3bf 8f6f 	isb	sy
}
 8012280:	e001      	b.n	8012286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012282:	f7fe fecd 	bl	8011020 <xTaskResumeAll>
}
 8012286:	bf00      	nop
 8012288:	3710      	adds	r7, #16
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	24002680 	.word	0x24002680
 8012294:	24002684 	.word	0x24002684
 8012298:	e000ed04 	.word	0xe000ed04

0801229c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80122a4:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <prvGetNextExpireTime+0x44>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d101      	bne.n	80122b2 <prvGetNextExpireTime+0x16>
 80122ae:	2201      	movs	r2, #1
 80122b0:	e000      	b.n	80122b4 <prvGetNextExpireTime+0x18>
 80122b2:	2200      	movs	r2, #0
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d105      	bne.n	80122cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80122c0:	4b07      	ldr	r3, [pc, #28]	; (80122e0 <prvGetNextExpireTime+0x44>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	68db      	ldr	r3, [r3, #12]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	e001      	b.n	80122d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80122cc:	2300      	movs	r3, #0
 80122ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80122d0:	68fb      	ldr	r3, [r7, #12]
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3714      	adds	r7, #20
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	2400267c 	.word	0x2400267c

080122e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80122ec:	f7fe ff36 	bl	801115c <xTaskGetTickCount>
 80122f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80122f2:	4b0b      	ldr	r3, [pc, #44]	; (8012320 <prvSampleTimeNow+0x3c>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	68fa      	ldr	r2, [r7, #12]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d205      	bcs.n	8012308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80122fc:	f000 f936 	bl	801256c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2201      	movs	r2, #1
 8012304:	601a      	str	r2, [r3, #0]
 8012306:	e002      	b.n	801230e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801230e:	4a04      	ldr	r2, [pc, #16]	; (8012320 <prvSampleTimeNow+0x3c>)
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012314:	68fb      	ldr	r3, [r7, #12]
}
 8012316:	4618      	mov	r0, r3
 8012318:	3710      	adds	r7, #16
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	2400268c 	.word	0x2400268c

08012324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
 8012330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012332:	2300      	movs	r3, #0
 8012334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	68fa      	ldr	r2, [r7, #12]
 8012340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012342:	68ba      	ldr	r2, [r7, #8]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	429a      	cmp	r2, r3
 8012348:	d812      	bhi.n	8012370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801234a:	687a      	ldr	r2, [r7, #4]
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	1ad2      	subs	r2, r2, r3
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	699b      	ldr	r3, [r3, #24]
 8012354:	429a      	cmp	r2, r3
 8012356:	d302      	bcc.n	801235e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012358:	2301      	movs	r3, #1
 801235a:	617b      	str	r3, [r7, #20]
 801235c:	e01b      	b.n	8012396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801235e:	4b10      	ldr	r3, [pc, #64]	; (80123a0 <prvInsertTimerInActiveList+0x7c>)
 8012360:	681a      	ldr	r2, [r3, #0]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	3304      	adds	r3, #4
 8012366:	4619      	mov	r1, r3
 8012368:	4610      	mov	r0, r2
 801236a:	f7fd fa62 	bl	800f832 <vListInsert>
 801236e:	e012      	b.n	8012396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	429a      	cmp	r2, r3
 8012376:	d206      	bcs.n	8012386 <prvInsertTimerInActiveList+0x62>
 8012378:	68ba      	ldr	r2, [r7, #8]
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	429a      	cmp	r2, r3
 801237e:	d302      	bcc.n	8012386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012380:	2301      	movs	r3, #1
 8012382:	617b      	str	r3, [r7, #20]
 8012384:	e007      	b.n	8012396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012386:	4b07      	ldr	r3, [pc, #28]	; (80123a4 <prvInsertTimerInActiveList+0x80>)
 8012388:	681a      	ldr	r2, [r3, #0]
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	3304      	adds	r3, #4
 801238e:	4619      	mov	r1, r3
 8012390:	4610      	mov	r0, r2
 8012392:	f7fd fa4e 	bl	800f832 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012396:	697b      	ldr	r3, [r7, #20]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3718      	adds	r7, #24
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	24002680 	.word	0x24002680
 80123a4:	2400267c 	.word	0x2400267c

080123a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b08e      	sub	sp, #56	; 0x38
 80123ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80123ae:	e0ca      	b.n	8012546 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	da18      	bge.n	80123e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80123b6:	1d3b      	adds	r3, r7, #4
 80123b8:	3304      	adds	r3, #4
 80123ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80123bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d10a      	bne.n	80123d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80123c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c6:	f383 8811 	msr	BASEPRI, r3
 80123ca:	f3bf 8f6f 	isb	sy
 80123ce:	f3bf 8f4f 	dsb	sy
 80123d2:	61fb      	str	r3, [r7, #28]
}
 80123d4:	bf00      	nop
 80123d6:	e7fe      	b.n	80123d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80123d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123de:	6850      	ldr	r0, [r2, #4]
 80123e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123e2:	6892      	ldr	r2, [r2, #8]
 80123e4:	4611      	mov	r1, r2
 80123e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f2c0 80aa 	blt.w	8012544 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80123f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f6:	695b      	ldr	r3, [r3, #20]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d004      	beq.n	8012406 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	3304      	adds	r3, #4
 8012400:	4618      	mov	r0, r3
 8012402:	f7fd fa4f 	bl	800f8a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012406:	463b      	mov	r3, r7
 8012408:	4618      	mov	r0, r3
 801240a:	f7ff ff6b 	bl	80122e4 <prvSampleTimeNow>
 801240e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b09      	cmp	r3, #9
 8012414:	f200 8097 	bhi.w	8012546 <prvProcessReceivedCommands+0x19e>
 8012418:	a201      	add	r2, pc, #4	; (adr r2, 8012420 <prvProcessReceivedCommands+0x78>)
 801241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801241e:	bf00      	nop
 8012420:	08012449 	.word	0x08012449
 8012424:	08012449 	.word	0x08012449
 8012428:	08012449 	.word	0x08012449
 801242c:	080124bd 	.word	0x080124bd
 8012430:	080124d1 	.word	0x080124d1
 8012434:	0801251b 	.word	0x0801251b
 8012438:	08012449 	.word	0x08012449
 801243c:	08012449 	.word	0x08012449
 8012440:	080124bd 	.word	0x080124bd
 8012444:	080124d1 	.word	0x080124d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801244e:	f043 0301 	orr.w	r3, r3, #1
 8012452:	b2da      	uxtb	r2, r3
 8012454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801245a:	68ba      	ldr	r2, [r7, #8]
 801245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245e:	699b      	ldr	r3, [r3, #24]
 8012460:	18d1      	adds	r1, r2, r3
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012468:	f7ff ff5c 	bl	8012324 <prvInsertTimerInActiveList>
 801246c:	4603      	mov	r3, r0
 801246e:	2b00      	cmp	r3, #0
 8012470:	d069      	beq.n	8012546 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012474:	6a1b      	ldr	r3, [r3, #32]
 8012476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012478:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012480:	f003 0304 	and.w	r3, r3, #4
 8012484:	2b00      	cmp	r3, #0
 8012486:	d05e      	beq.n	8012546 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012488:	68ba      	ldr	r2, [r7, #8]
 801248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248c:	699b      	ldr	r3, [r3, #24]
 801248e:	441a      	add	r2, r3
 8012490:	2300      	movs	r3, #0
 8012492:	9300      	str	r3, [sp, #0]
 8012494:	2300      	movs	r3, #0
 8012496:	2100      	movs	r1, #0
 8012498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801249a:	f7ff fe05 	bl	80120a8 <xTimerGenericCommand>
 801249e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80124a0:	6a3b      	ldr	r3, [r7, #32]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d14f      	bne.n	8012546 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80124a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124aa:	f383 8811 	msr	BASEPRI, r3
 80124ae:	f3bf 8f6f 	isb	sy
 80124b2:	f3bf 8f4f 	dsb	sy
 80124b6:	61bb      	str	r3, [r7, #24]
}
 80124b8:	bf00      	nop
 80124ba:	e7fe      	b.n	80124ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124c2:	f023 0301 	bic.w	r3, r3, #1
 80124c6:	b2da      	uxtb	r2, r3
 80124c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80124ce:	e03a      	b.n	8012546 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80124d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124d6:	f043 0301 	orr.w	r3, r3, #1
 80124da:	b2da      	uxtb	r2, r3
 80124dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80124e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d10a      	bne.n	8012506 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80124f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f4:	f383 8811 	msr	BASEPRI, r3
 80124f8:	f3bf 8f6f 	isb	sy
 80124fc:	f3bf 8f4f 	dsb	sy
 8012500:	617b      	str	r3, [r7, #20]
}
 8012502:	bf00      	nop
 8012504:	e7fe      	b.n	8012504 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012508:	699a      	ldr	r2, [r3, #24]
 801250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250c:	18d1      	adds	r1, r2, r3
 801250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012514:	f7ff ff06 	bl	8012324 <prvInsertTimerInActiveList>
					break;
 8012518:	e015      	b.n	8012546 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012520:	f003 0302 	and.w	r3, r3, #2
 8012524:	2b00      	cmp	r3, #0
 8012526:	d103      	bne.n	8012530 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801252a:	f000 fbe1 	bl	8012cf0 <vPortFree>
 801252e:	e00a      	b.n	8012546 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012536:	f023 0301 	bic.w	r3, r3, #1
 801253a:	b2da      	uxtb	r2, r3
 801253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012542:	e000      	b.n	8012546 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012546:	4b08      	ldr	r3, [pc, #32]	; (8012568 <prvProcessReceivedCommands+0x1c0>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	1d39      	adds	r1, r7, #4
 801254c:	2200      	movs	r2, #0
 801254e:	4618      	mov	r0, r3
 8012550:	f7fd fe56 	bl	8010200 <xQueueReceive>
 8012554:	4603      	mov	r3, r0
 8012556:	2b00      	cmp	r3, #0
 8012558:	f47f af2a 	bne.w	80123b0 <prvProcessReceivedCommands+0x8>
	}
}
 801255c:	bf00      	nop
 801255e:	bf00      	nop
 8012560:	3730      	adds	r7, #48	; 0x30
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	24002684 	.word	0x24002684

0801256c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012572:	e048      	b.n	8012606 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012574:	4b2d      	ldr	r3, [pc, #180]	; (801262c <prvSwitchTimerLists+0xc0>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801257e:	4b2b      	ldr	r3, [pc, #172]	; (801262c <prvSwitchTimerLists+0xc0>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	3304      	adds	r3, #4
 801258c:	4618      	mov	r0, r3
 801258e:	f7fd f989 	bl	800f8a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6a1b      	ldr	r3, [r3, #32]
 8012596:	68f8      	ldr	r0, [r7, #12]
 8012598:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125a0:	f003 0304 	and.w	r3, r3, #4
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d02e      	beq.n	8012606 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	699b      	ldr	r3, [r3, #24]
 80125ac:	693a      	ldr	r2, [r7, #16]
 80125ae:	4413      	add	r3, r2
 80125b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80125b2:	68ba      	ldr	r2, [r7, #8]
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d90e      	bls.n	80125d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	68ba      	ldr	r2, [r7, #8]
 80125be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125c6:	4b19      	ldr	r3, [pc, #100]	; (801262c <prvSwitchTimerLists+0xc0>)
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	3304      	adds	r3, #4
 80125ce:	4619      	mov	r1, r3
 80125d0:	4610      	mov	r0, r2
 80125d2:	f7fd f92e 	bl	800f832 <vListInsert>
 80125d6:	e016      	b.n	8012606 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80125d8:	2300      	movs	r3, #0
 80125da:	9300      	str	r3, [sp, #0]
 80125dc:	2300      	movs	r3, #0
 80125de:	693a      	ldr	r2, [r7, #16]
 80125e0:	2100      	movs	r1, #0
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f7ff fd60 	bl	80120a8 <xTimerGenericCommand>
 80125e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10a      	bne.n	8012606 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80125f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f4:	f383 8811 	msr	BASEPRI, r3
 80125f8:	f3bf 8f6f 	isb	sy
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	603b      	str	r3, [r7, #0]
}
 8012602:	bf00      	nop
 8012604:	e7fe      	b.n	8012604 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012606:	4b09      	ldr	r3, [pc, #36]	; (801262c <prvSwitchTimerLists+0xc0>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1b1      	bne.n	8012574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012610:	4b06      	ldr	r3, [pc, #24]	; (801262c <prvSwitchTimerLists+0xc0>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012616:	4b06      	ldr	r3, [pc, #24]	; (8012630 <prvSwitchTimerLists+0xc4>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	4a04      	ldr	r2, [pc, #16]	; (801262c <prvSwitchTimerLists+0xc0>)
 801261c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801261e:	4a04      	ldr	r2, [pc, #16]	; (8012630 <prvSwitchTimerLists+0xc4>)
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	6013      	str	r3, [r2, #0]
}
 8012624:	bf00      	nop
 8012626:	3718      	adds	r7, #24
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	2400267c 	.word	0x2400267c
 8012630:	24002680 	.word	0x24002680

08012634 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801263a:	f000 f96b 	bl	8012914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801263e:	4b15      	ldr	r3, [pc, #84]	; (8012694 <prvCheckForValidListAndQueue+0x60>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d120      	bne.n	8012688 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012646:	4814      	ldr	r0, [pc, #80]	; (8012698 <prvCheckForValidListAndQueue+0x64>)
 8012648:	f7fd f8a2 	bl	800f790 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801264c:	4813      	ldr	r0, [pc, #76]	; (801269c <prvCheckForValidListAndQueue+0x68>)
 801264e:	f7fd f89f 	bl	800f790 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012652:	4b13      	ldr	r3, [pc, #76]	; (80126a0 <prvCheckForValidListAndQueue+0x6c>)
 8012654:	4a10      	ldr	r2, [pc, #64]	; (8012698 <prvCheckForValidListAndQueue+0x64>)
 8012656:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012658:	4b12      	ldr	r3, [pc, #72]	; (80126a4 <prvCheckForValidListAndQueue+0x70>)
 801265a:	4a10      	ldr	r2, [pc, #64]	; (801269c <prvCheckForValidListAndQueue+0x68>)
 801265c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801265e:	2300      	movs	r3, #0
 8012660:	9300      	str	r3, [sp, #0]
 8012662:	4b11      	ldr	r3, [pc, #68]	; (80126a8 <prvCheckForValidListAndQueue+0x74>)
 8012664:	4a11      	ldr	r2, [pc, #68]	; (80126ac <prvCheckForValidListAndQueue+0x78>)
 8012666:	2110      	movs	r1, #16
 8012668:	200a      	movs	r0, #10
 801266a:	f7fd f9ad 	bl	800f9c8 <xQueueGenericCreateStatic>
 801266e:	4603      	mov	r3, r0
 8012670:	4a08      	ldr	r2, [pc, #32]	; (8012694 <prvCheckForValidListAndQueue+0x60>)
 8012672:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012674:	4b07      	ldr	r3, [pc, #28]	; (8012694 <prvCheckForValidListAndQueue+0x60>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d005      	beq.n	8012688 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801267c:	4b05      	ldr	r3, [pc, #20]	; (8012694 <prvCheckForValidListAndQueue+0x60>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	490b      	ldr	r1, [pc, #44]	; (80126b0 <prvCheckForValidListAndQueue+0x7c>)
 8012682:	4618      	mov	r0, r3
 8012684:	f7fe f974 	bl	8010970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012688:	f000 f974 	bl	8012974 <vPortExitCritical>
}
 801268c:	bf00      	nop
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	24002684 	.word	0x24002684
 8012698:	24002654 	.word	0x24002654
 801269c:	24002668 	.word	0x24002668
 80126a0:	2400267c 	.word	0x2400267c
 80126a4:	24002680 	.word	0x24002680
 80126a8:	24002730 	.word	0x24002730
 80126ac:	24002690 	.word	0x24002690
 80126b0:	0801ea08 	.word	0x0801ea08

080126b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	3b04      	subs	r3, #4
 80126c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80126cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	3b04      	subs	r3, #4
 80126d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	f023 0201 	bic.w	r2, r3, #1
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	3b04      	subs	r3, #4
 80126e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80126e4:	4a0c      	ldr	r2, [pc, #48]	; (8012718 <pxPortInitialiseStack+0x64>)
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	3b14      	subs	r3, #20
 80126ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	3b04      	subs	r3, #4
 80126fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f06f 0202 	mvn.w	r2, #2
 8012702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	3b20      	subs	r3, #32
 8012708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801270a:	68fb      	ldr	r3, [r7, #12]
}
 801270c:	4618      	mov	r0, r3
 801270e:	3714      	adds	r7, #20
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr
 8012718:	0801271d 	.word	0x0801271d

0801271c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012722:	2300      	movs	r3, #0
 8012724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012726:	4b12      	ldr	r3, [pc, #72]	; (8012770 <prvTaskExitError+0x54>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272e:	d00a      	beq.n	8012746 <prvTaskExitError+0x2a>
	__asm volatile
 8012730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012734:	f383 8811 	msr	BASEPRI, r3
 8012738:	f3bf 8f6f 	isb	sy
 801273c:	f3bf 8f4f 	dsb	sy
 8012740:	60fb      	str	r3, [r7, #12]
}
 8012742:	bf00      	nop
 8012744:	e7fe      	b.n	8012744 <prvTaskExitError+0x28>
	__asm volatile
 8012746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274a:	f383 8811 	msr	BASEPRI, r3
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f3bf 8f4f 	dsb	sy
 8012756:	60bb      	str	r3, [r7, #8]
}
 8012758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801275a:	bf00      	nop
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d0fc      	beq.n	801275c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012762:	bf00      	nop
 8012764:	bf00      	nop
 8012766:	3714      	adds	r7, #20
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr
 8012770:	24000064 	.word	0x24000064
	...

08012780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012780:	4b07      	ldr	r3, [pc, #28]	; (80127a0 <pxCurrentTCBConst2>)
 8012782:	6819      	ldr	r1, [r3, #0]
 8012784:	6808      	ldr	r0, [r1, #0]
 8012786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278a:	f380 8809 	msr	PSP, r0
 801278e:	f3bf 8f6f 	isb	sy
 8012792:	f04f 0000 	mov.w	r0, #0
 8012796:	f380 8811 	msr	BASEPRI, r0
 801279a:	4770      	bx	lr
 801279c:	f3af 8000 	nop.w

080127a0 <pxCurrentTCBConst2>:
 80127a0:	24002154 	.word	0x24002154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80127a4:	bf00      	nop
 80127a6:	bf00      	nop

080127a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80127a8:	4808      	ldr	r0, [pc, #32]	; (80127cc <prvPortStartFirstTask+0x24>)
 80127aa:	6800      	ldr	r0, [r0, #0]
 80127ac:	6800      	ldr	r0, [r0, #0]
 80127ae:	f380 8808 	msr	MSP, r0
 80127b2:	f04f 0000 	mov.w	r0, #0
 80127b6:	f380 8814 	msr	CONTROL, r0
 80127ba:	b662      	cpsie	i
 80127bc:	b661      	cpsie	f
 80127be:	f3bf 8f4f 	dsb	sy
 80127c2:	f3bf 8f6f 	isb	sy
 80127c6:	df00      	svc	0
 80127c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80127ca:	bf00      	nop
 80127cc:	e000ed08 	.word	0xe000ed08

080127d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80127d6:	4b46      	ldr	r3, [pc, #280]	; (80128f0 <xPortStartScheduler+0x120>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4a46      	ldr	r2, [pc, #280]	; (80128f4 <xPortStartScheduler+0x124>)
 80127dc:	4293      	cmp	r3, r2
 80127de:	d10a      	bne.n	80127f6 <xPortStartScheduler+0x26>
	__asm volatile
 80127e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e4:	f383 8811 	msr	BASEPRI, r3
 80127e8:	f3bf 8f6f 	isb	sy
 80127ec:	f3bf 8f4f 	dsb	sy
 80127f0:	613b      	str	r3, [r7, #16]
}
 80127f2:	bf00      	nop
 80127f4:	e7fe      	b.n	80127f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80127f6:	4b3e      	ldr	r3, [pc, #248]	; (80128f0 <xPortStartScheduler+0x120>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4a3f      	ldr	r2, [pc, #252]	; (80128f8 <xPortStartScheduler+0x128>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d10a      	bne.n	8012816 <xPortStartScheduler+0x46>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	60fb      	str	r3, [r7, #12]
}
 8012812:	bf00      	nop
 8012814:	e7fe      	b.n	8012814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012816:	4b39      	ldr	r3, [pc, #228]	; (80128fc <xPortStartScheduler+0x12c>)
 8012818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	b2db      	uxtb	r3, r3
 8012820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	22ff      	movs	r2, #255	; 0xff
 8012826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	b2db      	uxtb	r3, r3
 801282e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012830:	78fb      	ldrb	r3, [r7, #3]
 8012832:	b2db      	uxtb	r3, r3
 8012834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012838:	b2da      	uxtb	r2, r3
 801283a:	4b31      	ldr	r3, [pc, #196]	; (8012900 <xPortStartScheduler+0x130>)
 801283c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801283e:	4b31      	ldr	r3, [pc, #196]	; (8012904 <xPortStartScheduler+0x134>)
 8012840:	2207      	movs	r2, #7
 8012842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012844:	e009      	b.n	801285a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012846:	4b2f      	ldr	r3, [pc, #188]	; (8012904 <xPortStartScheduler+0x134>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	3b01      	subs	r3, #1
 801284c:	4a2d      	ldr	r2, [pc, #180]	; (8012904 <xPortStartScheduler+0x134>)
 801284e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012850:	78fb      	ldrb	r3, [r7, #3]
 8012852:	b2db      	uxtb	r3, r3
 8012854:	005b      	lsls	r3, r3, #1
 8012856:	b2db      	uxtb	r3, r3
 8012858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801285a:	78fb      	ldrb	r3, [r7, #3]
 801285c:	b2db      	uxtb	r3, r3
 801285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012862:	2b80      	cmp	r3, #128	; 0x80
 8012864:	d0ef      	beq.n	8012846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012866:	4b27      	ldr	r3, [pc, #156]	; (8012904 <xPortStartScheduler+0x134>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f1c3 0307 	rsb	r3, r3, #7
 801286e:	2b04      	cmp	r3, #4
 8012870:	d00a      	beq.n	8012888 <xPortStartScheduler+0xb8>
	__asm volatile
 8012872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	60bb      	str	r3, [r7, #8]
}
 8012884:	bf00      	nop
 8012886:	e7fe      	b.n	8012886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012888:	4b1e      	ldr	r3, [pc, #120]	; (8012904 <xPortStartScheduler+0x134>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	021b      	lsls	r3, r3, #8
 801288e:	4a1d      	ldr	r2, [pc, #116]	; (8012904 <xPortStartScheduler+0x134>)
 8012890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012892:	4b1c      	ldr	r3, [pc, #112]	; (8012904 <xPortStartScheduler+0x134>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801289a:	4a1a      	ldr	r2, [pc, #104]	; (8012904 <xPortStartScheduler+0x134>)
 801289c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80128a6:	4b18      	ldr	r3, [pc, #96]	; (8012908 <xPortStartScheduler+0x138>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4a17      	ldr	r2, [pc, #92]	; (8012908 <xPortStartScheduler+0x138>)
 80128ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80128b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80128b2:	4b15      	ldr	r3, [pc, #84]	; (8012908 <xPortStartScheduler+0x138>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	4a14      	ldr	r2, [pc, #80]	; (8012908 <xPortStartScheduler+0x138>)
 80128b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80128bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80128be:	f000 f8dd 	bl	8012a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80128c2:	4b12      	ldr	r3, [pc, #72]	; (801290c <xPortStartScheduler+0x13c>)
 80128c4:	2200      	movs	r2, #0
 80128c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80128c8:	f000 f8fc 	bl	8012ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80128cc:	4b10      	ldr	r3, [pc, #64]	; (8012910 <xPortStartScheduler+0x140>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	4a0f      	ldr	r2, [pc, #60]	; (8012910 <xPortStartScheduler+0x140>)
 80128d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80128d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80128d8:	f7ff ff66 	bl	80127a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80128dc:	f7fe fda8 	bl	8011430 <vTaskSwitchContext>
	prvTaskExitError();
 80128e0:	f7ff ff1c 	bl	801271c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80128e4:	2300      	movs	r3, #0
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3718      	adds	r7, #24
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	e000ed00 	.word	0xe000ed00
 80128f4:	410fc271 	.word	0x410fc271
 80128f8:	410fc270 	.word	0x410fc270
 80128fc:	e000e400 	.word	0xe000e400
 8012900:	24002780 	.word	0x24002780
 8012904:	24002784 	.word	0x24002784
 8012908:	e000ed20 	.word	0xe000ed20
 801290c:	24000064 	.word	0x24000064
 8012910:	e000ef34 	.word	0xe000ef34

08012914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012914:	b480      	push	{r7}
 8012916:	b083      	sub	sp, #12
 8012918:	af00      	add	r7, sp, #0
	__asm volatile
 801291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291e:	f383 8811 	msr	BASEPRI, r3
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	607b      	str	r3, [r7, #4]
}
 801292c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801292e:	4b0f      	ldr	r3, [pc, #60]	; (801296c <vPortEnterCritical+0x58>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	3301      	adds	r3, #1
 8012934:	4a0d      	ldr	r2, [pc, #52]	; (801296c <vPortEnterCritical+0x58>)
 8012936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012938:	4b0c      	ldr	r3, [pc, #48]	; (801296c <vPortEnterCritical+0x58>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d10f      	bne.n	8012960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012940:	4b0b      	ldr	r3, [pc, #44]	; (8012970 <vPortEnterCritical+0x5c>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	b2db      	uxtb	r3, r3
 8012946:	2b00      	cmp	r3, #0
 8012948:	d00a      	beq.n	8012960 <vPortEnterCritical+0x4c>
	__asm volatile
 801294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	603b      	str	r3, [r7, #0]
}
 801295c:	bf00      	nop
 801295e:	e7fe      	b.n	801295e <vPortEnterCritical+0x4a>
	}
}
 8012960:	bf00      	nop
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr
 801296c:	24000064 	.word	0x24000064
 8012970:	e000ed04 	.word	0xe000ed04

08012974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801297a:	4b12      	ldr	r3, [pc, #72]	; (80129c4 <vPortExitCritical+0x50>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d10a      	bne.n	8012998 <vPortExitCritical+0x24>
	__asm volatile
 8012982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012986:	f383 8811 	msr	BASEPRI, r3
 801298a:	f3bf 8f6f 	isb	sy
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	607b      	str	r3, [r7, #4]
}
 8012994:	bf00      	nop
 8012996:	e7fe      	b.n	8012996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012998:	4b0a      	ldr	r3, [pc, #40]	; (80129c4 <vPortExitCritical+0x50>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	3b01      	subs	r3, #1
 801299e:	4a09      	ldr	r2, [pc, #36]	; (80129c4 <vPortExitCritical+0x50>)
 80129a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80129a2:	4b08      	ldr	r3, [pc, #32]	; (80129c4 <vPortExitCritical+0x50>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d105      	bne.n	80129b6 <vPortExitCritical+0x42>
 80129aa:	2300      	movs	r3, #0
 80129ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	f383 8811 	msr	BASEPRI, r3
}
 80129b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80129b6:	bf00      	nop
 80129b8:	370c      	adds	r7, #12
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop
 80129c4:	24000064 	.word	0x24000064
	...

080129d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80129d0:	f3ef 8009 	mrs	r0, PSP
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	4b15      	ldr	r3, [pc, #84]	; (8012a30 <pxCurrentTCBConst>)
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	f01e 0f10 	tst.w	lr, #16
 80129e0:	bf08      	it	eq
 80129e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80129e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ea:	6010      	str	r0, [r2, #0]
 80129ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80129f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80129f4:	f380 8811 	msr	BASEPRI, r0
 80129f8:	f3bf 8f4f 	dsb	sy
 80129fc:	f3bf 8f6f 	isb	sy
 8012a00:	f7fe fd16 	bl	8011430 <vTaskSwitchContext>
 8012a04:	f04f 0000 	mov.w	r0, #0
 8012a08:	f380 8811 	msr	BASEPRI, r0
 8012a0c:	bc09      	pop	{r0, r3}
 8012a0e:	6819      	ldr	r1, [r3, #0]
 8012a10:	6808      	ldr	r0, [r1, #0]
 8012a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a16:	f01e 0f10 	tst.w	lr, #16
 8012a1a:	bf08      	it	eq
 8012a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a20:	f380 8809 	msr	PSP, r0
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	f3af 8000 	nop.w

08012a30 <pxCurrentTCBConst>:
 8012a30:	24002154 	.word	0x24002154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012a34:	bf00      	nop
 8012a36:	bf00      	nop

08012a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8012a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a42:	f383 8811 	msr	BASEPRI, r3
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	607b      	str	r3, [r7, #4]
}
 8012a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a52:	f7fe fc33 	bl	80112bc <xTaskIncrementTick>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d003      	beq.n	8012a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a5c:	4b06      	ldr	r3, [pc, #24]	; (8012a78 <xPortSysTickHandler+0x40>)
 8012a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	2300      	movs	r3, #0
 8012a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	f383 8811 	msr	BASEPRI, r3
}
 8012a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a70:	bf00      	nop
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	e000ed04 	.word	0xe000ed04

08012a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a80:	4b0b      	ldr	r3, [pc, #44]	; (8012ab0 <vPortSetupTimerInterrupt+0x34>)
 8012a82:	2200      	movs	r2, #0
 8012a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a86:	4b0b      	ldr	r3, [pc, #44]	; (8012ab4 <vPortSetupTimerInterrupt+0x38>)
 8012a88:	2200      	movs	r2, #0
 8012a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a8c:	4b0a      	ldr	r3, [pc, #40]	; (8012ab8 <vPortSetupTimerInterrupt+0x3c>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4a0a      	ldr	r2, [pc, #40]	; (8012abc <vPortSetupTimerInterrupt+0x40>)
 8012a92:	fba2 2303 	umull	r2, r3, r2, r3
 8012a96:	099b      	lsrs	r3, r3, #6
 8012a98:	4a09      	ldr	r2, [pc, #36]	; (8012ac0 <vPortSetupTimerInterrupt+0x44>)
 8012a9a:	3b01      	subs	r3, #1
 8012a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a9e:	4b04      	ldr	r3, [pc, #16]	; (8012ab0 <vPortSetupTimerInterrupt+0x34>)
 8012aa0:	2207      	movs	r2, #7
 8012aa2:	601a      	str	r2, [r3, #0]
}
 8012aa4:	bf00      	nop
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	e000e010 	.word	0xe000e010
 8012ab4:	e000e018 	.word	0xe000e018
 8012ab8:	2400003c 	.word	0x2400003c
 8012abc:	10624dd3 	.word	0x10624dd3
 8012ac0:	e000e014 	.word	0xe000e014

08012ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012ad4 <vPortEnableVFP+0x10>
 8012ac8:	6801      	ldr	r1, [r0, #0]
 8012aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012ace:	6001      	str	r1, [r0, #0]
 8012ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ad2:	bf00      	nop
 8012ad4:	e000ed88 	.word	0xe000ed88

08012ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012ad8:	b480      	push	{r7}
 8012ada:	b085      	sub	sp, #20
 8012adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012ade:	f3ef 8305 	mrs	r3, IPSR
 8012ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2b0f      	cmp	r3, #15
 8012ae8:	d914      	bls.n	8012b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012aea:	4a17      	ldr	r2, [pc, #92]	; (8012b48 <vPortValidateInterruptPriority+0x70>)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	4413      	add	r3, r2
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012af4:	4b15      	ldr	r3, [pc, #84]	; (8012b4c <vPortValidateInterruptPriority+0x74>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	7afa      	ldrb	r2, [r7, #11]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d20a      	bcs.n	8012b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	607b      	str	r3, [r7, #4]
}
 8012b10:	bf00      	nop
 8012b12:	e7fe      	b.n	8012b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b14:	4b0e      	ldr	r3, [pc, #56]	; (8012b50 <vPortValidateInterruptPriority+0x78>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b1c:	4b0d      	ldr	r3, [pc, #52]	; (8012b54 <vPortValidateInterruptPriority+0x7c>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d90a      	bls.n	8012b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b28:	f383 8811 	msr	BASEPRI, r3
 8012b2c:	f3bf 8f6f 	isb	sy
 8012b30:	f3bf 8f4f 	dsb	sy
 8012b34:	603b      	str	r3, [r7, #0]
}
 8012b36:	bf00      	nop
 8012b38:	e7fe      	b.n	8012b38 <vPortValidateInterruptPriority+0x60>
	}
 8012b3a:	bf00      	nop
 8012b3c:	3714      	adds	r7, #20
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop
 8012b48:	e000e3f0 	.word	0xe000e3f0
 8012b4c:	24002780 	.word	0x24002780
 8012b50:	e000ed0c 	.word	0xe000ed0c
 8012b54:	24002784 	.word	0x24002784

08012b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b08a      	sub	sp, #40	; 0x28
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b60:	2300      	movs	r3, #0
 8012b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b64:	f7fe fa4e 	bl	8011004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b68:	4b5b      	ldr	r3, [pc, #364]	; (8012cd8 <pvPortMalloc+0x180>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d101      	bne.n	8012b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b70:	f000 f920 	bl	8012db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b74:	4b59      	ldr	r3, [pc, #356]	; (8012cdc <pvPortMalloc+0x184>)
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4013      	ands	r3, r2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f040 8093 	bne.w	8012ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d01d      	beq.n	8012bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b88:	2208      	movs	r2, #8
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f003 0307 	and.w	r3, r3, #7
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d014      	beq.n	8012bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f023 0307 	bic.w	r3, r3, #7
 8012ba0:	3308      	adds	r3, #8
 8012ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f003 0307 	and.w	r3, r3, #7
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00a      	beq.n	8012bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8012bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	617b      	str	r3, [r7, #20]
}
 8012bc0:	bf00      	nop
 8012bc2:	e7fe      	b.n	8012bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d06e      	beq.n	8012ca8 <pvPortMalloc+0x150>
 8012bca:	4b45      	ldr	r3, [pc, #276]	; (8012ce0 <pvPortMalloc+0x188>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d869      	bhi.n	8012ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012bd4:	4b43      	ldr	r3, [pc, #268]	; (8012ce4 <pvPortMalloc+0x18c>)
 8012bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012bd8:	4b42      	ldr	r3, [pc, #264]	; (8012ce4 <pvPortMalloc+0x18c>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012bde:	e004      	b.n	8012bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d903      	bls.n	8012bfc <pvPortMalloc+0xa4>
 8012bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d1f1      	bne.n	8012be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012bfc:	4b36      	ldr	r3, [pc, #216]	; (8012cd8 <pvPortMalloc+0x180>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d050      	beq.n	8012ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2208      	movs	r2, #8
 8012c0c:	4413      	add	r3, r2
 8012c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	681a      	ldr	r2, [r3, #0]
 8012c14:	6a3b      	ldr	r3, [r7, #32]
 8012c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	685a      	ldr	r2, [r3, #4]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	1ad2      	subs	r2, r2, r3
 8012c20:	2308      	movs	r3, #8
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d91f      	bls.n	8012c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	f003 0307 	and.w	r3, r3, #7
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00a      	beq.n	8012c50 <pvPortMalloc+0xf8>
	__asm volatile
 8012c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3e:	f383 8811 	msr	BASEPRI, r3
 8012c42:	f3bf 8f6f 	isb	sy
 8012c46:	f3bf 8f4f 	dsb	sy
 8012c4a:	613b      	str	r3, [r7, #16]
}
 8012c4c:	bf00      	nop
 8012c4e:	e7fe      	b.n	8012c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	685a      	ldr	r2, [r3, #4]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	1ad2      	subs	r2, r2, r3
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c62:	69b8      	ldr	r0, [r7, #24]
 8012c64:	f000 f90a 	bl	8012e7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c68:	4b1d      	ldr	r3, [pc, #116]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	4a1b      	ldr	r2, [pc, #108]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c76:	4b1a      	ldr	r3, [pc, #104]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	4b1b      	ldr	r3, [pc, #108]	; (8012ce8 <pvPortMalloc+0x190>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d203      	bcs.n	8012c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c82:	4b17      	ldr	r3, [pc, #92]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	4a18      	ldr	r2, [pc, #96]	; (8012ce8 <pvPortMalloc+0x190>)
 8012c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8c:	685a      	ldr	r2, [r3, #4]
 8012c8e:	4b13      	ldr	r3, [pc, #76]	; (8012cdc <pvPortMalloc+0x184>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	431a      	orrs	r2, r3
 8012c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c9e:	4b13      	ldr	r3, [pc, #76]	; (8012cec <pvPortMalloc+0x194>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	4a11      	ldr	r2, [pc, #68]	; (8012cec <pvPortMalloc+0x194>)
 8012ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012ca8:	f7fe f9ba 	bl	8011020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	f003 0307 	and.w	r3, r3, #7
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d00a      	beq.n	8012ccc <pvPortMalloc+0x174>
	__asm volatile
 8012cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cba:	f383 8811 	msr	BASEPRI, r3
 8012cbe:	f3bf 8f6f 	isb	sy
 8012cc2:	f3bf 8f4f 	dsb	sy
 8012cc6:	60fb      	str	r3, [r7, #12]
}
 8012cc8:	bf00      	nop
 8012cca:	e7fe      	b.n	8012cca <pvPortMalloc+0x172>
	return pvReturn;
 8012ccc:	69fb      	ldr	r3, [r7, #28]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3728      	adds	r7, #40	; 0x28
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	2401ae30 	.word	0x2401ae30
 8012cdc:	2401ae44 	.word	0x2401ae44
 8012ce0:	2401ae34 	.word	0x2401ae34
 8012ce4:	2401ae28 	.word	0x2401ae28
 8012ce8:	2401ae38 	.word	0x2401ae38
 8012cec:	2401ae3c 	.word	0x2401ae3c

08012cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b086      	sub	sp, #24
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d04d      	beq.n	8012d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012d02:	2308      	movs	r3, #8
 8012d04:	425b      	negs	r3, r3
 8012d06:	697a      	ldr	r2, [r7, #20]
 8012d08:	4413      	add	r3, r2
 8012d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	685a      	ldr	r2, [r3, #4]
 8012d14:	4b24      	ldr	r3, [pc, #144]	; (8012da8 <vPortFree+0xb8>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4013      	ands	r3, r2
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d10a      	bne.n	8012d34 <vPortFree+0x44>
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d22:	f383 8811 	msr	BASEPRI, r3
 8012d26:	f3bf 8f6f 	isb	sy
 8012d2a:	f3bf 8f4f 	dsb	sy
 8012d2e:	60fb      	str	r3, [r7, #12]
}
 8012d30:	bf00      	nop
 8012d32:	e7fe      	b.n	8012d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00a      	beq.n	8012d52 <vPortFree+0x62>
	__asm volatile
 8012d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d40:	f383 8811 	msr	BASEPRI, r3
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	60bb      	str	r3, [r7, #8]
}
 8012d4e:	bf00      	nop
 8012d50:	e7fe      	b.n	8012d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	685a      	ldr	r2, [r3, #4]
 8012d56:	4b14      	ldr	r3, [pc, #80]	; (8012da8 <vPortFree+0xb8>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4013      	ands	r3, r2
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d01e      	beq.n	8012d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d11a      	bne.n	8012d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	685a      	ldr	r2, [r3, #4]
 8012d6c:	4b0e      	ldr	r3, [pc, #56]	; (8012da8 <vPortFree+0xb8>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	43db      	mvns	r3, r3
 8012d72:	401a      	ands	r2, r3
 8012d74:	693b      	ldr	r3, [r7, #16]
 8012d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d78:	f7fe f944 	bl	8011004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	685a      	ldr	r2, [r3, #4]
 8012d80:	4b0a      	ldr	r3, [pc, #40]	; (8012dac <vPortFree+0xbc>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4413      	add	r3, r2
 8012d86:	4a09      	ldr	r2, [pc, #36]	; (8012dac <vPortFree+0xbc>)
 8012d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d8a:	6938      	ldr	r0, [r7, #16]
 8012d8c:	f000 f876 	bl	8012e7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d90:	4b07      	ldr	r3, [pc, #28]	; (8012db0 <vPortFree+0xc0>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	3301      	adds	r3, #1
 8012d96:	4a06      	ldr	r2, [pc, #24]	; (8012db0 <vPortFree+0xc0>)
 8012d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d9a:	f7fe f941 	bl	8011020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d9e:	bf00      	nop
 8012da0:	3718      	adds	r7, #24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	2401ae44 	.word	0x2401ae44
 8012dac:	2401ae34 	.word	0x2401ae34
 8012db0:	2401ae40 	.word	0x2401ae40

08012db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012db4:	b480      	push	{r7}
 8012db6:	b085      	sub	sp, #20
 8012db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012dba:	4b29      	ldr	r3, [pc, #164]	; (8012e60 <prvHeapInit+0xac>)
 8012dbc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012dbe:	4b29      	ldr	r3, [pc, #164]	; (8012e64 <prvHeapInit+0xb0>)
 8012dc0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	f003 0307 	and.w	r3, r3, #7
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d00c      	beq.n	8012de6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	3307      	adds	r3, #7
 8012dd0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	f023 0307 	bic.w	r3, r3, #7
 8012dd8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	4a20      	ldr	r2, [pc, #128]	; (8012e64 <prvHeapInit+0xb0>)
 8012de2:	4413      	add	r3, r2
 8012de4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012dea:	4a1f      	ldr	r2, [pc, #124]	; (8012e68 <prvHeapInit+0xb4>)
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012df0:	4b1d      	ldr	r3, [pc, #116]	; (8012e68 <prvHeapInit+0xb4>)
 8012df2:	2200      	movs	r2, #0
 8012df4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	68ba      	ldr	r2, [r7, #8]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012dfe:	2208      	movs	r2, #8
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	1a9b      	subs	r3, r3, r2
 8012e04:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	f023 0307 	bic.w	r3, r3, #7
 8012e0c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	4a16      	ldr	r2, [pc, #88]	; (8012e6c <prvHeapInit+0xb8>)
 8012e12:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012e14:	4b15      	ldr	r3, [pc, #84]	; (8012e6c <prvHeapInit+0xb8>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012e1c:	4b13      	ldr	r3, [pc, #76]	; (8012e6c <prvHeapInit+0xb8>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	2200      	movs	r2, #0
 8012e22:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	68fa      	ldr	r2, [r7, #12]
 8012e2c:	1ad2      	subs	r2, r2, r3
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012e32:	4b0e      	ldr	r3, [pc, #56]	; (8012e6c <prvHeapInit+0xb8>)
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	4a0c      	ldr	r2, [pc, #48]	; (8012e70 <prvHeapInit+0xbc>)
 8012e40:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	4a0b      	ldr	r2, [pc, #44]	; (8012e74 <prvHeapInit+0xc0>)
 8012e48:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e4a:	4b0b      	ldr	r3, [pc, #44]	; (8012e78 <prvHeapInit+0xc4>)
 8012e4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e50:	601a      	str	r2, [r3, #0]
}
 8012e52:	bf00      	nop
 8012e54:	3714      	adds	r7, #20
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop
 8012e60:	000186a0 	.word	0x000186a0
 8012e64:	24002788 	.word	0x24002788
 8012e68:	2401ae28 	.word	0x2401ae28
 8012e6c:	2401ae30 	.word	0x2401ae30
 8012e70:	2401ae38 	.word	0x2401ae38
 8012e74:	2401ae34 	.word	0x2401ae34
 8012e78:	2401ae44 	.word	0x2401ae44

08012e7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b085      	sub	sp, #20
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e84:	4b28      	ldr	r3, [pc, #160]	; (8012f28 <prvInsertBlockIntoFreeList+0xac>)
 8012e86:	60fb      	str	r3, [r7, #12]
 8012e88:	e002      	b.n	8012e90 <prvInsertBlockIntoFreeList+0x14>
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	60fb      	str	r3, [r7, #12]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d8f7      	bhi.n	8012e8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	68ba      	ldr	r2, [r7, #8]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d108      	bne.n	8012ebe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	685a      	ldr	r2, [r3, #4]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	441a      	add	r2, r3
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	68ba      	ldr	r2, [r7, #8]
 8012ec8:	441a      	add	r2, r3
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d118      	bne.n	8012f04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	4b15      	ldr	r3, [pc, #84]	; (8012f2c <prvInsertBlockIntoFreeList+0xb0>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d00d      	beq.n	8012efa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	685a      	ldr	r2, [r3, #4]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	441a      	add	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	e008      	b.n	8012f0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012efa:	4b0c      	ldr	r3, [pc, #48]	; (8012f2c <prvInsertBlockIntoFreeList+0xb0>)
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	601a      	str	r2, [r3, #0]
 8012f02:	e003      	b.n	8012f0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681a      	ldr	r2, [r3, #0]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f0c:	68fa      	ldr	r2, [r7, #12]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d002      	beq.n	8012f1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f1a:	bf00      	nop
 8012f1c:	3714      	adds	r7, #20
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f24:	4770      	bx	lr
 8012f26:	bf00      	nop
 8012f28:	2401ae28 	.word	0x2401ae28
 8012f2c:	2401ae30 	.word	0x2401ae30

08012f30 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012f3a:	f007 fb93 	bl	801a664 <sys_timeouts_sleeptime>
 8012f3e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f46:	d10b      	bne.n	8012f60 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012f48:	4813      	ldr	r0, [pc, #76]	; (8012f98 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f4a:	f00a f90a 	bl	801d162 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012f4e:	2200      	movs	r2, #0
 8012f50:	6839      	ldr	r1, [r7, #0]
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f00a f892 	bl	801d07c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012f58:	480f      	ldr	r0, [pc, #60]	; (8012f98 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f5a:	f00a f8f3 	bl	801d144 <sys_mutex_lock>
    return;
 8012f5e:	e018      	b.n	8012f92 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d102      	bne.n	8012f6c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012f66:	f007 fb43 	bl	801a5f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012f6a:	e7e6      	b.n	8012f3a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012f6c:	480a      	ldr	r0, [pc, #40]	; (8012f98 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f6e:	f00a f8f8 	bl	801d162 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012f72:	68fa      	ldr	r2, [r7, #12]
 8012f74:	6839      	ldr	r1, [r7, #0]
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f00a f880 	bl	801d07c <sys_arch_mbox_fetch>
 8012f7c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012f7e:	4806      	ldr	r0, [pc, #24]	; (8012f98 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f80:	f00a f8e0 	bl	801d144 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f8a:	d102      	bne.n	8012f92 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012f8c:	f007 fb30 	bl	801a5f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012f90:	e7d3      	b.n	8012f3a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012f92:	3710      	adds	r7, #16
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	2401b79c 	.word	0x2401b79c

08012f9c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012fa4:	4810      	ldr	r0, [pc, #64]	; (8012fe8 <tcpip_thread+0x4c>)
 8012fa6:	f00a f8cd 	bl	801d144 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012faa:	4b10      	ldr	r3, [pc, #64]	; (8012fec <tcpip_thread+0x50>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d005      	beq.n	8012fbe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012fb2:	4b0e      	ldr	r3, [pc, #56]	; (8012fec <tcpip_thread+0x50>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	4a0e      	ldr	r2, [pc, #56]	; (8012ff0 <tcpip_thread+0x54>)
 8012fb8:	6812      	ldr	r2, [r2, #0]
 8012fba:	4610      	mov	r0, r2
 8012fbc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012fbe:	f107 030c 	add.w	r3, r7, #12
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	480b      	ldr	r0, [pc, #44]	; (8012ff4 <tcpip_thread+0x58>)
 8012fc6:	f7ff ffb3 	bl	8012f30 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d106      	bne.n	8012fde <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012fd0:	4b09      	ldr	r3, [pc, #36]	; (8012ff8 <tcpip_thread+0x5c>)
 8012fd2:	2291      	movs	r2, #145	; 0x91
 8012fd4:	4909      	ldr	r1, [pc, #36]	; (8012ffc <tcpip_thread+0x60>)
 8012fd6:	480a      	ldr	r0, [pc, #40]	; (8013000 <tcpip_thread+0x64>)
 8012fd8:	f00a fb1c 	bl	801d614 <iprintf>
      continue;
 8012fdc:	e003      	b.n	8012fe6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f000 f80f 	bl	8013004 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012fe6:	e7ea      	b.n	8012fbe <tcpip_thread+0x22>
 8012fe8:	2401b79c 	.word	0x2401b79c
 8012fec:	2401ae48 	.word	0x2401ae48
 8012ff0:	2401ae4c 	.word	0x2401ae4c
 8012ff4:	2401ae50 	.word	0x2401ae50
 8012ff8:	0801ea10 	.word	0x0801ea10
 8012ffc:	0801ea40 	.word	0x0801ea40
 8013000:	0801ea60 	.word	0x0801ea60

08013004 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	2b02      	cmp	r3, #2
 8013012:	d026      	beq.n	8013062 <tcpip_thread_handle_msg+0x5e>
 8013014:	2b02      	cmp	r3, #2
 8013016:	dc2b      	bgt.n	8013070 <tcpip_thread_handle_msg+0x6c>
 8013018:	2b00      	cmp	r3, #0
 801301a:	d002      	beq.n	8013022 <tcpip_thread_handle_msg+0x1e>
 801301c:	2b01      	cmp	r3, #1
 801301e:	d015      	beq.n	801304c <tcpip_thread_handle_msg+0x48>
 8013020:	e026      	b.n	8013070 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	68db      	ldr	r3, [r3, #12]
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	6850      	ldr	r0, [r2, #4]
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	6892      	ldr	r2, [r2, #8]
 801302e:	4611      	mov	r1, r2
 8013030:	4798      	blx	r3
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d004      	beq.n	8013042 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	4618      	mov	r0, r3
 801303e:	f001 fdd7 	bl	8014bf0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013042:	6879      	ldr	r1, [r7, #4]
 8013044:	2009      	movs	r0, #9
 8013046:	f000 ff2b 	bl	8013ea0 <memp_free>
      break;
 801304a:	e018      	b.n	801307e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	687a      	ldr	r2, [r7, #4]
 8013052:	6892      	ldr	r2, [r2, #8]
 8013054:	4610      	mov	r0, r2
 8013056:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013058:	6879      	ldr	r1, [r7, #4]
 801305a:	2008      	movs	r0, #8
 801305c:	f000 ff20 	bl	8013ea0 <memp_free>
      break;
 8013060:	e00d      	b.n	801307e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	687a      	ldr	r2, [r7, #4]
 8013068:	6892      	ldr	r2, [r2, #8]
 801306a:	4610      	mov	r0, r2
 801306c:	4798      	blx	r3
      break;
 801306e:	e006      	b.n	801307e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013070:	4b05      	ldr	r3, [pc, #20]	; (8013088 <tcpip_thread_handle_msg+0x84>)
 8013072:	22cf      	movs	r2, #207	; 0xcf
 8013074:	4905      	ldr	r1, [pc, #20]	; (801308c <tcpip_thread_handle_msg+0x88>)
 8013076:	4806      	ldr	r0, [pc, #24]	; (8013090 <tcpip_thread_handle_msg+0x8c>)
 8013078:	f00a facc 	bl	801d614 <iprintf>
      break;
 801307c:	bf00      	nop
  }
}
 801307e:	bf00      	nop
 8013080:	3708      	adds	r7, #8
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	0801ea10 	.word	0x0801ea10
 801308c:	0801ea40 	.word	0x0801ea40
 8013090:	0801ea60 	.word	0x0801ea60

08013094 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b086      	sub	sp, #24
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80130a0:	481a      	ldr	r0, [pc, #104]	; (801310c <tcpip_inpkt+0x78>)
 80130a2:	f00a f81c 	bl	801d0de <sys_mbox_valid>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d105      	bne.n	80130b8 <tcpip_inpkt+0x24>
 80130ac:	4b18      	ldr	r3, [pc, #96]	; (8013110 <tcpip_inpkt+0x7c>)
 80130ae:	22fc      	movs	r2, #252	; 0xfc
 80130b0:	4918      	ldr	r1, [pc, #96]	; (8013114 <tcpip_inpkt+0x80>)
 80130b2:	4819      	ldr	r0, [pc, #100]	; (8013118 <tcpip_inpkt+0x84>)
 80130b4:	f00a faae 	bl	801d614 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80130b8:	2009      	movs	r0, #9
 80130ba:	f000 fe7b 	bl	8013db4 <memp_malloc>
 80130be:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d102      	bne.n	80130cc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80130c6:	f04f 33ff 	mov.w	r3, #4294967295
 80130ca:	e01a      	b.n	8013102 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	2200      	movs	r2, #0
 80130d0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	68fa      	ldr	r2, [r7, #12]
 80130d6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	68ba      	ldr	r2, [r7, #8]
 80130dc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80130e4:	6979      	ldr	r1, [r7, #20]
 80130e6:	4809      	ldr	r0, [pc, #36]	; (801310c <tcpip_inpkt+0x78>)
 80130e8:	f009 ffae 	bl	801d048 <sys_mbox_trypost>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d006      	beq.n	8013100 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80130f2:	6979      	ldr	r1, [r7, #20]
 80130f4:	2009      	movs	r0, #9
 80130f6:	f000 fed3 	bl	8013ea0 <memp_free>
    return ERR_MEM;
 80130fa:	f04f 33ff 	mov.w	r3, #4294967295
 80130fe:	e000      	b.n	8013102 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013100:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013102:	4618      	mov	r0, r3
 8013104:	3718      	adds	r7, #24
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	2401ae50 	.word	0x2401ae50
 8013110:	0801ea10 	.word	0x0801ea10
 8013114:	0801ea88 	.word	0x0801ea88
 8013118:	0801ea60 	.word	0x0801ea60

0801311c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801312c:	f003 0318 	and.w	r3, r3, #24
 8013130:	2b00      	cmp	r3, #0
 8013132:	d006      	beq.n	8013142 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013134:	4a08      	ldr	r2, [pc, #32]	; (8013158 <tcpip_input+0x3c>)
 8013136:	6839      	ldr	r1, [r7, #0]
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff ffab 	bl	8013094 <tcpip_inpkt>
 801313e:	4603      	mov	r3, r0
 8013140:	e005      	b.n	801314e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8013142:	4a06      	ldr	r2, [pc, #24]	; (801315c <tcpip_input+0x40>)
 8013144:	6839      	ldr	r1, [r7, #0]
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7ff ffa4 	bl	8013094 <tcpip_inpkt>
 801314c:	4603      	mov	r3, r0
}
 801314e:	4618      	mov	r0, r3
 8013150:	3708      	adds	r7, #8
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	0801ce69 	.word	0x0801ce69
 801315c:	0801bd7d 	.word	0x0801bd7d

08013160 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801316a:	4819      	ldr	r0, [pc, #100]	; (80131d0 <tcpip_try_callback+0x70>)
 801316c:	f009 ffb7 	bl	801d0de <sys_mbox_valid>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <tcpip_try_callback+0x24>
 8013176:	4b17      	ldr	r3, [pc, #92]	; (80131d4 <tcpip_try_callback+0x74>)
 8013178:	f240 125d 	movw	r2, #349	; 0x15d
 801317c:	4916      	ldr	r1, [pc, #88]	; (80131d8 <tcpip_try_callback+0x78>)
 801317e:	4817      	ldr	r0, [pc, #92]	; (80131dc <tcpip_try_callback+0x7c>)
 8013180:	f00a fa48 	bl	801d614 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013184:	2008      	movs	r0, #8
 8013186:	f000 fe15 	bl	8013db4 <memp_malloc>
 801318a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d102      	bne.n	8013198 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8013192:	f04f 33ff 	mov.w	r3, #4294967295
 8013196:	e017      	b.n	80131c8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2201      	movs	r2, #1
 801319c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80131aa:	68f9      	ldr	r1, [r7, #12]
 80131ac:	4808      	ldr	r0, [pc, #32]	; (80131d0 <tcpip_try_callback+0x70>)
 80131ae:	f009 ff4b 	bl	801d048 <sys_mbox_trypost>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d006      	beq.n	80131c6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80131b8:	68f9      	ldr	r1, [r7, #12]
 80131ba:	2008      	movs	r0, #8
 80131bc:	f000 fe70 	bl	8013ea0 <memp_free>
    return ERR_MEM;
 80131c0:	f04f 33ff 	mov.w	r3, #4294967295
 80131c4:	e000      	b.n	80131c8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80131c6:	2300      	movs	r3, #0
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3710      	adds	r7, #16
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	2401ae50 	.word	0x2401ae50
 80131d4:	0801ea10 	.word	0x0801ea10
 80131d8:	0801ea88 	.word	0x0801ea88
 80131dc:	0801ea60 	.word	0x0801ea60

080131e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af02      	add	r7, sp, #8
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80131ea:	f000 f92d 	bl	8013448 <lwip_init>

  tcpip_init_done = initfunc;
 80131ee:	4a17      	ldr	r2, [pc, #92]	; (801324c <tcpip_init+0x6c>)
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80131f4:	4a16      	ldr	r2, [pc, #88]	; (8013250 <tcpip_init+0x70>)
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80131fa:	2106      	movs	r1, #6
 80131fc:	4815      	ldr	r0, [pc, #84]	; (8013254 <tcpip_init+0x74>)
 80131fe:	f009 ff09 	bl	801d014 <sys_mbox_new>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d006      	beq.n	8013216 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013208:	4b13      	ldr	r3, [pc, #76]	; (8013258 <tcpip_init+0x78>)
 801320a:	f240 2261 	movw	r2, #609	; 0x261
 801320e:	4913      	ldr	r1, [pc, #76]	; (801325c <tcpip_init+0x7c>)
 8013210:	4813      	ldr	r0, [pc, #76]	; (8013260 <tcpip_init+0x80>)
 8013212:	f00a f9ff 	bl	801d614 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013216:	4813      	ldr	r0, [pc, #76]	; (8013264 <tcpip_init+0x84>)
 8013218:	f009 ff7e 	bl	801d118 <sys_mutex_new>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d006      	beq.n	8013230 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8013222:	4b0d      	ldr	r3, [pc, #52]	; (8013258 <tcpip_init+0x78>)
 8013224:	f240 2265 	movw	r2, #613	; 0x265
 8013228:	490f      	ldr	r1, [pc, #60]	; (8013268 <tcpip_init+0x88>)
 801322a:	480d      	ldr	r0, [pc, #52]	; (8013260 <tcpip_init+0x80>)
 801322c:	f00a f9f2 	bl	801d614 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013230:	2318      	movs	r3, #24
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013238:	2200      	movs	r2, #0
 801323a:	490c      	ldr	r1, [pc, #48]	; (801326c <tcpip_init+0x8c>)
 801323c:	480c      	ldr	r0, [pc, #48]	; (8013270 <tcpip_init+0x90>)
 801323e:	f009 ff9d 	bl	801d17c <sys_thread_new>
}
 8013242:	bf00      	nop
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	2401ae48 	.word	0x2401ae48
 8013250:	2401ae4c 	.word	0x2401ae4c
 8013254:	2401ae50 	.word	0x2401ae50
 8013258:	0801ea10 	.word	0x0801ea10
 801325c:	0801ea98 	.word	0x0801ea98
 8013260:	0801ea60 	.word	0x0801ea60
 8013264:	2401b79c 	.word	0x2401b79c
 8013268:	0801eabc 	.word	0x0801eabc
 801326c:	08012f9d 	.word	0x08012f9d
 8013270:	0801eae0 	.word	0x0801eae0

08013274 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013274:	b480      	push	{r7}
 8013276:	b083      	sub	sp, #12
 8013278:	af00      	add	r7, sp, #0
 801327a:	4603      	mov	r3, r0
 801327c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801327e:	88fb      	ldrh	r3, [r7, #6]
 8013280:	021b      	lsls	r3, r3, #8
 8013282:	b21a      	sxth	r2, r3
 8013284:	88fb      	ldrh	r3, [r7, #6]
 8013286:	0a1b      	lsrs	r3, r3, #8
 8013288:	b29b      	uxth	r3, r3
 801328a:	b21b      	sxth	r3, r3
 801328c:	4313      	orrs	r3, r2
 801328e:	b21b      	sxth	r3, r3
 8013290:	b29b      	uxth	r3, r3
}
 8013292:	4618      	mov	r0, r3
 8013294:	370c      	adds	r7, #12
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr

0801329e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801329e:	b480      	push	{r7}
 80132a0:	b083      	sub	sp, #12
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	061a      	lsls	r2, r3, #24
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	021b      	lsls	r3, r3, #8
 80132ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80132b2:	431a      	orrs	r2, r3
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	0a1b      	lsrs	r3, r3, #8
 80132b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80132bc:	431a      	orrs	r2, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	0e1b      	lsrs	r3, r3, #24
 80132c2:	4313      	orrs	r3, r2
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b089      	sub	sp, #36	; 0x24
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80132e2:	2300      	movs	r3, #0
 80132e4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	f003 0301 	and.w	r3, r3, #1
 80132ec:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d00d      	beq.n	8013310 <lwip_standard_chksum+0x40>
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	dd0a      	ble.n	8013310 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80132fa:	69fa      	ldr	r2, [r7, #28]
 80132fc:	1c53      	adds	r3, r2, #1
 80132fe:	61fb      	str	r3, [r7, #28]
 8013300:	f107 030e 	add.w	r3, r7, #14
 8013304:	3301      	adds	r3, #1
 8013306:	7812      	ldrb	r2, [r2, #0]
 8013308:	701a      	strb	r2, [r3, #0]
    len--;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	3b01      	subs	r3, #1
 801330e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8013314:	e00a      	b.n	801332c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	1c9a      	adds	r2, r3, #2
 801331a:	61ba      	str	r2, [r7, #24]
 801331c:	881b      	ldrh	r3, [r3, #0]
 801331e:	461a      	mov	r2, r3
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	4413      	add	r3, r2
 8013324:	617b      	str	r3, [r7, #20]
    len -= 2;
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	3b02      	subs	r3, #2
 801332a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	2b01      	cmp	r3, #1
 8013330:	dcf1      	bgt.n	8013316 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	dd04      	ble.n	8013342 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013338:	f107 030e 	add.w	r3, r7, #14
 801333c:	69ba      	ldr	r2, [r7, #24]
 801333e:	7812      	ldrb	r2, [r2, #0]
 8013340:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8013342:	89fb      	ldrh	r3, [r7, #14]
 8013344:	461a      	mov	r2, r3
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	4413      	add	r3, r2
 801334a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	0c1a      	lsrs	r2, r3, #16
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	b29b      	uxth	r3, r3
 8013354:	4413      	add	r3, r2
 8013356:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	0c1a      	lsrs	r2, r3, #16
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	b29b      	uxth	r3, r3
 8013360:	4413      	add	r3, r2
 8013362:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d007      	beq.n	801337a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	021b      	lsls	r3, r3, #8
 801336e:	b29a      	uxth	r2, r3
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	0a1b      	lsrs	r3, r3, #8
 8013374:	b2db      	uxtb	r3, r3
 8013376:	4313      	orrs	r3, r2
 8013378:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	b29b      	uxth	r3, r3
}
 801337e:	4618      	mov	r0, r3
 8013380:	3724      	adds	r7, #36	; 0x24
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr

0801338a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801338a:	b580      	push	{r7, lr}
 801338c:	b082      	sub	sp, #8
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
 8013392:	460b      	mov	r3, r1
 8013394:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8013396:	887b      	ldrh	r3, [r7, #2]
 8013398:	4619      	mov	r1, r3
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f7ff ff98 	bl	80132d0 <lwip_standard_chksum>
 80133a0:	4603      	mov	r3, r0
 80133a2:	43db      	mvns	r3, r3
 80133a4:	b29b      	uxth	r3, r3
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b086      	sub	sp, #24
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80133b6:	2300      	movs	r3, #0
 80133b8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80133ba:	2300      	movs	r3, #0
 80133bc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	613b      	str	r3, [r7, #16]
 80133c2:	e02b      	b.n	801341c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	685a      	ldr	r2, [r3, #4]
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	895b      	ldrh	r3, [r3, #10]
 80133cc:	4619      	mov	r1, r3
 80133ce:	4610      	mov	r0, r2
 80133d0:	f7ff ff7e 	bl	80132d0 <lwip_standard_chksum>
 80133d4:	4603      	mov	r3, r0
 80133d6:	461a      	mov	r2, r3
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	4413      	add	r3, r2
 80133dc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	0c1a      	lsrs	r2, r3, #16
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	4413      	add	r3, r2
 80133e8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	895b      	ldrh	r3, [r3, #10]
 80133ee:	f003 0301 	and.w	r3, r3, #1
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d00e      	beq.n	8013416 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	bf0c      	ite	eq
 80133fe:	2301      	moveq	r3, #1
 8013400:	2300      	movne	r3, #0
 8013402:	b2db      	uxtb	r3, r3
 8013404:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	021b      	lsls	r3, r3, #8
 801340a:	b29a      	uxth	r2, r3
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	0a1b      	lsrs	r3, r3, #8
 8013410:	b2db      	uxtb	r3, r3
 8013412:	4313      	orrs	r3, r2
 8013414:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	613b      	str	r3, [r7, #16]
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d1d0      	bne.n	80133c4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d007      	beq.n	8013438 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	021b      	lsls	r3, r3, #8
 801342c:	b29a      	uxth	r2, r3
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	0a1b      	lsrs	r3, r3, #8
 8013432:	b2db      	uxtb	r3, r3
 8013434:	4313      	orrs	r3, r2
 8013436:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	b29b      	uxth	r3, r3
 801343c:	43db      	mvns	r3, r3
 801343e:	b29b      	uxth	r3, r3
}
 8013440:	4618      	mov	r0, r3
 8013442:	3718      	adds	r7, #24
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801344e:	2300      	movs	r3, #0
 8013450:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8013452:	f009 fe55 	bl	801d100 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013456:	f000 f8d9 	bl	801360c <mem_init>
  memp_init();
 801345a:	f000 fc3d 	bl	8013cd8 <memp_init>
  pbuf_init();
  netif_init();
 801345e:	f000 fd49 	bl	8013ef4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013462:	f007 f937 	bl	801a6d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013466:	f001 fe5d 	bl	8015124 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801346a:	f007 f879 	bl	801a560 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801346e:	bf00      	nop
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
	...

08013478 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	4603      	mov	r3, r0
 8013480:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8013482:	4b05      	ldr	r3, [pc, #20]	; (8013498 <ptr_to_mem+0x20>)
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	88fb      	ldrh	r3, [r7, #6]
 8013488:	4413      	add	r3, r2
}
 801348a:	4618      	mov	r0, r3
 801348c:	370c      	adds	r7, #12
 801348e:	46bd      	mov	sp, r7
 8013490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	2401ae54 	.word	0x2401ae54

0801349c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80134a4:	4b05      	ldr	r3, [pc, #20]	; (80134bc <mem_to_ptr+0x20>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	687a      	ldr	r2, [r7, #4]
 80134aa:	1ad3      	subs	r3, r2, r3
 80134ac:	b29b      	uxth	r3, r3
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	370c      	adds	r7, #12
 80134b2:	46bd      	mov	sp, r7
 80134b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b8:	4770      	bx	lr
 80134ba:	bf00      	nop
 80134bc:	2401ae54 	.word	0x2401ae54

080134c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80134c0:	b590      	push	{r4, r7, lr}
 80134c2:	b085      	sub	sp, #20
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80134c8:	4b47      	ldr	r3, [pc, #284]	; (80135e8 <plug_holes+0x128>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d206      	bcs.n	80134e0 <plug_holes+0x20>
 80134d2:	4b46      	ldr	r3, [pc, #280]	; (80135ec <plug_holes+0x12c>)
 80134d4:	f240 12df 	movw	r2, #479	; 0x1df
 80134d8:	4945      	ldr	r1, [pc, #276]	; (80135f0 <plug_holes+0x130>)
 80134da:	4846      	ldr	r0, [pc, #280]	; (80135f4 <plug_holes+0x134>)
 80134dc:	f00a f89a 	bl	801d614 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80134e0:	4b45      	ldr	r3, [pc, #276]	; (80135f8 <plug_holes+0x138>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	687a      	ldr	r2, [r7, #4]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d306      	bcc.n	80134f8 <plug_holes+0x38>
 80134ea:	4b40      	ldr	r3, [pc, #256]	; (80135ec <plug_holes+0x12c>)
 80134ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80134f0:	4942      	ldr	r1, [pc, #264]	; (80135fc <plug_holes+0x13c>)
 80134f2:	4840      	ldr	r0, [pc, #256]	; (80135f4 <plug_holes+0x134>)
 80134f4:	f00a f88e 	bl	801d614 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	791b      	ldrb	r3, [r3, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d006      	beq.n	801350e <plug_holes+0x4e>
 8013500:	4b3a      	ldr	r3, [pc, #232]	; (80135ec <plug_holes+0x12c>)
 8013502:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013506:	493e      	ldr	r1, [pc, #248]	; (8013600 <plug_holes+0x140>)
 8013508:	483a      	ldr	r0, [pc, #232]	; (80135f4 <plug_holes+0x134>)
 801350a:	f00a f883 	bl	801d614 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	881b      	ldrh	r3, [r3, #0]
 8013512:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013516:	4293      	cmp	r3, r2
 8013518:	d906      	bls.n	8013528 <plug_holes+0x68>
 801351a:	4b34      	ldr	r3, [pc, #208]	; (80135ec <plug_holes+0x12c>)
 801351c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013520:	4938      	ldr	r1, [pc, #224]	; (8013604 <plug_holes+0x144>)
 8013522:	4834      	ldr	r0, [pc, #208]	; (80135f4 <plug_holes+0x134>)
 8013524:	f00a f876 	bl	801d614 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	4618      	mov	r0, r3
 801352e:	f7ff ffa3 	bl	8013478 <ptr_to_mem>
 8013532:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	429a      	cmp	r2, r3
 801353a:	d025      	beq.n	8013588 <plug_holes+0xc8>
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	791b      	ldrb	r3, [r3, #4]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d121      	bne.n	8013588 <plug_holes+0xc8>
 8013544:	4b2c      	ldr	r3, [pc, #176]	; (80135f8 <plug_holes+0x138>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	429a      	cmp	r2, r3
 801354c:	d01c      	beq.n	8013588 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801354e:	4b2e      	ldr	r3, [pc, #184]	; (8013608 <plug_holes+0x148>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	429a      	cmp	r2, r3
 8013556:	d102      	bne.n	801355e <plug_holes+0x9e>
      lfree = mem;
 8013558:	4a2b      	ldr	r2, [pc, #172]	; (8013608 <plug_holes+0x148>)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	881a      	ldrh	r2, [r3, #0]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	881b      	ldrh	r3, [r3, #0]
 801356a:	f647 52e8 	movw	r2, #32232	; 0x7de8
 801356e:	4293      	cmp	r3, r2
 8013570:	d00a      	beq.n	8013588 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	881b      	ldrh	r3, [r3, #0]
 8013576:	4618      	mov	r0, r3
 8013578:	f7ff ff7e 	bl	8013478 <ptr_to_mem>
 801357c:	4604      	mov	r4, r0
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f7ff ff8c 	bl	801349c <mem_to_ptr>
 8013584:	4603      	mov	r3, r0
 8013586:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	885b      	ldrh	r3, [r3, #2]
 801358c:	4618      	mov	r0, r3
 801358e:	f7ff ff73 	bl	8013478 <ptr_to_mem>
 8013592:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013594:	68ba      	ldr	r2, [r7, #8]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	429a      	cmp	r2, r3
 801359a:	d020      	beq.n	80135de <plug_holes+0x11e>
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	791b      	ldrb	r3, [r3, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d11c      	bne.n	80135de <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80135a4:	4b18      	ldr	r3, [pc, #96]	; (8013608 <plug_holes+0x148>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d102      	bne.n	80135b4 <plug_holes+0xf4>
      lfree = pmem;
 80135ae:	4a16      	ldr	r2, [pc, #88]	; (8013608 <plug_holes+0x148>)
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	881a      	ldrh	r2, [r3, #0]
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	881b      	ldrh	r3, [r3, #0]
 80135c0:	f647 52e8 	movw	r2, #32232	; 0x7de8
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d00a      	beq.n	80135de <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	881b      	ldrh	r3, [r3, #0]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff ff53 	bl	8013478 <ptr_to_mem>
 80135d2:	4604      	mov	r4, r0
 80135d4:	68b8      	ldr	r0, [r7, #8]
 80135d6:	f7ff ff61 	bl	801349c <mem_to_ptr>
 80135da:	4603      	mov	r3, r0
 80135dc:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80135de:	bf00      	nop
 80135e0:	3714      	adds	r7, #20
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd90      	pop	{r4, r7, pc}
 80135e6:	bf00      	nop
 80135e8:	2401ae54 	.word	0x2401ae54
 80135ec:	0801eaf0 	.word	0x0801eaf0
 80135f0:	0801eb20 	.word	0x0801eb20
 80135f4:	0801eb38 	.word	0x0801eb38
 80135f8:	2401ae58 	.word	0x2401ae58
 80135fc:	0801eb60 	.word	0x0801eb60
 8013600:	0801eb7c 	.word	0x0801eb7c
 8013604:	0801eb98 	.word	0x0801eb98
 8013608:	2401ae60 	.word	0x2401ae60

0801360c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013612:	4b1d      	ldr	r3, [pc, #116]	; (8013688 <mem_init+0x7c>)
 8013614:	4a1d      	ldr	r2, [pc, #116]	; (801368c <mem_init+0x80>)
 8013616:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013618:	4b1b      	ldr	r3, [pc, #108]	; (8013688 <mem_init+0x7c>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013624:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2200      	movs	r2, #0
 801362a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2200      	movs	r2, #0
 8013630:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013632:	f647 50e8 	movw	r0, #32232	; 0x7de8
 8013636:	f7ff ff1f 	bl	8013478 <ptr_to_mem>
 801363a:	4603      	mov	r3, r0
 801363c:	4a14      	ldr	r2, [pc, #80]	; (8013690 <mem_init+0x84>)
 801363e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013640:	4b13      	ldr	r3, [pc, #76]	; (8013690 <mem_init+0x84>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2201      	movs	r2, #1
 8013646:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013648:	4b11      	ldr	r3, [pc, #68]	; (8013690 <mem_init+0x84>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013650:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013652:	4b0f      	ldr	r3, [pc, #60]	; (8013690 <mem_init+0x84>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f647 52e8 	movw	r2, #32232	; 0x7de8
 801365a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801365c:	4b0a      	ldr	r3, [pc, #40]	; (8013688 <mem_init+0x7c>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4a0c      	ldr	r2, [pc, #48]	; (8013694 <mem_init+0x88>)
 8013662:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013664:	480c      	ldr	r0, [pc, #48]	; (8013698 <mem_init+0x8c>)
 8013666:	f009 fd57 	bl	801d118 <sys_mutex_new>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d006      	beq.n	801367e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013670:	4b0a      	ldr	r3, [pc, #40]	; (801369c <mem_init+0x90>)
 8013672:	f240 221f 	movw	r2, #543	; 0x21f
 8013676:	490a      	ldr	r1, [pc, #40]	; (80136a0 <mem_init+0x94>)
 8013678:	480a      	ldr	r0, [pc, #40]	; (80136a4 <mem_init+0x98>)
 801367a:	f009 ffcb 	bl	801d614 <iprintf>
  }
}
 801367e:	bf00      	nop
 8013680:	3708      	adds	r7, #8
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	2401ae54 	.word	0x2401ae54
 801368c:	30000200 	.word	0x30000200
 8013690:	2401ae58 	.word	0x2401ae58
 8013694:	2401ae60 	.word	0x2401ae60
 8013698:	2401ae5c 	.word	0x2401ae5c
 801369c:	0801eaf0 	.word	0x0801eaf0
 80136a0:	0801ebc4 	.word	0x0801ebc4
 80136a4:	0801eb38 	.word	0x0801eb38

080136a8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b086      	sub	sp, #24
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7ff fef3 	bl	801349c <mem_to_ptr>
 80136b6:	4603      	mov	r3, r0
 80136b8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	4618      	mov	r0, r3
 80136c0:	f7ff feda 	bl	8013478 <ptr_to_mem>
 80136c4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	885b      	ldrh	r3, [r3, #2]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ff fed4 	bl	8013478 <ptr_to_mem>
 80136d0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	f647 52e8 	movw	r2, #32232	; 0x7de8
 80136da:	4293      	cmp	r3, r2
 80136dc:	d819      	bhi.n	8013712 <mem_link_valid+0x6a>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	885b      	ldrh	r3, [r3, #2]
 80136e2:	f647 52e8 	movw	r2, #32232	; 0x7de8
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d813      	bhi.n	8013712 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136ee:	8afa      	ldrh	r2, [r7, #22]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d004      	beq.n	80136fe <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	881b      	ldrh	r3, [r3, #0]
 80136f8:	8afa      	ldrh	r2, [r7, #22]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d109      	bne.n	8013712 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136fe:	4b08      	ldr	r3, [pc, #32]	; (8013720 <mem_link_valid+0x78>)
 8013700:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013702:	693a      	ldr	r2, [r7, #16]
 8013704:	429a      	cmp	r2, r3
 8013706:	d006      	beq.n	8013716 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	885b      	ldrh	r3, [r3, #2]
 801370c:	8afa      	ldrh	r2, [r7, #22]
 801370e:	429a      	cmp	r2, r3
 8013710:	d001      	beq.n	8013716 <mem_link_valid+0x6e>
    return 0;
 8013712:	2300      	movs	r3, #0
 8013714:	e000      	b.n	8013718 <mem_link_valid+0x70>
  }
  return 1;
 8013716:	2301      	movs	r3, #1
}
 8013718:	4618      	mov	r0, r3
 801371a:	3718      	adds	r7, #24
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	2401ae58 	.word	0x2401ae58

08013724 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d070      	beq.n	8013814 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f003 0303 	and.w	r3, r3, #3
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00d      	beq.n	8013758 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801373c:	4b37      	ldr	r3, [pc, #220]	; (801381c <mem_free+0xf8>)
 801373e:	f240 2273 	movw	r2, #627	; 0x273
 8013742:	4937      	ldr	r1, [pc, #220]	; (8013820 <mem_free+0xfc>)
 8013744:	4837      	ldr	r0, [pc, #220]	; (8013824 <mem_free+0x100>)
 8013746:	f009 ff65 	bl	801d614 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801374a:	f009 fd37 	bl	801d1bc <sys_arch_protect>
 801374e:	60f8      	str	r0, [r7, #12]
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f009 fd41 	bl	801d1d8 <sys_arch_unprotect>
    return;
 8013756:	e05e      	b.n	8013816 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	3b08      	subs	r3, #8
 801375c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801375e:	4b32      	ldr	r3, [pc, #200]	; (8013828 <mem_free+0x104>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	69fa      	ldr	r2, [r7, #28]
 8013764:	429a      	cmp	r2, r3
 8013766:	d306      	bcc.n	8013776 <mem_free+0x52>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f103 020c 	add.w	r2, r3, #12
 801376e:	4b2f      	ldr	r3, [pc, #188]	; (801382c <mem_free+0x108>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d90d      	bls.n	8013792 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013776:	4b29      	ldr	r3, [pc, #164]	; (801381c <mem_free+0xf8>)
 8013778:	f240 227f 	movw	r2, #639	; 0x27f
 801377c:	492c      	ldr	r1, [pc, #176]	; (8013830 <mem_free+0x10c>)
 801377e:	4829      	ldr	r0, [pc, #164]	; (8013824 <mem_free+0x100>)
 8013780:	f009 ff48 	bl	801d614 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013784:	f009 fd1a 	bl	801d1bc <sys_arch_protect>
 8013788:	6138      	str	r0, [r7, #16]
 801378a:	6938      	ldr	r0, [r7, #16]
 801378c:	f009 fd24 	bl	801d1d8 <sys_arch_unprotect>
    return;
 8013790:	e041      	b.n	8013816 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013792:	4828      	ldr	r0, [pc, #160]	; (8013834 <mem_free+0x110>)
 8013794:	f009 fcd6 	bl	801d144 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	791b      	ldrb	r3, [r3, #4]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d110      	bne.n	80137c2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80137a0:	4b1e      	ldr	r3, [pc, #120]	; (801381c <mem_free+0xf8>)
 80137a2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80137a6:	4924      	ldr	r1, [pc, #144]	; (8013838 <mem_free+0x114>)
 80137a8:	481e      	ldr	r0, [pc, #120]	; (8013824 <mem_free+0x100>)
 80137aa:	f009 ff33 	bl	801d614 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80137ae:	4821      	ldr	r0, [pc, #132]	; (8013834 <mem_free+0x110>)
 80137b0:	f009 fcd7 	bl	801d162 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80137b4:	f009 fd02 	bl	801d1bc <sys_arch_protect>
 80137b8:	6178      	str	r0, [r7, #20]
 80137ba:	6978      	ldr	r0, [r7, #20]
 80137bc:	f009 fd0c 	bl	801d1d8 <sys_arch_unprotect>
    return;
 80137c0:	e029      	b.n	8013816 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80137c2:	69f8      	ldr	r0, [r7, #28]
 80137c4:	f7ff ff70 	bl	80136a8 <mem_link_valid>
 80137c8:	4603      	mov	r3, r0
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d110      	bne.n	80137f0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80137ce:	4b13      	ldr	r3, [pc, #76]	; (801381c <mem_free+0xf8>)
 80137d0:	f240 2295 	movw	r2, #661	; 0x295
 80137d4:	4919      	ldr	r1, [pc, #100]	; (801383c <mem_free+0x118>)
 80137d6:	4813      	ldr	r0, [pc, #76]	; (8013824 <mem_free+0x100>)
 80137d8:	f009 ff1c 	bl	801d614 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80137dc:	4815      	ldr	r0, [pc, #84]	; (8013834 <mem_free+0x110>)
 80137de:	f009 fcc0 	bl	801d162 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80137e2:	f009 fceb 	bl	801d1bc <sys_arch_protect>
 80137e6:	61b8      	str	r0, [r7, #24]
 80137e8:	69b8      	ldr	r0, [r7, #24]
 80137ea:	f009 fcf5 	bl	801d1d8 <sys_arch_unprotect>
    return;
 80137ee:	e012      	b.n	8013816 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	2200      	movs	r2, #0
 80137f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80137f6:	4b12      	ldr	r3, [pc, #72]	; (8013840 <mem_free+0x11c>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	69fa      	ldr	r2, [r7, #28]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d202      	bcs.n	8013806 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013800:	4a0f      	ldr	r2, [pc, #60]	; (8013840 <mem_free+0x11c>)
 8013802:	69fb      	ldr	r3, [r7, #28]
 8013804:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013806:	69f8      	ldr	r0, [r7, #28]
 8013808:	f7ff fe5a 	bl	80134c0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801380c:	4809      	ldr	r0, [pc, #36]	; (8013834 <mem_free+0x110>)
 801380e:	f009 fca8 	bl	801d162 <sys_mutex_unlock>
 8013812:	e000      	b.n	8013816 <mem_free+0xf2>
    return;
 8013814:	bf00      	nop
}
 8013816:	3720      	adds	r7, #32
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	0801eaf0 	.word	0x0801eaf0
 8013820:	0801ebe0 	.word	0x0801ebe0
 8013824:	0801eb38 	.word	0x0801eb38
 8013828:	2401ae54 	.word	0x2401ae54
 801382c:	2401ae58 	.word	0x2401ae58
 8013830:	0801ec04 	.word	0x0801ec04
 8013834:	2401ae5c 	.word	0x2401ae5c
 8013838:	0801ec20 	.word	0x0801ec20
 801383c:	0801ec48 	.word	0x0801ec48
 8013840:	2401ae60 	.word	0x2401ae60

08013844 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b088      	sub	sp, #32
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	460b      	mov	r3, r1
 801384e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013850:	887b      	ldrh	r3, [r7, #2]
 8013852:	3303      	adds	r3, #3
 8013854:	b29b      	uxth	r3, r3
 8013856:	f023 0303 	bic.w	r3, r3, #3
 801385a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801385c:	8bfb      	ldrh	r3, [r7, #30]
 801385e:	2b0b      	cmp	r3, #11
 8013860:	d801      	bhi.n	8013866 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013862:	230c      	movs	r3, #12
 8013864:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013866:	8bfb      	ldrh	r3, [r7, #30]
 8013868:	f647 52e8 	movw	r2, #32232	; 0x7de8
 801386c:	4293      	cmp	r3, r2
 801386e:	d803      	bhi.n	8013878 <mem_trim+0x34>
 8013870:	8bfa      	ldrh	r2, [r7, #30]
 8013872:	887b      	ldrh	r3, [r7, #2]
 8013874:	429a      	cmp	r2, r3
 8013876:	d201      	bcs.n	801387c <mem_trim+0x38>
    return NULL;
 8013878:	2300      	movs	r3, #0
 801387a:	e0dc      	b.n	8013a36 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801387c:	4b70      	ldr	r3, [pc, #448]	; (8013a40 <mem_trim+0x1fc>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	687a      	ldr	r2, [r7, #4]
 8013882:	429a      	cmp	r2, r3
 8013884:	d304      	bcc.n	8013890 <mem_trim+0x4c>
 8013886:	4b6f      	ldr	r3, [pc, #444]	; (8013a44 <mem_trim+0x200>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	429a      	cmp	r2, r3
 801388e:	d306      	bcc.n	801389e <mem_trim+0x5a>
 8013890:	4b6d      	ldr	r3, [pc, #436]	; (8013a48 <mem_trim+0x204>)
 8013892:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013896:	496d      	ldr	r1, [pc, #436]	; (8013a4c <mem_trim+0x208>)
 8013898:	486d      	ldr	r0, [pc, #436]	; (8013a50 <mem_trim+0x20c>)
 801389a:	f009 febb 	bl	801d614 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801389e:	4b68      	ldr	r3, [pc, #416]	; (8013a40 <mem_trim+0x1fc>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d304      	bcc.n	80138b2 <mem_trim+0x6e>
 80138a8:	4b66      	ldr	r3, [pc, #408]	; (8013a44 <mem_trim+0x200>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d307      	bcc.n	80138c2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80138b2:	f009 fc83 	bl	801d1bc <sys_arch_protect>
 80138b6:	60b8      	str	r0, [r7, #8]
 80138b8:	68b8      	ldr	r0, [r7, #8]
 80138ba:	f009 fc8d 	bl	801d1d8 <sys_arch_unprotect>
    return rmem;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	e0b9      	b.n	8013a36 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	3b08      	subs	r3, #8
 80138c6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80138c8:	69b8      	ldr	r0, [r7, #24]
 80138ca:	f7ff fde7 	bl	801349c <mem_to_ptr>
 80138ce:	4603      	mov	r3, r0
 80138d0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	881a      	ldrh	r2, [r3, #0]
 80138d6:	8afb      	ldrh	r3, [r7, #22]
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	b29b      	uxth	r3, r3
 80138dc:	3b08      	subs	r3, #8
 80138de:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80138e0:	8bfa      	ldrh	r2, [r7, #30]
 80138e2:	8abb      	ldrh	r3, [r7, #20]
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d906      	bls.n	80138f6 <mem_trim+0xb2>
 80138e8:	4b57      	ldr	r3, [pc, #348]	; (8013a48 <mem_trim+0x204>)
 80138ea:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80138ee:	4959      	ldr	r1, [pc, #356]	; (8013a54 <mem_trim+0x210>)
 80138f0:	4857      	ldr	r0, [pc, #348]	; (8013a50 <mem_trim+0x20c>)
 80138f2:	f009 fe8f 	bl	801d614 <iprintf>
  if (newsize > size) {
 80138f6:	8bfa      	ldrh	r2, [r7, #30]
 80138f8:	8abb      	ldrh	r3, [r7, #20]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d901      	bls.n	8013902 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80138fe:	2300      	movs	r3, #0
 8013900:	e099      	b.n	8013a36 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8013902:	8bfa      	ldrh	r2, [r7, #30]
 8013904:	8abb      	ldrh	r3, [r7, #20]
 8013906:	429a      	cmp	r2, r3
 8013908:	d101      	bne.n	801390e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	e093      	b.n	8013a36 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801390e:	4852      	ldr	r0, [pc, #328]	; (8013a58 <mem_trim+0x214>)
 8013910:	f009 fc18 	bl	801d144 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013914:	69bb      	ldr	r3, [r7, #24]
 8013916:	881b      	ldrh	r3, [r3, #0]
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff fdad 	bl	8013478 <ptr_to_mem>
 801391e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	791b      	ldrb	r3, [r3, #4]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d141      	bne.n	80139ac <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013928:	69bb      	ldr	r3, [r7, #24]
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013930:	4293      	cmp	r3, r2
 8013932:	d106      	bne.n	8013942 <mem_trim+0xfe>
 8013934:	4b44      	ldr	r3, [pc, #272]	; (8013a48 <mem_trim+0x204>)
 8013936:	f240 22f5 	movw	r2, #757	; 0x2f5
 801393a:	4948      	ldr	r1, [pc, #288]	; (8013a5c <mem_trim+0x218>)
 801393c:	4844      	ldr	r0, [pc, #272]	; (8013a50 <mem_trim+0x20c>)
 801393e:	f009 fe69 	bl	801d614 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	881b      	ldrh	r3, [r3, #0]
 8013946:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013948:	8afa      	ldrh	r2, [r7, #22]
 801394a:	8bfb      	ldrh	r3, [r7, #30]
 801394c:	4413      	add	r3, r2
 801394e:	b29b      	uxth	r3, r3
 8013950:	3308      	adds	r3, #8
 8013952:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013954:	4b42      	ldr	r3, [pc, #264]	; (8013a60 <mem_trim+0x21c>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	693a      	ldr	r2, [r7, #16]
 801395a:	429a      	cmp	r2, r3
 801395c:	d106      	bne.n	801396c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 801395e:	89fb      	ldrh	r3, [r7, #14]
 8013960:	4618      	mov	r0, r3
 8013962:	f7ff fd89 	bl	8013478 <ptr_to_mem>
 8013966:	4603      	mov	r3, r0
 8013968:	4a3d      	ldr	r2, [pc, #244]	; (8013a60 <mem_trim+0x21c>)
 801396a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801396c:	89fb      	ldrh	r3, [r7, #14]
 801396e:	4618      	mov	r0, r3
 8013970:	f7ff fd82 	bl	8013478 <ptr_to_mem>
 8013974:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	2200      	movs	r2, #0
 801397a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	89ba      	ldrh	r2, [r7, #12]
 8013980:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	8afa      	ldrh	r2, [r7, #22]
 8013986:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	89fa      	ldrh	r2, [r7, #14]
 801398c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	881b      	ldrh	r3, [r3, #0]
 8013992:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013996:	4293      	cmp	r3, r2
 8013998:	d049      	beq.n	8013a2e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff fd6a 	bl	8013478 <ptr_to_mem>
 80139a4:	4602      	mov	r2, r0
 80139a6:	89fb      	ldrh	r3, [r7, #14]
 80139a8:	8053      	strh	r3, [r2, #2]
 80139aa:	e040      	b.n	8013a2e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80139ac:	8bfb      	ldrh	r3, [r7, #30]
 80139ae:	f103 0214 	add.w	r2, r3, #20
 80139b2:	8abb      	ldrh	r3, [r7, #20]
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d83a      	bhi.n	8013a2e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80139b8:	8afa      	ldrh	r2, [r7, #22]
 80139ba:	8bfb      	ldrh	r3, [r7, #30]
 80139bc:	4413      	add	r3, r2
 80139be:	b29b      	uxth	r3, r3
 80139c0:	3308      	adds	r3, #8
 80139c2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	881b      	ldrh	r3, [r3, #0]
 80139c8:	f647 52e8 	movw	r2, #32232	; 0x7de8
 80139cc:	4293      	cmp	r3, r2
 80139ce:	d106      	bne.n	80139de <mem_trim+0x19a>
 80139d0:	4b1d      	ldr	r3, [pc, #116]	; (8013a48 <mem_trim+0x204>)
 80139d2:	f240 3216 	movw	r2, #790	; 0x316
 80139d6:	4921      	ldr	r1, [pc, #132]	; (8013a5c <mem_trim+0x218>)
 80139d8:	481d      	ldr	r0, [pc, #116]	; (8013a50 <mem_trim+0x20c>)
 80139da:	f009 fe1b 	bl	801d614 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80139de:	89fb      	ldrh	r3, [r7, #14]
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7ff fd49 	bl	8013478 <ptr_to_mem>
 80139e6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80139e8:	4b1d      	ldr	r3, [pc, #116]	; (8013a60 <mem_trim+0x21c>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	693a      	ldr	r2, [r7, #16]
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d202      	bcs.n	80139f8 <mem_trim+0x1b4>
      lfree = mem2;
 80139f2:	4a1b      	ldr	r2, [pc, #108]	; (8013a60 <mem_trim+0x21c>)
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	2200      	movs	r2, #0
 80139fc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	881a      	ldrh	r2, [r3, #0]
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	8afa      	ldrh	r2, [r7, #22]
 8013a0a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	89fa      	ldrh	r2, [r7, #14]
 8013a10:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	881b      	ldrh	r3, [r3, #0]
 8013a16:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d007      	beq.n	8013a2e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7ff fd28 	bl	8013478 <ptr_to_mem>
 8013a28:	4602      	mov	r2, r0
 8013a2a:	89fb      	ldrh	r3, [r7, #14]
 8013a2c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013a2e:	480a      	ldr	r0, [pc, #40]	; (8013a58 <mem_trim+0x214>)
 8013a30:	f009 fb97 	bl	801d162 <sys_mutex_unlock>
  return rmem;
 8013a34:	687b      	ldr	r3, [r7, #4]
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3720      	adds	r7, #32
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}
 8013a3e:	bf00      	nop
 8013a40:	2401ae54 	.word	0x2401ae54
 8013a44:	2401ae58 	.word	0x2401ae58
 8013a48:	0801eaf0 	.word	0x0801eaf0
 8013a4c:	0801ec7c 	.word	0x0801ec7c
 8013a50:	0801eb38 	.word	0x0801eb38
 8013a54:	0801ec94 	.word	0x0801ec94
 8013a58:	2401ae5c 	.word	0x2401ae5c
 8013a5c:	0801ecb4 	.word	0x0801ecb4
 8013a60:	2401ae60 	.word	0x2401ae60

08013a64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b088      	sub	sp, #32
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013a6e:	88fb      	ldrh	r3, [r7, #6]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d101      	bne.n	8013a78 <mem_malloc+0x14>
    return NULL;
 8013a74:	2300      	movs	r3, #0
 8013a76:	e0e6      	b.n	8013c46 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013a78:	88fb      	ldrh	r3, [r7, #6]
 8013a7a:	3303      	adds	r3, #3
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	f023 0303 	bic.w	r3, r3, #3
 8013a82:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013a84:	8bbb      	ldrh	r3, [r7, #28]
 8013a86:	2b0b      	cmp	r3, #11
 8013a88:	d801      	bhi.n	8013a8e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013a8a:	230c      	movs	r3, #12
 8013a8c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013a8e:	8bbb      	ldrh	r3, [r7, #28]
 8013a90:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013a94:	4293      	cmp	r3, r2
 8013a96:	d803      	bhi.n	8013aa0 <mem_malloc+0x3c>
 8013a98:	8bba      	ldrh	r2, [r7, #28]
 8013a9a:	88fb      	ldrh	r3, [r7, #6]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d201      	bcs.n	8013aa4 <mem_malloc+0x40>
    return NULL;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	e0d0      	b.n	8013c46 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013aa4:	486a      	ldr	r0, [pc, #424]	; (8013c50 <mem_malloc+0x1ec>)
 8013aa6:	f009 fb4d 	bl	801d144 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013aaa:	4b6a      	ldr	r3, [pc, #424]	; (8013c54 <mem_malloc+0x1f0>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7ff fcf4 	bl	801349c <mem_to_ptr>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	83fb      	strh	r3, [r7, #30]
 8013ab8:	e0b9      	b.n	8013c2e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013aba:	8bfb      	ldrh	r3, [r7, #30]
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7ff fcdb 	bl	8013478 <ptr_to_mem>
 8013ac2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	791b      	ldrb	r3, [r3, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	f040 80a9 	bne.w	8013c20 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	881b      	ldrh	r3, [r3, #0]
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	8bfb      	ldrh	r3, [r7, #30]
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	f1a3 0208 	sub.w	r2, r3, #8
 8013adc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	f0c0 809e 	bcc.w	8013c20 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	881b      	ldrh	r3, [r3, #0]
 8013ae8:	461a      	mov	r2, r3
 8013aea:	8bfb      	ldrh	r3, [r7, #30]
 8013aec:	1ad3      	subs	r3, r2, r3
 8013aee:	f1a3 0208 	sub.w	r2, r3, #8
 8013af2:	8bbb      	ldrh	r3, [r7, #28]
 8013af4:	3314      	adds	r3, #20
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d335      	bcc.n	8013b66 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013afa:	8bfa      	ldrh	r2, [r7, #30]
 8013afc:	8bbb      	ldrh	r3, [r7, #28]
 8013afe:	4413      	add	r3, r2
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	3308      	adds	r3, #8
 8013b04:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013b06:	8a7b      	ldrh	r3, [r7, #18]
 8013b08:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d106      	bne.n	8013b1e <mem_malloc+0xba>
 8013b10:	4b51      	ldr	r3, [pc, #324]	; (8013c58 <mem_malloc+0x1f4>)
 8013b12:	f240 3287 	movw	r2, #903	; 0x387
 8013b16:	4951      	ldr	r1, [pc, #324]	; (8013c5c <mem_malloc+0x1f8>)
 8013b18:	4851      	ldr	r0, [pc, #324]	; (8013c60 <mem_malloc+0x1fc>)
 8013b1a:	f009 fd7b 	bl	801d614 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013b1e:	8a7b      	ldrh	r3, [r7, #18]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ff fca9 	bl	8013478 <ptr_to_mem>
 8013b26:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	881a      	ldrh	r2, [r3, #0]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	8bfa      	ldrh	r2, [r7, #30]
 8013b3a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	8a7a      	ldrh	r2, [r7, #18]
 8013b40:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	2201      	movs	r2, #1
 8013b46:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8013b50:	4293      	cmp	r3, r2
 8013b52:	d00b      	beq.n	8013b6c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	881b      	ldrh	r3, [r3, #0]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7ff fc8d 	bl	8013478 <ptr_to_mem>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	8a7b      	ldrh	r3, [r7, #18]
 8013b62:	8053      	strh	r3, [r2, #2]
 8013b64:	e002      	b.n	8013b6c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013b6c:	4b39      	ldr	r3, [pc, #228]	; (8013c54 <mem_malloc+0x1f0>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	697a      	ldr	r2, [r7, #20]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d127      	bne.n	8013bc6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8013b76:	4b37      	ldr	r3, [pc, #220]	; (8013c54 <mem_malloc+0x1f0>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013b7c:	e005      	b.n	8013b8a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	881b      	ldrh	r3, [r3, #0]
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7ff fc78 	bl	8013478 <ptr_to_mem>
 8013b88:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013b8a:	69bb      	ldr	r3, [r7, #24]
 8013b8c:	791b      	ldrb	r3, [r3, #4]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d004      	beq.n	8013b9c <mem_malloc+0x138>
 8013b92:	4b34      	ldr	r3, [pc, #208]	; (8013c64 <mem_malloc+0x200>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	69ba      	ldr	r2, [r7, #24]
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d1f0      	bne.n	8013b7e <mem_malloc+0x11a>
          }
          lfree = cur;
 8013b9c:	4a2d      	ldr	r2, [pc, #180]	; (8013c54 <mem_malloc+0x1f0>)
 8013b9e:	69bb      	ldr	r3, [r7, #24]
 8013ba0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013ba2:	4b2c      	ldr	r3, [pc, #176]	; (8013c54 <mem_malloc+0x1f0>)
 8013ba4:	681a      	ldr	r2, [r3, #0]
 8013ba6:	4b2f      	ldr	r3, [pc, #188]	; (8013c64 <mem_malloc+0x200>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d00b      	beq.n	8013bc6 <mem_malloc+0x162>
 8013bae:	4b29      	ldr	r3, [pc, #164]	; (8013c54 <mem_malloc+0x1f0>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	791b      	ldrb	r3, [r3, #4]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d006      	beq.n	8013bc6 <mem_malloc+0x162>
 8013bb8:	4b27      	ldr	r3, [pc, #156]	; (8013c58 <mem_malloc+0x1f4>)
 8013bba:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013bbe:	492a      	ldr	r1, [pc, #168]	; (8013c68 <mem_malloc+0x204>)
 8013bc0:	4827      	ldr	r0, [pc, #156]	; (8013c60 <mem_malloc+0x1fc>)
 8013bc2:	f009 fd27 	bl	801d614 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013bc6:	4822      	ldr	r0, [pc, #136]	; (8013c50 <mem_malloc+0x1ec>)
 8013bc8:	f009 facb 	bl	801d162 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013bcc:	8bba      	ldrh	r2, [r7, #28]
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	3308      	adds	r3, #8
 8013bd4:	4a23      	ldr	r2, [pc, #140]	; (8013c64 <mem_malloc+0x200>)
 8013bd6:	6812      	ldr	r2, [r2, #0]
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d906      	bls.n	8013bea <mem_malloc+0x186>
 8013bdc:	4b1e      	ldr	r3, [pc, #120]	; (8013c58 <mem_malloc+0x1f4>)
 8013bde:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013be2:	4922      	ldr	r1, [pc, #136]	; (8013c6c <mem_malloc+0x208>)
 8013be4:	481e      	ldr	r0, [pc, #120]	; (8013c60 <mem_malloc+0x1fc>)
 8013be6:	f009 fd15 	bl	801d614 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	f003 0303 	and.w	r3, r3, #3
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d006      	beq.n	8013c02 <mem_malloc+0x19e>
 8013bf4:	4b18      	ldr	r3, [pc, #96]	; (8013c58 <mem_malloc+0x1f4>)
 8013bf6:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013bfa:	491d      	ldr	r1, [pc, #116]	; (8013c70 <mem_malloc+0x20c>)
 8013bfc:	4818      	ldr	r0, [pc, #96]	; (8013c60 <mem_malloc+0x1fc>)
 8013bfe:	f009 fd09 	bl	801d614 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	f003 0303 	and.w	r3, r3, #3
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d006      	beq.n	8013c1a <mem_malloc+0x1b6>
 8013c0c:	4b12      	ldr	r3, [pc, #72]	; (8013c58 <mem_malloc+0x1f4>)
 8013c0e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013c12:	4918      	ldr	r1, [pc, #96]	; (8013c74 <mem_malloc+0x210>)
 8013c14:	4812      	ldr	r0, [pc, #72]	; (8013c60 <mem_malloc+0x1fc>)
 8013c16:	f009 fcfd 	bl	801d614 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	3308      	adds	r3, #8
 8013c1e:	e012      	b.n	8013c46 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8013c20:	8bfb      	ldrh	r3, [r7, #30]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7ff fc28 	bl	8013478 <ptr_to_mem>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	881b      	ldrh	r3, [r3, #0]
 8013c2c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013c2e:	8bfa      	ldrh	r2, [r7, #30]
 8013c30:	8bb9      	ldrh	r1, [r7, #28]
 8013c32:	f647 53e8 	movw	r3, #32232	; 0x7de8
 8013c36:	1a5b      	subs	r3, r3, r1
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	f4ff af3e 	bcc.w	8013aba <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013c3e:	4804      	ldr	r0, [pc, #16]	; (8013c50 <mem_malloc+0x1ec>)
 8013c40:	f009 fa8f 	bl	801d162 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013c44:	2300      	movs	r3, #0
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3720      	adds	r7, #32
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	2401ae5c 	.word	0x2401ae5c
 8013c54:	2401ae60 	.word	0x2401ae60
 8013c58:	0801eaf0 	.word	0x0801eaf0
 8013c5c:	0801ecb4 	.word	0x0801ecb4
 8013c60:	0801eb38 	.word	0x0801eb38
 8013c64:	2401ae58 	.word	0x2401ae58
 8013c68:	0801ecc8 	.word	0x0801ecc8
 8013c6c:	0801ece4 	.word	0x0801ece4
 8013c70:	0801ed14 	.word	0x0801ed14
 8013c74:	0801ed44 	.word	0x0801ed44

08013c78 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b085      	sub	sp, #20
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	689b      	ldr	r3, [r3, #8]
 8013c84:	2200      	movs	r2, #0
 8013c86:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	3303      	adds	r3, #3
 8013c8e:	f023 0303 	bic.w	r3, r3, #3
 8013c92:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013c94:	2300      	movs	r3, #0
 8013c96:	60fb      	str	r3, [r7, #12]
 8013c98:	e011      	b.n	8013cbe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	689b      	ldr	r3, [r3, #8]
 8013ca8:	68ba      	ldr	r2, [r7, #8]
 8013caa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	881b      	ldrh	r3, [r3, #0]
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	4413      	add	r3, r2
 8013cb6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	3301      	adds	r3, #1
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	885b      	ldrh	r3, [r3, #2]
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	dbe7      	blt.n	8013c9a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013cca:	bf00      	nop
 8013ccc:	bf00      	nop
 8013cce:	3714      	adds	r7, #20
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr

08013cd8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013cde:	2300      	movs	r3, #0
 8013ce0:	80fb      	strh	r3, [r7, #6]
 8013ce2:	e009      	b.n	8013cf8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013ce4:	88fb      	ldrh	r3, [r7, #6]
 8013ce6:	4a08      	ldr	r2, [pc, #32]	; (8013d08 <memp_init+0x30>)
 8013ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff ffc3 	bl	8013c78 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013cf2:	88fb      	ldrh	r3, [r7, #6]
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	80fb      	strh	r3, [r7, #6]
 8013cf8:	88fb      	ldrh	r3, [r7, #6]
 8013cfa:	2b0c      	cmp	r3, #12
 8013cfc:	d9f2      	bls.n	8013ce4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013cfe:	bf00      	nop
 8013d00:	bf00      	nop
 8013d02:	3708      	adds	r7, #8
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	080215ac 	.word	0x080215ac

08013d0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013d14:	f009 fa52 	bl	801d1bc <sys_arch_protect>
 8013d18:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	689b      	ldr	r3, [r3, #8]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d015      	beq.n	8013d54 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	689b      	ldr	r3, [r3, #8]
 8013d2c:	68ba      	ldr	r2, [r7, #8]
 8013d2e:	6812      	ldr	r2, [r2, #0]
 8013d30:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	f003 0303 	and.w	r3, r3, #3
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d006      	beq.n	8013d4a <do_memp_malloc_pool+0x3e>
 8013d3c:	4b09      	ldr	r3, [pc, #36]	; (8013d64 <do_memp_malloc_pool+0x58>)
 8013d3e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013d42:	4909      	ldr	r1, [pc, #36]	; (8013d68 <do_memp_malloc_pool+0x5c>)
 8013d44:	4809      	ldr	r0, [pc, #36]	; (8013d6c <do_memp_malloc_pool+0x60>)
 8013d46:	f009 fc65 	bl	801d614 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013d4a:	68f8      	ldr	r0, [r7, #12]
 8013d4c:	f009 fa44 	bl	801d1d8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	e003      	b.n	8013d5c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013d54:	68f8      	ldr	r0, [r7, #12]
 8013d56:	f009 fa3f 	bl	801d1d8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013d5a:	2300      	movs	r3, #0
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3710      	adds	r7, #16
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	0801ed68 	.word	0x0801ed68
 8013d68:	0801ed98 	.word	0x0801ed98
 8013d6c:	0801edbc 	.word	0x0801edbc

08013d70 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <memp_malloc_pool+0x1c>
 8013d7e:	4b0a      	ldr	r3, [pc, #40]	; (8013da8 <memp_malloc_pool+0x38>)
 8013d80:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8013d84:	4909      	ldr	r1, [pc, #36]	; (8013dac <memp_malloc_pool+0x3c>)
 8013d86:	480a      	ldr	r0, [pc, #40]	; (8013db0 <memp_malloc_pool+0x40>)
 8013d88:	f009 fc44 	bl	801d614 <iprintf>
  if (desc == NULL) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d101      	bne.n	8013d96 <memp_malloc_pool+0x26>
    return NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	e003      	b.n	8013d9e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f7ff ffb8 	bl	8013d0c <do_memp_malloc_pool>
 8013d9c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3708      	adds	r7, #8
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}
 8013da6:	bf00      	nop
 8013da8:	0801ed68 	.word	0x0801ed68
 8013dac:	0801ede4 	.word	0x0801ede4
 8013db0:	0801edbc 	.word	0x0801edbc

08013db4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	4603      	mov	r3, r0
 8013dbc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013dbe:	79fb      	ldrb	r3, [r7, #7]
 8013dc0:	2b0c      	cmp	r3, #12
 8013dc2:	d908      	bls.n	8013dd6 <memp_malloc+0x22>
 8013dc4:	4b0a      	ldr	r3, [pc, #40]	; (8013df0 <memp_malloc+0x3c>)
 8013dc6:	f240 1257 	movw	r2, #343	; 0x157
 8013dca:	490a      	ldr	r1, [pc, #40]	; (8013df4 <memp_malloc+0x40>)
 8013dcc:	480a      	ldr	r0, [pc, #40]	; (8013df8 <memp_malloc+0x44>)
 8013dce:	f009 fc21 	bl	801d614 <iprintf>
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	e008      	b.n	8013de8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013dd6:	79fb      	ldrb	r3, [r7, #7]
 8013dd8:	4a08      	ldr	r2, [pc, #32]	; (8013dfc <memp_malloc+0x48>)
 8013dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7ff ff94 	bl	8013d0c <do_memp_malloc_pool>
 8013de4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013de6:	68fb      	ldr	r3, [r7, #12]
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3710      	adds	r7, #16
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	0801ed68 	.word	0x0801ed68
 8013df4:	0801edf8 	.word	0x0801edf8
 8013df8:	0801edbc 	.word	0x0801edbc
 8013dfc:	080215ac 	.word	0x080215ac

08013e00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b084      	sub	sp, #16
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	f003 0303 	and.w	r3, r3, #3
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d006      	beq.n	8013e22 <do_memp_free_pool+0x22>
 8013e14:	4b0d      	ldr	r3, [pc, #52]	; (8013e4c <do_memp_free_pool+0x4c>)
 8013e16:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013e1a:	490d      	ldr	r1, [pc, #52]	; (8013e50 <do_memp_free_pool+0x50>)
 8013e1c:	480d      	ldr	r0, [pc, #52]	; (8013e54 <do_memp_free_pool+0x54>)
 8013e1e:	f009 fbf9 	bl	801d614 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013e26:	f009 f9c9 	bl	801d1bc <sys_arch_protect>
 8013e2a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	689b      	ldr	r3, [r3, #8]
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013e3e:	68b8      	ldr	r0, [r7, #8]
 8013e40:	f009 f9ca 	bl	801d1d8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013e44:	bf00      	nop
 8013e46:	3710      	adds	r7, #16
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	0801ed68 	.word	0x0801ed68
 8013e50:	0801ee18 	.word	0x0801ee18
 8013e54:	0801edbc 	.word	0x0801edbc

08013e58 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d106      	bne.n	8013e76 <memp_free_pool+0x1e>
 8013e68:	4b0a      	ldr	r3, [pc, #40]	; (8013e94 <memp_free_pool+0x3c>)
 8013e6a:	f240 1295 	movw	r2, #405	; 0x195
 8013e6e:	490a      	ldr	r1, [pc, #40]	; (8013e98 <memp_free_pool+0x40>)
 8013e70:	480a      	ldr	r0, [pc, #40]	; (8013e9c <memp_free_pool+0x44>)
 8013e72:	f009 fbcf 	bl	801d614 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d007      	beq.n	8013e8c <memp_free_pool+0x34>
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d004      	beq.n	8013e8c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013e82:	6839      	ldr	r1, [r7, #0]
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f7ff ffbb 	bl	8013e00 <do_memp_free_pool>
 8013e8a:	e000      	b.n	8013e8e <memp_free_pool+0x36>
    return;
 8013e8c:	bf00      	nop
}
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	0801ed68 	.word	0x0801ed68
 8013e98:	0801ede4 	.word	0x0801ede4
 8013e9c:	0801edbc 	.word	0x0801edbc

08013ea0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	6039      	str	r1, [r7, #0]
 8013eaa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013eac:	79fb      	ldrb	r3, [r7, #7]
 8013eae:	2b0c      	cmp	r3, #12
 8013eb0:	d907      	bls.n	8013ec2 <memp_free+0x22>
 8013eb2:	4b0c      	ldr	r3, [pc, #48]	; (8013ee4 <memp_free+0x44>)
 8013eb4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013eb8:	490b      	ldr	r1, [pc, #44]	; (8013ee8 <memp_free+0x48>)
 8013eba:	480c      	ldr	r0, [pc, #48]	; (8013eec <memp_free+0x4c>)
 8013ebc:	f009 fbaa 	bl	801d614 <iprintf>
 8013ec0:	e00c      	b.n	8013edc <memp_free+0x3c>

  if (mem == NULL) {
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d008      	beq.n	8013eda <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013ec8:	79fb      	ldrb	r3, [r7, #7]
 8013eca:	4a09      	ldr	r2, [pc, #36]	; (8013ef0 <memp_free+0x50>)
 8013ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ed0:	6839      	ldr	r1, [r7, #0]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ff ff94 	bl	8013e00 <do_memp_free_pool>
 8013ed8:	e000      	b.n	8013edc <memp_free+0x3c>
    return;
 8013eda:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	0801ed68 	.word	0x0801ed68
 8013ee8:	0801ee38 	.word	0x0801ee38
 8013eec:	0801edbc 	.word	0x0801edbc
 8013ef0:	080215ac 	.word	0x080215ac

08013ef4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013ef4:	b480      	push	{r7}
 8013ef6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013ef8:	bf00      	nop
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr
	...

08013f04 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b086      	sub	sp, #24
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	607a      	str	r2, [r7, #4]
 8013f10:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d108      	bne.n	8013f2a <netif_add+0x26>
 8013f18:	4b57      	ldr	r3, [pc, #348]	; (8014078 <netif_add+0x174>)
 8013f1a:	f240 1227 	movw	r2, #295	; 0x127
 8013f1e:	4957      	ldr	r1, [pc, #348]	; (801407c <netif_add+0x178>)
 8013f20:	4857      	ldr	r0, [pc, #348]	; (8014080 <netif_add+0x17c>)
 8013f22:	f009 fb77 	bl	801d614 <iprintf>
 8013f26:	2300      	movs	r3, #0
 8013f28:	e0a2      	b.n	8014070 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d108      	bne.n	8013f42 <netif_add+0x3e>
 8013f30:	4b51      	ldr	r3, [pc, #324]	; (8014078 <netif_add+0x174>)
 8013f32:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013f36:	4953      	ldr	r1, [pc, #332]	; (8014084 <netif_add+0x180>)
 8013f38:	4851      	ldr	r0, [pc, #324]	; (8014080 <netif_add+0x17c>)
 8013f3a:	f009 fb6b 	bl	801d614 <iprintf>
 8013f3e:	2300      	movs	r3, #0
 8013f40:	e096      	b.n	8014070 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d101      	bne.n	8013f4c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013f48:	4b4f      	ldr	r3, [pc, #316]	; (8014088 <netif_add+0x184>)
 8013f4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013f52:	4b4d      	ldr	r3, [pc, #308]	; (8014088 <netif_add+0x184>)
 8013f54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013f5c:	4b4a      	ldr	r3, [pc, #296]	; (8014088 <netif_add+0x184>)
 8013f5e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	2200      	movs	r2, #0
 8013f64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	4a45      	ldr	r2, [pc, #276]	; (801408c <netif_add+0x188>)
 8013f76:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2200      	movs	r2, #0
 8013f82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	6a3a      	ldr	r2, [r7, #32]
 8013f90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013f92:	4b3f      	ldr	r3, [pc, #252]	; (8014090 <netif_add+0x18c>)
 8013f94:	781a      	ldrb	r2, [r3, #0]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fa0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	687a      	ldr	r2, [r7, #4]
 8013fa6:	68b9      	ldr	r1, [r7, #8]
 8013fa8:	68f8      	ldr	r0, [r7, #12]
 8013faa:	f000 f913 	bl	80141d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	4798      	blx	r3
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d001      	beq.n	8013fbe <netif_add+0xba>
    return NULL;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	e058      	b.n	8014070 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013fc4:	2bff      	cmp	r3, #255	; 0xff
 8013fc6:	d103      	bne.n	8013fd0 <netif_add+0xcc>
        netif->num = 0;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013fd4:	4b2f      	ldr	r3, [pc, #188]	; (8014094 <netif_add+0x190>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	617b      	str	r3, [r7, #20]
 8013fda:	e02b      	b.n	8014034 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013fdc:	697a      	ldr	r2, [r7, #20]
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d106      	bne.n	8013ff2 <netif_add+0xee>
 8013fe4:	4b24      	ldr	r3, [pc, #144]	; (8014078 <netif_add+0x174>)
 8013fe6:	f240 128b 	movw	r2, #395	; 0x18b
 8013fea:	492b      	ldr	r1, [pc, #172]	; (8014098 <netif_add+0x194>)
 8013fec:	4824      	ldr	r0, [pc, #144]	; (8014080 <netif_add+0x17c>)
 8013fee:	f009 fb11 	bl	801d614 <iprintf>
        num_netifs++;
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	2bff      	cmp	r3, #255	; 0xff
 8013ffc:	dd06      	ble.n	801400c <netif_add+0x108>
 8013ffe:	4b1e      	ldr	r3, [pc, #120]	; (8014078 <netif_add+0x174>)
 8014000:	f240 128d 	movw	r2, #397	; 0x18d
 8014004:	4925      	ldr	r1, [pc, #148]	; (801409c <netif_add+0x198>)
 8014006:	481e      	ldr	r0, [pc, #120]	; (8014080 <netif_add+0x17c>)
 8014008:	f009 fb04 	bl	801d614 <iprintf>
        if (netif2->num == netif->num) {
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014018:	429a      	cmp	r2, r3
 801401a:	d108      	bne.n	801402e <netif_add+0x12a>
          netif->num++;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014022:	3301      	adds	r3, #1
 8014024:	b2da      	uxtb	r2, r3
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 801402c:	e005      	b.n	801403a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	617b      	str	r3, [r7, #20]
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d1d0      	bne.n	8013fdc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d1be      	bne.n	8013fbe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014046:	2bfe      	cmp	r3, #254	; 0xfe
 8014048:	d103      	bne.n	8014052 <netif_add+0x14e>
    netif_num = 0;
 801404a:	4b11      	ldr	r3, [pc, #68]	; (8014090 <netif_add+0x18c>)
 801404c:	2200      	movs	r2, #0
 801404e:	701a      	strb	r2, [r3, #0]
 8014050:	e006      	b.n	8014060 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014058:	3301      	adds	r3, #1
 801405a:	b2da      	uxtb	r2, r3
 801405c:	4b0c      	ldr	r3, [pc, #48]	; (8014090 <netif_add+0x18c>)
 801405e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014060:	4b0c      	ldr	r3, [pc, #48]	; (8014094 <netif_add+0x190>)
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014068:	4a0a      	ldr	r2, [pc, #40]	; (8014094 <netif_add+0x190>)
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801406e:	68fb      	ldr	r3, [r7, #12]
}
 8014070:	4618      	mov	r0, r3
 8014072:	3718      	adds	r7, #24
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}
 8014078:	0801ee54 	.word	0x0801ee54
 801407c:	0801eee8 	.word	0x0801eee8
 8014080:	0801eea4 	.word	0x0801eea4
 8014084:	0801ef04 	.word	0x0801ef04
 8014088:	08021620 	.word	0x08021620
 801408c:	080144af 	.word	0x080144af
 8014090:	2401ae98 	.word	0x2401ae98
 8014094:	24022220 	.word	0x24022220
 8014098:	0801ef28 	.word	0x0801ef28
 801409c:	0801ef3c 	.word	0x0801ef3c

080140a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80140aa:	6839      	ldr	r1, [r7, #0]
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f002 fb85 	bl	80167bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80140b2:	6839      	ldr	r1, [r7, #0]
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f006 fc97 	bl	801a9e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80140ba:	bf00      	nop
 80140bc:	3708      	adds	r7, #8
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
	...

080140c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b086      	sub	sp, #24
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	60f8      	str	r0, [r7, #12]
 80140cc:	60b9      	str	r1, [r7, #8]
 80140ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <netif_do_set_ipaddr+0x20>
 80140d6:	4b1d      	ldr	r3, [pc, #116]	; (801414c <netif_do_set_ipaddr+0x88>)
 80140d8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80140dc:	491c      	ldr	r1, [pc, #112]	; (8014150 <netif_do_set_ipaddr+0x8c>)
 80140de:	481d      	ldr	r0, [pc, #116]	; (8014154 <netif_do_set_ipaddr+0x90>)
 80140e0:	f009 fa98 	bl	801d614 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d106      	bne.n	80140f8 <netif_do_set_ipaddr+0x34>
 80140ea:	4b18      	ldr	r3, [pc, #96]	; (801414c <netif_do_set_ipaddr+0x88>)
 80140ec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80140f0:	4917      	ldr	r1, [pc, #92]	; (8014150 <netif_do_set_ipaddr+0x8c>)
 80140f2:	4818      	ldr	r0, [pc, #96]	; (8014154 <netif_do_set_ipaddr+0x90>)
 80140f4:	f009 fa8e 	bl	801d614 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	3304      	adds	r3, #4
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	429a      	cmp	r2, r3
 8014104:	d01c      	beq.n	8014140 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	3304      	adds	r3, #4
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014116:	f107 0314 	add.w	r3, r7, #20
 801411a:	4619      	mov	r1, r3
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f7ff ffbf 	bl	80140a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d002      	beq.n	801412e <netif_do_set_ipaddr+0x6a>
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	e000      	b.n	8014130 <netif_do_set_ipaddr+0x6c>
 801412e:	2300      	movs	r3, #0
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014134:	2101      	movs	r1, #1
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f000 f8d2 	bl	80142e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801413c:	2301      	movs	r3, #1
 801413e:	e000      	b.n	8014142 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014140:	2300      	movs	r3, #0
}
 8014142:	4618      	mov	r0, r3
 8014144:	3718      	adds	r7, #24
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	0801ee54 	.word	0x0801ee54
 8014150:	0801ef6c 	.word	0x0801ef6c
 8014154:	0801eea4 	.word	0x0801eea4

08014158 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014158:	b480      	push	{r7}
 801415a:	b085      	sub	sp, #20
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	3308      	adds	r3, #8
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	429a      	cmp	r2, r3
 8014170:	d00a      	beq.n	8014188 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d002      	beq.n	801417e <netif_do_set_netmask+0x26>
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	e000      	b.n	8014180 <netif_do_set_netmask+0x28>
 801417e:	2300      	movs	r3, #0
 8014180:	68fa      	ldr	r2, [r7, #12]
 8014182:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8014184:	2301      	movs	r3, #1
 8014186:	e000      	b.n	801418a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8014188:	2300      	movs	r3, #0
}
 801418a:	4618      	mov	r0, r3
 801418c:	3714      	adds	r7, #20
 801418e:	46bd      	mov	sp, r7
 8014190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014194:	4770      	bx	lr

08014196 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8014196:	b480      	push	{r7}
 8014198:	b085      	sub	sp, #20
 801419a:	af00      	add	r7, sp, #0
 801419c:	60f8      	str	r0, [r7, #12]
 801419e:	60b9      	str	r1, [r7, #8]
 80141a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	330c      	adds	r3, #12
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d00a      	beq.n	80141c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d002      	beq.n	80141bc <netif_do_set_gw+0x26>
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	e000      	b.n	80141be <netif_do_set_gw+0x28>
 80141bc:	2300      	movs	r3, #0
 80141be:	68fa      	ldr	r2, [r7, #12]
 80141c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80141c2:	2301      	movs	r3, #1
 80141c4:	e000      	b.n	80141c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80141c6:	2300      	movs	r3, #0
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3714      	adds	r7, #20
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr

080141d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b088      	sub	sp, #32
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
 80141e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80141e2:	2300      	movs	r3, #0
 80141e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80141e6:	2300      	movs	r3, #0
 80141e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d101      	bne.n	80141f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80141f0:	4b1c      	ldr	r3, [pc, #112]	; (8014264 <netif_set_addr+0x90>)
 80141f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d101      	bne.n	80141fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80141fa:	4b1a      	ldr	r3, [pc, #104]	; (8014264 <netif_set_addr+0x90>)
 80141fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014204:	4b17      	ldr	r3, [pc, #92]	; (8014264 <netif_set_addr+0x90>)
 8014206:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d003      	beq.n	8014216 <netif_set_addr+0x42>
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d101      	bne.n	801421a <netif_set_addr+0x46>
 8014216:	2301      	movs	r3, #1
 8014218:	e000      	b.n	801421c <netif_set_addr+0x48>
 801421a:	2300      	movs	r3, #0
 801421c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d006      	beq.n	8014232 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014224:	f107 0310 	add.w	r3, r7, #16
 8014228:	461a      	mov	r2, r3
 801422a:	68b9      	ldr	r1, [r7, #8]
 801422c:	68f8      	ldr	r0, [r7, #12]
 801422e:	f7ff ff49 	bl	80140c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014232:	69fa      	ldr	r2, [r7, #28]
 8014234:	6879      	ldr	r1, [r7, #4]
 8014236:	68f8      	ldr	r0, [r7, #12]
 8014238:	f7ff ff8e 	bl	8014158 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801423c:	69ba      	ldr	r2, [r7, #24]
 801423e:	6839      	ldr	r1, [r7, #0]
 8014240:	68f8      	ldr	r0, [r7, #12]
 8014242:	f7ff ffa8 	bl	8014196 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d106      	bne.n	801425a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801424c:	f107 0310 	add.w	r3, r7, #16
 8014250:	461a      	mov	r2, r3
 8014252:	68b9      	ldr	r1, [r7, #8]
 8014254:	68f8      	ldr	r0, [r7, #12]
 8014256:	f7ff ff35 	bl	80140c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801425a:	bf00      	nop
 801425c:	3720      	adds	r7, #32
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	08021620 	.word	0x08021620

08014268 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014268:	b480      	push	{r7}
 801426a:	b083      	sub	sp, #12
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014270:	4a04      	ldr	r2, [pc, #16]	; (8014284 <netif_set_default+0x1c>)
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8014276:	bf00      	nop
 8014278:	370c      	adds	r7, #12
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr
 8014282:	bf00      	nop
 8014284:	24022224 	.word	0x24022224

08014288 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d107      	bne.n	80142a6 <netif_set_up+0x1e>
 8014296:	4b0f      	ldr	r3, [pc, #60]	; (80142d4 <netif_set_up+0x4c>)
 8014298:	f44f 7254 	mov.w	r2, #848	; 0x350
 801429c:	490e      	ldr	r1, [pc, #56]	; (80142d8 <netif_set_up+0x50>)
 801429e:	480f      	ldr	r0, [pc, #60]	; (80142dc <netif_set_up+0x54>)
 80142a0:	f009 f9b8 	bl	801d614 <iprintf>
 80142a4:	e013      	b.n	80142ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142ac:	f003 0301 	and.w	r3, r3, #1
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d10c      	bne.n	80142ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142ba:	f043 0301 	orr.w	r3, r3, #1
 80142be:	b2da      	uxtb	r2, r3
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80142c6:	2103      	movs	r1, #3
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 f809 	bl	80142e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80142ce:	3708      	adds	r7, #8
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	0801ee54 	.word	0x0801ee54
 80142d8:	0801efdc 	.word	0x0801efdc
 80142dc:	0801eea4 	.word	0x0801eea4

080142e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	460b      	mov	r3, r1
 80142ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d106      	bne.n	8014300 <netif_issue_reports+0x20>
 80142f2:	4b18      	ldr	r3, [pc, #96]	; (8014354 <netif_issue_reports+0x74>)
 80142f4:	f240 326d 	movw	r2, #877	; 0x36d
 80142f8:	4917      	ldr	r1, [pc, #92]	; (8014358 <netif_issue_reports+0x78>)
 80142fa:	4818      	ldr	r0, [pc, #96]	; (801435c <netif_issue_reports+0x7c>)
 80142fc:	f009 f98a 	bl	801d614 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014306:	f003 0304 	and.w	r3, r3, #4
 801430a:	2b00      	cmp	r3, #0
 801430c:	d01e      	beq.n	801434c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014314:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014318:	2b00      	cmp	r3, #0
 801431a:	d017      	beq.n	801434c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801431c:	78fb      	ldrb	r3, [r7, #3]
 801431e:	f003 0301 	and.w	r3, r3, #1
 8014322:	2b00      	cmp	r3, #0
 8014324:	d013      	beq.n	801434e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	3304      	adds	r3, #4
 801432a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801432c:	2b00      	cmp	r3, #0
 801432e:	d00e      	beq.n	801434e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014336:	f003 0308 	and.w	r3, r3, #8
 801433a:	2b00      	cmp	r3, #0
 801433c:	d007      	beq.n	801434e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	3304      	adds	r3, #4
 8014342:	4619      	mov	r1, r3
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f007 fab9 	bl	801b8bc <etharp_request>
 801434a:	e000      	b.n	801434e <netif_issue_reports+0x6e>
    return;
 801434c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	0801ee54 	.word	0x0801ee54
 8014358:	0801eff8 	.word	0x0801eff8
 801435c:	0801eea4 	.word	0x0801eea4

08014360 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d107      	bne.n	801437e <netif_set_down+0x1e>
 801436e:	4b12      	ldr	r3, [pc, #72]	; (80143b8 <netif_set_down+0x58>)
 8014370:	f240 329b 	movw	r2, #923	; 0x39b
 8014374:	4911      	ldr	r1, [pc, #68]	; (80143bc <netif_set_down+0x5c>)
 8014376:	4812      	ldr	r0, [pc, #72]	; (80143c0 <netif_set_down+0x60>)
 8014378:	f009 f94c 	bl	801d614 <iprintf>
 801437c:	e019      	b.n	80143b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d012      	beq.n	80143b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014392:	f023 0301 	bic.w	r3, r3, #1
 8014396:	b2da      	uxtb	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143a4:	f003 0308 	and.w	r3, r3, #8
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d002      	beq.n	80143b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f006 fe43 	bl	801b038 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80143b2:	3708      	adds	r7, #8
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	0801ee54 	.word	0x0801ee54
 80143bc:	0801f01c 	.word	0x0801f01c
 80143c0:	0801eea4 	.word	0x0801eea4

080143c4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d107      	bne.n	80143e2 <netif_set_link_up+0x1e>
 80143d2:	4b13      	ldr	r3, [pc, #76]	; (8014420 <netif_set_link_up+0x5c>)
 80143d4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80143d8:	4912      	ldr	r1, [pc, #72]	; (8014424 <netif_set_link_up+0x60>)
 80143da:	4813      	ldr	r0, [pc, #76]	; (8014428 <netif_set_link_up+0x64>)
 80143dc:	f009 f91a 	bl	801d614 <iprintf>
 80143e0:	e01b      	b.n	801441a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143e8:	f003 0304 	and.w	r3, r3, #4
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d114      	bne.n	801441a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143f6:	f043 0304 	orr.w	r3, r3, #4
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014402:	2103      	movs	r1, #3
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f7ff ff6b 	bl	80142e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	69db      	ldr	r3, [r3, #28]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d003      	beq.n	801441a <netif_set_link_up+0x56>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	69db      	ldr	r3, [r3, #28]
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}
 8014420:	0801ee54 	.word	0x0801ee54
 8014424:	0801f03c 	.word	0x0801f03c
 8014428:	0801eea4 	.word	0x0801eea4

0801442c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d107      	bne.n	801444a <netif_set_link_down+0x1e>
 801443a:	4b11      	ldr	r3, [pc, #68]	; (8014480 <netif_set_link_down+0x54>)
 801443c:	f240 4206 	movw	r2, #1030	; 0x406
 8014440:	4910      	ldr	r1, [pc, #64]	; (8014484 <netif_set_link_down+0x58>)
 8014442:	4811      	ldr	r0, [pc, #68]	; (8014488 <netif_set_link_down+0x5c>)
 8014444:	f009 f8e6 	bl	801d614 <iprintf>
 8014448:	e017      	b.n	801447a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014450:	f003 0304 	and.w	r3, r3, #4
 8014454:	2b00      	cmp	r3, #0
 8014456:	d010      	beq.n	801447a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801445e:	f023 0304 	bic.w	r3, r3, #4
 8014462:	b2da      	uxtb	r2, r3
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	69db      	ldr	r3, [r3, #28]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d003      	beq.n	801447a <netif_set_link_down+0x4e>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	69db      	ldr	r3, [r3, #28]
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801447a:	3708      	adds	r7, #8
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	0801ee54 	.word	0x0801ee54
 8014484:	0801f060 	.word	0x0801f060
 8014488:	0801eea4 	.word	0x0801eea4

0801448c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801448c:	b480      	push	{r7}
 801448e:	b083      	sub	sp, #12
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d002      	beq.n	80144a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	683a      	ldr	r2, [r7, #0]
 80144a0:	61da      	str	r2, [r3, #28]
  }
}
 80144a2:	bf00      	nop
 80144a4:	370c      	adds	r7, #12
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr

080144ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80144ae:	b480      	push	{r7}
 80144b0:	b085      	sub	sp, #20
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	60f8      	str	r0, [r7, #12]
 80144b6:	60b9      	str	r1, [r7, #8]
 80144b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80144ba:	f06f 030b 	mvn.w	r3, #11
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3714      	adds	r7, #20
 80144c2:	46bd      	mov	sp, r7
 80144c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c8:	4770      	bx	lr
	...

080144cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80144cc:	b480      	push	{r7}
 80144ce:	b085      	sub	sp, #20
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	4603      	mov	r3, r0
 80144d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80144d6:	79fb      	ldrb	r3, [r7, #7]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d013      	beq.n	8014504 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80144dc:	4b0d      	ldr	r3, [pc, #52]	; (8014514 <netif_get_by_index+0x48>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	60fb      	str	r3, [r7, #12]
 80144e2:	e00c      	b.n	80144fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144ea:	3301      	adds	r3, #1
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	79fa      	ldrb	r2, [r7, #7]
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d101      	bne.n	80144f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	e006      	b.n	8014506 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	60fb      	str	r3, [r7, #12]
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d1ef      	bne.n	80144e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014504:	2300      	movs	r3, #0
}
 8014506:	4618      	mov	r0, r3
 8014508:	3714      	adds	r7, #20
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop
 8014514:	24022220 	.word	0x24022220

08014518 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801451e:	f008 fe4d 	bl	801d1bc <sys_arch_protect>
 8014522:	6038      	str	r0, [r7, #0]
 8014524:	4b0d      	ldr	r3, [pc, #52]	; (801455c <pbuf_free_ooseq+0x44>)
 8014526:	2200      	movs	r2, #0
 8014528:	701a      	strb	r2, [r3, #0]
 801452a:	6838      	ldr	r0, [r7, #0]
 801452c:	f008 fe54 	bl	801d1d8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014530:	4b0b      	ldr	r3, [pc, #44]	; (8014560 <pbuf_free_ooseq+0x48>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	607b      	str	r3, [r7, #4]
 8014536:	e00a      	b.n	801454e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801453c:	2b00      	cmp	r3, #0
 801453e:	d003      	beq.n	8014548 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f002 f979 	bl	8016838 <tcp_free_ooseq>
      return;
 8014546:	e005      	b.n	8014554 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	607b      	str	r3, [r7, #4]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d1f1      	bne.n	8014538 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014554:	3708      	adds	r7, #8
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	24022228 	.word	0x24022228
 8014560:	24022230 	.word	0x24022230

08014564 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801456c:	f7ff ffd4 	bl	8014518 <pbuf_free_ooseq>
}
 8014570:	bf00      	nop
 8014572:	3708      	adds	r7, #8
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801457e:	f008 fe1d 	bl	801d1bc <sys_arch_protect>
 8014582:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014584:	4b0f      	ldr	r3, [pc, #60]	; (80145c4 <pbuf_pool_is_empty+0x4c>)
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801458a:	4b0e      	ldr	r3, [pc, #56]	; (80145c4 <pbuf_pool_is_empty+0x4c>)
 801458c:	2201      	movs	r2, #1
 801458e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f008 fe21 	bl	801d1d8 <sys_arch_unprotect>

  if (!queued) {
 8014596:	78fb      	ldrb	r3, [r7, #3]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d10f      	bne.n	80145bc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801459c:	2100      	movs	r1, #0
 801459e:	480a      	ldr	r0, [pc, #40]	; (80145c8 <pbuf_pool_is_empty+0x50>)
 80145a0:	f7fe fdde 	bl	8013160 <tcpip_try_callback>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d008      	beq.n	80145bc <pbuf_pool_is_empty+0x44>
 80145aa:	f008 fe07 	bl	801d1bc <sys_arch_protect>
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	4b04      	ldr	r3, [pc, #16]	; (80145c4 <pbuf_pool_is_empty+0x4c>)
 80145b2:	2200      	movs	r2, #0
 80145b4:	701a      	strb	r2, [r3, #0]
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f008 fe0e 	bl	801d1d8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	24022228 	.word	0x24022228
 80145c8:	08014565 	.word	0x08014565

080145cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80145cc:	b480      	push	{r7}
 80145ce:	b085      	sub	sp, #20
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	4611      	mov	r1, r2
 80145d8:	461a      	mov	r2, r3
 80145da:	460b      	mov	r3, r1
 80145dc:	80fb      	strh	r3, [r7, #6]
 80145de:	4613      	mov	r3, r2
 80145e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	2200      	movs	r2, #0
 80145e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	68ba      	ldr	r2, [r7, #8]
 80145ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	88fa      	ldrh	r2, [r7, #6]
 80145f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	88ba      	ldrh	r2, [r7, #4]
 80145f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80145fa:	8b3b      	ldrh	r3, [r7, #24]
 80145fc:	b2da      	uxtb	r2, r3
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	7f3a      	ldrb	r2, [r7, #28]
 8014606:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2201      	movs	r2, #1
 801460c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2200      	movs	r2, #0
 8014612:	73da      	strb	r2, [r3, #15]
}
 8014614:	bf00      	nop
 8014616:	3714      	adds	r7, #20
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b08c      	sub	sp, #48	; 0x30
 8014624:	af02      	add	r7, sp, #8
 8014626:	4603      	mov	r3, r0
 8014628:	71fb      	strb	r3, [r7, #7]
 801462a:	460b      	mov	r3, r1
 801462c:	80bb      	strh	r3, [r7, #4]
 801462e:	4613      	mov	r3, r2
 8014630:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014632:	79fb      	ldrb	r3, [r7, #7]
 8014634:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014636:	887b      	ldrh	r3, [r7, #2]
 8014638:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801463c:	f000 8082 	beq.w	8014744 <pbuf_alloc+0x124>
 8014640:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014644:	f300 80ca 	bgt.w	80147dc <pbuf_alloc+0x1bc>
 8014648:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801464c:	d010      	beq.n	8014670 <pbuf_alloc+0x50>
 801464e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014652:	f300 80c3 	bgt.w	80147dc <pbuf_alloc+0x1bc>
 8014656:	2b01      	cmp	r3, #1
 8014658:	d002      	beq.n	8014660 <pbuf_alloc+0x40>
 801465a:	2b41      	cmp	r3, #65	; 0x41
 801465c:	f040 80be 	bne.w	80147dc <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014660:	887a      	ldrh	r2, [r7, #2]
 8014662:	88bb      	ldrh	r3, [r7, #4]
 8014664:	4619      	mov	r1, r3
 8014666:	2000      	movs	r0, #0
 8014668:	f000 f8d4 	bl	8014814 <pbuf_alloc_reference>
 801466c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801466e:	e0bf      	b.n	80147f0 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014670:	2300      	movs	r3, #0
 8014672:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014674:	2300      	movs	r3, #0
 8014676:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014678:	88bb      	ldrh	r3, [r7, #4]
 801467a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801467c:	200c      	movs	r0, #12
 801467e:	f7ff fb99 	bl	8013db4 <memp_malloc>
 8014682:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d109      	bne.n	801469e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 801468a:	f7ff ff75 	bl	8014578 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014690:	2b00      	cmp	r3, #0
 8014692:	d002      	beq.n	801469a <pbuf_alloc+0x7a>
            pbuf_free(p);
 8014694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014696:	f000 faab 	bl	8014bf0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801469a:	2300      	movs	r3, #0
 801469c:	e0a9      	b.n	80147f2 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801469e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146a0:	3303      	adds	r3, #3
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	f023 0303 	bic.w	r3, r3, #3
 80146a8:	b29a      	uxth	r2, r3
 80146aa:	f240 53ec 	movw	r3, #1516	; 0x5ec
 80146ae:	1a9b      	subs	r3, r3, r2
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	8b7a      	ldrh	r2, [r7, #26]
 80146b4:	4293      	cmp	r3, r2
 80146b6:	bf28      	it	cs
 80146b8:	4613      	movcs	r3, r2
 80146ba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80146bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146be:	3310      	adds	r3, #16
 80146c0:	693a      	ldr	r2, [r7, #16]
 80146c2:	4413      	add	r3, r2
 80146c4:	3303      	adds	r3, #3
 80146c6:	f023 0303 	bic.w	r3, r3, #3
 80146ca:	4618      	mov	r0, r3
 80146cc:	89f9      	ldrh	r1, [r7, #14]
 80146ce:	8b7a      	ldrh	r2, [r7, #26]
 80146d0:	2300      	movs	r3, #0
 80146d2:	9301      	str	r3, [sp, #4]
 80146d4:	887b      	ldrh	r3, [r7, #2]
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	460b      	mov	r3, r1
 80146da:	4601      	mov	r1, r0
 80146dc:	6938      	ldr	r0, [r7, #16]
 80146de:	f7ff ff75 	bl	80145cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	685b      	ldr	r3, [r3, #4]
 80146e6:	f003 0303 	and.w	r3, r3, #3
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d006      	beq.n	80146fc <pbuf_alloc+0xdc>
 80146ee:	4b43      	ldr	r3, [pc, #268]	; (80147fc <pbuf_alloc+0x1dc>)
 80146f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80146f4:	4942      	ldr	r1, [pc, #264]	; (8014800 <pbuf_alloc+0x1e0>)
 80146f6:	4843      	ldr	r0, [pc, #268]	; (8014804 <pbuf_alloc+0x1e4>)
 80146f8:	f008 ff8c 	bl	801d614 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80146fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146fe:	3303      	adds	r3, #3
 8014700:	f023 0303 	bic.w	r3, r3, #3
 8014704:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8014708:	4293      	cmp	r3, r2
 801470a:	d106      	bne.n	801471a <pbuf_alloc+0xfa>
 801470c:	4b3b      	ldr	r3, [pc, #236]	; (80147fc <pbuf_alloc+0x1dc>)
 801470e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014712:	493d      	ldr	r1, [pc, #244]	; (8014808 <pbuf_alloc+0x1e8>)
 8014714:	483b      	ldr	r0, [pc, #236]	; (8014804 <pbuf_alloc+0x1e4>)
 8014716:	f008 ff7d 	bl	801d614 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471c:	2b00      	cmp	r3, #0
 801471e:	d102      	bne.n	8014726 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	627b      	str	r3, [r7, #36]	; 0x24
 8014724:	e002      	b.n	801472c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014726:	69fb      	ldr	r3, [r7, #28]
 8014728:	693a      	ldr	r2, [r7, #16]
 801472a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014730:	8b7a      	ldrh	r2, [r7, #26]
 8014732:	89fb      	ldrh	r3, [r7, #14]
 8014734:	1ad3      	subs	r3, r2, r3
 8014736:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014738:	2300      	movs	r3, #0
 801473a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801473c:	8b7b      	ldrh	r3, [r7, #26]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d19c      	bne.n	801467c <pbuf_alloc+0x5c>
      break;
 8014742:	e055      	b.n	80147f0 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014746:	3303      	adds	r3, #3
 8014748:	b29b      	uxth	r3, r3
 801474a:	f023 0303 	bic.w	r3, r3, #3
 801474e:	b29a      	uxth	r2, r3
 8014750:	88bb      	ldrh	r3, [r7, #4]
 8014752:	3303      	adds	r3, #3
 8014754:	b29b      	uxth	r3, r3
 8014756:	f023 0303 	bic.w	r3, r3, #3
 801475a:	b29b      	uxth	r3, r3
 801475c:	4413      	add	r3, r2
 801475e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014760:	8b3b      	ldrh	r3, [r7, #24]
 8014762:	3310      	adds	r3, #16
 8014764:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014766:	8b3a      	ldrh	r2, [r7, #24]
 8014768:	88bb      	ldrh	r3, [r7, #4]
 801476a:	3303      	adds	r3, #3
 801476c:	f023 0303 	bic.w	r3, r3, #3
 8014770:	429a      	cmp	r2, r3
 8014772:	d306      	bcc.n	8014782 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014774:	8afa      	ldrh	r2, [r7, #22]
 8014776:	88bb      	ldrh	r3, [r7, #4]
 8014778:	3303      	adds	r3, #3
 801477a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801477e:	429a      	cmp	r2, r3
 8014780:	d201      	bcs.n	8014786 <pbuf_alloc+0x166>
        return NULL;
 8014782:	2300      	movs	r3, #0
 8014784:	e035      	b.n	80147f2 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014786:	8afb      	ldrh	r3, [r7, #22]
 8014788:	4618      	mov	r0, r3
 801478a:	f7ff f96b 	bl	8013a64 <mem_malloc>
 801478e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8014790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014792:	2b00      	cmp	r3, #0
 8014794:	d101      	bne.n	801479a <pbuf_alloc+0x17a>
        return NULL;
 8014796:	2300      	movs	r3, #0
 8014798:	e02b      	b.n	80147f2 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801479a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801479c:	3310      	adds	r3, #16
 801479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147a0:	4413      	add	r3, r2
 80147a2:	3303      	adds	r3, #3
 80147a4:	f023 0303 	bic.w	r3, r3, #3
 80147a8:	4618      	mov	r0, r3
 80147aa:	88b9      	ldrh	r1, [r7, #4]
 80147ac:	88ba      	ldrh	r2, [r7, #4]
 80147ae:	2300      	movs	r3, #0
 80147b0:	9301      	str	r3, [sp, #4]
 80147b2:	887b      	ldrh	r3, [r7, #2]
 80147b4:	9300      	str	r3, [sp, #0]
 80147b6:	460b      	mov	r3, r1
 80147b8:	4601      	mov	r1, r0
 80147ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147bc:	f7ff ff06 	bl	80145cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80147c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	f003 0303 	and.w	r3, r3, #3
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d010      	beq.n	80147ee <pbuf_alloc+0x1ce>
 80147cc:	4b0b      	ldr	r3, [pc, #44]	; (80147fc <pbuf_alloc+0x1dc>)
 80147ce:	f44f 7291 	mov.w	r2, #290	; 0x122
 80147d2:	490e      	ldr	r1, [pc, #56]	; (801480c <pbuf_alloc+0x1ec>)
 80147d4:	480b      	ldr	r0, [pc, #44]	; (8014804 <pbuf_alloc+0x1e4>)
 80147d6:	f008 ff1d 	bl	801d614 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80147da:	e008      	b.n	80147ee <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80147dc:	4b07      	ldr	r3, [pc, #28]	; (80147fc <pbuf_alloc+0x1dc>)
 80147de:	f240 1227 	movw	r2, #295	; 0x127
 80147e2:	490b      	ldr	r1, [pc, #44]	; (8014810 <pbuf_alloc+0x1f0>)
 80147e4:	4807      	ldr	r0, [pc, #28]	; (8014804 <pbuf_alloc+0x1e4>)
 80147e6:	f008 ff15 	bl	801d614 <iprintf>
      return NULL;
 80147ea:	2300      	movs	r3, #0
 80147ec:	e001      	b.n	80147f2 <pbuf_alloc+0x1d2>
      break;
 80147ee:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80147f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3728      	adds	r7, #40	; 0x28
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	0801f084 	.word	0x0801f084
 8014800:	0801f0b4 	.word	0x0801f0b4
 8014804:	0801f0e4 	.word	0x0801f0e4
 8014808:	0801f10c 	.word	0x0801f10c
 801480c:	0801f140 	.word	0x0801f140
 8014810:	0801f16c 	.word	0x0801f16c

08014814 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b086      	sub	sp, #24
 8014818:	af02      	add	r7, sp, #8
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	460b      	mov	r3, r1
 801481e:	807b      	strh	r3, [r7, #2]
 8014820:	4613      	mov	r3, r2
 8014822:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014824:	883b      	ldrh	r3, [r7, #0]
 8014826:	2b41      	cmp	r3, #65	; 0x41
 8014828:	d009      	beq.n	801483e <pbuf_alloc_reference+0x2a>
 801482a:	883b      	ldrh	r3, [r7, #0]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d006      	beq.n	801483e <pbuf_alloc_reference+0x2a>
 8014830:	4b0f      	ldr	r3, [pc, #60]	; (8014870 <pbuf_alloc_reference+0x5c>)
 8014832:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8014836:	490f      	ldr	r1, [pc, #60]	; (8014874 <pbuf_alloc_reference+0x60>)
 8014838:	480f      	ldr	r0, [pc, #60]	; (8014878 <pbuf_alloc_reference+0x64>)
 801483a:	f008 feeb 	bl	801d614 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801483e:	200b      	movs	r0, #11
 8014840:	f7ff fab8 	bl	8013db4 <memp_malloc>
 8014844:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d101      	bne.n	8014850 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801484c:	2300      	movs	r3, #0
 801484e:	e00b      	b.n	8014868 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014850:	8879      	ldrh	r1, [r7, #2]
 8014852:	887a      	ldrh	r2, [r7, #2]
 8014854:	2300      	movs	r3, #0
 8014856:	9301      	str	r3, [sp, #4]
 8014858:	883b      	ldrh	r3, [r7, #0]
 801485a:	9300      	str	r3, [sp, #0]
 801485c:	460b      	mov	r3, r1
 801485e:	6879      	ldr	r1, [r7, #4]
 8014860:	68f8      	ldr	r0, [r7, #12]
 8014862:	f7ff feb3 	bl	80145cc <pbuf_init_alloced_pbuf>
  return p;
 8014866:	68fb      	ldr	r3, [r7, #12]
}
 8014868:	4618      	mov	r0, r3
 801486a:	3710      	adds	r7, #16
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	0801f084 	.word	0x0801f084
 8014874:	0801f188 	.word	0x0801f188
 8014878:	0801f0e4 	.word	0x0801f0e4

0801487c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b088      	sub	sp, #32
 8014880:	af02      	add	r7, sp, #8
 8014882:	607b      	str	r3, [r7, #4]
 8014884:	4603      	mov	r3, r0
 8014886:	73fb      	strb	r3, [r7, #15]
 8014888:	460b      	mov	r3, r1
 801488a:	81bb      	strh	r3, [r7, #12]
 801488c:	4613      	mov	r3, r2
 801488e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014890:	7bfb      	ldrb	r3, [r7, #15]
 8014892:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014894:	8a7b      	ldrh	r3, [r7, #18]
 8014896:	3303      	adds	r3, #3
 8014898:	f023 0203 	bic.w	r2, r3, #3
 801489c:	89bb      	ldrh	r3, [r7, #12]
 801489e:	441a      	add	r2, r3
 80148a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d901      	bls.n	80148aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80148a6:	2300      	movs	r3, #0
 80148a8:	e018      	b.n	80148dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80148aa:	6a3b      	ldr	r3, [r7, #32]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d007      	beq.n	80148c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80148b0:	8a7b      	ldrh	r3, [r7, #18]
 80148b2:	3303      	adds	r3, #3
 80148b4:	f023 0303 	bic.w	r3, r3, #3
 80148b8:	6a3a      	ldr	r2, [r7, #32]
 80148ba:	4413      	add	r3, r2
 80148bc:	617b      	str	r3, [r7, #20]
 80148be:	e001      	b.n	80148c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80148c0:	2300      	movs	r3, #0
 80148c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	89b9      	ldrh	r1, [r7, #12]
 80148c8:	89ba      	ldrh	r2, [r7, #12]
 80148ca:	2302      	movs	r3, #2
 80148cc:	9301      	str	r3, [sp, #4]
 80148ce:	897b      	ldrh	r3, [r7, #10]
 80148d0:	9300      	str	r3, [sp, #0]
 80148d2:	460b      	mov	r3, r1
 80148d4:	6979      	ldr	r1, [r7, #20]
 80148d6:	f7ff fe79 	bl	80145cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80148da:	687b      	ldr	r3, [r7, #4]
}
 80148dc:	4618      	mov	r0, r3
 80148de:	3718      	adds	r7, #24
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	460b      	mov	r3, r1
 80148ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d106      	bne.n	8014904 <pbuf_realloc+0x20>
 80148f6:	4b3a      	ldr	r3, [pc, #232]	; (80149e0 <pbuf_realloc+0xfc>)
 80148f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80148fc:	4939      	ldr	r1, [pc, #228]	; (80149e4 <pbuf_realloc+0x100>)
 80148fe:	483a      	ldr	r0, [pc, #232]	; (80149e8 <pbuf_realloc+0x104>)
 8014900:	f008 fe88 	bl	801d614 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	891b      	ldrh	r3, [r3, #8]
 8014908:	887a      	ldrh	r2, [r7, #2]
 801490a:	429a      	cmp	r2, r3
 801490c:	d263      	bcs.n	80149d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	891a      	ldrh	r2, [r3, #8]
 8014912:	887b      	ldrh	r3, [r7, #2]
 8014914:	1ad3      	subs	r3, r2, r3
 8014916:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014918:	887b      	ldrh	r3, [r7, #2]
 801491a:	817b      	strh	r3, [r7, #10]
  q = p;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014920:	e018      	b.n	8014954 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	895b      	ldrh	r3, [r3, #10]
 8014926:	897a      	ldrh	r2, [r7, #10]
 8014928:	1ad3      	subs	r3, r2, r3
 801492a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	891a      	ldrh	r2, [r3, #8]
 8014930:	893b      	ldrh	r3, [r7, #8]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	b29a      	uxth	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d106      	bne.n	8014954 <pbuf_realloc+0x70>
 8014946:	4b26      	ldr	r3, [pc, #152]	; (80149e0 <pbuf_realloc+0xfc>)
 8014948:	f240 12af 	movw	r2, #431	; 0x1af
 801494c:	4927      	ldr	r1, [pc, #156]	; (80149ec <pbuf_realloc+0x108>)
 801494e:	4826      	ldr	r0, [pc, #152]	; (80149e8 <pbuf_realloc+0x104>)
 8014950:	f008 fe60 	bl	801d614 <iprintf>
  while (rem_len > q->len) {
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	895b      	ldrh	r3, [r3, #10]
 8014958:	897a      	ldrh	r2, [r7, #10]
 801495a:	429a      	cmp	r2, r3
 801495c:	d8e1      	bhi.n	8014922 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	7b1b      	ldrb	r3, [r3, #12]
 8014962:	f003 030f 	and.w	r3, r3, #15
 8014966:	2b00      	cmp	r3, #0
 8014968:	d121      	bne.n	80149ae <pbuf_realloc+0xca>
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	895b      	ldrh	r3, [r3, #10]
 801496e:	897a      	ldrh	r2, [r7, #10]
 8014970:	429a      	cmp	r2, r3
 8014972:	d01c      	beq.n	80149ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	7b5b      	ldrb	r3, [r3, #13]
 8014978:	f003 0302 	and.w	r3, r3, #2
 801497c:	2b00      	cmp	r3, #0
 801497e:	d116      	bne.n	80149ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	685a      	ldr	r2, [r3, #4]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	1ad3      	subs	r3, r2, r3
 8014988:	b29a      	uxth	r2, r3
 801498a:	897b      	ldrh	r3, [r7, #10]
 801498c:	4413      	add	r3, r2
 801498e:	b29b      	uxth	r3, r3
 8014990:	4619      	mov	r1, r3
 8014992:	68f8      	ldr	r0, [r7, #12]
 8014994:	f7fe ff56 	bl	8013844 <mem_trim>
 8014998:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d106      	bne.n	80149ae <pbuf_realloc+0xca>
 80149a0:	4b0f      	ldr	r3, [pc, #60]	; (80149e0 <pbuf_realloc+0xfc>)
 80149a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80149a6:	4912      	ldr	r1, [pc, #72]	; (80149f0 <pbuf_realloc+0x10c>)
 80149a8:	480f      	ldr	r0, [pc, #60]	; (80149e8 <pbuf_realloc+0x104>)
 80149aa:	f008 fe33 	bl	801d614 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	897a      	ldrh	r2, [r7, #10]
 80149b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	895a      	ldrh	r2, [r3, #10]
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d004      	beq.n	80149ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	4618      	mov	r0, r3
 80149ca:	f000 f911 	bl	8014bf0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2200      	movs	r2, #0
 80149d2:	601a      	str	r2, [r3, #0]
 80149d4:	e000      	b.n	80149d8 <pbuf_realloc+0xf4>
    return;
 80149d6:	bf00      	nop

}
 80149d8:	3710      	adds	r7, #16
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	0801f084 	.word	0x0801f084
 80149e4:	0801f19c 	.word	0x0801f19c
 80149e8:	0801f0e4 	.word	0x0801f0e4
 80149ec:	0801f1b4 	.word	0x0801f1b4
 80149f0:	0801f1cc 	.word	0x0801f1cc

080149f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b086      	sub	sp, #24
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	4613      	mov	r3, r2
 8014a00:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d106      	bne.n	8014a16 <pbuf_add_header_impl+0x22>
 8014a08:	4b2b      	ldr	r3, [pc, #172]	; (8014ab8 <pbuf_add_header_impl+0xc4>)
 8014a0a:	f240 12df 	movw	r2, #479	; 0x1df
 8014a0e:	492b      	ldr	r1, [pc, #172]	; (8014abc <pbuf_add_header_impl+0xc8>)
 8014a10:	482b      	ldr	r0, [pc, #172]	; (8014ac0 <pbuf_add_header_impl+0xcc>)
 8014a12:	f008 fdff 	bl	801d614 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d003      	beq.n	8014a24 <pbuf_add_header_impl+0x30>
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a22:	d301      	bcc.n	8014a28 <pbuf_add_header_impl+0x34>
    return 1;
 8014a24:	2301      	movs	r3, #1
 8014a26:	e043      	b.n	8014ab0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d101      	bne.n	8014a32 <pbuf_add_header_impl+0x3e>
    return 0;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	e03e      	b.n	8014ab0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	891a      	ldrh	r2, [r3, #8]
 8014a3a:	8a7b      	ldrh	r3, [r7, #18]
 8014a3c:	4413      	add	r3, r2
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	8a7a      	ldrh	r2, [r7, #18]
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d901      	bls.n	8014a4a <pbuf_add_header_impl+0x56>
    return 1;
 8014a46:	2301      	movs	r3, #1
 8014a48:	e032      	b.n	8014ab0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	7b1b      	ldrb	r3, [r3, #12]
 8014a4e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014a50:	8a3b      	ldrh	r3, [r7, #16]
 8014a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d00c      	beq.n	8014a74 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	685a      	ldr	r2, [r3, #4]
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	425b      	negs	r3, r3
 8014a62:	4413      	add	r3, r2
 8014a64:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	3310      	adds	r3, #16
 8014a6a:	697a      	ldr	r2, [r7, #20]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d20d      	bcs.n	8014a8c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014a70:	2301      	movs	r3, #1
 8014a72:	e01d      	b.n	8014ab0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014a74:	79fb      	ldrb	r3, [r7, #7]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d006      	beq.n	8014a88 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	685a      	ldr	r2, [r3, #4]
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	425b      	negs	r3, r3
 8014a82:	4413      	add	r3, r2
 8014a84:	617b      	str	r3, [r7, #20]
 8014a86:	e001      	b.n	8014a8c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014a88:	2301      	movs	r3, #1
 8014a8a:	e011      	b.n	8014ab0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	697a      	ldr	r2, [r7, #20]
 8014a90:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	895a      	ldrh	r2, [r3, #10]
 8014a96:	8a7b      	ldrh	r3, [r7, #18]
 8014a98:	4413      	add	r3, r2
 8014a9a:	b29a      	uxth	r2, r3
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	891a      	ldrh	r2, [r3, #8]
 8014aa4:	8a7b      	ldrh	r3, [r7, #18]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	b29a      	uxth	r2, r3
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	811a      	strh	r2, [r3, #8]


  return 0;
 8014aae:	2300      	movs	r3, #0
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3718      	adds	r7, #24
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	0801f084 	.word	0x0801f084
 8014abc:	0801f1e8 	.word	0x0801f1e8
 8014ac0:	0801f0e4 	.word	0x0801f0e4

08014ac4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014ace:	2200      	movs	r2, #0
 8014ad0:	6839      	ldr	r1, [r7, #0]
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f7ff ff8e 	bl	80149f4 <pbuf_add_header_impl>
 8014ad8:	4603      	mov	r3, r0
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3708      	adds	r7, #8
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
	...

08014ae4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b084      	sub	sp, #16
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d106      	bne.n	8014b02 <pbuf_remove_header+0x1e>
 8014af4:	4b20      	ldr	r3, [pc, #128]	; (8014b78 <pbuf_remove_header+0x94>)
 8014af6:	f240 224b 	movw	r2, #587	; 0x24b
 8014afa:	4920      	ldr	r1, [pc, #128]	; (8014b7c <pbuf_remove_header+0x98>)
 8014afc:	4820      	ldr	r0, [pc, #128]	; (8014b80 <pbuf_remove_header+0x9c>)
 8014afe:	f008 fd89 	bl	801d614 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d003      	beq.n	8014b10 <pbuf_remove_header+0x2c>
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b0e:	d301      	bcc.n	8014b14 <pbuf_remove_header+0x30>
    return 1;
 8014b10:	2301      	movs	r3, #1
 8014b12:	e02c      	b.n	8014b6e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d101      	bne.n	8014b1e <pbuf_remove_header+0x3a>
    return 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	e027      	b.n	8014b6e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	895b      	ldrh	r3, [r3, #10]
 8014b26:	89fa      	ldrh	r2, [r7, #14]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d908      	bls.n	8014b3e <pbuf_remove_header+0x5a>
 8014b2c:	4b12      	ldr	r3, [pc, #72]	; (8014b78 <pbuf_remove_header+0x94>)
 8014b2e:	f240 2255 	movw	r2, #597	; 0x255
 8014b32:	4914      	ldr	r1, [pc, #80]	; (8014b84 <pbuf_remove_header+0xa0>)
 8014b34:	4812      	ldr	r0, [pc, #72]	; (8014b80 <pbuf_remove_header+0x9c>)
 8014b36:	f008 fd6d 	bl	801d614 <iprintf>
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	e017      	b.n	8014b6e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	685a      	ldr	r2, [r3, #4]
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	441a      	add	r2, r3
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	895a      	ldrh	r2, [r3, #10]
 8014b54:	89fb      	ldrh	r3, [r7, #14]
 8014b56:	1ad3      	subs	r3, r2, r3
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	891a      	ldrh	r2, [r3, #8]
 8014b62:	89fb      	ldrh	r3, [r7, #14]
 8014b64:	1ad3      	subs	r3, r2, r3
 8014b66:	b29a      	uxth	r2, r3
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014b6c:	2300      	movs	r3, #0
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3710      	adds	r7, #16
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	0801f084 	.word	0x0801f084
 8014b7c:	0801f1e8 	.word	0x0801f1e8
 8014b80:	0801f0e4 	.word	0x0801f0e4
 8014b84:	0801f1f4 	.word	0x0801f1f4

08014b88 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	460b      	mov	r3, r1
 8014b92:	807b      	strh	r3, [r7, #2]
 8014b94:	4613      	mov	r3, r2
 8014b96:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014b98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	da08      	bge.n	8014bb2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014ba0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014ba4:	425b      	negs	r3, r3
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f7ff ff9b 	bl	8014ae4 <pbuf_remove_header>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	e007      	b.n	8014bc2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014bb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014bb6:	787a      	ldrb	r2, [r7, #1]
 8014bb8:	4619      	mov	r1, r3
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f7ff ff1a 	bl	80149f4 <pbuf_add_header_impl>
 8014bc0:	4603      	mov	r3, r0
  }
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	3708      	adds	r7, #8
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b082      	sub	sp, #8
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014bd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014bda:	2201      	movs	r2, #1
 8014bdc:	4619      	mov	r1, r3
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f7ff ffd2 	bl	8014b88 <pbuf_header_impl>
 8014be4:	4603      	mov	r3, r0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3708      	adds	r7, #8
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
	...

08014bf0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b088      	sub	sp, #32
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d10b      	bne.n	8014c16 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d106      	bne.n	8014c12 <pbuf_free+0x22>
 8014c04:	4b3b      	ldr	r3, [pc, #236]	; (8014cf4 <pbuf_free+0x104>)
 8014c06:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014c0a:	493b      	ldr	r1, [pc, #236]	; (8014cf8 <pbuf_free+0x108>)
 8014c0c:	483b      	ldr	r0, [pc, #236]	; (8014cfc <pbuf_free+0x10c>)
 8014c0e:	f008 fd01 	bl	801d614 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014c12:	2300      	movs	r3, #0
 8014c14:	e069      	b.n	8014cea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014c16:	2300      	movs	r3, #0
 8014c18:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014c1a:	e062      	b.n	8014ce2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014c1c:	f008 face 	bl	801d1bc <sys_arch_protect>
 8014c20:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	7b9b      	ldrb	r3, [r3, #14]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d106      	bne.n	8014c38 <pbuf_free+0x48>
 8014c2a:	4b32      	ldr	r3, [pc, #200]	; (8014cf4 <pbuf_free+0x104>)
 8014c2c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014c30:	4933      	ldr	r1, [pc, #204]	; (8014d00 <pbuf_free+0x110>)
 8014c32:	4832      	ldr	r0, [pc, #200]	; (8014cfc <pbuf_free+0x10c>)
 8014c34:	f008 fcee 	bl	801d614 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	7b9b      	ldrb	r3, [r3, #14]
 8014c3c:	3b01      	subs	r3, #1
 8014c3e:	b2da      	uxtb	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	739a      	strb	r2, [r3, #14]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	7b9b      	ldrb	r3, [r3, #14]
 8014c48:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014c4a:	69b8      	ldr	r0, [r7, #24]
 8014c4c:	f008 fac4 	bl	801d1d8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014c50:	7dfb      	ldrb	r3, [r7, #23]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d143      	bne.n	8014cde <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	7b1b      	ldrb	r3, [r3, #12]
 8014c60:	f003 030f 	and.w	r3, r3, #15
 8014c64:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	7b5b      	ldrb	r3, [r3, #13]
 8014c6a:	f003 0302 	and.w	r3, r3, #2
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d011      	beq.n	8014c96 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	691b      	ldr	r3, [r3, #16]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d106      	bne.n	8014c8c <pbuf_free+0x9c>
 8014c7e:	4b1d      	ldr	r3, [pc, #116]	; (8014cf4 <pbuf_free+0x104>)
 8014c80:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014c84:	491f      	ldr	r1, [pc, #124]	; (8014d04 <pbuf_free+0x114>)
 8014c86:	481d      	ldr	r0, [pc, #116]	; (8014cfc <pbuf_free+0x10c>)
 8014c88:	f008 fcc4 	bl	801d614 <iprintf>
        pc->custom_free_function(p);
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	691b      	ldr	r3, [r3, #16]
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	4798      	blx	r3
 8014c94:	e01d      	b.n	8014cd2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014c96:	7bfb      	ldrb	r3, [r7, #15]
 8014c98:	2b02      	cmp	r3, #2
 8014c9a:	d104      	bne.n	8014ca6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014c9c:	6879      	ldr	r1, [r7, #4]
 8014c9e:	200c      	movs	r0, #12
 8014ca0:	f7ff f8fe 	bl	8013ea0 <memp_free>
 8014ca4:	e015      	b.n	8014cd2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014ca6:	7bfb      	ldrb	r3, [r7, #15]
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d104      	bne.n	8014cb6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014cac:	6879      	ldr	r1, [r7, #4]
 8014cae:	200b      	movs	r0, #11
 8014cb0:	f7ff f8f6 	bl	8013ea0 <memp_free>
 8014cb4:	e00d      	b.n	8014cd2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014cb6:	7bfb      	ldrb	r3, [r7, #15]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d103      	bne.n	8014cc4 <pbuf_free+0xd4>
          mem_free(p);
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f7fe fd31 	bl	8013724 <mem_free>
 8014cc2:	e006      	b.n	8014cd2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014cc4:	4b0b      	ldr	r3, [pc, #44]	; (8014cf4 <pbuf_free+0x104>)
 8014cc6:	f240 320f 	movw	r2, #783	; 0x30f
 8014cca:	490f      	ldr	r1, [pc, #60]	; (8014d08 <pbuf_free+0x118>)
 8014ccc:	480b      	ldr	r0, [pc, #44]	; (8014cfc <pbuf_free+0x10c>)
 8014cce:	f008 fca1 	bl	801d614 <iprintf>
        }
      }
      count++;
 8014cd2:	7ffb      	ldrb	r3, [r7, #31]
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	607b      	str	r3, [r7, #4]
 8014cdc:	e001      	b.n	8014ce2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d199      	bne.n	8014c1c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3720      	adds	r7, #32
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	0801f084 	.word	0x0801f084
 8014cf8:	0801f1e8 	.word	0x0801f1e8
 8014cfc:	0801f0e4 	.word	0x0801f0e4
 8014d00:	0801f214 	.word	0x0801f214
 8014d04:	0801f22c 	.word	0x0801f22c
 8014d08:	0801f250 	.word	0x0801f250

08014d0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b085      	sub	sp, #20
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014d14:	2300      	movs	r3, #0
 8014d16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014d18:	e005      	b.n	8014d26 <pbuf_clen+0x1a>
    ++len;
 8014d1a:	89fb      	ldrh	r3, [r7, #14]
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d1f6      	bne.n	8014d1a <pbuf_clen+0xe>
  }
  return len;
 8014d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr
	...

08014d3c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d016      	beq.n	8014d78 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014d4a:	f008 fa37 	bl	801d1bc <sys_arch_protect>
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	7b9b      	ldrb	r3, [r3, #14]
 8014d54:	3301      	adds	r3, #1
 8014d56:	b2da      	uxtb	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	739a      	strb	r2, [r3, #14]
 8014d5c:	68f8      	ldr	r0, [r7, #12]
 8014d5e:	f008 fa3b 	bl	801d1d8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	7b9b      	ldrb	r3, [r3, #14]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <pbuf_ref+0x3c>
 8014d6a:	4b05      	ldr	r3, [pc, #20]	; (8014d80 <pbuf_ref+0x44>)
 8014d6c:	f240 3242 	movw	r2, #834	; 0x342
 8014d70:	4904      	ldr	r1, [pc, #16]	; (8014d84 <pbuf_ref+0x48>)
 8014d72:	4805      	ldr	r0, [pc, #20]	; (8014d88 <pbuf_ref+0x4c>)
 8014d74:	f008 fc4e 	bl	801d614 <iprintf>
  }
}
 8014d78:	bf00      	nop
 8014d7a:	3710      	adds	r7, #16
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd80      	pop	{r7, pc}
 8014d80:	0801f084 	.word	0x0801f084
 8014d84:	0801f264 	.word	0x0801f264
 8014d88:	0801f0e4 	.word	0x0801f0e4

08014d8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d002      	beq.n	8014da2 <pbuf_cat+0x16>
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d107      	bne.n	8014db2 <pbuf_cat+0x26>
 8014da2:	4b20      	ldr	r3, [pc, #128]	; (8014e24 <pbuf_cat+0x98>)
 8014da4:	f240 3259 	movw	r2, #857	; 0x359
 8014da8:	491f      	ldr	r1, [pc, #124]	; (8014e28 <pbuf_cat+0x9c>)
 8014daa:	4820      	ldr	r0, [pc, #128]	; (8014e2c <pbuf_cat+0xa0>)
 8014dac:	f008 fc32 	bl	801d614 <iprintf>
 8014db0:	e034      	b.n	8014e1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	60fb      	str	r3, [r7, #12]
 8014db6:	e00a      	b.n	8014dce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	891a      	ldrh	r2, [r3, #8]
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	891b      	ldrh	r3, [r3, #8]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	b29a      	uxth	r2, r3
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	60fb      	str	r3, [r7, #12]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d1f0      	bne.n	8014db8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	891a      	ldrh	r2, [r3, #8]
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	895b      	ldrh	r3, [r3, #10]
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d006      	beq.n	8014df0 <pbuf_cat+0x64>
 8014de2:	4b10      	ldr	r3, [pc, #64]	; (8014e24 <pbuf_cat+0x98>)
 8014de4:	f240 3262 	movw	r2, #866	; 0x362
 8014de8:	4911      	ldr	r1, [pc, #68]	; (8014e30 <pbuf_cat+0xa4>)
 8014dea:	4810      	ldr	r0, [pc, #64]	; (8014e2c <pbuf_cat+0xa0>)
 8014dec:	f008 fc12 	bl	801d614 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d006      	beq.n	8014e06 <pbuf_cat+0x7a>
 8014df8:	4b0a      	ldr	r3, [pc, #40]	; (8014e24 <pbuf_cat+0x98>)
 8014dfa:	f240 3263 	movw	r2, #867	; 0x363
 8014dfe:	490d      	ldr	r1, [pc, #52]	; (8014e34 <pbuf_cat+0xa8>)
 8014e00:	480a      	ldr	r0, [pc, #40]	; (8014e2c <pbuf_cat+0xa0>)
 8014e02:	f008 fc07 	bl	801d614 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	891a      	ldrh	r2, [r3, #8]
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	891b      	ldrh	r3, [r3, #8]
 8014e0e:	4413      	add	r3, r2
 8014e10:	b29a      	uxth	r2, r3
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	683a      	ldr	r2, [r7, #0]
 8014e1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014e1c:	3710      	adds	r7, #16
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	0801f084 	.word	0x0801f084
 8014e28:	0801f278 	.word	0x0801f278
 8014e2c:	0801f0e4 	.word	0x0801f0e4
 8014e30:	0801f2b0 	.word	0x0801f2b0
 8014e34:	0801f2e0 	.word	0x0801f2e0

08014e38 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b086      	sub	sp, #24
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014e42:	2300      	movs	r3, #0
 8014e44:	617b      	str	r3, [r7, #20]
 8014e46:	2300      	movs	r3, #0
 8014e48:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d008      	beq.n	8014e62 <pbuf_copy+0x2a>
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d005      	beq.n	8014e62 <pbuf_copy+0x2a>
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	891a      	ldrh	r2, [r3, #8]
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	891b      	ldrh	r3, [r3, #8]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d209      	bcs.n	8014e76 <pbuf_copy+0x3e>
 8014e62:	4b57      	ldr	r3, [pc, #348]	; (8014fc0 <pbuf_copy+0x188>)
 8014e64:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014e68:	4956      	ldr	r1, [pc, #344]	; (8014fc4 <pbuf_copy+0x18c>)
 8014e6a:	4857      	ldr	r0, [pc, #348]	; (8014fc8 <pbuf_copy+0x190>)
 8014e6c:	f008 fbd2 	bl	801d614 <iprintf>
 8014e70:	f06f 030f 	mvn.w	r3, #15
 8014e74:	e09f      	b.n	8014fb6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	895b      	ldrh	r3, [r3, #10]
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	1ad2      	subs	r2, r2, r3
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	895b      	ldrh	r3, [r3, #10]
 8014e84:	4619      	mov	r1, r3
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	1acb      	subs	r3, r1, r3
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d306      	bcc.n	8014e9c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	895b      	ldrh	r3, [r3, #10]
 8014e92:	461a      	mov	r2, r3
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	60fb      	str	r3, [r7, #12]
 8014e9a:	e005      	b.n	8014ea8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	895b      	ldrh	r3, [r3, #10]
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	1ad3      	subs	r3, r2, r3
 8014ea6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	685a      	ldr	r2, [r3, #4]
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	18d0      	adds	r0, r2, r3
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	685a      	ldr	r2, [r3, #4]
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	4413      	add	r3, r2
 8014eb8:	68fa      	ldr	r2, [r7, #12]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	f008 fad0 	bl	801d460 <memcpy>
    offset_to += len;
 8014ec0:	697a      	ldr	r2, [r7, #20]
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014ec8:	693a      	ldr	r2, [r7, #16]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	4413      	add	r3, r2
 8014ece:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	895b      	ldrh	r3, [r3, #10]
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	4293      	cmp	r3, r2
 8014eda:	d906      	bls.n	8014eea <pbuf_copy+0xb2>
 8014edc:	4b38      	ldr	r3, [pc, #224]	; (8014fc0 <pbuf_copy+0x188>)
 8014ede:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014ee2:	493a      	ldr	r1, [pc, #232]	; (8014fcc <pbuf_copy+0x194>)
 8014ee4:	4838      	ldr	r0, [pc, #224]	; (8014fc8 <pbuf_copy+0x190>)
 8014ee6:	f008 fb95 	bl	801d614 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	895b      	ldrh	r3, [r3, #10]
 8014eee:	461a      	mov	r2, r3
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	4293      	cmp	r3, r2
 8014ef4:	d906      	bls.n	8014f04 <pbuf_copy+0xcc>
 8014ef6:	4b32      	ldr	r3, [pc, #200]	; (8014fc0 <pbuf_copy+0x188>)
 8014ef8:	f240 32da 	movw	r2, #986	; 0x3da
 8014efc:	4934      	ldr	r1, [pc, #208]	; (8014fd0 <pbuf_copy+0x198>)
 8014efe:	4832      	ldr	r0, [pc, #200]	; (8014fc8 <pbuf_copy+0x190>)
 8014f00:	f008 fb88 	bl	801d614 <iprintf>
    if (offset_from >= p_from->len) {
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	895b      	ldrh	r3, [r3, #10]
 8014f08:	461a      	mov	r2, r3
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	4293      	cmp	r3, r2
 8014f0e:	d304      	bcc.n	8014f1a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014f10:	2300      	movs	r3, #0
 8014f12:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	895b      	ldrh	r3, [r3, #10]
 8014f1e:	461a      	mov	r2, r3
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d114      	bne.n	8014f50 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014f26:	2300      	movs	r3, #0
 8014f28:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d10c      	bne.n	8014f50 <pbuf_copy+0x118>
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d009      	beq.n	8014f50 <pbuf_copy+0x118>
 8014f3c:	4b20      	ldr	r3, [pc, #128]	; (8014fc0 <pbuf_copy+0x188>)
 8014f3e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014f42:	4924      	ldr	r1, [pc, #144]	; (8014fd4 <pbuf_copy+0x19c>)
 8014f44:	4820      	ldr	r0, [pc, #128]	; (8014fc8 <pbuf_copy+0x190>)
 8014f46:	f008 fb65 	bl	801d614 <iprintf>
 8014f4a:	f06f 030f 	mvn.w	r3, #15
 8014f4e:	e032      	b.n	8014fb6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d013      	beq.n	8014f7e <pbuf_copy+0x146>
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	895a      	ldrh	r2, [r3, #10]
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	891b      	ldrh	r3, [r3, #8]
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d10d      	bne.n	8014f7e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d009      	beq.n	8014f7e <pbuf_copy+0x146>
 8014f6a:	4b15      	ldr	r3, [pc, #84]	; (8014fc0 <pbuf_copy+0x188>)
 8014f6c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014f70:	4919      	ldr	r1, [pc, #100]	; (8014fd8 <pbuf_copy+0x1a0>)
 8014f72:	4815      	ldr	r0, [pc, #84]	; (8014fc8 <pbuf_copy+0x190>)
 8014f74:	f008 fb4e 	bl	801d614 <iprintf>
 8014f78:	f06f 0305 	mvn.w	r3, #5
 8014f7c:	e01b      	b.n	8014fb6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d013      	beq.n	8014fac <pbuf_copy+0x174>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	895a      	ldrh	r2, [r3, #10]
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	891b      	ldrh	r3, [r3, #8]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d10d      	bne.n	8014fac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d009      	beq.n	8014fac <pbuf_copy+0x174>
 8014f98:	4b09      	ldr	r3, [pc, #36]	; (8014fc0 <pbuf_copy+0x188>)
 8014f9a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014f9e:	490e      	ldr	r1, [pc, #56]	; (8014fd8 <pbuf_copy+0x1a0>)
 8014fa0:	4809      	ldr	r0, [pc, #36]	; (8014fc8 <pbuf_copy+0x190>)
 8014fa2:	f008 fb37 	bl	801d614 <iprintf>
 8014fa6:	f06f 0305 	mvn.w	r3, #5
 8014faa:	e004      	b.n	8014fb6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f47f af61 	bne.w	8014e76 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014fb4:	2300      	movs	r3, #0
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3718      	adds	r7, #24
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	0801f084 	.word	0x0801f084
 8014fc4:	0801f32c 	.word	0x0801f32c
 8014fc8:	0801f0e4 	.word	0x0801f0e4
 8014fcc:	0801f35c 	.word	0x0801f35c
 8014fd0:	0801f374 	.word	0x0801f374
 8014fd4:	0801f390 	.word	0x0801f390
 8014fd8:	0801f3a0 	.word	0x0801f3a0

08014fdc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b088      	sub	sp, #32
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	4611      	mov	r1, r2
 8014fe8:	461a      	mov	r2, r3
 8014fea:	460b      	mov	r3, r1
 8014fec:	80fb      	strh	r3, [r7, #6]
 8014fee:	4613      	mov	r3, r2
 8014ff0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d108      	bne.n	8015012 <pbuf_copy_partial+0x36>
 8015000:	4b2b      	ldr	r3, [pc, #172]	; (80150b0 <pbuf_copy_partial+0xd4>)
 8015002:	f240 420a 	movw	r2, #1034	; 0x40a
 8015006:	492b      	ldr	r1, [pc, #172]	; (80150b4 <pbuf_copy_partial+0xd8>)
 8015008:	482b      	ldr	r0, [pc, #172]	; (80150b8 <pbuf_copy_partial+0xdc>)
 801500a:	f008 fb03 	bl	801d614 <iprintf>
 801500e:	2300      	movs	r3, #0
 8015010:	e04a      	b.n	80150a8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d108      	bne.n	801502a <pbuf_copy_partial+0x4e>
 8015018:	4b25      	ldr	r3, [pc, #148]	; (80150b0 <pbuf_copy_partial+0xd4>)
 801501a:	f240 420b 	movw	r2, #1035	; 0x40b
 801501e:	4927      	ldr	r1, [pc, #156]	; (80150bc <pbuf_copy_partial+0xe0>)
 8015020:	4825      	ldr	r0, [pc, #148]	; (80150b8 <pbuf_copy_partial+0xdc>)
 8015022:	f008 faf7 	bl	801d614 <iprintf>
 8015026:	2300      	movs	r3, #0
 8015028:	e03e      	b.n	80150a8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	61fb      	str	r3, [r7, #28]
 801502e:	e034      	b.n	801509a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015030:	88bb      	ldrh	r3, [r7, #4]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d00a      	beq.n	801504c <pbuf_copy_partial+0x70>
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	895b      	ldrh	r3, [r3, #10]
 801503a:	88ba      	ldrh	r2, [r7, #4]
 801503c:	429a      	cmp	r2, r3
 801503e:	d305      	bcc.n	801504c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015040:	69fb      	ldr	r3, [r7, #28]
 8015042:	895b      	ldrh	r3, [r3, #10]
 8015044:	88ba      	ldrh	r2, [r7, #4]
 8015046:	1ad3      	subs	r3, r2, r3
 8015048:	80bb      	strh	r3, [r7, #4]
 801504a:	e023      	b.n	8015094 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	895a      	ldrh	r2, [r3, #10]
 8015050:	88bb      	ldrh	r3, [r7, #4]
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015056:	8b3a      	ldrh	r2, [r7, #24]
 8015058:	88fb      	ldrh	r3, [r7, #6]
 801505a:	429a      	cmp	r2, r3
 801505c:	d901      	bls.n	8015062 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801505e:	88fb      	ldrh	r3, [r7, #6]
 8015060:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015062:	8b7b      	ldrh	r3, [r7, #26]
 8015064:	68ba      	ldr	r2, [r7, #8]
 8015066:	18d0      	adds	r0, r2, r3
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	685a      	ldr	r2, [r3, #4]
 801506c:	88bb      	ldrh	r3, [r7, #4]
 801506e:	4413      	add	r3, r2
 8015070:	8b3a      	ldrh	r2, [r7, #24]
 8015072:	4619      	mov	r1, r3
 8015074:	f008 f9f4 	bl	801d460 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015078:	8afa      	ldrh	r2, [r7, #22]
 801507a:	8b3b      	ldrh	r3, [r7, #24]
 801507c:	4413      	add	r3, r2
 801507e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015080:	8b7a      	ldrh	r2, [r7, #26]
 8015082:	8b3b      	ldrh	r3, [r7, #24]
 8015084:	4413      	add	r3, r2
 8015086:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015088:	88fa      	ldrh	r2, [r7, #6]
 801508a:	8b3b      	ldrh	r3, [r7, #24]
 801508c:	1ad3      	subs	r3, r2, r3
 801508e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015090:	2300      	movs	r3, #0
 8015092:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	61fb      	str	r3, [r7, #28]
 801509a:	88fb      	ldrh	r3, [r7, #6]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d002      	beq.n	80150a6 <pbuf_copy_partial+0xca>
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1c4      	bne.n	8015030 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80150a6:	8afb      	ldrh	r3, [r7, #22]
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3720      	adds	r7, #32
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	0801f084 	.word	0x0801f084
 80150b4:	0801f3cc 	.word	0x0801f3cc
 80150b8:	0801f0e4 	.word	0x0801f0e4
 80150bc:	0801f3ec 	.word	0x0801f3ec

080150c0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b084      	sub	sp, #16
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	4603      	mov	r3, r0
 80150c8:	603a      	str	r2, [r7, #0]
 80150ca:	71fb      	strb	r3, [r7, #7]
 80150cc:	460b      	mov	r3, r1
 80150ce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	8919      	ldrh	r1, [r3, #8]
 80150d4:	88ba      	ldrh	r2, [r7, #4]
 80150d6:	79fb      	ldrb	r3, [r7, #7]
 80150d8:	4618      	mov	r0, r3
 80150da:	f7ff faa1 	bl	8014620 <pbuf_alloc>
 80150de:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d101      	bne.n	80150ea <pbuf_clone+0x2a>
    return NULL;
 80150e6:	2300      	movs	r3, #0
 80150e8:	e011      	b.n	801510e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80150ea:	6839      	ldr	r1, [r7, #0]
 80150ec:	68f8      	ldr	r0, [r7, #12]
 80150ee:	f7ff fea3 	bl	8014e38 <pbuf_copy>
 80150f2:	4603      	mov	r3, r0
 80150f4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80150f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d006      	beq.n	801510c <pbuf_clone+0x4c>
 80150fe:	4b06      	ldr	r3, [pc, #24]	; (8015118 <pbuf_clone+0x58>)
 8015100:	f240 5224 	movw	r2, #1316	; 0x524
 8015104:	4905      	ldr	r1, [pc, #20]	; (801511c <pbuf_clone+0x5c>)
 8015106:	4806      	ldr	r0, [pc, #24]	; (8015120 <pbuf_clone+0x60>)
 8015108:	f008 fa84 	bl	801d614 <iprintf>
  return q;
 801510c:	68fb      	ldr	r3, [r7, #12]
}
 801510e:	4618      	mov	r0, r3
 8015110:	3710      	adds	r7, #16
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	0801f084 	.word	0x0801f084
 801511c:	0801f4f8 	.word	0x0801f4f8
 8015120:	0801f0e4 	.word	0x0801f0e4

08015124 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015128:	f008 fa8c 	bl	801d644 <rand>
 801512c:	4603      	mov	r3, r0
 801512e:	b29b      	uxth	r3, r3
 8015130:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015134:	b29b      	uxth	r3, r3
 8015136:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801513a:	b29a      	uxth	r2, r3
 801513c:	4b01      	ldr	r3, [pc, #4]	; (8015144 <tcp_init+0x20>)
 801513e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015140:	bf00      	nop
 8015142:	bd80      	pop	{r7, pc}
 8015144:	24000068 	.word	0x24000068

08015148 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	7d1b      	ldrb	r3, [r3, #20]
 8015154:	2b01      	cmp	r3, #1
 8015156:	d105      	bne.n	8015164 <tcp_free+0x1c>
 8015158:	4b06      	ldr	r3, [pc, #24]	; (8015174 <tcp_free+0x2c>)
 801515a:	22d4      	movs	r2, #212	; 0xd4
 801515c:	4906      	ldr	r1, [pc, #24]	; (8015178 <tcp_free+0x30>)
 801515e:	4807      	ldr	r0, [pc, #28]	; (801517c <tcp_free+0x34>)
 8015160:	f008 fa58 	bl	801d614 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015164:	6879      	ldr	r1, [r7, #4]
 8015166:	2001      	movs	r0, #1
 8015168:	f7fe fe9a 	bl	8013ea0 <memp_free>
}
 801516c:	bf00      	nop
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	0801f584 	.word	0x0801f584
 8015178:	0801f5b4 	.word	0x0801f5b4
 801517c:	0801f5c8 	.word	0x0801f5c8

08015180 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	7d1b      	ldrb	r3, [r3, #20]
 801518c:	2b01      	cmp	r3, #1
 801518e:	d105      	bne.n	801519c <tcp_free_listen+0x1c>
 8015190:	4b06      	ldr	r3, [pc, #24]	; (80151ac <tcp_free_listen+0x2c>)
 8015192:	22df      	movs	r2, #223	; 0xdf
 8015194:	4906      	ldr	r1, [pc, #24]	; (80151b0 <tcp_free_listen+0x30>)
 8015196:	4807      	ldr	r0, [pc, #28]	; (80151b4 <tcp_free_listen+0x34>)
 8015198:	f008 fa3c 	bl	801d614 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801519c:	6879      	ldr	r1, [r7, #4]
 801519e:	2002      	movs	r0, #2
 80151a0:	f7fe fe7e 	bl	8013ea0 <memp_free>
}
 80151a4:	bf00      	nop
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	0801f584 	.word	0x0801f584
 80151b0:	0801f5f0 	.word	0x0801f5f0
 80151b4:	0801f5c8 	.word	0x0801f5c8

080151b8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80151bc:	f000 fea4 	bl	8015f08 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80151c0:	4b07      	ldr	r3, [pc, #28]	; (80151e0 <tcp_tmr+0x28>)
 80151c2:	781b      	ldrb	r3, [r3, #0]
 80151c4:	3301      	adds	r3, #1
 80151c6:	b2da      	uxtb	r2, r3
 80151c8:	4b05      	ldr	r3, [pc, #20]	; (80151e0 <tcp_tmr+0x28>)
 80151ca:	701a      	strb	r2, [r3, #0]
 80151cc:	4b04      	ldr	r3, [pc, #16]	; (80151e0 <tcp_tmr+0x28>)
 80151ce:	781b      	ldrb	r3, [r3, #0]
 80151d0:	f003 0301 	and.w	r3, r3, #1
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d001      	beq.n	80151dc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80151d8:	f000 fb56 	bl	8015888 <tcp_slowtmr>
  }
}
 80151dc:	bf00      	nop
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	2401ae99 	.word	0x2401ae99

080151e4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d105      	bne.n	8015200 <tcp_remove_listener+0x1c>
 80151f4:	4b0d      	ldr	r3, [pc, #52]	; (801522c <tcp_remove_listener+0x48>)
 80151f6:	22ff      	movs	r2, #255	; 0xff
 80151f8:	490d      	ldr	r1, [pc, #52]	; (8015230 <tcp_remove_listener+0x4c>)
 80151fa:	480e      	ldr	r0, [pc, #56]	; (8015234 <tcp_remove_listener+0x50>)
 80151fc:	f008 fa0a 	bl	801d614 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	60fb      	str	r3, [r7, #12]
 8015204:	e00a      	b.n	801521c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801520a:	683a      	ldr	r2, [r7, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	d102      	bne.n	8015216 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2200      	movs	r2, #0
 8015214:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	68db      	ldr	r3, [r3, #12]
 801521a:	60fb      	str	r3, [r7, #12]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1f1      	bne.n	8015206 <tcp_remove_listener+0x22>
    }
  }
}
 8015222:	bf00      	nop
 8015224:	bf00      	nop
 8015226:	3710      	adds	r7, #16
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}
 801522c:	0801f584 	.word	0x0801f584
 8015230:	0801f60c 	.word	0x0801f60c
 8015234:	0801f5c8 	.word	0x0801f5c8

08015238 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d106      	bne.n	8015254 <tcp_listen_closed+0x1c>
 8015246:	4b14      	ldr	r3, [pc, #80]	; (8015298 <tcp_listen_closed+0x60>)
 8015248:	f240 1211 	movw	r2, #273	; 0x111
 801524c:	4913      	ldr	r1, [pc, #76]	; (801529c <tcp_listen_closed+0x64>)
 801524e:	4814      	ldr	r0, [pc, #80]	; (80152a0 <tcp_listen_closed+0x68>)
 8015250:	f008 f9e0 	bl	801d614 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	7d1b      	ldrb	r3, [r3, #20]
 8015258:	2b01      	cmp	r3, #1
 801525a:	d006      	beq.n	801526a <tcp_listen_closed+0x32>
 801525c:	4b0e      	ldr	r3, [pc, #56]	; (8015298 <tcp_listen_closed+0x60>)
 801525e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015262:	4910      	ldr	r1, [pc, #64]	; (80152a4 <tcp_listen_closed+0x6c>)
 8015264:	480e      	ldr	r0, [pc, #56]	; (80152a0 <tcp_listen_closed+0x68>)
 8015266:	f008 f9d5 	bl	801d614 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801526a:	2301      	movs	r3, #1
 801526c:	60fb      	str	r3, [r7, #12]
 801526e:	e00b      	b.n	8015288 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015270:	4a0d      	ldr	r2, [pc, #52]	; (80152a8 <tcp_listen_closed+0x70>)
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	6879      	ldr	r1, [r7, #4]
 801527c:	4618      	mov	r0, r3
 801527e:	f7ff ffb1 	bl	80151e4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	3301      	adds	r3, #1
 8015286:	60fb      	str	r3, [r7, #12]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2b03      	cmp	r3, #3
 801528c:	d9f0      	bls.n	8015270 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801528e:	bf00      	nop
 8015290:	bf00      	nop
 8015292:	3710      	adds	r7, #16
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}
 8015298:	0801f584 	.word	0x0801f584
 801529c:	0801f634 	.word	0x0801f634
 80152a0:	0801f5c8 	.word	0x0801f5c8
 80152a4:	0801f640 	.word	0x0801f640
 80152a8:	080215f8 	.word	0x080215f8

080152ac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80152ac:	b5b0      	push	{r4, r5, r7, lr}
 80152ae:	b088      	sub	sp, #32
 80152b0:	af04      	add	r7, sp, #16
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	460b      	mov	r3, r1
 80152b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d106      	bne.n	80152cc <tcp_close_shutdown+0x20>
 80152be:	4b63      	ldr	r3, [pc, #396]	; (801544c <tcp_close_shutdown+0x1a0>)
 80152c0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80152c4:	4962      	ldr	r1, [pc, #392]	; (8015450 <tcp_close_shutdown+0x1a4>)
 80152c6:	4863      	ldr	r0, [pc, #396]	; (8015454 <tcp_close_shutdown+0x1a8>)
 80152c8:	f008 f9a4 	bl	801d614 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80152cc:	78fb      	ldrb	r3, [r7, #3]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d067      	beq.n	80153a2 <tcp_close_shutdown+0xf6>
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	7d1b      	ldrb	r3, [r3, #20]
 80152d6:	2b04      	cmp	r3, #4
 80152d8:	d003      	beq.n	80152e2 <tcp_close_shutdown+0x36>
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	7d1b      	ldrb	r3, [r3, #20]
 80152de:	2b07      	cmp	r3, #7
 80152e0:	d15f      	bne.n	80153a2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d105      	bne.n	80152f6 <tcp_close_shutdown+0x4a>
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80152ee:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80152f2:	4293      	cmp	r3, r2
 80152f4:	d055      	beq.n	80153a2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	8b5b      	ldrh	r3, [r3, #26]
 80152fa:	f003 0310 	and.w	r3, r3, #16
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d106      	bne.n	8015310 <tcp_close_shutdown+0x64>
 8015302:	4b52      	ldr	r3, [pc, #328]	; (801544c <tcp_close_shutdown+0x1a0>)
 8015304:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015308:	4953      	ldr	r1, [pc, #332]	; (8015458 <tcp_close_shutdown+0x1ac>)
 801530a:	4852      	ldr	r0, [pc, #328]	; (8015454 <tcp_close_shutdown+0x1a8>)
 801530c:	f008 f982 	bl	801d614 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015318:	687d      	ldr	r5, [r7, #4]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	3304      	adds	r3, #4
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	8ad2      	ldrh	r2, [r2, #22]
 8015322:	6879      	ldr	r1, [r7, #4]
 8015324:	8b09      	ldrh	r1, [r1, #24]
 8015326:	9102      	str	r1, [sp, #8]
 8015328:	9201      	str	r2, [sp, #4]
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	462b      	mov	r3, r5
 801532e:	4622      	mov	r2, r4
 8015330:	4601      	mov	r1, r0
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f004 fe92 	bl	801a05c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015338:	6878      	ldr	r0, [r7, #4]
 801533a:	f001 f8c9 	bl	80164d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801533e:	4b47      	ldr	r3, [pc, #284]	; (801545c <tcp_close_shutdown+0x1b0>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	429a      	cmp	r2, r3
 8015346:	d105      	bne.n	8015354 <tcp_close_shutdown+0xa8>
 8015348:	4b44      	ldr	r3, [pc, #272]	; (801545c <tcp_close_shutdown+0x1b0>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	68db      	ldr	r3, [r3, #12]
 801534e:	4a43      	ldr	r2, [pc, #268]	; (801545c <tcp_close_shutdown+0x1b0>)
 8015350:	6013      	str	r3, [r2, #0]
 8015352:	e013      	b.n	801537c <tcp_close_shutdown+0xd0>
 8015354:	4b41      	ldr	r3, [pc, #260]	; (801545c <tcp_close_shutdown+0x1b0>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	60fb      	str	r3, [r7, #12]
 801535a:	e00c      	b.n	8015376 <tcp_close_shutdown+0xca>
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	68db      	ldr	r3, [r3, #12]
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	429a      	cmp	r2, r3
 8015364:	d104      	bne.n	8015370 <tcp_close_shutdown+0xc4>
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	68da      	ldr	r2, [r3, #12]
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	60da      	str	r2, [r3, #12]
 801536e:	e005      	b.n	801537c <tcp_close_shutdown+0xd0>
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	68db      	ldr	r3, [r3, #12]
 8015374:	60fb      	str	r3, [r7, #12]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d1ef      	bne.n	801535c <tcp_close_shutdown+0xb0>
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2200      	movs	r2, #0
 8015380:	60da      	str	r2, [r3, #12]
 8015382:	4b37      	ldr	r3, [pc, #220]	; (8015460 <tcp_close_shutdown+0x1b4>)
 8015384:	2201      	movs	r2, #1
 8015386:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015388:	4b36      	ldr	r3, [pc, #216]	; (8015464 <tcp_close_shutdown+0x1b8>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	429a      	cmp	r2, r3
 8015390:	d102      	bne.n	8015398 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015392:	f003 fd5f 	bl	8018e54 <tcp_trigger_input_pcb_close>
 8015396:	e002      	b.n	801539e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8015398:	6878      	ldr	r0, [r7, #4]
 801539a:	f7ff fed5 	bl	8015148 <tcp_free>
      }
      return ERR_OK;
 801539e:	2300      	movs	r3, #0
 80153a0:	e050      	b.n	8015444 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	7d1b      	ldrb	r3, [r3, #20]
 80153a6:	2b02      	cmp	r3, #2
 80153a8:	d03b      	beq.n	8015422 <tcp_close_shutdown+0x176>
 80153aa:	2b02      	cmp	r3, #2
 80153ac:	dc44      	bgt.n	8015438 <tcp_close_shutdown+0x18c>
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d002      	beq.n	80153b8 <tcp_close_shutdown+0x10c>
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d02a      	beq.n	801540c <tcp_close_shutdown+0x160>
 80153b6:	e03f      	b.n	8015438 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	8adb      	ldrh	r3, [r3, #22]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d021      	beq.n	8015404 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80153c0:	4b29      	ldr	r3, [pc, #164]	; (8015468 <tcp_close_shutdown+0x1bc>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d105      	bne.n	80153d6 <tcp_close_shutdown+0x12a>
 80153ca:	4b27      	ldr	r3, [pc, #156]	; (8015468 <tcp_close_shutdown+0x1bc>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	4a25      	ldr	r2, [pc, #148]	; (8015468 <tcp_close_shutdown+0x1bc>)
 80153d2:	6013      	str	r3, [r2, #0]
 80153d4:	e013      	b.n	80153fe <tcp_close_shutdown+0x152>
 80153d6:	4b24      	ldr	r3, [pc, #144]	; (8015468 <tcp_close_shutdown+0x1bc>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	60bb      	str	r3, [r7, #8]
 80153dc:	e00c      	b.n	80153f8 <tcp_close_shutdown+0x14c>
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	68db      	ldr	r3, [r3, #12]
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d104      	bne.n	80153f2 <tcp_close_shutdown+0x146>
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	68da      	ldr	r2, [r3, #12]
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	60da      	str	r2, [r3, #12]
 80153f0:	e005      	b.n	80153fe <tcp_close_shutdown+0x152>
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	68db      	ldr	r3, [r3, #12]
 80153f6:	60bb      	str	r3, [r7, #8]
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1ef      	bne.n	80153de <tcp_close_shutdown+0x132>
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	2200      	movs	r2, #0
 8015402:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7ff fe9f 	bl	8015148 <tcp_free>
      break;
 801540a:	e01a      	b.n	8015442 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f7ff ff13 	bl	8015238 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015412:	6879      	ldr	r1, [r7, #4]
 8015414:	4815      	ldr	r0, [pc, #84]	; (801546c <tcp_close_shutdown+0x1c0>)
 8015416:	f001 f8ab 	bl	8016570 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f7ff feb0 	bl	8015180 <tcp_free_listen>
      break;
 8015420:	e00f      	b.n	8015442 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015422:	6879      	ldr	r1, [r7, #4]
 8015424:	480d      	ldr	r0, [pc, #52]	; (801545c <tcp_close_shutdown+0x1b0>)
 8015426:	f001 f8a3 	bl	8016570 <tcp_pcb_remove>
 801542a:	4b0d      	ldr	r3, [pc, #52]	; (8015460 <tcp_close_shutdown+0x1b4>)
 801542c:	2201      	movs	r2, #1
 801542e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f7ff fe89 	bl	8015148 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015436:	e004      	b.n	8015442 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f000 f819 	bl	8015470 <tcp_close_shutdown_fin>
 801543e:	4603      	mov	r3, r0
 8015440:	e000      	b.n	8015444 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8015442:	2300      	movs	r3, #0
}
 8015444:	4618      	mov	r0, r3
 8015446:	3710      	adds	r7, #16
 8015448:	46bd      	mov	sp, r7
 801544a:	bdb0      	pop	{r4, r5, r7, pc}
 801544c:	0801f584 	.word	0x0801f584
 8015450:	0801f658 	.word	0x0801f658
 8015454:	0801f5c8 	.word	0x0801f5c8
 8015458:	0801f678 	.word	0x0801f678
 801545c:	24022230 	.word	0x24022230
 8015460:	2402222c 	.word	0x2402222c
 8015464:	24022244 	.word	0x24022244
 8015468:	2402223c 	.word	0x2402223c
 801546c:	24022238 	.word	0x24022238

08015470 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d106      	bne.n	801548c <tcp_close_shutdown_fin+0x1c>
 801547e:	4b2e      	ldr	r3, [pc, #184]	; (8015538 <tcp_close_shutdown_fin+0xc8>)
 8015480:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8015484:	492d      	ldr	r1, [pc, #180]	; (801553c <tcp_close_shutdown_fin+0xcc>)
 8015486:	482e      	ldr	r0, [pc, #184]	; (8015540 <tcp_close_shutdown_fin+0xd0>)
 8015488:	f008 f8c4 	bl	801d614 <iprintf>

  switch (pcb->state) {
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	7d1b      	ldrb	r3, [r3, #20]
 8015490:	2b07      	cmp	r3, #7
 8015492:	d020      	beq.n	80154d6 <tcp_close_shutdown_fin+0x66>
 8015494:	2b07      	cmp	r3, #7
 8015496:	dc2b      	bgt.n	80154f0 <tcp_close_shutdown_fin+0x80>
 8015498:	2b03      	cmp	r3, #3
 801549a:	d002      	beq.n	80154a2 <tcp_close_shutdown_fin+0x32>
 801549c:	2b04      	cmp	r3, #4
 801549e:	d00d      	beq.n	80154bc <tcp_close_shutdown_fin+0x4c>
 80154a0:	e026      	b.n	80154f0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f003 fee8 	bl	8019278 <tcp_send_fin>
 80154a8:	4603      	mov	r3, r0
 80154aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80154ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d11f      	bne.n	80154f4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2205      	movs	r2, #5
 80154b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154ba:	e01b      	b.n	80154f4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f003 fedb 	bl	8019278 <tcp_send_fin>
 80154c2:	4603      	mov	r3, r0
 80154c4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80154c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d114      	bne.n	80154f8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2205      	movs	r2, #5
 80154d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154d4:	e010      	b.n	80154f8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f003 fece 	bl	8019278 <tcp_send_fin>
 80154dc:	4603      	mov	r3, r0
 80154de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80154e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d109      	bne.n	80154fc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2209      	movs	r2, #9
 80154ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154ee:	e005      	b.n	80154fc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80154f0:	2300      	movs	r3, #0
 80154f2:	e01c      	b.n	801552e <tcp_close_shutdown_fin+0xbe>
      break;
 80154f4:	bf00      	nop
 80154f6:	e002      	b.n	80154fe <tcp_close_shutdown_fin+0x8e>
      break;
 80154f8:	bf00      	nop
 80154fa:	e000      	b.n	80154fe <tcp_close_shutdown_fin+0x8e>
      break;
 80154fc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80154fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d103      	bne.n	801550e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f003 fff4 	bl	80194f4 <tcp_output>
 801550c:	e00d      	b.n	801552a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801550e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015516:	d108      	bne.n	801552a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	8b5b      	ldrh	r3, [r3, #26]
 801551c:	f043 0308 	orr.w	r3, r3, #8
 8015520:	b29a      	uxth	r2, r3
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015526:	2300      	movs	r3, #0
 8015528:	e001      	b.n	801552e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801552a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801552e:	4618      	mov	r0, r3
 8015530:	3710      	adds	r7, #16
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop
 8015538:	0801f584 	.word	0x0801f584
 801553c:	0801f634 	.word	0x0801f634
 8015540:	0801f5c8 	.word	0x0801f5c8

08015544 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b082      	sub	sp, #8
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d109      	bne.n	8015566 <tcp_close+0x22>
 8015552:	4b0f      	ldr	r3, [pc, #60]	; (8015590 <tcp_close+0x4c>)
 8015554:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8015558:	490e      	ldr	r1, [pc, #56]	; (8015594 <tcp_close+0x50>)
 801555a:	480f      	ldr	r0, [pc, #60]	; (8015598 <tcp_close+0x54>)
 801555c:	f008 f85a 	bl	801d614 <iprintf>
 8015560:	f06f 030f 	mvn.w	r3, #15
 8015564:	e00f      	b.n	8015586 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	7d1b      	ldrb	r3, [r3, #20]
 801556a:	2b01      	cmp	r3, #1
 801556c:	d006      	beq.n	801557c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	8b5b      	ldrh	r3, [r3, #26]
 8015572:	f043 0310 	orr.w	r3, r3, #16
 8015576:	b29a      	uxth	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801557c:	2101      	movs	r1, #1
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f7ff fe94 	bl	80152ac <tcp_close_shutdown>
 8015584:	4603      	mov	r3, r0
}
 8015586:	4618      	mov	r0, r3
 8015588:	3708      	adds	r7, #8
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}
 801558e:	bf00      	nop
 8015590:	0801f584 	.word	0x0801f584
 8015594:	0801f694 	.word	0x0801f694
 8015598:	0801f5c8 	.word	0x0801f5c8

0801559c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b08e      	sub	sp, #56	; 0x38
 80155a0:	af04      	add	r7, sp, #16
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d107      	bne.n	80155bc <tcp_abandon+0x20>
 80155ac:	4b52      	ldr	r3, [pc, #328]	; (80156f8 <tcp_abandon+0x15c>)
 80155ae:	f240 223d 	movw	r2, #573	; 0x23d
 80155b2:	4952      	ldr	r1, [pc, #328]	; (80156fc <tcp_abandon+0x160>)
 80155b4:	4852      	ldr	r0, [pc, #328]	; (8015700 <tcp_abandon+0x164>)
 80155b6:	f008 f82d 	bl	801d614 <iprintf>
 80155ba:	e099      	b.n	80156f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	7d1b      	ldrb	r3, [r3, #20]
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d106      	bne.n	80155d2 <tcp_abandon+0x36>
 80155c4:	4b4c      	ldr	r3, [pc, #304]	; (80156f8 <tcp_abandon+0x15c>)
 80155c6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80155ca:	494e      	ldr	r1, [pc, #312]	; (8015704 <tcp_abandon+0x168>)
 80155cc:	484c      	ldr	r0, [pc, #304]	; (8015700 <tcp_abandon+0x164>)
 80155ce:	f008 f821 	bl	801d614 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	7d1b      	ldrb	r3, [r3, #20]
 80155d6:	2b0a      	cmp	r3, #10
 80155d8:	d107      	bne.n	80155ea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80155da:	6879      	ldr	r1, [r7, #4]
 80155dc:	484a      	ldr	r0, [pc, #296]	; (8015708 <tcp_abandon+0x16c>)
 80155de:	f000 ffc7 	bl	8016570 <tcp_pcb_remove>
    tcp_free(pcb);
 80155e2:	6878      	ldr	r0, [r7, #4]
 80155e4:	f7ff fdb0 	bl	8015148 <tcp_free>
 80155e8:	e082      	b.n	80156f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80155ea:	2300      	movs	r3, #0
 80155ec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80155ee:	2300      	movs	r3, #0
 80155f0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155f6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155fc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015604:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	691b      	ldr	r3, [r3, #16]
 801560a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	7d1b      	ldrb	r3, [r3, #20]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d126      	bne.n	8015662 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	8adb      	ldrh	r3, [r3, #22]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d02e      	beq.n	801567a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801561c:	4b3b      	ldr	r3, [pc, #236]	; (801570c <tcp_abandon+0x170>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	687a      	ldr	r2, [r7, #4]
 8015622:	429a      	cmp	r2, r3
 8015624:	d105      	bne.n	8015632 <tcp_abandon+0x96>
 8015626:	4b39      	ldr	r3, [pc, #228]	; (801570c <tcp_abandon+0x170>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	68db      	ldr	r3, [r3, #12]
 801562c:	4a37      	ldr	r2, [pc, #220]	; (801570c <tcp_abandon+0x170>)
 801562e:	6013      	str	r3, [r2, #0]
 8015630:	e013      	b.n	801565a <tcp_abandon+0xbe>
 8015632:	4b36      	ldr	r3, [pc, #216]	; (801570c <tcp_abandon+0x170>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	61fb      	str	r3, [r7, #28]
 8015638:	e00c      	b.n	8015654 <tcp_abandon+0xb8>
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	429a      	cmp	r2, r3
 8015642:	d104      	bne.n	801564e <tcp_abandon+0xb2>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	68da      	ldr	r2, [r3, #12]
 8015648:	69fb      	ldr	r3, [r7, #28]
 801564a:	60da      	str	r2, [r3, #12]
 801564c:	e005      	b.n	801565a <tcp_abandon+0xbe>
 801564e:	69fb      	ldr	r3, [r7, #28]
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	61fb      	str	r3, [r7, #28]
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d1ef      	bne.n	801563a <tcp_abandon+0x9e>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2200      	movs	r2, #0
 801565e:	60da      	str	r2, [r3, #12]
 8015660:	e00b      	b.n	801567a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	8adb      	ldrh	r3, [r3, #22]
 801566a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801566c:	6879      	ldr	r1, [r7, #4]
 801566e:	4828      	ldr	r0, [pc, #160]	; (8015710 <tcp_abandon+0x174>)
 8015670:	f000 ff7e 	bl	8016570 <tcp_pcb_remove>
 8015674:	4b27      	ldr	r3, [pc, #156]	; (8015714 <tcp_abandon+0x178>)
 8015676:	2201      	movs	r2, #1
 8015678:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801567e:	2b00      	cmp	r3, #0
 8015680:	d004      	beq.n	801568c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015686:	4618      	mov	r0, r3
 8015688:	f000 fd20 	bl	80160cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015690:	2b00      	cmp	r3, #0
 8015692:	d004      	beq.n	801569e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015698:	4618      	mov	r0, r3
 801569a:	f000 fd17 	bl	80160cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d004      	beq.n	80156b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156aa:	4618      	mov	r0, r3
 80156ac:	f000 fd0e 	bl	80160cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80156b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d00e      	beq.n	80156d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80156b6:	6879      	ldr	r1, [r7, #4]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	3304      	adds	r3, #4
 80156bc:	687a      	ldr	r2, [r7, #4]
 80156be:	8b12      	ldrh	r2, [r2, #24]
 80156c0:	9202      	str	r2, [sp, #8]
 80156c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80156c4:	9201      	str	r2, [sp, #4]
 80156c6:	9300      	str	r3, [sp, #0]
 80156c8:	460b      	mov	r3, r1
 80156ca:	697a      	ldr	r2, [r7, #20]
 80156cc:	69b9      	ldr	r1, [r7, #24]
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f004 fcc4 	bl	801a05c <tcp_rst>
    }
    last_state = pcb->state;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	7d1b      	ldrb	r3, [r3, #20]
 80156d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7ff fd34 	bl	8015148 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d004      	beq.n	80156f0 <tcp_abandon+0x154>
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	f06f 010c 	mvn.w	r1, #12
 80156ec:	68f8      	ldr	r0, [r7, #12]
 80156ee:	4798      	blx	r3
  }
}
 80156f0:	3728      	adds	r7, #40	; 0x28
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
 80156f6:	bf00      	nop
 80156f8:	0801f584 	.word	0x0801f584
 80156fc:	0801f6c8 	.word	0x0801f6c8
 8015700:	0801f5c8 	.word	0x0801f5c8
 8015704:	0801f6e4 	.word	0x0801f6e4
 8015708:	24022240 	.word	0x24022240
 801570c:	2402223c 	.word	0x2402223c
 8015710:	24022230 	.word	0x24022230
 8015714:	2402222c 	.word	0x2402222c

08015718 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015720:	2101      	movs	r1, #1
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f7ff ff3a 	bl	801559c <tcp_abandon>
}
 8015728:	bf00      	nop
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b084      	sub	sp, #16
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d106      	bne.n	801574c <tcp_update_rcv_ann_wnd+0x1c>
 801573e:	4b25      	ldr	r3, [pc, #148]	; (80157d4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015740:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015744:	4924      	ldr	r1, [pc, #144]	; (80157d8 <tcp_update_rcv_ann_wnd+0xa8>)
 8015746:	4825      	ldr	r0, [pc, #148]	; (80157dc <tcp_update_rcv_ann_wnd+0xac>)
 8015748:	f007 ff64 	bl	801d614 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015754:	4413      	add	r3, r2
 8015756:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015760:	f640 3168 	movw	r1, #2920	; 0xb68
 8015764:	428a      	cmp	r2, r1
 8015766:	bf28      	it	cs
 8015768:	460a      	movcs	r2, r1
 801576a:	b292      	uxth	r2, r2
 801576c:	4413      	add	r3, r2
 801576e:	68fa      	ldr	r2, [r7, #12]
 8015770:	1ad3      	subs	r3, r2, r3
 8015772:	2b00      	cmp	r3, #0
 8015774:	db08      	blt.n	8015788 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	1ad3      	subs	r3, r2, r3
 8015786:	e020      	b.n	80157ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015790:	1ad3      	subs	r3, r2, r3
 8015792:	2b00      	cmp	r3, #0
 8015794:	dd03      	ble.n	801579e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2200      	movs	r2, #0
 801579a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801579c:	e014      	b.n	80157c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157a6:	1ad3      	subs	r3, r2, r3
 80157a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157b0:	d306      	bcc.n	80157c0 <tcp_update_rcv_ann_wnd+0x90>
 80157b2:	4b08      	ldr	r3, [pc, #32]	; (80157d4 <tcp_update_rcv_ann_wnd+0xa4>)
 80157b4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80157b8:	4909      	ldr	r1, [pc, #36]	; (80157e0 <tcp_update_rcv_ann_wnd+0xb0>)
 80157ba:	4808      	ldr	r0, [pc, #32]	; (80157dc <tcp_update_rcv_ann_wnd+0xac>)
 80157bc:	f007 ff2a 	bl	801d614 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	b29a      	uxth	r2, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80157c8:	2300      	movs	r3, #0
  }
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3710      	adds	r7, #16
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	0801f584 	.word	0x0801f584
 80157d8:	0801f7e0 	.word	0x0801f7e0
 80157dc:	0801f5c8 	.word	0x0801f5c8
 80157e0:	0801f804 	.word	0x0801f804

080157e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b084      	sub	sp, #16
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	460b      	mov	r3, r1
 80157ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d107      	bne.n	8015806 <tcp_recved+0x22>
 80157f6:	4b20      	ldr	r3, [pc, #128]	; (8015878 <tcp_recved+0x94>)
 80157f8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80157fc:	491f      	ldr	r1, [pc, #124]	; (801587c <tcp_recved+0x98>)
 80157fe:	4820      	ldr	r0, [pc, #128]	; (8015880 <tcp_recved+0x9c>)
 8015800:	f007 ff08 	bl	801d614 <iprintf>
 8015804:	e034      	b.n	8015870 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	7d1b      	ldrb	r3, [r3, #20]
 801580a:	2b01      	cmp	r3, #1
 801580c:	d106      	bne.n	801581c <tcp_recved+0x38>
 801580e:	4b1a      	ldr	r3, [pc, #104]	; (8015878 <tcp_recved+0x94>)
 8015810:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015814:	491b      	ldr	r1, [pc, #108]	; (8015884 <tcp_recved+0xa0>)
 8015816:	481a      	ldr	r0, [pc, #104]	; (8015880 <tcp_recved+0x9c>)
 8015818:	f007 fefc 	bl	801d614 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015820:	887b      	ldrh	r3, [r7, #2]
 8015822:	4413      	add	r3, r2
 8015824:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015826:	89fb      	ldrh	r3, [r7, #14]
 8015828:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801582c:	4293      	cmp	r3, r2
 801582e:	d804      	bhi.n	801583a <tcp_recved+0x56>
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015834:	89fa      	ldrh	r2, [r7, #14]
 8015836:	429a      	cmp	r2, r3
 8015838:	d204      	bcs.n	8015844 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8015840:	851a      	strh	r2, [r3, #40]	; 0x28
 8015842:	e002      	b.n	801584a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	89fa      	ldrh	r2, [r7, #14]
 8015848:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f7ff ff70 	bl	8015730 <tcp_update_rcv_ann_wnd>
 8015850:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015858:	4293      	cmp	r3, r2
 801585a:	d909      	bls.n	8015870 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	8b5b      	ldrh	r3, [r3, #26]
 8015860:	f043 0302 	orr.w	r3, r3, #2
 8015864:	b29a      	uxth	r2, r3
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f003 fe42 	bl	80194f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015870:	3710      	adds	r7, #16
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
 8015876:	bf00      	nop
 8015878:	0801f584 	.word	0x0801f584
 801587c:	0801f820 	.word	0x0801f820
 8015880:	0801f5c8 	.word	0x0801f5c8
 8015884:	0801f838 	.word	0x0801f838

08015888 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015888:	b5b0      	push	{r4, r5, r7, lr}
 801588a:	b090      	sub	sp, #64	; 0x40
 801588c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801588e:	2300      	movs	r3, #0
 8015890:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015894:	4b94      	ldr	r3, [pc, #592]	; (8015ae8 <tcp_slowtmr+0x260>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	3301      	adds	r3, #1
 801589a:	4a93      	ldr	r2, [pc, #588]	; (8015ae8 <tcp_slowtmr+0x260>)
 801589c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801589e:	4b93      	ldr	r3, [pc, #588]	; (8015aec <tcp_slowtmr+0x264>)
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	3301      	adds	r3, #1
 80158a4:	b2da      	uxtb	r2, r3
 80158a6:	4b91      	ldr	r3, [pc, #580]	; (8015aec <tcp_slowtmr+0x264>)
 80158a8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80158aa:	2300      	movs	r3, #0
 80158ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80158ae:	4b90      	ldr	r3, [pc, #576]	; (8015af0 <tcp_slowtmr+0x268>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80158b4:	e29d      	b.n	8015df2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80158b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b8:	7d1b      	ldrb	r3, [r3, #20]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d106      	bne.n	80158cc <tcp_slowtmr+0x44>
 80158be:	4b8d      	ldr	r3, [pc, #564]	; (8015af4 <tcp_slowtmr+0x26c>)
 80158c0:	f240 42be 	movw	r2, #1214	; 0x4be
 80158c4:	498c      	ldr	r1, [pc, #560]	; (8015af8 <tcp_slowtmr+0x270>)
 80158c6:	488d      	ldr	r0, [pc, #564]	; (8015afc <tcp_slowtmr+0x274>)
 80158c8:	f007 fea4 	bl	801d614 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80158cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ce:	7d1b      	ldrb	r3, [r3, #20]
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d106      	bne.n	80158e2 <tcp_slowtmr+0x5a>
 80158d4:	4b87      	ldr	r3, [pc, #540]	; (8015af4 <tcp_slowtmr+0x26c>)
 80158d6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80158da:	4989      	ldr	r1, [pc, #548]	; (8015b00 <tcp_slowtmr+0x278>)
 80158dc:	4887      	ldr	r0, [pc, #540]	; (8015afc <tcp_slowtmr+0x274>)
 80158de:	f007 fe99 	bl	801d614 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80158e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e4:	7d1b      	ldrb	r3, [r3, #20]
 80158e6:	2b0a      	cmp	r3, #10
 80158e8:	d106      	bne.n	80158f8 <tcp_slowtmr+0x70>
 80158ea:	4b82      	ldr	r3, [pc, #520]	; (8015af4 <tcp_slowtmr+0x26c>)
 80158ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80158f0:	4984      	ldr	r1, [pc, #528]	; (8015b04 <tcp_slowtmr+0x27c>)
 80158f2:	4882      	ldr	r0, [pc, #520]	; (8015afc <tcp_slowtmr+0x274>)
 80158f4:	f007 fe8e 	bl	801d614 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80158f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fa:	7f9a      	ldrb	r2, [r3, #30]
 80158fc:	4b7b      	ldr	r3, [pc, #492]	; (8015aec <tcp_slowtmr+0x264>)
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	429a      	cmp	r2, r3
 8015902:	d105      	bne.n	8015910 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015906:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590a:	68db      	ldr	r3, [r3, #12]
 801590c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801590e:	e270      	b.n	8015df2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015910:	4b76      	ldr	r3, [pc, #472]	; (8015aec <tcp_slowtmr+0x264>)
 8015912:	781a      	ldrb	r2, [r3, #0]
 8015914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015916:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015918:	2300      	movs	r3, #0
 801591a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801591e:	2300      	movs	r3, #0
 8015920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015926:	7d1b      	ldrb	r3, [r3, #20]
 8015928:	2b02      	cmp	r3, #2
 801592a:	d10a      	bne.n	8015942 <tcp_slowtmr+0xba>
 801592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015932:	2b05      	cmp	r3, #5
 8015934:	d905      	bls.n	8015942 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8015936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801593a:	3301      	adds	r3, #1
 801593c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015940:	e11e      	b.n	8015b80 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015948:	2b0b      	cmp	r3, #11
 801594a:	d905      	bls.n	8015958 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801594c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015950:	3301      	adds	r3, #1
 8015952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015956:	e113      	b.n	8015b80 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8015958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801595e:	2b00      	cmp	r3, #0
 8015960:	d075      	beq.n	8015a4e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015966:	2b00      	cmp	r3, #0
 8015968:	d006      	beq.n	8015978 <tcp_slowtmr+0xf0>
 801596a:	4b62      	ldr	r3, [pc, #392]	; (8015af4 <tcp_slowtmr+0x26c>)
 801596c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015970:	4965      	ldr	r1, [pc, #404]	; (8015b08 <tcp_slowtmr+0x280>)
 8015972:	4862      	ldr	r0, [pc, #392]	; (8015afc <tcp_slowtmr+0x274>)
 8015974:	f007 fe4e 	bl	801d614 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801597a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801597c:	2b00      	cmp	r3, #0
 801597e:	d106      	bne.n	801598e <tcp_slowtmr+0x106>
 8015980:	4b5c      	ldr	r3, [pc, #368]	; (8015af4 <tcp_slowtmr+0x26c>)
 8015982:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015986:	4961      	ldr	r1, [pc, #388]	; (8015b0c <tcp_slowtmr+0x284>)
 8015988:	485c      	ldr	r0, [pc, #368]	; (8015afc <tcp_slowtmr+0x274>)
 801598a:	f007 fe43 	bl	801d614 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015990:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015994:	2b0b      	cmp	r3, #11
 8015996:	d905      	bls.n	80159a4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8015998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801599c:	3301      	adds	r3, #1
 801599e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159a2:	e0ed      	b.n	8015b80 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80159a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80159aa:	3b01      	subs	r3, #1
 80159ac:	4a58      	ldr	r2, [pc, #352]	; (8015b10 <tcp_slowtmr+0x288>)
 80159ae:	5cd3      	ldrb	r3, [r2, r3]
 80159b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80159b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80159b8:	7c7a      	ldrb	r2, [r7, #17]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d907      	bls.n	80159ce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80159be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80159c4:	3301      	adds	r3, #1
 80159c6:	b2da      	uxtb	r2, r3
 80159c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80159ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80159d4:	7c7a      	ldrb	r2, [r7, #17]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	f200 80d2 	bhi.w	8015b80 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80159dc:	2301      	movs	r3, #1
 80159de:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80159e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d108      	bne.n	80159fc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80159ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159ec:	f004 fc2a 	bl	801a244 <tcp_zero_window_probe>
 80159f0:	4603      	mov	r3, r0
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d014      	beq.n	8015a20 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80159f6:	2300      	movs	r3, #0
 80159f8:	623b      	str	r3, [r7, #32]
 80159fa:	e011      	b.n	8015a20 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80159fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015a02:	4619      	mov	r1, r3
 8015a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a06:	f003 faef 	bl	8018fe8 <tcp_split_unsent_seg>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d107      	bne.n	8015a20 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a12:	f003 fd6f 	bl	80194f4 <tcp_output>
 8015a16:	4603      	mov	r3, r0
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d101      	bne.n	8015a20 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015a20:	6a3b      	ldr	r3, [r7, #32]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	f000 80ac 	beq.w	8015b80 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015a36:	2b06      	cmp	r3, #6
 8015a38:	f200 80a2 	bhi.w	8015b80 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015a42:	3301      	adds	r3, #1
 8015a44:	b2da      	uxtb	r2, r3
 8015a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015a4c:	e098      	b.n	8015b80 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	db0f      	blt.n	8015a78 <tcp_slowtmr+0x1f0>
 8015a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015a5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015a62:	4293      	cmp	r3, r2
 8015a64:	d008      	beq.n	8015a78 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8015a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	3301      	adds	r3, #1
 8015a70:	b29b      	uxth	r3, r3
 8015a72:	b21a      	sxth	r2, r3
 8015a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a76:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8015a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a80:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015a84:	429a      	cmp	r2, r3
 8015a86:	db7b      	blt.n	8015b80 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015a88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a8a:	f004 f825 	bl	8019ad8 <tcp_rexmit_rto_prepare>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d007      	beq.n	8015aa4 <tcp_slowtmr+0x21c>
 8015a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d171      	bne.n	8015b80 <tcp_slowtmr+0x2f8>
 8015a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d06d      	beq.n	8015b80 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa6:	7d1b      	ldrb	r3, [r3, #20]
 8015aa8:	2b02      	cmp	r3, #2
 8015aaa:	d03a      	beq.n	8015b22 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ab2:	2b0c      	cmp	r3, #12
 8015ab4:	bf28      	it	cs
 8015ab6:	230c      	movcs	r3, #12
 8015ab8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015ac0:	10db      	asrs	r3, r3, #3
 8015ac2:	b21b      	sxth	r3, r3
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015acc:	4413      	add	r3, r2
 8015ace:	7efa      	ldrb	r2, [r7, #27]
 8015ad0:	4910      	ldr	r1, [pc, #64]	; (8015b14 <tcp_slowtmr+0x28c>)
 8015ad2:	5c8a      	ldrb	r2, [r1, r2]
 8015ad4:	4093      	lsls	r3, r2
 8015ad6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015ade:	4293      	cmp	r3, r2
 8015ae0:	dc1a      	bgt.n	8015b18 <tcp_slowtmr+0x290>
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	b21a      	sxth	r2, r3
 8015ae6:	e019      	b.n	8015b1c <tcp_slowtmr+0x294>
 8015ae8:	24022234 	.word	0x24022234
 8015aec:	2401ae9a 	.word	0x2401ae9a
 8015af0:	24022230 	.word	0x24022230
 8015af4:	0801f584 	.word	0x0801f584
 8015af8:	0801f8c8 	.word	0x0801f8c8
 8015afc:	0801f5c8 	.word	0x0801f5c8
 8015b00:	0801f8f4 	.word	0x0801f8f4
 8015b04:	0801f920 	.word	0x0801f920
 8015b08:	0801f950 	.word	0x0801f950
 8015b0c:	0801f984 	.word	0x0801f984
 8015b10:	080215f0 	.word	0x080215f0
 8015b14:	080215e0 	.word	0x080215e0
 8015b18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b24:	2200      	movs	r2, #0
 8015b26:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015b34:	4293      	cmp	r3, r2
 8015b36:	bf28      	it	cs
 8015b38:	4613      	movcs	r3, r2
 8015b3a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015b3c:	8a7b      	ldrh	r3, [r7, #18]
 8015b3e:	085b      	lsrs	r3, r3, #1
 8015b40:	b29a      	uxth	r2, r3
 8015b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b52:	005b      	lsls	r3, r3, #1
 8015b54:	b29b      	uxth	r3, r3
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d206      	bcs.n	8015b68 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b5e:	005b      	lsls	r3, r3, #1
 8015b60:	b29a      	uxth	r2, r3
 8015b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b74:	2200      	movs	r2, #0
 8015b76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8015b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b7c:	f004 f81c 	bl	8019bb8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b82:	7d1b      	ldrb	r3, [r3, #20]
 8015b84:	2b06      	cmp	r3, #6
 8015b86:	d111      	bne.n	8015bac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8a:	8b5b      	ldrh	r3, [r3, #26]
 8015b8c:	f003 0310 	and.w	r3, r3, #16
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d00b      	beq.n	8015bac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015b94:	4b9c      	ldr	r3, [pc, #624]	; (8015e08 <tcp_slowtmr+0x580>)
 8015b96:	681a      	ldr	r2, [r3, #0]
 8015b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9a:	6a1b      	ldr	r3, [r3, #32]
 8015b9c:	1ad3      	subs	r3, r2, r3
 8015b9e:	2b28      	cmp	r3, #40	; 0x28
 8015ba0:	d904      	bls.n	8015bac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bae:	7a5b      	ldrb	r3, [r3, #9]
 8015bb0:	f003 0308 	and.w	r3, r3, #8
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d04a      	beq.n	8015c4e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8015bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015bbc:	2b04      	cmp	r3, #4
 8015bbe:	d003      	beq.n	8015bc8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015bc4:	2b07      	cmp	r3, #7
 8015bc6:	d142      	bne.n	8015c4e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015bc8:	4b8f      	ldr	r3, [pc, #572]	; (8015e08 <tcp_slowtmr+0x580>)
 8015bca:	681a      	ldr	r2, [r3, #0]
 8015bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bce:	6a1b      	ldr	r3, [r3, #32]
 8015bd0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015bd8:	4b8c      	ldr	r3, [pc, #560]	; (8015e0c <tcp_slowtmr+0x584>)
 8015bda:	440b      	add	r3, r1
 8015bdc:	498c      	ldr	r1, [pc, #560]	; (8015e10 <tcp_slowtmr+0x588>)
 8015bde:	fba1 1303 	umull	r1, r3, r1, r3
 8015be2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d90a      	bls.n	8015bfe <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bec:	3301      	adds	r3, #1
 8015bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8015bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015bfc:	e027      	b.n	8015c4e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015bfe:	4b82      	ldr	r3, [pc, #520]	; (8015e08 <tcp_slowtmr+0x580>)
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c04:	6a1b      	ldr	r3, [r3, #32]
 8015c06:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c10:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015c14:	4618      	mov	r0, r3
 8015c16:	4b7f      	ldr	r3, [pc, #508]	; (8015e14 <tcp_slowtmr+0x58c>)
 8015c18:	fb03 f300 	mul.w	r3, r3, r0
 8015c1c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015c1e:	497c      	ldr	r1, [pc, #496]	; (8015e10 <tcp_slowtmr+0x588>)
 8015c20:	fba1 1303 	umull	r1, r3, r1, r3
 8015c24:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015c26:	429a      	cmp	r2, r3
 8015c28:	d911      	bls.n	8015c4e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8015c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c2c:	f004 faca 	bl	801a1c4 <tcp_keepalive>
 8015c30:	4603      	mov	r3, r0
 8015c32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8015c36:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d107      	bne.n	8015c4e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8015c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c40:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015c44:	3301      	adds	r3, #1
 8015c46:	b2da      	uxtb	r2, r3
 8015c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c4a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8015c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d011      	beq.n	8015c7a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015c56:	4b6c      	ldr	r3, [pc, #432]	; (8015e08 <tcp_slowtmr+0x580>)
 8015c58:	681a      	ldr	r2, [r3, #0]
 8015c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c5c:	6a1b      	ldr	r3, [r3, #32]
 8015c5e:	1ad2      	subs	r2, r2, r3
 8015c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c62:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015c66:	4619      	mov	r1, r3
 8015c68:	460b      	mov	r3, r1
 8015c6a:	005b      	lsls	r3, r3, #1
 8015c6c:	440b      	add	r3, r1
 8015c6e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015c70:	429a      	cmp	r2, r3
 8015c72:	d302      	bcc.n	8015c7a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8015c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c76:	f000 fddf 	bl	8016838 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7c:	7d1b      	ldrb	r3, [r3, #20]
 8015c7e:	2b03      	cmp	r3, #3
 8015c80:	d10b      	bne.n	8015c9a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015c82:	4b61      	ldr	r3, [pc, #388]	; (8015e08 <tcp_slowtmr+0x580>)
 8015c84:	681a      	ldr	r2, [r3, #0]
 8015c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c88:	6a1b      	ldr	r3, [r3, #32]
 8015c8a:	1ad3      	subs	r3, r2, r3
 8015c8c:	2b28      	cmp	r3, #40	; 0x28
 8015c8e:	d904      	bls.n	8015c9a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c94:	3301      	adds	r3, #1
 8015c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9c:	7d1b      	ldrb	r3, [r3, #20]
 8015c9e:	2b09      	cmp	r3, #9
 8015ca0:	d10b      	bne.n	8015cba <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015ca2:	4b59      	ldr	r3, [pc, #356]	; (8015e08 <tcp_slowtmr+0x580>)
 8015ca4:	681a      	ldr	r2, [r3, #0]
 8015ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca8:	6a1b      	ldr	r3, [r3, #32]
 8015caa:	1ad3      	subs	r3, r2, r3
 8015cac:	2bf0      	cmp	r3, #240	; 0xf0
 8015cae:	d904      	bls.n	8015cba <tcp_slowtmr+0x432>
        ++pcb_remove;
 8015cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cb4:	3301      	adds	r3, #1
 8015cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d060      	beq.n	8015d84 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8015cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015cc8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ccc:	f000 fc00 	bl	80164d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d010      	beq.n	8015cf8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015cd6:	4b50      	ldr	r3, [pc, #320]	; (8015e18 <tcp_slowtmr+0x590>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d106      	bne.n	8015cee <tcp_slowtmr+0x466>
 8015ce0:	4b4e      	ldr	r3, [pc, #312]	; (8015e1c <tcp_slowtmr+0x594>)
 8015ce2:	f240 526d 	movw	r2, #1389	; 0x56d
 8015ce6:	494e      	ldr	r1, [pc, #312]	; (8015e20 <tcp_slowtmr+0x598>)
 8015ce8:	484e      	ldr	r0, [pc, #312]	; (8015e24 <tcp_slowtmr+0x59c>)
 8015cea:	f007 fc93 	bl	801d614 <iprintf>
        prev->next = pcb->next;
 8015cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf0:	68da      	ldr	r2, [r3, #12]
 8015cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf4:	60da      	str	r2, [r3, #12]
 8015cf6:	e00f      	b.n	8015d18 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015cf8:	4b47      	ldr	r3, [pc, #284]	; (8015e18 <tcp_slowtmr+0x590>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d006      	beq.n	8015d10 <tcp_slowtmr+0x488>
 8015d02:	4b46      	ldr	r3, [pc, #280]	; (8015e1c <tcp_slowtmr+0x594>)
 8015d04:	f240 5271 	movw	r2, #1393	; 0x571
 8015d08:	4947      	ldr	r1, [pc, #284]	; (8015e28 <tcp_slowtmr+0x5a0>)
 8015d0a:	4846      	ldr	r0, [pc, #280]	; (8015e24 <tcp_slowtmr+0x59c>)
 8015d0c:	f007 fc82 	bl	801d614 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	4a40      	ldr	r2, [pc, #256]	; (8015e18 <tcp_slowtmr+0x590>)
 8015d16:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d013      	beq.n	8015d48 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d22:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015d28:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d30:	8ad2      	ldrh	r2, [r2, #22]
 8015d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d34:	8b09      	ldrh	r1, [r1, #24]
 8015d36:	9102      	str	r1, [sp, #8]
 8015d38:	9201      	str	r2, [sp, #4]
 8015d3a:	9300      	str	r3, [sp, #0]
 8015d3c:	462b      	mov	r3, r5
 8015d3e:	4622      	mov	r2, r4
 8015d40:	4601      	mov	r1, r0
 8015d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d44:	f004 f98a 	bl	801a05c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4a:	691b      	ldr	r3, [r3, #16]
 8015d4c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d50:	7d1b      	ldrb	r3, [r3, #20]
 8015d52:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d56:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d5a:	68db      	ldr	r3, [r3, #12]
 8015d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015d5e:	6838      	ldr	r0, [r7, #0]
 8015d60:	f7ff f9f2 	bl	8015148 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015d64:	4b31      	ldr	r3, [pc, #196]	; (8015e2c <tcp_slowtmr+0x5a4>)
 8015d66:	2200      	movs	r2, #0
 8015d68:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d004      	beq.n	8015d7a <tcp_slowtmr+0x4f2>
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	f06f 010c 	mvn.w	r1, #12
 8015d76:	68b8      	ldr	r0, [r7, #8]
 8015d78:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015d7a:	4b2c      	ldr	r3, [pc, #176]	; (8015e2c <tcp_slowtmr+0x5a4>)
 8015d7c:	781b      	ldrb	r3, [r3, #0]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d037      	beq.n	8015df2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8015d82:	e592      	b.n	80158aa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d90:	7f1b      	ldrb	r3, [r3, #28]
 8015d92:	3301      	adds	r3, #1
 8015d94:	b2da      	uxtb	r2, r3
 8015d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d98:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9c:	7f1a      	ldrb	r2, [r3, #28]
 8015d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da0:	7f5b      	ldrb	r3, [r3, #29]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d325      	bcc.n	8015df2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8015da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da8:	2200      	movs	r2, #0
 8015daa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015dac:	4b1f      	ldr	r3, [pc, #124]	; (8015e2c <tcp_slowtmr+0x5a4>)
 8015dae:	2200      	movs	r2, #0
 8015db0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d00b      	beq.n	8015dd4 <tcp_slowtmr+0x54c>
 8015dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dc4:	6912      	ldr	r2, [r2, #16]
 8015dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015dc8:	4610      	mov	r0, r2
 8015dca:	4798      	blx	r3
 8015dcc:	4603      	mov	r3, r0
 8015dce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015dd2:	e002      	b.n	8015dda <tcp_slowtmr+0x552>
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015dda:	4b14      	ldr	r3, [pc, #80]	; (8015e2c <tcp_slowtmr+0x5a4>)
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d000      	beq.n	8015de4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8015de2:	e562      	b.n	80158aa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015de4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d102      	bne.n	8015df2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8015dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dee:	f003 fb81 	bl	80194f4 <tcp_output>
  while (pcb != NULL) {
 8015df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	f47f ad5e 	bne.w	80158b6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015dfe:	4b0c      	ldr	r3, [pc, #48]	; (8015e30 <tcp_slowtmr+0x5a8>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015e04:	e069      	b.n	8015eda <tcp_slowtmr+0x652>
 8015e06:	bf00      	nop
 8015e08:	24022234 	.word	0x24022234
 8015e0c:	000a4cb8 	.word	0x000a4cb8
 8015e10:	10624dd3 	.word	0x10624dd3
 8015e14:	000124f8 	.word	0x000124f8
 8015e18:	24022230 	.word	0x24022230
 8015e1c:	0801f584 	.word	0x0801f584
 8015e20:	0801f9bc 	.word	0x0801f9bc
 8015e24:	0801f5c8 	.word	0x0801f5c8
 8015e28:	0801f9e8 	.word	0x0801f9e8
 8015e2c:	2402222c 	.word	0x2402222c
 8015e30:	24022240 	.word	0x24022240
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e36:	7d1b      	ldrb	r3, [r3, #20]
 8015e38:	2b0a      	cmp	r3, #10
 8015e3a:	d006      	beq.n	8015e4a <tcp_slowtmr+0x5c2>
 8015e3c:	4b2b      	ldr	r3, [pc, #172]	; (8015eec <tcp_slowtmr+0x664>)
 8015e3e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015e42:	492b      	ldr	r1, [pc, #172]	; (8015ef0 <tcp_slowtmr+0x668>)
 8015e44:	482b      	ldr	r0, [pc, #172]	; (8015ef4 <tcp_slowtmr+0x66c>)
 8015e46:	f007 fbe5 	bl	801d614 <iprintf>
    pcb_remove = 0;
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015e50:	4b29      	ldr	r3, [pc, #164]	; (8015ef8 <tcp_slowtmr+0x670>)
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e56:	6a1b      	ldr	r3, [r3, #32]
 8015e58:	1ad3      	subs	r3, r2, r3
 8015e5a:	2bf0      	cmp	r3, #240	; 0xf0
 8015e5c:	d904      	bls.n	8015e68 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e62:	3301      	adds	r3, #1
 8015e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d02f      	beq.n	8015ed0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e72:	f000 fb2d 	bl	80164d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d010      	beq.n	8015e9e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015e7c:	4b1f      	ldr	r3, [pc, #124]	; (8015efc <tcp_slowtmr+0x674>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d106      	bne.n	8015e94 <tcp_slowtmr+0x60c>
 8015e86:	4b19      	ldr	r3, [pc, #100]	; (8015eec <tcp_slowtmr+0x664>)
 8015e88:	f240 52af 	movw	r2, #1455	; 0x5af
 8015e8c:	491c      	ldr	r1, [pc, #112]	; (8015f00 <tcp_slowtmr+0x678>)
 8015e8e:	4819      	ldr	r0, [pc, #100]	; (8015ef4 <tcp_slowtmr+0x66c>)
 8015e90:	f007 fbc0 	bl	801d614 <iprintf>
        prev->next = pcb->next;
 8015e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e96:	68da      	ldr	r2, [r3, #12]
 8015e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e9a:	60da      	str	r2, [r3, #12]
 8015e9c:	e00f      	b.n	8015ebe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015e9e:	4b17      	ldr	r3, [pc, #92]	; (8015efc <tcp_slowtmr+0x674>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ea4:	429a      	cmp	r2, r3
 8015ea6:	d006      	beq.n	8015eb6 <tcp_slowtmr+0x62e>
 8015ea8:	4b10      	ldr	r3, [pc, #64]	; (8015eec <tcp_slowtmr+0x664>)
 8015eaa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015eae:	4915      	ldr	r1, [pc, #84]	; (8015f04 <tcp_slowtmr+0x67c>)
 8015eb0:	4810      	ldr	r0, [pc, #64]	; (8015ef4 <tcp_slowtmr+0x66c>)
 8015eb2:	f007 fbaf 	bl	801d614 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb8:	68db      	ldr	r3, [r3, #12]
 8015eba:	4a10      	ldr	r2, [pc, #64]	; (8015efc <tcp_slowtmr+0x674>)
 8015ebc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec4:	68db      	ldr	r3, [r3, #12]
 8015ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015ec8:	69f8      	ldr	r0, [r7, #28]
 8015eca:	f7ff f93d 	bl	8015148 <tcp_free>
 8015ece:	e004      	b.n	8015eda <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d1a9      	bne.n	8015e34 <tcp_slowtmr+0x5ac>
    }
  }
}
 8015ee0:	bf00      	nop
 8015ee2:	bf00      	nop
 8015ee4:	3730      	adds	r7, #48	; 0x30
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8015eea:	bf00      	nop
 8015eec:	0801f584 	.word	0x0801f584
 8015ef0:	0801fa14 	.word	0x0801fa14
 8015ef4:	0801f5c8 	.word	0x0801f5c8
 8015ef8:	24022234 	.word	0x24022234
 8015efc:	24022240 	.word	0x24022240
 8015f00:	0801fa44 	.word	0x0801fa44
 8015f04:	0801fa6c 	.word	0x0801fa6c

08015f08 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015f0e:	4b2d      	ldr	r3, [pc, #180]	; (8015fc4 <tcp_fasttmr+0xbc>)
 8015f10:	781b      	ldrb	r3, [r3, #0]
 8015f12:	3301      	adds	r3, #1
 8015f14:	b2da      	uxtb	r2, r3
 8015f16:	4b2b      	ldr	r3, [pc, #172]	; (8015fc4 <tcp_fasttmr+0xbc>)
 8015f18:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015f1a:	4b2b      	ldr	r3, [pc, #172]	; (8015fc8 <tcp_fasttmr+0xc0>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015f20:	e048      	b.n	8015fb4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	7f9a      	ldrb	r2, [r3, #30]
 8015f26:	4b27      	ldr	r3, [pc, #156]	; (8015fc4 <tcp_fasttmr+0xbc>)
 8015f28:	781b      	ldrb	r3, [r3, #0]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	d03f      	beq.n	8015fae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015f2e:	4b25      	ldr	r3, [pc, #148]	; (8015fc4 <tcp_fasttmr+0xbc>)
 8015f30:	781a      	ldrb	r2, [r3, #0]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	8b5b      	ldrh	r3, [r3, #26]
 8015f3a:	f003 0301 	and.w	r3, r3, #1
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d010      	beq.n	8015f64 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	8b5b      	ldrh	r3, [r3, #26]
 8015f46:	f043 0302 	orr.w	r3, r3, #2
 8015f4a:	b29a      	uxth	r2, r3
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f003 facf 	bl	80194f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	8b5b      	ldrh	r3, [r3, #26]
 8015f5a:	f023 0303 	bic.w	r3, r3, #3
 8015f5e:	b29a      	uxth	r2, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	8b5b      	ldrh	r3, [r3, #26]
 8015f68:	f003 0308 	and.w	r3, r3, #8
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d009      	beq.n	8015f84 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	8b5b      	ldrh	r3, [r3, #26]
 8015f74:	f023 0308 	bic.w	r3, r3, #8
 8015f78:	b29a      	uxth	r2, r3
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f7ff fa76 	bl	8015470 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d00a      	beq.n	8015fa8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015f92:	4b0e      	ldr	r3, [pc, #56]	; (8015fcc <tcp_fasttmr+0xc4>)
 8015f94:	2200      	movs	r2, #0
 8015f96:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f000 f819 	bl	8015fd0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015f9e:	4b0b      	ldr	r3, [pc, #44]	; (8015fcc <tcp_fasttmr+0xc4>)
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d000      	beq.n	8015fa8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015fa6:	e7b8      	b.n	8015f1a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	607b      	str	r3, [r7, #4]
 8015fac:	e002      	b.n	8015fb4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d1b3      	bne.n	8015f22 <tcp_fasttmr+0x1a>
    }
  }
}
 8015fba:	bf00      	nop
 8015fbc:	bf00      	nop
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	2401ae9a 	.word	0x2401ae9a
 8015fc8:	24022230 	.word	0x24022230
 8015fcc:	2402222c 	.word	0x2402222c

08015fd0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015fd0:	b590      	push	{r4, r7, lr}
 8015fd2:	b085      	sub	sp, #20
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d109      	bne.n	8015ff2 <tcp_process_refused_data+0x22>
 8015fde:	4b38      	ldr	r3, [pc, #224]	; (80160c0 <tcp_process_refused_data+0xf0>)
 8015fe0:	f240 6209 	movw	r2, #1545	; 0x609
 8015fe4:	4937      	ldr	r1, [pc, #220]	; (80160c4 <tcp_process_refused_data+0xf4>)
 8015fe6:	4838      	ldr	r0, [pc, #224]	; (80160c8 <tcp_process_refused_data+0xf8>)
 8015fe8:	f007 fb14 	bl	801d614 <iprintf>
 8015fec:	f06f 030f 	mvn.w	r3, #15
 8015ff0:	e061      	b.n	80160b6 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015ff6:	7b5b      	ldrb	r3, [r3, #13]
 8015ff8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015ffe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2200      	movs	r2, #0
 8016004:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801600c:	2b00      	cmp	r3, #0
 801600e:	d00b      	beq.n	8016028 <tcp_process_refused_data+0x58>
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6918      	ldr	r0, [r3, #16]
 801601a:	2300      	movs	r3, #0
 801601c:	68ba      	ldr	r2, [r7, #8]
 801601e:	6879      	ldr	r1, [r7, #4]
 8016020:	47a0      	blx	r4
 8016022:	4603      	mov	r3, r0
 8016024:	73fb      	strb	r3, [r7, #15]
 8016026:	e007      	b.n	8016038 <tcp_process_refused_data+0x68>
 8016028:	2300      	movs	r3, #0
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	6879      	ldr	r1, [r7, #4]
 801602e:	2000      	movs	r0, #0
 8016030:	f000 f8a6 	bl	8016180 <tcp_recv_null>
 8016034:	4603      	mov	r3, r0
 8016036:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d12b      	bne.n	8016098 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016040:	7bbb      	ldrb	r3, [r7, #14]
 8016042:	f003 0320 	and.w	r3, r3, #32
 8016046:	2b00      	cmp	r3, #0
 8016048:	d034      	beq.n	80160b4 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801604e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8016052:	4293      	cmp	r3, r2
 8016054:	d005      	beq.n	8016062 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801605a:	3301      	adds	r3, #1
 801605c:	b29a      	uxth	r2, r3
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016068:	2b00      	cmp	r3, #0
 801606a:	d00b      	beq.n	8016084 <tcp_process_refused_data+0xb4>
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	6918      	ldr	r0, [r3, #16]
 8016076:	2300      	movs	r3, #0
 8016078:	2200      	movs	r2, #0
 801607a:	6879      	ldr	r1, [r7, #4]
 801607c:	47a0      	blx	r4
 801607e:	4603      	mov	r3, r0
 8016080:	73fb      	strb	r3, [r7, #15]
 8016082:	e001      	b.n	8016088 <tcp_process_refused_data+0xb8>
 8016084:	2300      	movs	r3, #0
 8016086:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801608c:	f113 0f0d 	cmn.w	r3, #13
 8016090:	d110      	bne.n	80160b4 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8016092:	f06f 030c 	mvn.w	r3, #12
 8016096:	e00e      	b.n	80160b6 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8016098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801609c:	f113 0f0d 	cmn.w	r3, #13
 80160a0:	d102      	bne.n	80160a8 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80160a2:	f06f 030c 	mvn.w	r3, #12
 80160a6:	e006      	b.n	80160b6 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	68ba      	ldr	r2, [r7, #8]
 80160ac:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80160ae:	f06f 0304 	mvn.w	r3, #4
 80160b2:	e000      	b.n	80160b6 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80160b4:	2300      	movs	r3, #0
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3714      	adds	r7, #20
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd90      	pop	{r4, r7, pc}
 80160be:	bf00      	nop
 80160c0:	0801f584 	.word	0x0801f584
 80160c4:	0801fa94 	.word	0x0801fa94
 80160c8:	0801f5c8 	.word	0x0801f5c8

080160cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80160d4:	e007      	b.n	80160e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 f80a 	bl	80160f6 <tcp_seg_free>
    seg = next;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d1f4      	bne.n	80160d6 <tcp_segs_free+0xa>
  }
}
 80160ec:	bf00      	nop
 80160ee:	bf00      	nop
 80160f0:	3710      	adds	r7, #16
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}

080160f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80160f6:	b580      	push	{r7, lr}
 80160f8:	b082      	sub	sp, #8
 80160fa:	af00      	add	r7, sp, #0
 80160fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d00c      	beq.n	801611e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d004      	beq.n	8016116 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	4618      	mov	r0, r3
 8016112:	f7fe fd6d 	bl	8014bf0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016116:	6879      	ldr	r1, [r7, #4]
 8016118:	2003      	movs	r0, #3
 801611a:	f7fd fec1 	bl	8013ea0 <memp_free>
  }
}
 801611e:	bf00      	nop
 8016120:	3708      	adds	r7, #8
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
	...

08016128 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b084      	sub	sp, #16
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d106      	bne.n	8016144 <tcp_seg_copy+0x1c>
 8016136:	4b0f      	ldr	r3, [pc, #60]	; (8016174 <tcp_seg_copy+0x4c>)
 8016138:	f240 6282 	movw	r2, #1666	; 0x682
 801613c:	490e      	ldr	r1, [pc, #56]	; (8016178 <tcp_seg_copy+0x50>)
 801613e:	480f      	ldr	r0, [pc, #60]	; (801617c <tcp_seg_copy+0x54>)
 8016140:	f007 fa68 	bl	801d614 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016144:	2003      	movs	r0, #3
 8016146:	f7fd fe35 	bl	8013db4 <memp_malloc>
 801614a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d101      	bne.n	8016156 <tcp_seg_copy+0x2e>
    return NULL;
 8016152:	2300      	movs	r3, #0
 8016154:	e00a      	b.n	801616c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016156:	2210      	movs	r2, #16
 8016158:	6879      	ldr	r1, [r7, #4]
 801615a:	68f8      	ldr	r0, [r7, #12]
 801615c:	f007 f980 	bl	801d460 <memcpy>
  pbuf_ref(cseg->p);
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	4618      	mov	r0, r3
 8016166:	f7fe fde9 	bl	8014d3c <pbuf_ref>
  return cseg;
 801616a:	68fb      	ldr	r3, [r7, #12]
}
 801616c:	4618      	mov	r0, r3
 801616e:	3710      	adds	r7, #16
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	0801f584 	.word	0x0801f584
 8016178:	0801fad8 	.word	0x0801fad8
 801617c:	0801f5c8 	.word	0x0801f5c8

08016180 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
 801618c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d109      	bne.n	80161a8 <tcp_recv_null+0x28>
 8016194:	4b12      	ldr	r3, [pc, #72]	; (80161e0 <tcp_recv_null+0x60>)
 8016196:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801619a:	4912      	ldr	r1, [pc, #72]	; (80161e4 <tcp_recv_null+0x64>)
 801619c:	4812      	ldr	r0, [pc, #72]	; (80161e8 <tcp_recv_null+0x68>)
 801619e:	f007 fa39 	bl	801d614 <iprintf>
 80161a2:	f06f 030f 	mvn.w	r3, #15
 80161a6:	e016      	b.n	80161d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d009      	beq.n	80161c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	891b      	ldrh	r3, [r3, #8]
 80161b2:	4619      	mov	r1, r3
 80161b4:	68b8      	ldr	r0, [r7, #8]
 80161b6:	f7ff fb15 	bl	80157e4 <tcp_recved>
    pbuf_free(p);
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7fe fd18 	bl	8014bf0 <pbuf_free>
 80161c0:	e008      	b.n	80161d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80161c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d104      	bne.n	80161d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80161ca:	68b8      	ldr	r0, [r7, #8]
 80161cc:	f7ff f9ba 	bl	8015544 <tcp_close>
 80161d0:	4603      	mov	r3, r0
 80161d2:	e000      	b.n	80161d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80161d4:	2300      	movs	r3, #0
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3710      	adds	r7, #16
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	0801f584 	.word	0x0801f584
 80161e4:	0801faf4 	.word	0x0801faf4
 80161e8:	0801f5c8 	.word	0x0801f5c8

080161ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b086      	sub	sp, #24
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	4603      	mov	r3, r0
 80161f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80161f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	db01      	blt.n	8016202 <tcp_kill_prio+0x16>
 80161fe:	79fb      	ldrb	r3, [r7, #7]
 8016200:	e000      	b.n	8016204 <tcp_kill_prio+0x18>
 8016202:	237f      	movs	r3, #127	; 0x7f
 8016204:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016206:	7afb      	ldrb	r3, [r7, #11]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d034      	beq.n	8016276 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801620c:	7afb      	ldrb	r3, [r7, #11]
 801620e:	3b01      	subs	r3, #1
 8016210:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016212:	2300      	movs	r3, #0
 8016214:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016216:	2300      	movs	r3, #0
 8016218:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801621a:	4b19      	ldr	r3, [pc, #100]	; (8016280 <tcp_kill_prio+0x94>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	617b      	str	r3, [r7, #20]
 8016220:	e01f      	b.n	8016262 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	7d5b      	ldrb	r3, [r3, #21]
 8016226:	7afa      	ldrb	r2, [r7, #11]
 8016228:	429a      	cmp	r2, r3
 801622a:	d80c      	bhi.n	8016246 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016230:	7afa      	ldrb	r2, [r7, #11]
 8016232:	429a      	cmp	r2, r3
 8016234:	d112      	bne.n	801625c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016236:	4b13      	ldr	r3, [pc, #76]	; (8016284 <tcp_kill_prio+0x98>)
 8016238:	681a      	ldr	r2, [r3, #0]
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	6a1b      	ldr	r3, [r3, #32]
 801623e:	1ad3      	subs	r3, r2, r3
 8016240:	68fa      	ldr	r2, [r7, #12]
 8016242:	429a      	cmp	r2, r3
 8016244:	d80a      	bhi.n	801625c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016246:	4b0f      	ldr	r3, [pc, #60]	; (8016284 <tcp_kill_prio+0x98>)
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	6a1b      	ldr	r3, [r3, #32]
 801624e:	1ad3      	subs	r3, r2, r3
 8016250:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	7d5b      	ldrb	r3, [r3, #21]
 801625a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801625c:	697b      	ldr	r3, [r7, #20]
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	617b      	str	r3, [r7, #20]
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d1dc      	bne.n	8016222 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016268:	693b      	ldr	r3, [r7, #16]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d004      	beq.n	8016278 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801626e:	6938      	ldr	r0, [r7, #16]
 8016270:	f7ff fa52 	bl	8015718 <tcp_abort>
 8016274:	e000      	b.n	8016278 <tcp_kill_prio+0x8c>
    return;
 8016276:	bf00      	nop
  }
}
 8016278:	3718      	adds	r7, #24
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	24022230 	.word	0x24022230
 8016284:	24022234 	.word	0x24022234

08016288 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b086      	sub	sp, #24
 801628c:	af00      	add	r7, sp, #0
 801628e:	4603      	mov	r3, r0
 8016290:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016292:	79fb      	ldrb	r3, [r7, #7]
 8016294:	2b08      	cmp	r3, #8
 8016296:	d009      	beq.n	80162ac <tcp_kill_state+0x24>
 8016298:	79fb      	ldrb	r3, [r7, #7]
 801629a:	2b09      	cmp	r3, #9
 801629c:	d006      	beq.n	80162ac <tcp_kill_state+0x24>
 801629e:	4b1a      	ldr	r3, [pc, #104]	; (8016308 <tcp_kill_state+0x80>)
 80162a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80162a4:	4919      	ldr	r1, [pc, #100]	; (801630c <tcp_kill_state+0x84>)
 80162a6:	481a      	ldr	r0, [pc, #104]	; (8016310 <tcp_kill_state+0x88>)
 80162a8:	f007 f9b4 	bl	801d614 <iprintf>

  inactivity = 0;
 80162ac:	2300      	movs	r3, #0
 80162ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80162b0:	2300      	movs	r3, #0
 80162b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80162b4:	4b17      	ldr	r3, [pc, #92]	; (8016314 <tcp_kill_state+0x8c>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	617b      	str	r3, [r7, #20]
 80162ba:	e017      	b.n	80162ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	7d1b      	ldrb	r3, [r3, #20]
 80162c0:	79fa      	ldrb	r2, [r7, #7]
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d10f      	bne.n	80162e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80162c6:	4b14      	ldr	r3, [pc, #80]	; (8016318 <tcp_kill_state+0x90>)
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	6a1b      	ldr	r3, [r3, #32]
 80162ce:	1ad3      	subs	r3, r2, r3
 80162d0:	68fa      	ldr	r2, [r7, #12]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d807      	bhi.n	80162e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80162d6:	4b10      	ldr	r3, [pc, #64]	; (8016318 <tcp_kill_state+0x90>)
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	6a1b      	ldr	r3, [r3, #32]
 80162de:	1ad3      	subs	r3, r2, r3
 80162e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	68db      	ldr	r3, [r3, #12]
 80162ea:	617b      	str	r3, [r7, #20]
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d1e4      	bne.n	80162bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80162f2:	693b      	ldr	r3, [r7, #16]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d003      	beq.n	8016300 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80162f8:	2100      	movs	r1, #0
 80162fa:	6938      	ldr	r0, [r7, #16]
 80162fc:	f7ff f94e 	bl	801559c <tcp_abandon>
  }
}
 8016300:	bf00      	nop
 8016302:	3718      	adds	r7, #24
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}
 8016308:	0801f584 	.word	0x0801f584
 801630c:	0801fb10 	.word	0x0801fb10
 8016310:	0801f5c8 	.word	0x0801f5c8
 8016314:	24022230 	.word	0x24022230
 8016318:	24022234 	.word	0x24022234

0801631c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b084      	sub	sp, #16
 8016320:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016322:	2300      	movs	r3, #0
 8016324:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016326:	2300      	movs	r3, #0
 8016328:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801632a:	4b12      	ldr	r3, [pc, #72]	; (8016374 <tcp_kill_timewait+0x58>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	60fb      	str	r3, [r7, #12]
 8016330:	e012      	b.n	8016358 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016332:	4b11      	ldr	r3, [pc, #68]	; (8016378 <tcp_kill_timewait+0x5c>)
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	6a1b      	ldr	r3, [r3, #32]
 801633a:	1ad3      	subs	r3, r2, r3
 801633c:	687a      	ldr	r2, [r7, #4]
 801633e:	429a      	cmp	r2, r3
 8016340:	d807      	bhi.n	8016352 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016342:	4b0d      	ldr	r3, [pc, #52]	; (8016378 <tcp_kill_timewait+0x5c>)
 8016344:	681a      	ldr	r2, [r3, #0]
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	6a1b      	ldr	r3, [r3, #32]
 801634a:	1ad3      	subs	r3, r2, r3
 801634c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	68db      	ldr	r3, [r3, #12]
 8016356:	60fb      	str	r3, [r7, #12]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d1e9      	bne.n	8016332 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d002      	beq.n	801636a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016364:	68b8      	ldr	r0, [r7, #8]
 8016366:	f7ff f9d7 	bl	8015718 <tcp_abort>
  }
}
 801636a:	bf00      	nop
 801636c:	3710      	adds	r7, #16
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	24022240 	.word	0x24022240
 8016378:	24022234 	.word	0x24022234

0801637c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016382:	4b10      	ldr	r3, [pc, #64]	; (80163c4 <tcp_handle_closepend+0x48>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016388:	e014      	b.n	80163b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	68db      	ldr	r3, [r3, #12]
 801638e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	8b5b      	ldrh	r3, [r3, #26]
 8016394:	f003 0308 	and.w	r3, r3, #8
 8016398:	2b00      	cmp	r3, #0
 801639a:	d009      	beq.n	80163b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	8b5b      	ldrh	r3, [r3, #26]
 80163a0:	f023 0308 	bic.w	r3, r3, #8
 80163a4:	b29a      	uxth	r2, r3
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f7ff f860 	bl	8015470 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d1e7      	bne.n	801638a <tcp_handle_closepend+0xe>
  }
}
 80163ba:	bf00      	nop
 80163bc:	bf00      	nop
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}
 80163c4:	24022230 	.word	0x24022230

080163c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	4603      	mov	r3, r0
 80163d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80163d2:	2001      	movs	r0, #1
 80163d4:	f7fd fcee 	bl	8013db4 <memp_malloc>
 80163d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d126      	bne.n	801642e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80163e0:	f7ff ffcc 	bl	801637c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80163e4:	f7ff ff9a 	bl	801631c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80163e8:	2001      	movs	r0, #1
 80163ea:	f7fd fce3 	bl	8013db4 <memp_malloc>
 80163ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d11b      	bne.n	801642e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80163f6:	2009      	movs	r0, #9
 80163f8:	f7ff ff46 	bl	8016288 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80163fc:	2001      	movs	r0, #1
 80163fe:	f7fd fcd9 	bl	8013db4 <memp_malloc>
 8016402:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d111      	bne.n	801642e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801640a:	2008      	movs	r0, #8
 801640c:	f7ff ff3c 	bl	8016288 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016410:	2001      	movs	r0, #1
 8016412:	f7fd fccf 	bl	8013db4 <memp_malloc>
 8016416:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d107      	bne.n	801642e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801641e:	79fb      	ldrb	r3, [r7, #7]
 8016420:	4618      	mov	r0, r3
 8016422:	f7ff fee3 	bl	80161ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016426:	2001      	movs	r0, #1
 8016428:	f7fd fcc4 	bl	8013db4 <memp_malloc>
 801642c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d03f      	beq.n	80164b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016434:	229c      	movs	r2, #156	; 0x9c
 8016436:	2100      	movs	r1, #0
 8016438:	68f8      	ldr	r0, [r7, #12]
 801643a:	f007 f839 	bl	801d4b0 <memset>
    pcb->prio = prio;
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	79fa      	ldrb	r2, [r7, #7]
 8016442:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801644a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8016454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	22ff      	movs	r2, #255	; 0xff
 8016462:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f44f 7206 	mov.w	r2, #536	; 0x218
 801646a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2206      	movs	r2, #6
 8016470:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2206      	movs	r2, #6
 8016478:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016480:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	2201      	movs	r2, #1
 8016486:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801648a:	4b0d      	ldr	r3, [pc, #52]	; (80164c0 <tcp_alloc+0xf8>)
 801648c:	681a      	ldr	r2, [r3, #0]
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016492:	4b0c      	ldr	r3, [pc, #48]	; (80164c4 <tcp_alloc+0xfc>)
 8016494:	781a      	ldrb	r2, [r3, #0]
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80164a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	4a08      	ldr	r2, [pc, #32]	; (80164c8 <tcp_alloc+0x100>)
 80164a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	4a07      	ldr	r2, [pc, #28]	; (80164cc <tcp_alloc+0x104>)
 80164b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80164b4:	68fb      	ldr	r3, [r7, #12]
}
 80164b6:	4618      	mov	r0, r3
 80164b8:	3710      	adds	r7, #16
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}
 80164be:	bf00      	nop
 80164c0:	24022234 	.word	0x24022234
 80164c4:	2401ae9a 	.word	0x2401ae9a
 80164c8:	08016181 	.word	0x08016181
 80164cc:	006ddd00 	.word	0x006ddd00

080164d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d107      	bne.n	80164ee <tcp_pcb_purge+0x1e>
 80164de:	4b21      	ldr	r3, [pc, #132]	; (8016564 <tcp_pcb_purge+0x94>)
 80164e0:	f640 0251 	movw	r2, #2129	; 0x851
 80164e4:	4920      	ldr	r1, [pc, #128]	; (8016568 <tcp_pcb_purge+0x98>)
 80164e6:	4821      	ldr	r0, [pc, #132]	; (801656c <tcp_pcb_purge+0x9c>)
 80164e8:	f007 f894 	bl	801d614 <iprintf>
 80164ec:	e037      	b.n	801655e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	7d1b      	ldrb	r3, [r3, #20]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d033      	beq.n	801655e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80164fa:	2b0a      	cmp	r3, #10
 80164fc:	d02f      	beq.n	801655e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016502:	2b01      	cmp	r3, #1
 8016504:	d02b      	beq.n	801655e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801650a:	2b00      	cmp	r3, #0
 801650c:	d007      	beq.n	801651e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016512:	4618      	mov	r0, r3
 8016514:	f7fe fb6c 	bl	8014bf0 <pbuf_free>
      pcb->refused_data = NULL;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2200      	movs	r2, #0
 801651c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016522:	2b00      	cmp	r3, #0
 8016524:	d002      	beq.n	801652c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016526:	6878      	ldr	r0, [r7, #4]
 8016528:	f000 f986 	bl	8016838 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016532:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016538:	4618      	mov	r0, r3
 801653a:	f7ff fdc7 	bl	80160cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016542:	4618      	mov	r0, r3
 8016544:	f7ff fdc2 	bl	80160cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2200      	movs	r2, #0
 801654c:	66da      	str	r2, [r3, #108]	; 0x6c
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2200      	movs	r2, #0
 801655a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801655e:	3708      	adds	r7, #8
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}
 8016564:	0801f584 	.word	0x0801f584
 8016568:	0801fbd0 	.word	0x0801fbd0
 801656c:	0801f5c8 	.word	0x0801f5c8

08016570 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d106      	bne.n	801658e <tcp_pcb_remove+0x1e>
 8016580:	4b3e      	ldr	r3, [pc, #248]	; (801667c <tcp_pcb_remove+0x10c>)
 8016582:	f640 0283 	movw	r2, #2179	; 0x883
 8016586:	493e      	ldr	r1, [pc, #248]	; (8016680 <tcp_pcb_remove+0x110>)
 8016588:	483e      	ldr	r0, [pc, #248]	; (8016684 <tcp_pcb_remove+0x114>)
 801658a:	f007 f843 	bl	801d614 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d106      	bne.n	80165a2 <tcp_pcb_remove+0x32>
 8016594:	4b39      	ldr	r3, [pc, #228]	; (801667c <tcp_pcb_remove+0x10c>)
 8016596:	f640 0284 	movw	r2, #2180	; 0x884
 801659a:	493b      	ldr	r1, [pc, #236]	; (8016688 <tcp_pcb_remove+0x118>)
 801659c:	4839      	ldr	r0, [pc, #228]	; (8016684 <tcp_pcb_remove+0x114>)
 801659e:	f007 f839 	bl	801d614 <iprintf>

  TCP_RMV(pcblist, pcb);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	683a      	ldr	r2, [r7, #0]
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d105      	bne.n	80165b8 <tcp_pcb_remove+0x48>
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	68da      	ldr	r2, [r3, #12]
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	601a      	str	r2, [r3, #0]
 80165b6:	e013      	b.n	80165e0 <tcp_pcb_remove+0x70>
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	60fb      	str	r3, [r7, #12]
 80165be:	e00c      	b.n	80165da <tcp_pcb_remove+0x6a>
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	68db      	ldr	r3, [r3, #12]
 80165c4:	683a      	ldr	r2, [r7, #0]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d104      	bne.n	80165d4 <tcp_pcb_remove+0x64>
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	68da      	ldr	r2, [r3, #12]
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	60da      	str	r2, [r3, #12]
 80165d2:	e005      	b.n	80165e0 <tcp_pcb_remove+0x70>
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	60fb      	str	r3, [r7, #12]
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d1ef      	bne.n	80165c0 <tcp_pcb_remove+0x50>
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	2200      	movs	r2, #0
 80165e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80165e6:	6838      	ldr	r0, [r7, #0]
 80165e8:	f7ff ff72 	bl	80164d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	7d1b      	ldrb	r3, [r3, #20]
 80165f0:	2b0a      	cmp	r3, #10
 80165f2:	d013      	beq.n	801661c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80165f8:	2b01      	cmp	r3, #1
 80165fa:	d00f      	beq.n	801661c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	8b5b      	ldrh	r3, [r3, #26]
 8016600:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016604:	2b00      	cmp	r3, #0
 8016606:	d009      	beq.n	801661c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	8b5b      	ldrh	r3, [r3, #26]
 801660c:	f043 0302 	orr.w	r3, r3, #2
 8016610:	b29a      	uxth	r2, r3
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016616:	6838      	ldr	r0, [r7, #0]
 8016618:	f002 ff6c 	bl	80194f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801661c:	683b      	ldr	r3, [r7, #0]
 801661e:	7d1b      	ldrb	r3, [r3, #20]
 8016620:	2b01      	cmp	r3, #1
 8016622:	d020      	beq.n	8016666 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016628:	2b00      	cmp	r3, #0
 801662a:	d006      	beq.n	801663a <tcp_pcb_remove+0xca>
 801662c:	4b13      	ldr	r3, [pc, #76]	; (801667c <tcp_pcb_remove+0x10c>)
 801662e:	f640 0293 	movw	r2, #2195	; 0x893
 8016632:	4916      	ldr	r1, [pc, #88]	; (801668c <tcp_pcb_remove+0x11c>)
 8016634:	4813      	ldr	r0, [pc, #76]	; (8016684 <tcp_pcb_remove+0x114>)
 8016636:	f006 ffed 	bl	801d614 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801663e:	2b00      	cmp	r3, #0
 8016640:	d006      	beq.n	8016650 <tcp_pcb_remove+0xe0>
 8016642:	4b0e      	ldr	r3, [pc, #56]	; (801667c <tcp_pcb_remove+0x10c>)
 8016644:	f640 0294 	movw	r2, #2196	; 0x894
 8016648:	4911      	ldr	r1, [pc, #68]	; (8016690 <tcp_pcb_remove+0x120>)
 801664a:	480e      	ldr	r0, [pc, #56]	; (8016684 <tcp_pcb_remove+0x114>)
 801664c:	f006 ffe2 	bl	801d614 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016650:	683b      	ldr	r3, [r7, #0]
 8016652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016654:	2b00      	cmp	r3, #0
 8016656:	d006      	beq.n	8016666 <tcp_pcb_remove+0xf6>
 8016658:	4b08      	ldr	r3, [pc, #32]	; (801667c <tcp_pcb_remove+0x10c>)
 801665a:	f640 0296 	movw	r2, #2198	; 0x896
 801665e:	490d      	ldr	r1, [pc, #52]	; (8016694 <tcp_pcb_remove+0x124>)
 8016660:	4808      	ldr	r0, [pc, #32]	; (8016684 <tcp_pcb_remove+0x114>)
 8016662:	f006 ffd7 	bl	801d614 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	2200      	movs	r2, #0
 801666a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	2200      	movs	r2, #0
 8016670:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016672:	bf00      	nop
 8016674:	3710      	adds	r7, #16
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	0801f584 	.word	0x0801f584
 8016680:	0801fbec 	.word	0x0801fbec
 8016684:	0801f5c8 	.word	0x0801f5c8
 8016688:	0801fc08 	.word	0x0801fc08
 801668c:	0801fc28 	.word	0x0801fc28
 8016690:	0801fc40 	.word	0x0801fc40
 8016694:	0801fc5c 	.word	0x0801fc5c

08016698 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d106      	bne.n	80166b4 <tcp_next_iss+0x1c>
 80166a6:	4b0a      	ldr	r3, [pc, #40]	; (80166d0 <tcp_next_iss+0x38>)
 80166a8:	f640 02af 	movw	r2, #2223	; 0x8af
 80166ac:	4909      	ldr	r1, [pc, #36]	; (80166d4 <tcp_next_iss+0x3c>)
 80166ae:	480a      	ldr	r0, [pc, #40]	; (80166d8 <tcp_next_iss+0x40>)
 80166b0:	f006 ffb0 	bl	801d614 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80166b4:	4b09      	ldr	r3, [pc, #36]	; (80166dc <tcp_next_iss+0x44>)
 80166b6:	681a      	ldr	r2, [r3, #0]
 80166b8:	4b09      	ldr	r3, [pc, #36]	; (80166e0 <tcp_next_iss+0x48>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	4413      	add	r3, r2
 80166be:	4a07      	ldr	r2, [pc, #28]	; (80166dc <tcp_next_iss+0x44>)
 80166c0:	6013      	str	r3, [r2, #0]
  return iss;
 80166c2:	4b06      	ldr	r3, [pc, #24]	; (80166dc <tcp_next_iss+0x44>)
 80166c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	3708      	adds	r7, #8
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop
 80166d0:	0801f584 	.word	0x0801f584
 80166d4:	0801fc74 	.word	0x0801fc74
 80166d8:	0801f5c8 	.word	0x0801f5c8
 80166dc:	2400006c 	.word	0x2400006c
 80166e0:	24022234 	.word	0x24022234

080166e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b086      	sub	sp, #24
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	4603      	mov	r3, r0
 80166ec:	60b9      	str	r1, [r7, #8]
 80166ee:	607a      	str	r2, [r7, #4]
 80166f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d106      	bne.n	8016706 <tcp_eff_send_mss_netif+0x22>
 80166f8:	4b14      	ldr	r3, [pc, #80]	; (801674c <tcp_eff_send_mss_netif+0x68>)
 80166fa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80166fe:	4914      	ldr	r1, [pc, #80]	; (8016750 <tcp_eff_send_mss_netif+0x6c>)
 8016700:	4814      	ldr	r0, [pc, #80]	; (8016754 <tcp_eff_send_mss_netif+0x70>)
 8016702:	f006 ff87 	bl	801d614 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d101      	bne.n	8016710 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801670c:	89fb      	ldrh	r3, [r7, #14]
 801670e:	e019      	b.n	8016744 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016714:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016716:	8afb      	ldrh	r3, [r7, #22]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d012      	beq.n	8016742 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801671c:	2328      	movs	r3, #40	; 0x28
 801671e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016720:	8afa      	ldrh	r2, [r7, #22]
 8016722:	8abb      	ldrh	r3, [r7, #20]
 8016724:	429a      	cmp	r2, r3
 8016726:	d904      	bls.n	8016732 <tcp_eff_send_mss_netif+0x4e>
 8016728:	8afa      	ldrh	r2, [r7, #22]
 801672a:	8abb      	ldrh	r3, [r7, #20]
 801672c:	1ad3      	subs	r3, r2, r3
 801672e:	b29b      	uxth	r3, r3
 8016730:	e000      	b.n	8016734 <tcp_eff_send_mss_netif+0x50>
 8016732:	2300      	movs	r3, #0
 8016734:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016736:	8a7a      	ldrh	r2, [r7, #18]
 8016738:	89fb      	ldrh	r3, [r7, #14]
 801673a:	4293      	cmp	r3, r2
 801673c:	bf28      	it	cs
 801673e:	4613      	movcs	r3, r2
 8016740:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016742:	89fb      	ldrh	r3, [r7, #14]
}
 8016744:	4618      	mov	r0, r3
 8016746:	3718      	adds	r7, #24
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	0801f584 	.word	0x0801f584
 8016750:	0801fc90 	.word	0x0801fc90
 8016754:	0801f5c8 	.word	0x0801f5c8

08016758 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b084      	sub	sp, #16
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d119      	bne.n	80167a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801676c:	4b10      	ldr	r3, [pc, #64]	; (80167b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801676e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016772:	4910      	ldr	r1, [pc, #64]	; (80167b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016774:	4810      	ldr	r0, [pc, #64]	; (80167b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016776:	f006 ff4d 	bl	801d614 <iprintf>

  while (pcb != NULL) {
 801677a:	e011      	b.n	80167a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681a      	ldr	r2, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	429a      	cmp	r2, r3
 8016786:	d108      	bne.n	801679a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801678e:	68f8      	ldr	r0, [r7, #12]
 8016790:	f7fe ffc2 	bl	8015718 <tcp_abort>
      pcb = next;
 8016794:	68bb      	ldr	r3, [r7, #8]
 8016796:	60fb      	str	r3, [r7, #12]
 8016798:	e002      	b.n	80167a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	68db      	ldr	r3, [r3, #12]
 801679e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d1ea      	bne.n	801677c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80167a6:	bf00      	nop
 80167a8:	bf00      	nop
 80167aa:	3710      	adds	r7, #16
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}
 80167b0:	0801f584 	.word	0x0801f584
 80167b4:	0801fcb8 	.word	0x0801fcb8
 80167b8:	0801f5c8 	.word	0x0801f5c8

080167bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b084      	sub	sp, #16
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d02a      	beq.n	8016822 <tcp_netif_ip_addr_changed+0x66>
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d026      	beq.n	8016822 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80167d4:	4b15      	ldr	r3, [pc, #84]	; (801682c <tcp_netif_ip_addr_changed+0x70>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	4619      	mov	r1, r3
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f7ff ffbc 	bl	8016758 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80167e0:	4b13      	ldr	r3, [pc, #76]	; (8016830 <tcp_netif_ip_addr_changed+0x74>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	4619      	mov	r1, r3
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f7ff ffb6 	bl	8016758 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d017      	beq.n	8016822 <tcp_netif_ip_addr_changed+0x66>
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d013      	beq.n	8016822 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80167fa:	4b0e      	ldr	r3, [pc, #56]	; (8016834 <tcp_netif_ip_addr_changed+0x78>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	60fb      	str	r3, [r7, #12]
 8016800:	e00c      	b.n	801681c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	429a      	cmp	r2, r3
 801680c:	d103      	bne.n	8016816 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	681a      	ldr	r2, [r3, #0]
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	60fb      	str	r3, [r7, #12]
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d1ef      	bne.n	8016802 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016822:	bf00      	nop
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	24022230 	.word	0x24022230
 8016830:	2402223c 	.word	0x2402223c
 8016834:	24022238 	.word	0x24022238

08016838 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016844:	2b00      	cmp	r3, #0
 8016846:	d007      	beq.n	8016858 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801684c:	4618      	mov	r0, r3
 801684e:	f7ff fc3d 	bl	80160cc <tcp_segs_free>
    pcb->ooseq = NULL;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2200      	movs	r2, #0
 8016856:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016858:	bf00      	nop
 801685a:	3708      	adds	r7, #8
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016860:	b590      	push	{r4, r7, lr}
 8016862:	b08d      	sub	sp, #52	; 0x34
 8016864:	af04      	add	r7, sp, #16
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d105      	bne.n	801687c <tcp_input+0x1c>
 8016870:	4b9b      	ldr	r3, [pc, #620]	; (8016ae0 <tcp_input+0x280>)
 8016872:	2283      	movs	r2, #131	; 0x83
 8016874:	499b      	ldr	r1, [pc, #620]	; (8016ae4 <tcp_input+0x284>)
 8016876:	489c      	ldr	r0, [pc, #624]	; (8016ae8 <tcp_input+0x288>)
 8016878:	f006 fecc 	bl	801d614 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	4a9a      	ldr	r2, [pc, #616]	; (8016aec <tcp_input+0x28c>)
 8016882:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	895b      	ldrh	r3, [r3, #10]
 8016888:	2b13      	cmp	r3, #19
 801688a:	f240 83c5 	bls.w	8017018 <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801688e:	4b98      	ldr	r3, [pc, #608]	; (8016af0 <tcp_input+0x290>)
 8016890:	695b      	ldr	r3, [r3, #20]
 8016892:	4a97      	ldr	r2, [pc, #604]	; (8016af0 <tcp_input+0x290>)
 8016894:	6812      	ldr	r2, [r2, #0]
 8016896:	4611      	mov	r1, r2
 8016898:	4618      	mov	r0, r3
 801689a:	f005 fc6b 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801689e:	4603      	mov	r3, r0
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	f040 83bb 	bne.w	801701c <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80168a6:	4b92      	ldr	r3, [pc, #584]	; (8016af0 <tcp_input+0x290>)
 80168a8:	695b      	ldr	r3, [r3, #20]
 80168aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80168ae:	2be0      	cmp	r3, #224	; 0xe0
 80168b0:	f000 83b4 	beq.w	801701c <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80168b4:	4b8d      	ldr	r3, [pc, #564]	; (8016aec <tcp_input+0x28c>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	899b      	ldrh	r3, [r3, #12]
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	4618      	mov	r0, r3
 80168be:	f7fc fcd9 	bl	8013274 <lwip_htons>
 80168c2:	4603      	mov	r3, r0
 80168c4:	0b1b      	lsrs	r3, r3, #12
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	009b      	lsls	r3, r3, #2
 80168cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80168ce:	7cbb      	ldrb	r3, [r7, #18]
 80168d0:	2b13      	cmp	r3, #19
 80168d2:	f240 83a5 	bls.w	8017020 <tcp_input+0x7c0>
 80168d6:	7cbb      	ldrb	r3, [r7, #18]
 80168d8:	b29a      	uxth	r2, r3
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	891b      	ldrh	r3, [r3, #8]
 80168de:	429a      	cmp	r2, r3
 80168e0:	f200 839e 	bhi.w	8017020 <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80168e4:	7cbb      	ldrb	r3, [r7, #18]
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	3b14      	subs	r3, #20
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	4b81      	ldr	r3, [pc, #516]	; (8016af4 <tcp_input+0x294>)
 80168ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80168f0:	4b81      	ldr	r3, [pc, #516]	; (8016af8 <tcp_input+0x298>)
 80168f2:	2200      	movs	r2, #0
 80168f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	895a      	ldrh	r2, [r3, #10]
 80168fa:	7cbb      	ldrb	r3, [r7, #18]
 80168fc:	b29b      	uxth	r3, r3
 80168fe:	429a      	cmp	r2, r3
 8016900:	d309      	bcc.n	8016916 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016902:	4b7c      	ldr	r3, [pc, #496]	; (8016af4 <tcp_input+0x294>)
 8016904:	881a      	ldrh	r2, [r3, #0]
 8016906:	4b7d      	ldr	r3, [pc, #500]	; (8016afc <tcp_input+0x29c>)
 8016908:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801690a:	7cbb      	ldrb	r3, [r7, #18]
 801690c:	4619      	mov	r1, r3
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f7fe f8e8 	bl	8014ae4 <pbuf_remove_header>
 8016914:	e04e      	b.n	80169b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d105      	bne.n	801692a <tcp_input+0xca>
 801691e:	4b70      	ldr	r3, [pc, #448]	; (8016ae0 <tcp_input+0x280>)
 8016920:	22c2      	movs	r2, #194	; 0xc2
 8016922:	4977      	ldr	r1, [pc, #476]	; (8016b00 <tcp_input+0x2a0>)
 8016924:	4870      	ldr	r0, [pc, #448]	; (8016ae8 <tcp_input+0x288>)
 8016926:	f006 fe75 	bl	801d614 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801692a:	2114      	movs	r1, #20
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f7fe f8d9 	bl	8014ae4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	895a      	ldrh	r2, [r3, #10]
 8016936:	4b71      	ldr	r3, [pc, #452]	; (8016afc <tcp_input+0x29c>)
 8016938:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801693a:	4b6e      	ldr	r3, [pc, #440]	; (8016af4 <tcp_input+0x294>)
 801693c:	881a      	ldrh	r2, [r3, #0]
 801693e:	4b6f      	ldr	r3, [pc, #444]	; (8016afc <tcp_input+0x29c>)
 8016940:	881b      	ldrh	r3, [r3, #0]
 8016942:	1ad3      	subs	r3, r2, r3
 8016944:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016946:	4b6d      	ldr	r3, [pc, #436]	; (8016afc <tcp_input+0x29c>)
 8016948:	881b      	ldrh	r3, [r3, #0]
 801694a:	4619      	mov	r1, r3
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7fe f8c9 	bl	8014ae4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	895b      	ldrh	r3, [r3, #10]
 8016958:	8a3a      	ldrh	r2, [r7, #16]
 801695a:	429a      	cmp	r2, r3
 801695c:	f200 8362 	bhi.w	8017024 <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	4a64      	ldr	r2, [pc, #400]	; (8016af8 <tcp_input+0x298>)
 8016968:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	8a3a      	ldrh	r2, [r7, #16]
 8016970:	4611      	mov	r1, r2
 8016972:	4618      	mov	r0, r3
 8016974:	f7fe f8b6 	bl	8014ae4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	891a      	ldrh	r2, [r3, #8]
 801697c:	8a3b      	ldrh	r3, [r7, #16]
 801697e:	1ad3      	subs	r3, r2, r3
 8016980:	b29a      	uxth	r2, r3
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	895b      	ldrh	r3, [r3, #10]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d005      	beq.n	801699a <tcp_input+0x13a>
 801698e:	4b54      	ldr	r3, [pc, #336]	; (8016ae0 <tcp_input+0x280>)
 8016990:	22df      	movs	r2, #223	; 0xdf
 8016992:	495c      	ldr	r1, [pc, #368]	; (8016b04 <tcp_input+0x2a4>)
 8016994:	4854      	ldr	r0, [pc, #336]	; (8016ae8 <tcp_input+0x288>)
 8016996:	f006 fe3d 	bl	801d614 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	891a      	ldrh	r2, [r3, #8]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	891b      	ldrh	r3, [r3, #8]
 80169a4:	429a      	cmp	r2, r3
 80169a6:	d005      	beq.n	80169b4 <tcp_input+0x154>
 80169a8:	4b4d      	ldr	r3, [pc, #308]	; (8016ae0 <tcp_input+0x280>)
 80169aa:	22e0      	movs	r2, #224	; 0xe0
 80169ac:	4956      	ldr	r1, [pc, #344]	; (8016b08 <tcp_input+0x2a8>)
 80169ae:	484e      	ldr	r0, [pc, #312]	; (8016ae8 <tcp_input+0x288>)
 80169b0:	f006 fe30 	bl	801d614 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80169b4:	4b4d      	ldr	r3, [pc, #308]	; (8016aec <tcp_input+0x28c>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	881b      	ldrh	r3, [r3, #0]
 80169ba:	b29b      	uxth	r3, r3
 80169bc:	4a4b      	ldr	r2, [pc, #300]	; (8016aec <tcp_input+0x28c>)
 80169be:	6814      	ldr	r4, [r2, #0]
 80169c0:	4618      	mov	r0, r3
 80169c2:	f7fc fc57 	bl	8013274 <lwip_htons>
 80169c6:	4603      	mov	r3, r0
 80169c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80169ca:	4b48      	ldr	r3, [pc, #288]	; (8016aec <tcp_input+0x28c>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	885b      	ldrh	r3, [r3, #2]
 80169d0:	b29b      	uxth	r3, r3
 80169d2:	4a46      	ldr	r2, [pc, #280]	; (8016aec <tcp_input+0x28c>)
 80169d4:	6814      	ldr	r4, [r2, #0]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7fc fc4c 	bl	8013274 <lwip_htons>
 80169dc:	4603      	mov	r3, r0
 80169de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80169e0:	4b42      	ldr	r3, [pc, #264]	; (8016aec <tcp_input+0x28c>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	685b      	ldr	r3, [r3, #4]
 80169e6:	4a41      	ldr	r2, [pc, #260]	; (8016aec <tcp_input+0x28c>)
 80169e8:	6814      	ldr	r4, [r2, #0]
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7fc fc57 	bl	801329e <lwip_htonl>
 80169f0:	4603      	mov	r3, r0
 80169f2:	6063      	str	r3, [r4, #4]
 80169f4:	6863      	ldr	r3, [r4, #4]
 80169f6:	4a45      	ldr	r2, [pc, #276]	; (8016b0c <tcp_input+0x2ac>)
 80169f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80169fa:	4b3c      	ldr	r3, [pc, #240]	; (8016aec <tcp_input+0x28c>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	689b      	ldr	r3, [r3, #8]
 8016a00:	4a3a      	ldr	r2, [pc, #232]	; (8016aec <tcp_input+0x28c>)
 8016a02:	6814      	ldr	r4, [r2, #0]
 8016a04:	4618      	mov	r0, r3
 8016a06:	f7fc fc4a 	bl	801329e <lwip_htonl>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	60a3      	str	r3, [r4, #8]
 8016a0e:	68a3      	ldr	r3, [r4, #8]
 8016a10:	4a3f      	ldr	r2, [pc, #252]	; (8016b10 <tcp_input+0x2b0>)
 8016a12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016a14:	4b35      	ldr	r3, [pc, #212]	; (8016aec <tcp_input+0x28c>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	89db      	ldrh	r3, [r3, #14]
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	4a33      	ldr	r2, [pc, #204]	; (8016aec <tcp_input+0x28c>)
 8016a1e:	6814      	ldr	r4, [r2, #0]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7fc fc27 	bl	8013274 <lwip_htons>
 8016a26:	4603      	mov	r3, r0
 8016a28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016a2a:	4b30      	ldr	r3, [pc, #192]	; (8016aec <tcp_input+0x28c>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	899b      	ldrh	r3, [r3, #12]
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fc fc1e 	bl	8013274 <lwip_htons>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016a40:	b2da      	uxtb	r2, r3
 8016a42:	4b34      	ldr	r3, [pc, #208]	; (8016b14 <tcp_input+0x2b4>)
 8016a44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	891a      	ldrh	r2, [r3, #8]
 8016a4a:	4b33      	ldr	r3, [pc, #204]	; (8016b18 <tcp_input+0x2b8>)
 8016a4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016a4e:	4b31      	ldr	r3, [pc, #196]	; (8016b14 <tcp_input+0x2b4>)
 8016a50:	781b      	ldrb	r3, [r3, #0]
 8016a52:	f003 0303 	and.w	r3, r3, #3
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d00c      	beq.n	8016a74 <tcp_input+0x214>
    tcplen++;
 8016a5a:	4b2f      	ldr	r3, [pc, #188]	; (8016b18 <tcp_input+0x2b8>)
 8016a5c:	881b      	ldrh	r3, [r3, #0]
 8016a5e:	3301      	adds	r3, #1
 8016a60:	b29a      	uxth	r2, r3
 8016a62:	4b2d      	ldr	r3, [pc, #180]	; (8016b18 <tcp_input+0x2b8>)
 8016a64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	891a      	ldrh	r2, [r3, #8]
 8016a6a:	4b2b      	ldr	r3, [pc, #172]	; (8016b18 <tcp_input+0x2b8>)
 8016a6c:	881b      	ldrh	r3, [r3, #0]
 8016a6e:	429a      	cmp	r2, r3
 8016a70:	f200 82da 	bhi.w	8017028 <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016a74:	2300      	movs	r3, #0
 8016a76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a78:	4b28      	ldr	r3, [pc, #160]	; (8016b1c <tcp_input+0x2bc>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	61fb      	str	r3, [r7, #28]
 8016a7e:	e09d      	b.n	8016bbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	7d1b      	ldrb	r3, [r3, #20]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d105      	bne.n	8016a94 <tcp_input+0x234>
 8016a88:	4b15      	ldr	r3, [pc, #84]	; (8016ae0 <tcp_input+0x280>)
 8016a8a:	22fb      	movs	r2, #251	; 0xfb
 8016a8c:	4924      	ldr	r1, [pc, #144]	; (8016b20 <tcp_input+0x2c0>)
 8016a8e:	4816      	ldr	r0, [pc, #88]	; (8016ae8 <tcp_input+0x288>)
 8016a90:	f006 fdc0 	bl	801d614 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	7d1b      	ldrb	r3, [r3, #20]
 8016a98:	2b0a      	cmp	r3, #10
 8016a9a:	d105      	bne.n	8016aa8 <tcp_input+0x248>
 8016a9c:	4b10      	ldr	r3, [pc, #64]	; (8016ae0 <tcp_input+0x280>)
 8016a9e:	22fc      	movs	r2, #252	; 0xfc
 8016aa0:	4920      	ldr	r1, [pc, #128]	; (8016b24 <tcp_input+0x2c4>)
 8016aa2:	4811      	ldr	r0, [pc, #68]	; (8016ae8 <tcp_input+0x288>)
 8016aa4:	f006 fdb6 	bl	801d614 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016aa8:	69fb      	ldr	r3, [r7, #28]
 8016aaa:	7d1b      	ldrb	r3, [r3, #20]
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d105      	bne.n	8016abc <tcp_input+0x25c>
 8016ab0:	4b0b      	ldr	r3, [pc, #44]	; (8016ae0 <tcp_input+0x280>)
 8016ab2:	22fd      	movs	r2, #253	; 0xfd
 8016ab4:	491c      	ldr	r1, [pc, #112]	; (8016b28 <tcp_input+0x2c8>)
 8016ab6:	480c      	ldr	r0, [pc, #48]	; (8016ae8 <tcp_input+0x288>)
 8016ab8:	f006 fdac 	bl	801d614 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016abc:	69fb      	ldr	r3, [r7, #28]
 8016abe:	7a1b      	ldrb	r3, [r3, #8]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d033      	beq.n	8016b2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	7a1a      	ldrb	r2, [r3, #8]
 8016ac8:	4b09      	ldr	r3, [pc, #36]	; (8016af0 <tcp_input+0x290>)
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ad0:	3301      	adds	r3, #1
 8016ad2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d029      	beq.n	8016b2c <tcp_input+0x2cc>
      prev = pcb;
 8016ad8:	69fb      	ldr	r3, [r7, #28]
 8016ada:	61bb      	str	r3, [r7, #24]
      continue;
 8016adc:	e06b      	b.n	8016bb6 <tcp_input+0x356>
 8016ade:	bf00      	nop
 8016ae0:	0801fcec 	.word	0x0801fcec
 8016ae4:	0801fd20 	.word	0x0801fd20
 8016ae8:	0801fd38 	.word	0x0801fd38
 8016aec:	2401aeac 	.word	0x2401aeac
 8016af0:	2401b7a0 	.word	0x2401b7a0
 8016af4:	2401aeb0 	.word	0x2401aeb0
 8016af8:	2401aeb4 	.word	0x2401aeb4
 8016afc:	2401aeb2 	.word	0x2401aeb2
 8016b00:	0801fd60 	.word	0x0801fd60
 8016b04:	0801fd70 	.word	0x0801fd70
 8016b08:	0801fd7c 	.word	0x0801fd7c
 8016b0c:	2401aebc 	.word	0x2401aebc
 8016b10:	2401aec0 	.word	0x2401aec0
 8016b14:	2401aec8 	.word	0x2401aec8
 8016b18:	2401aec6 	.word	0x2401aec6
 8016b1c:	24022230 	.word	0x24022230
 8016b20:	0801fd9c 	.word	0x0801fd9c
 8016b24:	0801fdc4 	.word	0x0801fdc4
 8016b28:	0801fdf0 	.word	0x0801fdf0
    }

    if (pcb->remote_port == tcphdr->src &&
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	8b1a      	ldrh	r2, [r3, #24]
 8016b30:	4b94      	ldr	r3, [pc, #592]	; (8016d84 <tcp_input+0x524>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	881b      	ldrh	r3, [r3, #0]
 8016b36:	b29b      	uxth	r3, r3
 8016b38:	429a      	cmp	r2, r3
 8016b3a:	d13a      	bne.n	8016bb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016b3c:	69fb      	ldr	r3, [r7, #28]
 8016b3e:	8ada      	ldrh	r2, [r3, #22]
 8016b40:	4b90      	ldr	r3, [pc, #576]	; (8016d84 <tcp_input+0x524>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	885b      	ldrh	r3, [r3, #2]
 8016b46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d132      	bne.n	8016bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b4c:	69fb      	ldr	r3, [r7, #28]
 8016b4e:	685a      	ldr	r2, [r3, #4]
 8016b50:	4b8d      	ldr	r3, [pc, #564]	; (8016d88 <tcp_input+0x528>)
 8016b52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016b54:	429a      	cmp	r2, r3
 8016b56:	d12c      	bne.n	8016bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b58:	69fb      	ldr	r3, [r7, #28]
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	4b8a      	ldr	r3, [pc, #552]	; (8016d88 <tcp_input+0x528>)
 8016b5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d126      	bne.n	8016bb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	68db      	ldr	r3, [r3, #12]
 8016b68:	69fa      	ldr	r2, [r7, #28]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d106      	bne.n	8016b7c <tcp_input+0x31c>
 8016b6e:	4b87      	ldr	r3, [pc, #540]	; (8016d8c <tcp_input+0x52c>)
 8016b70:	f240 120d 	movw	r2, #269	; 0x10d
 8016b74:	4986      	ldr	r1, [pc, #536]	; (8016d90 <tcp_input+0x530>)
 8016b76:	4887      	ldr	r0, [pc, #540]	; (8016d94 <tcp_input+0x534>)
 8016b78:	f006 fd4c 	bl	801d614 <iprintf>
      if (prev != NULL) {
 8016b7c:	69bb      	ldr	r3, [r7, #24]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d00a      	beq.n	8016b98 <tcp_input+0x338>
        prev->next = pcb->next;
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	68da      	ldr	r2, [r3, #12]
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016b8a:	4b83      	ldr	r3, [pc, #524]	; (8016d98 <tcp_input+0x538>)
 8016b8c:	681a      	ldr	r2, [r3, #0]
 8016b8e:	69fb      	ldr	r3, [r7, #28]
 8016b90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016b92:	4a81      	ldr	r2, [pc, #516]	; (8016d98 <tcp_input+0x538>)
 8016b94:	69fb      	ldr	r3, [r7, #28]
 8016b96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016b98:	69fb      	ldr	r3, [r7, #28]
 8016b9a:	68db      	ldr	r3, [r3, #12]
 8016b9c:	69fa      	ldr	r2, [r7, #28]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d111      	bne.n	8016bc6 <tcp_input+0x366>
 8016ba2:	4b7a      	ldr	r3, [pc, #488]	; (8016d8c <tcp_input+0x52c>)
 8016ba4:	f240 1215 	movw	r2, #277	; 0x115
 8016ba8:	497c      	ldr	r1, [pc, #496]	; (8016d9c <tcp_input+0x53c>)
 8016baa:	487a      	ldr	r0, [pc, #488]	; (8016d94 <tcp_input+0x534>)
 8016bac:	f006 fd32 	bl	801d614 <iprintf>
      break;
 8016bb0:	e009      	b.n	8016bc6 <tcp_input+0x366>
    }
    prev = pcb;
 8016bb2:	69fb      	ldr	r3, [r7, #28]
 8016bb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bb6:	69fb      	ldr	r3, [r7, #28]
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	61fb      	str	r3, [r7, #28]
 8016bbc:	69fb      	ldr	r3, [r7, #28]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	f47f af5e 	bne.w	8016a80 <tcp_input+0x220>
 8016bc4:	e000      	b.n	8016bc8 <tcp_input+0x368>
      break;
 8016bc6:	bf00      	nop
  }

  if (pcb == NULL) {
 8016bc8:	69fb      	ldr	r3, [r7, #28]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	f040 8095 	bne.w	8016cfa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bd0:	4b73      	ldr	r3, [pc, #460]	; (8016da0 <tcp_input+0x540>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	61fb      	str	r3, [r7, #28]
 8016bd6:	e03f      	b.n	8016c58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016bd8:	69fb      	ldr	r3, [r7, #28]
 8016bda:	7d1b      	ldrb	r3, [r3, #20]
 8016bdc:	2b0a      	cmp	r3, #10
 8016bde:	d006      	beq.n	8016bee <tcp_input+0x38e>
 8016be0:	4b6a      	ldr	r3, [pc, #424]	; (8016d8c <tcp_input+0x52c>)
 8016be2:	f240 121f 	movw	r2, #287	; 0x11f
 8016be6:	496f      	ldr	r1, [pc, #444]	; (8016da4 <tcp_input+0x544>)
 8016be8:	486a      	ldr	r0, [pc, #424]	; (8016d94 <tcp_input+0x534>)
 8016bea:	f006 fd13 	bl	801d614 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016bee:	69fb      	ldr	r3, [r7, #28]
 8016bf0:	7a1b      	ldrb	r3, [r3, #8]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d009      	beq.n	8016c0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016bf6:	69fb      	ldr	r3, [r7, #28]
 8016bf8:	7a1a      	ldrb	r2, [r3, #8]
 8016bfa:	4b63      	ldr	r3, [pc, #396]	; (8016d88 <tcp_input+0x528>)
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c02:	3301      	adds	r3, #1
 8016c04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d122      	bne.n	8016c50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016c0a:	69fb      	ldr	r3, [r7, #28]
 8016c0c:	8b1a      	ldrh	r2, [r3, #24]
 8016c0e:	4b5d      	ldr	r3, [pc, #372]	; (8016d84 <tcp_input+0x524>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	881b      	ldrh	r3, [r3, #0]
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d11b      	bne.n	8016c52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016c1a:	69fb      	ldr	r3, [r7, #28]
 8016c1c:	8ada      	ldrh	r2, [r3, #22]
 8016c1e:	4b59      	ldr	r3, [pc, #356]	; (8016d84 <tcp_input+0x524>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	885b      	ldrh	r3, [r3, #2]
 8016c24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d113      	bne.n	8016c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	685a      	ldr	r2, [r3, #4]
 8016c2e:	4b56      	ldr	r3, [pc, #344]	; (8016d88 <tcp_input+0x528>)
 8016c30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d10d      	bne.n	8016c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	4b53      	ldr	r3, [pc, #332]	; (8016d88 <tcp_input+0x528>)
 8016c3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	d107      	bne.n	8016c52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016c42:	69f8      	ldr	r0, [r7, #28]
 8016c44:	f000 fb56 	bl	80172f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016c48:	6878      	ldr	r0, [r7, #4]
 8016c4a:	f7fd ffd1 	bl	8014bf0 <pbuf_free>
        return;
 8016c4e:	e1f1      	b.n	8017034 <tcp_input+0x7d4>
        continue;
 8016c50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	68db      	ldr	r3, [r3, #12]
 8016c56:	61fb      	str	r3, [r7, #28]
 8016c58:	69fb      	ldr	r3, [r7, #28]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d1bc      	bne.n	8016bd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016c62:	4b51      	ldr	r3, [pc, #324]	; (8016da8 <tcp_input+0x548>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	617b      	str	r3, [r7, #20]
 8016c68:	e02a      	b.n	8016cc0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016c6a:	697b      	ldr	r3, [r7, #20]
 8016c6c:	7a1b      	ldrb	r3, [r3, #8]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d00c      	beq.n	8016c8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	7a1a      	ldrb	r2, [r3, #8]
 8016c76:	4b44      	ldr	r3, [pc, #272]	; (8016d88 <tcp_input+0x528>)
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c7e:	3301      	adds	r3, #1
 8016c80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d002      	beq.n	8016c8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	61bb      	str	r3, [r7, #24]
        continue;
 8016c8a:	e016      	b.n	8016cba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016c8c:	697b      	ldr	r3, [r7, #20]
 8016c8e:	8ada      	ldrh	r2, [r3, #22]
 8016c90:	4b3c      	ldr	r3, [pc, #240]	; (8016d84 <tcp_input+0x524>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	885b      	ldrh	r3, [r3, #2]
 8016c96:	b29b      	uxth	r3, r3
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d10c      	bne.n	8016cb6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	4b39      	ldr	r3, [pc, #228]	; (8016d88 <tcp_input+0x528>)
 8016ca2:	695b      	ldr	r3, [r3, #20]
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d00f      	beq.n	8016cc8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d00d      	beq.n	8016cca <tcp_input+0x46a>
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d009      	beq.n	8016cca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016cb6:	697b      	ldr	r3, [r7, #20]
 8016cb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	68db      	ldr	r3, [r3, #12]
 8016cbe:	617b      	str	r3, [r7, #20]
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d1d1      	bne.n	8016c6a <tcp_input+0x40a>
 8016cc6:	e000      	b.n	8016cca <tcp_input+0x46a>
            break;
 8016cc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d014      	beq.n	8016cfa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016cd0:	69bb      	ldr	r3, [r7, #24]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d00a      	beq.n	8016cec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	68da      	ldr	r2, [r3, #12]
 8016cda:	69bb      	ldr	r3, [r7, #24]
 8016cdc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016cde:	4b32      	ldr	r3, [pc, #200]	; (8016da8 <tcp_input+0x548>)
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016ce6:	4a30      	ldr	r2, [pc, #192]	; (8016da8 <tcp_input+0x548>)
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016cec:	6978      	ldr	r0, [r7, #20]
 8016cee:	f000 fa03 	bl	80170f8 <tcp_listen_input>
      }
      pbuf_free(p);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f7fd ff7c 	bl	8014bf0 <pbuf_free>
      return;
 8016cf8:	e19c      	b.n	8017034 <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016cfa:	69fb      	ldr	r3, [r7, #28]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	f000 8161 	beq.w	8016fc4 <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016d02:	4b2a      	ldr	r3, [pc, #168]	; (8016dac <tcp_input+0x54c>)
 8016d04:	2200      	movs	r2, #0
 8016d06:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	891a      	ldrh	r2, [r3, #8]
 8016d0c:	4b27      	ldr	r3, [pc, #156]	; (8016dac <tcp_input+0x54c>)
 8016d0e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016d10:	4a26      	ldr	r2, [pc, #152]	; (8016dac <tcp_input+0x54c>)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016d16:	4b1b      	ldr	r3, [pc, #108]	; (8016d84 <tcp_input+0x524>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4a24      	ldr	r2, [pc, #144]	; (8016dac <tcp_input+0x54c>)
 8016d1c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016d1e:	4b24      	ldr	r3, [pc, #144]	; (8016db0 <tcp_input+0x550>)
 8016d20:	2200      	movs	r2, #0
 8016d22:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016d24:	4b23      	ldr	r3, [pc, #140]	; (8016db4 <tcp_input+0x554>)
 8016d26:	2200      	movs	r2, #0
 8016d28:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016d2a:	4b23      	ldr	r3, [pc, #140]	; (8016db8 <tcp_input+0x558>)
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016d30:	4b22      	ldr	r3, [pc, #136]	; (8016dbc <tcp_input+0x55c>)
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	f003 0308 	and.w	r3, r3, #8
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d006      	beq.n	8016d4a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	7b5b      	ldrb	r3, [r3, #13]
 8016d40:	f043 0301 	orr.w	r3, r3, #1
 8016d44:	b2da      	uxtb	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016d4a:	69fb      	ldr	r3, [r7, #28]
 8016d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d038      	beq.n	8016dc4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016d52:	69f8      	ldr	r0, [r7, #28]
 8016d54:	f7ff f93c 	bl	8015fd0 <tcp_process_refused_data>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	f113 0f0d 	cmn.w	r3, #13
 8016d5e:	d007      	beq.n	8016d70 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016d60:	69fb      	ldr	r3, [r7, #28]
 8016d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d02d      	beq.n	8016dc4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016d68:	4b15      	ldr	r3, [pc, #84]	; (8016dc0 <tcp_input+0x560>)
 8016d6a:	881b      	ldrh	r3, [r3, #0]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d029      	beq.n	8016dc4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016d70:	69fb      	ldr	r3, [r7, #28]
 8016d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	f040 8105 	bne.w	8016f84 <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016d7a:	69f8      	ldr	r0, [r7, #28]
 8016d7c:	f003 f9c0 	bl	801a100 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016d80:	e100      	b.n	8016f84 <tcp_input+0x724>
 8016d82:	bf00      	nop
 8016d84:	2401aeac 	.word	0x2401aeac
 8016d88:	2401b7a0 	.word	0x2401b7a0
 8016d8c:	0801fcec 	.word	0x0801fcec
 8016d90:	0801fe18 	.word	0x0801fe18
 8016d94:	0801fd38 	.word	0x0801fd38
 8016d98:	24022230 	.word	0x24022230
 8016d9c:	0801fe44 	.word	0x0801fe44
 8016da0:	24022240 	.word	0x24022240
 8016da4:	0801fe70 	.word	0x0801fe70
 8016da8:	24022238 	.word	0x24022238
 8016dac:	2401ae9c 	.word	0x2401ae9c
 8016db0:	2401aecc 	.word	0x2401aecc
 8016db4:	2401aec9 	.word	0x2401aec9
 8016db8:	2401aec4 	.word	0x2401aec4
 8016dbc:	2401aec8 	.word	0x2401aec8
 8016dc0:	2401aec6 	.word	0x2401aec6
      }
    }
    tcp_input_pcb = pcb;
 8016dc4:	4a9d      	ldr	r2, [pc, #628]	; (801703c <tcp_input+0x7dc>)
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016dca:	69f8      	ldr	r0, [r7, #28]
 8016dcc:	f000 fb0c 	bl	80173e8 <tcp_process>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016dd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016dd8:	f113 0f0d 	cmn.w	r3, #13
 8016ddc:	f000 80d4 	beq.w	8016f88 <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 8016de0:	4b97      	ldr	r3, [pc, #604]	; (8017040 <tcp_input+0x7e0>)
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	f003 0308 	and.w	r3, r3, #8
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d015      	beq.n	8016e18 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016dec:	69fb      	ldr	r3, [r7, #28]
 8016dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d008      	beq.n	8016e08 <tcp_input+0x5a8>
 8016df6:	69fb      	ldr	r3, [r7, #28]
 8016df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016dfc:	69fa      	ldr	r2, [r7, #28]
 8016dfe:	6912      	ldr	r2, [r2, #16]
 8016e00:	f06f 010d 	mvn.w	r1, #13
 8016e04:	4610      	mov	r0, r2
 8016e06:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016e08:	69f9      	ldr	r1, [r7, #28]
 8016e0a:	488e      	ldr	r0, [pc, #568]	; (8017044 <tcp_input+0x7e4>)
 8016e0c:	f7ff fbb0 	bl	8016570 <tcp_pcb_remove>
        tcp_free(pcb);
 8016e10:	69f8      	ldr	r0, [r7, #28]
 8016e12:	f7fe f999 	bl	8015148 <tcp_free>
 8016e16:	e0c2      	b.n	8016f9e <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016e1c:	4b8a      	ldr	r3, [pc, #552]	; (8017048 <tcp_input+0x7e8>)
 8016e1e:	881b      	ldrh	r3, [r3, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d01d      	beq.n	8016e60 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016e24:	4b88      	ldr	r3, [pc, #544]	; (8017048 <tcp_input+0x7e8>)
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016e2a:	69fb      	ldr	r3, [r7, #28]
 8016e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d00a      	beq.n	8016e4a <tcp_input+0x5ea>
 8016e34:	69fb      	ldr	r3, [r7, #28]
 8016e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016e3a:	69fa      	ldr	r2, [r7, #28]
 8016e3c:	6910      	ldr	r0, [r2, #16]
 8016e3e:	89fa      	ldrh	r2, [r7, #14]
 8016e40:	69f9      	ldr	r1, [r7, #28]
 8016e42:	4798      	blx	r3
 8016e44:	4603      	mov	r3, r0
 8016e46:	74fb      	strb	r3, [r7, #19]
 8016e48:	e001      	b.n	8016e4e <tcp_input+0x5ee>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016e4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e52:	f113 0f0d 	cmn.w	r3, #13
 8016e56:	f000 8099 	beq.w	8016f8c <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016e5a:	4b7b      	ldr	r3, [pc, #492]	; (8017048 <tcp_input+0x7e8>)
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016e60:	69f8      	ldr	r0, [r7, #28]
 8016e62:	f000 f909 	bl	8017078 <tcp_input_delayed_close>
 8016e66:	4603      	mov	r3, r0
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	f040 8091 	bne.w	8016f90 <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016e6e:	4b77      	ldr	r3, [pc, #476]	; (801704c <tcp_input+0x7ec>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d041      	beq.n	8016efa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d006      	beq.n	8016e8c <tcp_input+0x62c>
 8016e7e:	4b74      	ldr	r3, [pc, #464]	; (8017050 <tcp_input+0x7f0>)
 8016e80:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016e84:	4973      	ldr	r1, [pc, #460]	; (8017054 <tcp_input+0x7f4>)
 8016e86:	4874      	ldr	r0, [pc, #464]	; (8017058 <tcp_input+0x7f8>)
 8016e88:	f006 fbc4 	bl	801d614 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016e8c:	69fb      	ldr	r3, [r7, #28]
 8016e8e:	8b5b      	ldrh	r3, [r3, #26]
 8016e90:	f003 0310 	and.w	r3, r3, #16
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d008      	beq.n	8016eaa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016e98:	4b6c      	ldr	r3, [pc, #432]	; (801704c <tcp_input+0x7ec>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7fd fea7 	bl	8014bf0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016ea2:	69f8      	ldr	r0, [r7, #28]
 8016ea4:	f7fe fc38 	bl	8015718 <tcp_abort>
            goto aborted;
 8016ea8:	e079      	b.n	8016f9e <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016eaa:	69fb      	ldr	r3, [r7, #28]
 8016eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d00c      	beq.n	8016ece <tcp_input+0x66e>
 8016eb4:	69fb      	ldr	r3, [r7, #28]
 8016eb6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	6918      	ldr	r0, [r3, #16]
 8016ebe:	4b63      	ldr	r3, [pc, #396]	; (801704c <tcp_input+0x7ec>)
 8016ec0:	681a      	ldr	r2, [r3, #0]
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	69f9      	ldr	r1, [r7, #28]
 8016ec6:	47a0      	blx	r4
 8016ec8:	4603      	mov	r3, r0
 8016eca:	74fb      	strb	r3, [r7, #19]
 8016ecc:	e008      	b.n	8016ee0 <tcp_input+0x680>
 8016ece:	4b5f      	ldr	r3, [pc, #380]	; (801704c <tcp_input+0x7ec>)
 8016ed0:	681a      	ldr	r2, [r3, #0]
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	69f9      	ldr	r1, [r7, #28]
 8016ed6:	2000      	movs	r0, #0
 8016ed8:	f7ff f952 	bl	8016180 <tcp_recv_null>
 8016edc:	4603      	mov	r3, r0
 8016ede:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016ee0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ee4:	f113 0f0d 	cmn.w	r3, #13
 8016ee8:	d054      	beq.n	8016f94 <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016eea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d003      	beq.n	8016efa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016ef2:	4b56      	ldr	r3, [pc, #344]	; (801704c <tcp_input+0x7ec>)
 8016ef4:	681a      	ldr	r2, [r3, #0]
 8016ef6:	69fb      	ldr	r3, [r7, #28]
 8016ef8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016efa:	4b51      	ldr	r3, [pc, #324]	; (8017040 <tcp_input+0x7e0>)
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	f003 0320 	and.w	r3, r3, #32
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d031      	beq.n	8016f6a <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 8016f06:	69fb      	ldr	r3, [r7, #28]
 8016f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d009      	beq.n	8016f22 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016f0e:	69fb      	ldr	r3, [r7, #28]
 8016f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f12:	7b5a      	ldrb	r2, [r3, #13]
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f18:	f042 0220 	orr.w	r2, r2, #32
 8016f1c:	b2d2      	uxtb	r2, r2
 8016f1e:	735a      	strb	r2, [r3, #13]
 8016f20:	e023      	b.n	8016f6a <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016f22:	69fb      	ldr	r3, [r7, #28]
 8016f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f26:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	d005      	beq.n	8016f3a <tcp_input+0x6da>
              pcb->rcv_wnd++;
 8016f2e:	69fb      	ldr	r3, [r7, #28]
 8016f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f32:	3301      	adds	r3, #1
 8016f34:	b29a      	uxth	r2, r3
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016f3a:	69fb      	ldr	r3, [r7, #28]
 8016f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d00b      	beq.n	8016f5c <tcp_input+0x6fc>
 8016f44:	69fb      	ldr	r3, [r7, #28]
 8016f46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016f4a:	69fb      	ldr	r3, [r7, #28]
 8016f4c:	6918      	ldr	r0, [r3, #16]
 8016f4e:	2300      	movs	r3, #0
 8016f50:	2200      	movs	r2, #0
 8016f52:	69f9      	ldr	r1, [r7, #28]
 8016f54:	47a0      	blx	r4
 8016f56:	4603      	mov	r3, r0
 8016f58:	74fb      	strb	r3, [r7, #19]
 8016f5a:	e001      	b.n	8016f60 <tcp_input+0x700>
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f64:	f113 0f0d 	cmn.w	r3, #13
 8016f68:	d016      	beq.n	8016f98 <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016f6a:	4b34      	ldr	r3, [pc, #208]	; (801703c <tcp_input+0x7dc>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016f70:	69f8      	ldr	r0, [r7, #28]
 8016f72:	f000 f881 	bl	8017078 <tcp_input_delayed_close>
 8016f76:	4603      	mov	r3, r0
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d10f      	bne.n	8016f9c <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016f7c:	69f8      	ldr	r0, [r7, #28]
 8016f7e:	f002 fab9 	bl	80194f4 <tcp_output>
 8016f82:	e00c      	b.n	8016f9e <tcp_input+0x73e>
        goto aborted;
 8016f84:	bf00      	nop
 8016f86:	e00a      	b.n	8016f9e <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016f88:	bf00      	nop
 8016f8a:	e008      	b.n	8016f9e <tcp_input+0x73e>
              goto aborted;
 8016f8c:	bf00      	nop
 8016f8e:	e006      	b.n	8016f9e <tcp_input+0x73e>
          goto aborted;
 8016f90:	bf00      	nop
 8016f92:	e004      	b.n	8016f9e <tcp_input+0x73e>
            goto aborted;
 8016f94:	bf00      	nop
 8016f96:	e002      	b.n	8016f9e <tcp_input+0x73e>
              goto aborted;
 8016f98:	bf00      	nop
 8016f9a:	e000      	b.n	8016f9e <tcp_input+0x73e>
          goto aborted;
 8016f9c:	bf00      	nop
    tcp_input_pcb = NULL;
 8016f9e:	4b27      	ldr	r3, [pc, #156]	; (801703c <tcp_input+0x7dc>)
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016fa4:	4b29      	ldr	r3, [pc, #164]	; (801704c <tcp_input+0x7ec>)
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016faa:	4b2c      	ldr	r3, [pc, #176]	; (801705c <tcp_input+0x7fc>)
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d03f      	beq.n	8017032 <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 8016fb2:	4b2a      	ldr	r3, [pc, #168]	; (801705c <tcp_input+0x7fc>)
 8016fb4:	685b      	ldr	r3, [r3, #4]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f7fd fe1a 	bl	8014bf0 <pbuf_free>
      inseg.p = NULL;
 8016fbc:	4b27      	ldr	r3, [pc, #156]	; (801705c <tcp_input+0x7fc>)
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016fc2:	e036      	b.n	8017032 <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016fc4:	4b26      	ldr	r3, [pc, #152]	; (8017060 <tcp_input+0x800>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	899b      	ldrh	r3, [r3, #12]
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7fc f951 	bl	8013274 <lwip_htons>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	f003 0304 	and.w	r3, r3, #4
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d118      	bne.n	8017010 <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fde:	4b21      	ldr	r3, [pc, #132]	; (8017064 <tcp_input+0x804>)
 8016fe0:	6819      	ldr	r1, [r3, #0]
 8016fe2:	4b21      	ldr	r3, [pc, #132]	; (8017068 <tcp_input+0x808>)
 8016fe4:	881b      	ldrh	r3, [r3, #0]
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	4b20      	ldr	r3, [pc, #128]	; (801706c <tcp_input+0x80c>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fee:	4b1c      	ldr	r3, [pc, #112]	; (8017060 <tcp_input+0x800>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ff2:	885b      	ldrh	r3, [r3, #2]
 8016ff4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ff6:	4a1a      	ldr	r2, [pc, #104]	; (8017060 <tcp_input+0x800>)
 8016ff8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ffa:	8812      	ldrh	r2, [r2, #0]
 8016ffc:	b292      	uxth	r2, r2
 8016ffe:	9202      	str	r2, [sp, #8]
 8017000:	9301      	str	r3, [sp, #4]
 8017002:	4b1b      	ldr	r3, [pc, #108]	; (8017070 <tcp_input+0x810>)
 8017004:	9300      	str	r3, [sp, #0]
 8017006:	4b1b      	ldr	r3, [pc, #108]	; (8017074 <tcp_input+0x814>)
 8017008:	4602      	mov	r2, r0
 801700a:	2000      	movs	r0, #0
 801700c:	f003 f826 	bl	801a05c <tcp_rst>
    pbuf_free(p);
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f7fd fded 	bl	8014bf0 <pbuf_free>
  return;
 8017016:	e00c      	b.n	8017032 <tcp_input+0x7d2>
    goto dropped;
 8017018:	bf00      	nop
 801701a:	e006      	b.n	801702a <tcp_input+0x7ca>
    goto dropped;
 801701c:	bf00      	nop
 801701e:	e004      	b.n	801702a <tcp_input+0x7ca>
    goto dropped;
 8017020:	bf00      	nop
 8017022:	e002      	b.n	801702a <tcp_input+0x7ca>
      goto dropped;
 8017024:	bf00      	nop
 8017026:	e000      	b.n	801702a <tcp_input+0x7ca>
      goto dropped;
 8017028:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f7fd fde0 	bl	8014bf0 <pbuf_free>
 8017030:	e000      	b.n	8017034 <tcp_input+0x7d4>
  return;
 8017032:	bf00      	nop
}
 8017034:	3724      	adds	r7, #36	; 0x24
 8017036:	46bd      	mov	sp, r7
 8017038:	bd90      	pop	{r4, r7, pc}
 801703a:	bf00      	nop
 801703c:	24022244 	.word	0x24022244
 8017040:	2401aec9 	.word	0x2401aec9
 8017044:	24022230 	.word	0x24022230
 8017048:	2401aec4 	.word	0x2401aec4
 801704c:	2401aecc 	.word	0x2401aecc
 8017050:	0801fcec 	.word	0x0801fcec
 8017054:	0801fea0 	.word	0x0801fea0
 8017058:	0801fd38 	.word	0x0801fd38
 801705c:	2401ae9c 	.word	0x2401ae9c
 8017060:	2401aeac 	.word	0x2401aeac
 8017064:	2401aec0 	.word	0x2401aec0
 8017068:	2401aec6 	.word	0x2401aec6
 801706c:	2401aebc 	.word	0x2401aebc
 8017070:	2401b7b0 	.word	0x2401b7b0
 8017074:	2401b7b4 	.word	0x2401b7b4

08017078 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b082      	sub	sp, #8
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d106      	bne.n	8017094 <tcp_input_delayed_close+0x1c>
 8017086:	4b17      	ldr	r3, [pc, #92]	; (80170e4 <tcp_input_delayed_close+0x6c>)
 8017088:	f240 225a 	movw	r2, #602	; 0x25a
 801708c:	4916      	ldr	r1, [pc, #88]	; (80170e8 <tcp_input_delayed_close+0x70>)
 801708e:	4817      	ldr	r0, [pc, #92]	; (80170ec <tcp_input_delayed_close+0x74>)
 8017090:	f006 fac0 	bl	801d614 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017094:	4b16      	ldr	r3, [pc, #88]	; (80170f0 <tcp_input_delayed_close+0x78>)
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	f003 0310 	and.w	r3, r3, #16
 801709c:	2b00      	cmp	r3, #0
 801709e:	d01c      	beq.n	80170da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	8b5b      	ldrh	r3, [r3, #26]
 80170a4:	f003 0310 	and.w	r3, r3, #16
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d10d      	bne.n	80170c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d008      	beq.n	80170c8 <tcp_input_delayed_close+0x50>
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	6912      	ldr	r2, [r2, #16]
 80170c0:	f06f 010e 	mvn.w	r1, #14
 80170c4:	4610      	mov	r0, r2
 80170c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80170c8:	6879      	ldr	r1, [r7, #4]
 80170ca:	480a      	ldr	r0, [pc, #40]	; (80170f4 <tcp_input_delayed_close+0x7c>)
 80170cc:	f7ff fa50 	bl	8016570 <tcp_pcb_remove>
    tcp_free(pcb);
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	f7fe f839 	bl	8015148 <tcp_free>
    return 1;
 80170d6:	2301      	movs	r3, #1
 80170d8:	e000      	b.n	80170dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80170da:	2300      	movs	r3, #0
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3708      	adds	r7, #8
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	0801fcec 	.word	0x0801fcec
 80170e8:	0801febc 	.word	0x0801febc
 80170ec:	0801fd38 	.word	0x0801fd38
 80170f0:	2401aec9 	.word	0x2401aec9
 80170f4:	24022230 	.word	0x24022230

080170f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80170f8:	b590      	push	{r4, r7, lr}
 80170fa:	b08b      	sub	sp, #44	; 0x2c
 80170fc:	af04      	add	r7, sp, #16
 80170fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017100:	4b6f      	ldr	r3, [pc, #444]	; (80172c0 <tcp_listen_input+0x1c8>)
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	f003 0304 	and.w	r3, r3, #4
 8017108:	2b00      	cmp	r3, #0
 801710a:	f040 80d2 	bne.w	80172b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d106      	bne.n	8017122 <tcp_listen_input+0x2a>
 8017114:	4b6b      	ldr	r3, [pc, #428]	; (80172c4 <tcp_listen_input+0x1cc>)
 8017116:	f240 2281 	movw	r2, #641	; 0x281
 801711a:	496b      	ldr	r1, [pc, #428]	; (80172c8 <tcp_listen_input+0x1d0>)
 801711c:	486b      	ldr	r0, [pc, #428]	; (80172cc <tcp_listen_input+0x1d4>)
 801711e:	f006 fa79 	bl	801d614 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017122:	4b67      	ldr	r3, [pc, #412]	; (80172c0 <tcp_listen_input+0x1c8>)
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	f003 0310 	and.w	r3, r3, #16
 801712a:	2b00      	cmp	r3, #0
 801712c:	d019      	beq.n	8017162 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801712e:	4b68      	ldr	r3, [pc, #416]	; (80172d0 <tcp_listen_input+0x1d8>)
 8017130:	6819      	ldr	r1, [r3, #0]
 8017132:	4b68      	ldr	r3, [pc, #416]	; (80172d4 <tcp_listen_input+0x1dc>)
 8017134:	881b      	ldrh	r3, [r3, #0]
 8017136:	461a      	mov	r2, r3
 8017138:	4b67      	ldr	r3, [pc, #412]	; (80172d8 <tcp_listen_input+0x1e0>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801713e:	4b67      	ldr	r3, [pc, #412]	; (80172dc <tcp_listen_input+0x1e4>)
 8017140:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017142:	885b      	ldrh	r3, [r3, #2]
 8017144:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017146:	4a65      	ldr	r2, [pc, #404]	; (80172dc <tcp_listen_input+0x1e4>)
 8017148:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801714a:	8812      	ldrh	r2, [r2, #0]
 801714c:	b292      	uxth	r2, r2
 801714e:	9202      	str	r2, [sp, #8]
 8017150:	9301      	str	r3, [sp, #4]
 8017152:	4b63      	ldr	r3, [pc, #396]	; (80172e0 <tcp_listen_input+0x1e8>)
 8017154:	9300      	str	r3, [sp, #0]
 8017156:	4b63      	ldr	r3, [pc, #396]	; (80172e4 <tcp_listen_input+0x1ec>)
 8017158:	4602      	mov	r2, r0
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f002 ff7e 	bl	801a05c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017160:	e0a9      	b.n	80172b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017162:	4b57      	ldr	r3, [pc, #348]	; (80172c0 <tcp_listen_input+0x1c8>)
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	f003 0302 	and.w	r3, r3, #2
 801716a:	2b00      	cmp	r3, #0
 801716c:	f000 80a3 	beq.w	80172b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	7d5b      	ldrb	r3, [r3, #21]
 8017174:	4618      	mov	r0, r3
 8017176:	f7ff f927 	bl	80163c8 <tcp_alloc>
 801717a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d111      	bne.n	80171a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	699b      	ldr	r3, [r3, #24]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d00a      	beq.n	80171a0 <tcp_listen_input+0xa8>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	699b      	ldr	r3, [r3, #24]
 801718e:	687a      	ldr	r2, [r7, #4]
 8017190:	6910      	ldr	r0, [r2, #16]
 8017192:	f04f 32ff 	mov.w	r2, #4294967295
 8017196:	2100      	movs	r1, #0
 8017198:	4798      	blx	r3
 801719a:	4603      	mov	r3, r0
 801719c:	73bb      	strb	r3, [r7, #14]
      return;
 801719e:	e08b      	b.n	80172b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80171a0:	23f0      	movs	r3, #240	; 0xf0
 80171a2:	73bb      	strb	r3, [r7, #14]
      return;
 80171a4:	e088      	b.n	80172b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80171a6:	4b50      	ldr	r3, [pc, #320]	; (80172e8 <tcp_listen_input+0x1f0>)
 80171a8:	695a      	ldr	r2, [r3, #20]
 80171aa:	697b      	ldr	r3, [r7, #20]
 80171ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80171ae:	4b4e      	ldr	r3, [pc, #312]	; (80172e8 <tcp_listen_input+0x1f0>)
 80171b0:	691a      	ldr	r2, [r3, #16]
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	8ada      	ldrh	r2, [r3, #22]
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80171be:	4b47      	ldr	r3, [pc, #284]	; (80172dc <tcp_listen_input+0x1e4>)
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	881b      	ldrh	r3, [r3, #0]
 80171c4:	b29a      	uxth	r2, r3
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80171ca:	697b      	ldr	r3, [r7, #20]
 80171cc:	2203      	movs	r2, #3
 80171ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80171d0:	4b41      	ldr	r3, [pc, #260]	; (80172d8 <tcp_listen_input+0x1e0>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	1c5a      	adds	r2, r3, #1
 80171d6:	697b      	ldr	r3, [r7, #20]
 80171d8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80171da:	697b      	ldr	r3, [r7, #20]
 80171dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80171e2:	6978      	ldr	r0, [r7, #20]
 80171e4:	f7ff fa58 	bl	8016698 <tcp_next_iss>
 80171e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80171ea:	697b      	ldr	r3, [r7, #20]
 80171ec:	693a      	ldr	r2, [r7, #16]
 80171ee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80171f0:	697b      	ldr	r3, [r7, #20]
 80171f2:	693a      	ldr	r2, [r7, #16]
 80171f4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	693a      	ldr	r2, [r7, #16]
 80171fa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	693a      	ldr	r2, [r7, #16]
 8017200:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017202:	4b35      	ldr	r3, [pc, #212]	; (80172d8 <tcp_listen_input+0x1e0>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	1e5a      	subs	r2, r3, #1
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	691a      	ldr	r2, [r3, #16]
 8017210:	697b      	ldr	r3, [r7, #20]
 8017212:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017214:	697b      	ldr	r3, [r7, #20]
 8017216:	687a      	ldr	r2, [r7, #4]
 8017218:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	7a5b      	ldrb	r3, [r3, #9]
 801721e:	f003 030c 	and.w	r3, r3, #12
 8017222:	b2da      	uxtb	r2, r3
 8017224:	697b      	ldr	r3, [r7, #20]
 8017226:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	7a1a      	ldrb	r2, [r3, #8]
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017230:	4b2e      	ldr	r3, [pc, #184]	; (80172ec <tcp_listen_input+0x1f4>)
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	60da      	str	r2, [r3, #12]
 8017238:	4a2c      	ldr	r2, [pc, #176]	; (80172ec <tcp_listen_input+0x1f4>)
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	6013      	str	r3, [r2, #0]
 801723e:	f003 f8cf 	bl	801a3e0 <tcp_timer_needed>
 8017242:	4b2b      	ldr	r3, [pc, #172]	; (80172f0 <tcp_listen_input+0x1f8>)
 8017244:	2201      	movs	r2, #1
 8017246:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017248:	6978      	ldr	r0, [r7, #20]
 801724a:	f001 fd8d 	bl	8018d68 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801724e:	4b23      	ldr	r3, [pc, #140]	; (80172dc <tcp_listen_input+0x1e4>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	89db      	ldrh	r3, [r3, #14]
 8017254:	b29a      	uxth	r2, r3
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801725c:	697b      	ldr	r3, [r7, #20]
 801725e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	3304      	adds	r3, #4
 8017270:	4618      	mov	r0, r3
 8017272:	f004 fce9 	bl	801bc48 <ip4_route>
 8017276:	4601      	mov	r1, r0
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	3304      	adds	r3, #4
 801727c:	461a      	mov	r2, r3
 801727e:	4620      	mov	r0, r4
 8017280:	f7ff fa30 	bl	80166e4 <tcp_eff_send_mss_netif>
 8017284:	4603      	mov	r3, r0
 8017286:	461a      	mov	r2, r3
 8017288:	697b      	ldr	r3, [r7, #20]
 801728a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801728c:	2112      	movs	r1, #18
 801728e:	6978      	ldr	r0, [r7, #20]
 8017290:	f002 f842 	bl	8019318 <tcp_enqueue_flags>
 8017294:	4603      	mov	r3, r0
 8017296:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d004      	beq.n	80172aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80172a0:	2100      	movs	r1, #0
 80172a2:	6978      	ldr	r0, [r7, #20]
 80172a4:	f7fe f97a 	bl	801559c <tcp_abandon>
      return;
 80172a8:	e006      	b.n	80172b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80172aa:	6978      	ldr	r0, [r7, #20]
 80172ac:	f002 f922 	bl	80194f4 <tcp_output>
  return;
 80172b0:	e001      	b.n	80172b6 <tcp_listen_input+0x1be>
    return;
 80172b2:	bf00      	nop
 80172b4:	e000      	b.n	80172b8 <tcp_listen_input+0x1c0>
  return;
 80172b6:	bf00      	nop
}
 80172b8:	371c      	adds	r7, #28
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd90      	pop	{r4, r7, pc}
 80172be:	bf00      	nop
 80172c0:	2401aec8 	.word	0x2401aec8
 80172c4:	0801fcec 	.word	0x0801fcec
 80172c8:	0801fee4 	.word	0x0801fee4
 80172cc:	0801fd38 	.word	0x0801fd38
 80172d0:	2401aec0 	.word	0x2401aec0
 80172d4:	2401aec6 	.word	0x2401aec6
 80172d8:	2401aebc 	.word	0x2401aebc
 80172dc:	2401aeac 	.word	0x2401aeac
 80172e0:	2401b7b0 	.word	0x2401b7b0
 80172e4:	2401b7b4 	.word	0x2401b7b4
 80172e8:	2401b7a0 	.word	0x2401b7a0
 80172ec:	24022230 	.word	0x24022230
 80172f0:	2402222c 	.word	0x2402222c

080172f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b086      	sub	sp, #24
 80172f8:	af04      	add	r7, sp, #16
 80172fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80172fc:	4b2f      	ldr	r3, [pc, #188]	; (80173bc <tcp_timewait_input+0xc8>)
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	f003 0304 	and.w	r3, r3, #4
 8017304:	2b00      	cmp	r3, #0
 8017306:	d153      	bne.n	80173b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d106      	bne.n	801731c <tcp_timewait_input+0x28>
 801730e:	4b2c      	ldr	r3, [pc, #176]	; (80173c0 <tcp_timewait_input+0xcc>)
 8017310:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017314:	492b      	ldr	r1, [pc, #172]	; (80173c4 <tcp_timewait_input+0xd0>)
 8017316:	482c      	ldr	r0, [pc, #176]	; (80173c8 <tcp_timewait_input+0xd4>)
 8017318:	f006 f97c 	bl	801d614 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801731c:	4b27      	ldr	r3, [pc, #156]	; (80173bc <tcp_timewait_input+0xc8>)
 801731e:	781b      	ldrb	r3, [r3, #0]
 8017320:	f003 0302 	and.w	r3, r3, #2
 8017324:	2b00      	cmp	r3, #0
 8017326:	d02a      	beq.n	801737e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017328:	4b28      	ldr	r3, [pc, #160]	; (80173cc <tcp_timewait_input+0xd8>)
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017330:	1ad3      	subs	r3, r2, r3
 8017332:	2b00      	cmp	r3, #0
 8017334:	db2d      	blt.n	8017392 <tcp_timewait_input+0x9e>
 8017336:	4b25      	ldr	r3, [pc, #148]	; (80173cc <tcp_timewait_input+0xd8>)
 8017338:	681a      	ldr	r2, [r3, #0]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801733e:	6879      	ldr	r1, [r7, #4]
 8017340:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017342:	440b      	add	r3, r1
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	2b00      	cmp	r3, #0
 8017348:	dc23      	bgt.n	8017392 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801734a:	4b21      	ldr	r3, [pc, #132]	; (80173d0 <tcp_timewait_input+0xdc>)
 801734c:	6819      	ldr	r1, [r3, #0]
 801734e:	4b21      	ldr	r3, [pc, #132]	; (80173d4 <tcp_timewait_input+0xe0>)
 8017350:	881b      	ldrh	r3, [r3, #0]
 8017352:	461a      	mov	r2, r3
 8017354:	4b1d      	ldr	r3, [pc, #116]	; (80173cc <tcp_timewait_input+0xd8>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801735a:	4b1f      	ldr	r3, [pc, #124]	; (80173d8 <tcp_timewait_input+0xe4>)
 801735c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801735e:	885b      	ldrh	r3, [r3, #2]
 8017360:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017362:	4a1d      	ldr	r2, [pc, #116]	; (80173d8 <tcp_timewait_input+0xe4>)
 8017364:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017366:	8812      	ldrh	r2, [r2, #0]
 8017368:	b292      	uxth	r2, r2
 801736a:	9202      	str	r2, [sp, #8]
 801736c:	9301      	str	r3, [sp, #4]
 801736e:	4b1b      	ldr	r3, [pc, #108]	; (80173dc <tcp_timewait_input+0xe8>)
 8017370:	9300      	str	r3, [sp, #0]
 8017372:	4b1b      	ldr	r3, [pc, #108]	; (80173e0 <tcp_timewait_input+0xec>)
 8017374:	4602      	mov	r2, r0
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	f002 fe70 	bl	801a05c <tcp_rst>
      return;
 801737c:	e01b      	b.n	80173b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801737e:	4b0f      	ldr	r3, [pc, #60]	; (80173bc <tcp_timewait_input+0xc8>)
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	f003 0301 	and.w	r3, r3, #1
 8017386:	2b00      	cmp	r3, #0
 8017388:	d003      	beq.n	8017392 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801738a:	4b16      	ldr	r3, [pc, #88]	; (80173e4 <tcp_timewait_input+0xf0>)
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017392:	4b10      	ldr	r3, [pc, #64]	; (80173d4 <tcp_timewait_input+0xe0>)
 8017394:	881b      	ldrh	r3, [r3, #0]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d00c      	beq.n	80173b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	8b5b      	ldrh	r3, [r3, #26]
 801739e:	f043 0302 	orr.w	r3, r3, #2
 80173a2:	b29a      	uxth	r2, r3
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f002 f8a3 	bl	80194f4 <tcp_output>
  }
  return;
 80173ae:	e001      	b.n	80173b4 <tcp_timewait_input+0xc0>
    return;
 80173b0:	bf00      	nop
 80173b2:	e000      	b.n	80173b6 <tcp_timewait_input+0xc2>
  return;
 80173b4:	bf00      	nop
}
 80173b6:	3708      	adds	r7, #8
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}
 80173bc:	2401aec8 	.word	0x2401aec8
 80173c0:	0801fcec 	.word	0x0801fcec
 80173c4:	0801ff04 	.word	0x0801ff04
 80173c8:	0801fd38 	.word	0x0801fd38
 80173cc:	2401aebc 	.word	0x2401aebc
 80173d0:	2401aec0 	.word	0x2401aec0
 80173d4:	2401aec6 	.word	0x2401aec6
 80173d8:	2401aeac 	.word	0x2401aeac
 80173dc:	2401b7b0 	.word	0x2401b7b0
 80173e0:	2401b7b4 	.word	0x2401b7b4
 80173e4:	24022234 	.word	0x24022234

080173e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80173e8:	b590      	push	{r4, r7, lr}
 80173ea:	b08d      	sub	sp, #52	; 0x34
 80173ec:	af04      	add	r7, sp, #16
 80173ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80173f0:	2300      	movs	r3, #0
 80173f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80173f4:	2300      	movs	r3, #0
 80173f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d106      	bne.n	801740c <tcp_process+0x24>
 80173fe:	4ba5      	ldr	r3, [pc, #660]	; (8017694 <tcp_process+0x2ac>)
 8017400:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017404:	49a4      	ldr	r1, [pc, #656]	; (8017698 <tcp_process+0x2b0>)
 8017406:	48a5      	ldr	r0, [pc, #660]	; (801769c <tcp_process+0x2b4>)
 8017408:	f006 f904 	bl	801d614 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801740c:	4ba4      	ldr	r3, [pc, #656]	; (80176a0 <tcp_process+0x2b8>)
 801740e:	781b      	ldrb	r3, [r3, #0]
 8017410:	f003 0304 	and.w	r3, r3, #4
 8017414:	2b00      	cmp	r3, #0
 8017416:	d04e      	beq.n	80174b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	7d1b      	ldrb	r3, [r3, #20]
 801741c:	2b02      	cmp	r3, #2
 801741e:	d108      	bne.n	8017432 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017424:	4b9f      	ldr	r3, [pc, #636]	; (80176a4 <tcp_process+0x2bc>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	429a      	cmp	r2, r3
 801742a:	d123      	bne.n	8017474 <tcp_process+0x8c>
        acceptable = 1;
 801742c:	2301      	movs	r3, #1
 801742e:	76fb      	strb	r3, [r7, #27]
 8017430:	e020      	b.n	8017474 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017436:	4b9c      	ldr	r3, [pc, #624]	; (80176a8 <tcp_process+0x2c0>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	429a      	cmp	r2, r3
 801743c:	d102      	bne.n	8017444 <tcp_process+0x5c>
        acceptable = 1;
 801743e:	2301      	movs	r3, #1
 8017440:	76fb      	strb	r3, [r7, #27]
 8017442:	e017      	b.n	8017474 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017444:	4b98      	ldr	r3, [pc, #608]	; (80176a8 <tcp_process+0x2c0>)
 8017446:	681a      	ldr	r2, [r3, #0]
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801744c:	1ad3      	subs	r3, r2, r3
 801744e:	2b00      	cmp	r3, #0
 8017450:	db10      	blt.n	8017474 <tcp_process+0x8c>
 8017452:	4b95      	ldr	r3, [pc, #596]	; (80176a8 <tcp_process+0x2c0>)
 8017454:	681a      	ldr	r2, [r3, #0]
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801745a:	6879      	ldr	r1, [r7, #4]
 801745c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801745e:	440b      	add	r3, r1
 8017460:	1ad3      	subs	r3, r2, r3
 8017462:	2b00      	cmp	r3, #0
 8017464:	dc06      	bgt.n	8017474 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	8b5b      	ldrh	r3, [r3, #26]
 801746a:	f043 0302 	orr.w	r3, r3, #2
 801746e:	b29a      	uxth	r2, r3
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017474:	7efb      	ldrb	r3, [r7, #27]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d01b      	beq.n	80174b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	7d1b      	ldrb	r3, [r3, #20]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d106      	bne.n	8017490 <tcp_process+0xa8>
 8017482:	4b84      	ldr	r3, [pc, #528]	; (8017694 <tcp_process+0x2ac>)
 8017484:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017488:	4988      	ldr	r1, [pc, #544]	; (80176ac <tcp_process+0x2c4>)
 801748a:	4884      	ldr	r0, [pc, #528]	; (801769c <tcp_process+0x2b4>)
 801748c:	f006 f8c2 	bl	801d614 <iprintf>
      recv_flags |= TF_RESET;
 8017490:	4b87      	ldr	r3, [pc, #540]	; (80176b0 <tcp_process+0x2c8>)
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	f043 0308 	orr.w	r3, r3, #8
 8017498:	b2da      	uxtb	r2, r3
 801749a:	4b85      	ldr	r3, [pc, #532]	; (80176b0 <tcp_process+0x2c8>)
 801749c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	8b5b      	ldrh	r3, [r3, #26]
 80174a2:	f023 0301 	bic.w	r3, r3, #1
 80174a6:	b29a      	uxth	r2, r3
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80174ac:	f06f 030d 	mvn.w	r3, #13
 80174b0:	e37a      	b.n	8017ba8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80174b2:	2300      	movs	r3, #0
 80174b4:	e378      	b.n	8017ba8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80174b6:	4b7a      	ldr	r3, [pc, #488]	; (80176a0 <tcp_process+0x2b8>)
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	f003 0302 	and.w	r3, r3, #2
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d010      	beq.n	80174e4 <tcp_process+0xfc>
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	7d1b      	ldrb	r3, [r3, #20]
 80174c6:	2b02      	cmp	r3, #2
 80174c8:	d00c      	beq.n	80174e4 <tcp_process+0xfc>
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	7d1b      	ldrb	r3, [r3, #20]
 80174ce:	2b03      	cmp	r3, #3
 80174d0:	d008      	beq.n	80174e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	8b5b      	ldrh	r3, [r3, #26]
 80174d6:	f043 0302 	orr.w	r3, r3, #2
 80174da:	b29a      	uxth	r2, r3
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80174e0:	2300      	movs	r3, #0
 80174e2:	e361      	b.n	8017ba8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	8b5b      	ldrh	r3, [r3, #26]
 80174e8:	f003 0310 	and.w	r3, r3, #16
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d103      	bne.n	80174f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80174f0:	4b70      	ldr	r3, [pc, #448]	; (80176b4 <tcp_process+0x2cc>)
 80174f2:	681a      	ldr	r2, [r3, #0]
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2200      	movs	r2, #0
 80174fc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2200      	movs	r2, #0
 8017504:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017508:	6878      	ldr	r0, [r7, #4]
 801750a:	f001 fc2d 	bl	8018d68 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	7d1b      	ldrb	r3, [r3, #20]
 8017512:	3b02      	subs	r3, #2
 8017514:	2b07      	cmp	r3, #7
 8017516:	f200 8337 	bhi.w	8017b88 <tcp_process+0x7a0>
 801751a:	a201      	add	r2, pc, #4	; (adr r2, 8017520 <tcp_process+0x138>)
 801751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017520:	08017541 	.word	0x08017541
 8017524:	08017771 	.word	0x08017771
 8017528:	080178e9 	.word	0x080178e9
 801752c:	08017913 	.word	0x08017913
 8017530:	08017a37 	.word	0x08017a37
 8017534:	080178e9 	.word	0x080178e9
 8017538:	08017ac3 	.word	0x08017ac3
 801753c:	08017b53 	.word	0x08017b53
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017540:	4b57      	ldr	r3, [pc, #348]	; (80176a0 <tcp_process+0x2b8>)
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	f003 0310 	and.w	r3, r3, #16
 8017548:	2b00      	cmp	r3, #0
 801754a:	f000 80e4 	beq.w	8017716 <tcp_process+0x32e>
 801754e:	4b54      	ldr	r3, [pc, #336]	; (80176a0 <tcp_process+0x2b8>)
 8017550:	781b      	ldrb	r3, [r3, #0]
 8017552:	f003 0302 	and.w	r3, r3, #2
 8017556:	2b00      	cmp	r3, #0
 8017558:	f000 80dd 	beq.w	8017716 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017560:	1c5a      	adds	r2, r3, #1
 8017562:	4b50      	ldr	r3, [pc, #320]	; (80176a4 <tcp_process+0x2bc>)
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	429a      	cmp	r2, r3
 8017568:	f040 80d5 	bne.w	8017716 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801756c:	4b4e      	ldr	r3, [pc, #312]	; (80176a8 <tcp_process+0x2c0>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	1c5a      	adds	r2, r3, #1
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801757e:	4b49      	ldr	r3, [pc, #292]	; (80176a4 <tcp_process+0x2bc>)
 8017580:	681a      	ldr	r2, [r3, #0]
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017586:	4b4c      	ldr	r3, [pc, #304]	; (80176b8 <tcp_process+0x2d0>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	89db      	ldrh	r3, [r3, #14]
 801758c:	b29a      	uxth	r2, r3
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80175a0:	4b41      	ldr	r3, [pc, #260]	; (80176a8 <tcp_process+0x2c0>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	1e5a      	subs	r2, r3, #1
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	2204      	movs	r2, #4
 80175ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	3304      	adds	r3, #4
 80175b8:	4618      	mov	r0, r3
 80175ba:	f004 fb45 	bl	801bc48 <ip4_route>
 80175be:	4601      	mov	r1, r0
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	3304      	adds	r3, #4
 80175c4:	461a      	mov	r2, r3
 80175c6:	4620      	mov	r0, r4
 80175c8:	f7ff f88c 	bl	80166e4 <tcp_eff_send_mss_netif>
 80175cc:	4603      	mov	r3, r0
 80175ce:	461a      	mov	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175d8:	009a      	lsls	r2, r3, #2
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175de:	005b      	lsls	r3, r3, #1
 80175e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80175e4:	428b      	cmp	r3, r1
 80175e6:	bf38      	it	cc
 80175e8:	460b      	movcc	r3, r1
 80175ea:	429a      	cmp	r2, r3
 80175ec:	d204      	bcs.n	80175f8 <tcp_process+0x210>
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175f2:	009b      	lsls	r3, r3, #2
 80175f4:	b29b      	uxth	r3, r3
 80175f6:	e00d      	b.n	8017614 <tcp_process+0x22c>
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175fc:	005b      	lsls	r3, r3, #1
 80175fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8017602:	4293      	cmp	r3, r2
 8017604:	d904      	bls.n	8017610 <tcp_process+0x228>
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801760a:	005b      	lsls	r3, r3, #1
 801760c:	b29b      	uxth	r3, r3
 801760e:	e001      	b.n	8017614 <tcp_process+0x22c>
 8017610:	f241 131c 	movw	r3, #4380	; 0x111c
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017620:	2b00      	cmp	r3, #0
 8017622:	d106      	bne.n	8017632 <tcp_process+0x24a>
 8017624:	4b1b      	ldr	r3, [pc, #108]	; (8017694 <tcp_process+0x2ac>)
 8017626:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801762a:	4924      	ldr	r1, [pc, #144]	; (80176bc <tcp_process+0x2d4>)
 801762c:	481b      	ldr	r0, [pc, #108]	; (801769c <tcp_process+0x2b4>)
 801762e:	f005 fff1 	bl	801d614 <iprintf>
        --pcb->snd_queuelen;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017638:	3b01      	subs	r3, #1
 801763a:	b29a      	uxth	r2, r3
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017646:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017648:	69fb      	ldr	r3, [r7, #28]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d111      	bne.n	8017672 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017652:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017654:	69fb      	ldr	r3, [r7, #28]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d106      	bne.n	8017668 <tcp_process+0x280>
 801765a:	4b0e      	ldr	r3, [pc, #56]	; (8017694 <tcp_process+0x2ac>)
 801765c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017660:	4917      	ldr	r1, [pc, #92]	; (80176c0 <tcp_process+0x2d8>)
 8017662:	480e      	ldr	r0, [pc, #56]	; (801769c <tcp_process+0x2b4>)
 8017664:	f005 ffd6 	bl	801d614 <iprintf>
          pcb->unsent = rseg->next;
 8017668:	69fb      	ldr	r3, [r7, #28]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	66da      	str	r2, [r3, #108]	; 0x6c
 8017670:	e003      	b.n	801767a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8017672:	69fb      	ldr	r3, [r7, #28]
 8017674:	681a      	ldr	r2, [r3, #0]
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801767a:	69f8      	ldr	r0, [r7, #28]
 801767c:	f7fe fd3b 	bl	80160f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017684:	2b00      	cmp	r3, #0
 8017686:	d11d      	bne.n	80176c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801768e:	861a      	strh	r2, [r3, #48]	; 0x30
 8017690:	e01f      	b.n	80176d2 <tcp_process+0x2ea>
 8017692:	bf00      	nop
 8017694:	0801fcec 	.word	0x0801fcec
 8017698:	0801ff24 	.word	0x0801ff24
 801769c:	0801fd38 	.word	0x0801fd38
 80176a0:	2401aec8 	.word	0x2401aec8
 80176a4:	2401aec0 	.word	0x2401aec0
 80176a8:	2401aebc 	.word	0x2401aebc
 80176ac:	0801ff40 	.word	0x0801ff40
 80176b0:	2401aec9 	.word	0x2401aec9
 80176b4:	24022234 	.word	0x24022234
 80176b8:	2401aeac 	.word	0x2401aeac
 80176bc:	0801ff60 	.word	0x0801ff60
 80176c0:	0801ff78 	.word	0x0801ff78
        } else {
          pcb->rtime = 0;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2200      	movs	r2, #0
 80176c8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2200      	movs	r2, #0
 80176ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d00a      	beq.n	80176f2 <tcp_process+0x30a>
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80176e2:	687a      	ldr	r2, [r7, #4]
 80176e4:	6910      	ldr	r0, [r2, #16]
 80176e6:	2200      	movs	r2, #0
 80176e8:	6879      	ldr	r1, [r7, #4]
 80176ea:	4798      	blx	r3
 80176ec:	4603      	mov	r3, r0
 80176ee:	76bb      	strb	r3, [r7, #26]
 80176f0:	e001      	b.n	80176f6 <tcp_process+0x30e>
 80176f2:	2300      	movs	r3, #0
 80176f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80176f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80176fa:	f113 0f0d 	cmn.w	r3, #13
 80176fe:	d102      	bne.n	8017706 <tcp_process+0x31e>
          return ERR_ABRT;
 8017700:	f06f 030c 	mvn.w	r3, #12
 8017704:	e250      	b.n	8017ba8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	8b5b      	ldrh	r3, [r3, #26]
 801770a:	f043 0302 	orr.w	r3, r3, #2
 801770e:	b29a      	uxth	r2, r3
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017714:	e23a      	b.n	8017b8c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017716:	4b9d      	ldr	r3, [pc, #628]	; (801798c <tcp_process+0x5a4>)
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	f003 0310 	and.w	r3, r3, #16
 801771e:	2b00      	cmp	r3, #0
 8017720:	f000 8234 	beq.w	8017b8c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017724:	4b9a      	ldr	r3, [pc, #616]	; (8017990 <tcp_process+0x5a8>)
 8017726:	6819      	ldr	r1, [r3, #0]
 8017728:	4b9a      	ldr	r3, [pc, #616]	; (8017994 <tcp_process+0x5ac>)
 801772a:	881b      	ldrh	r3, [r3, #0]
 801772c:	461a      	mov	r2, r3
 801772e:	4b9a      	ldr	r3, [pc, #616]	; (8017998 <tcp_process+0x5b0>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017734:	4b99      	ldr	r3, [pc, #612]	; (801799c <tcp_process+0x5b4>)
 8017736:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017738:	885b      	ldrh	r3, [r3, #2]
 801773a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801773c:	4a97      	ldr	r2, [pc, #604]	; (801799c <tcp_process+0x5b4>)
 801773e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017740:	8812      	ldrh	r2, [r2, #0]
 8017742:	b292      	uxth	r2, r2
 8017744:	9202      	str	r2, [sp, #8]
 8017746:	9301      	str	r3, [sp, #4]
 8017748:	4b95      	ldr	r3, [pc, #596]	; (80179a0 <tcp_process+0x5b8>)
 801774a:	9300      	str	r3, [sp, #0]
 801774c:	4b95      	ldr	r3, [pc, #596]	; (80179a4 <tcp_process+0x5bc>)
 801774e:	4602      	mov	r2, r0
 8017750:	6878      	ldr	r0, [r7, #4]
 8017752:	f002 fc83 	bl	801a05c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801775c:	2b05      	cmp	r3, #5
 801775e:	f200 8215 	bhi.w	8017b8c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2200      	movs	r2, #0
 8017766:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017768:	6878      	ldr	r0, [r7, #4]
 801776a:	f002 fa4d 	bl	8019c08 <tcp_rexmit_rto>
      break;
 801776e:	e20d      	b.n	8017b8c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017770:	4b86      	ldr	r3, [pc, #536]	; (801798c <tcp_process+0x5a4>)
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	f003 0310 	and.w	r3, r3, #16
 8017778:	2b00      	cmp	r3, #0
 801777a:	f000 80a1 	beq.w	80178c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801777e:	4b84      	ldr	r3, [pc, #528]	; (8017990 <tcp_process+0x5a8>)
 8017780:	681a      	ldr	r2, [r3, #0]
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017786:	1ad3      	subs	r3, r2, r3
 8017788:	3b01      	subs	r3, #1
 801778a:	2b00      	cmp	r3, #0
 801778c:	db7e      	blt.n	801788c <tcp_process+0x4a4>
 801778e:	4b80      	ldr	r3, [pc, #512]	; (8017990 <tcp_process+0x5a8>)
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017796:	1ad3      	subs	r3, r2, r3
 8017798:	2b00      	cmp	r3, #0
 801779a:	dc77      	bgt.n	801788c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2204      	movs	r2, #4
 80177a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d102      	bne.n	80177b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80177aa:	23fa      	movs	r3, #250	; 0xfa
 80177ac:	76bb      	strb	r3, [r7, #26]
 80177ae:	e01d      	b.n	80177ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177b4:	699b      	ldr	r3, [r3, #24]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d106      	bne.n	80177c8 <tcp_process+0x3e0>
 80177ba:	4b7b      	ldr	r3, [pc, #492]	; (80179a8 <tcp_process+0x5c0>)
 80177bc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80177c0:	497a      	ldr	r1, [pc, #488]	; (80179ac <tcp_process+0x5c4>)
 80177c2:	487b      	ldr	r0, [pc, #492]	; (80179b0 <tcp_process+0x5c8>)
 80177c4:	f005 ff26 	bl	801d614 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177cc:	699b      	ldr	r3, [r3, #24]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d00a      	beq.n	80177e8 <tcp_process+0x400>
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177d6:	699b      	ldr	r3, [r3, #24]
 80177d8:	687a      	ldr	r2, [r7, #4]
 80177da:	6910      	ldr	r0, [r2, #16]
 80177dc:	2200      	movs	r2, #0
 80177de:	6879      	ldr	r1, [r7, #4]
 80177e0:	4798      	blx	r3
 80177e2:	4603      	mov	r3, r0
 80177e4:	76bb      	strb	r3, [r7, #26]
 80177e6:	e001      	b.n	80177ec <tcp_process+0x404>
 80177e8:	23f0      	movs	r3, #240	; 0xf0
 80177ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80177ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d00a      	beq.n	801780a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80177f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80177f8:	f113 0f0d 	cmn.w	r3, #13
 80177fc:	d002      	beq.n	8017804 <tcp_process+0x41c>
              tcp_abort(pcb);
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f7fd ff8a 	bl	8015718 <tcp_abort>
            }
            return ERR_ABRT;
 8017804:	f06f 030c 	mvn.w	r3, #12
 8017808:	e1ce      	b.n	8017ba8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f000 fae0 	bl	8017dd0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017810:	4b68      	ldr	r3, [pc, #416]	; (80179b4 <tcp_process+0x5cc>)
 8017812:	881b      	ldrh	r3, [r3, #0]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d005      	beq.n	8017824 <tcp_process+0x43c>
            recv_acked--;
 8017818:	4b66      	ldr	r3, [pc, #408]	; (80179b4 <tcp_process+0x5cc>)
 801781a:	881b      	ldrh	r3, [r3, #0]
 801781c:	3b01      	subs	r3, #1
 801781e:	b29a      	uxth	r2, r3
 8017820:	4b64      	ldr	r3, [pc, #400]	; (80179b4 <tcp_process+0x5cc>)
 8017822:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017828:	009a      	lsls	r2, r3, #2
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801782e:	005b      	lsls	r3, r3, #1
 8017830:	f241 111c 	movw	r1, #4380	; 0x111c
 8017834:	428b      	cmp	r3, r1
 8017836:	bf38      	it	cc
 8017838:	460b      	movcc	r3, r1
 801783a:	429a      	cmp	r2, r3
 801783c:	d204      	bcs.n	8017848 <tcp_process+0x460>
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017842:	009b      	lsls	r3, r3, #2
 8017844:	b29b      	uxth	r3, r3
 8017846:	e00d      	b.n	8017864 <tcp_process+0x47c>
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801784c:	005b      	lsls	r3, r3, #1
 801784e:	f241 121c 	movw	r2, #4380	; 0x111c
 8017852:	4293      	cmp	r3, r2
 8017854:	d904      	bls.n	8017860 <tcp_process+0x478>
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801785a:	005b      	lsls	r3, r3, #1
 801785c:	b29b      	uxth	r3, r3
 801785e:	e001      	b.n	8017864 <tcp_process+0x47c>
 8017860:	f241 131c 	movw	r3, #4380	; 0x111c
 8017864:	687a      	ldr	r2, [r7, #4]
 8017866:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801786a:	4b53      	ldr	r3, [pc, #332]	; (80179b8 <tcp_process+0x5d0>)
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	f003 0320 	and.w	r3, r3, #32
 8017872:	2b00      	cmp	r3, #0
 8017874:	d037      	beq.n	80178e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	8b5b      	ldrh	r3, [r3, #26]
 801787a:	f043 0302 	orr.w	r3, r3, #2
 801787e:	b29a      	uxth	r2, r3
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2207      	movs	r2, #7
 8017888:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801788a:	e02c      	b.n	80178e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801788c:	4b40      	ldr	r3, [pc, #256]	; (8017990 <tcp_process+0x5a8>)
 801788e:	6819      	ldr	r1, [r3, #0]
 8017890:	4b40      	ldr	r3, [pc, #256]	; (8017994 <tcp_process+0x5ac>)
 8017892:	881b      	ldrh	r3, [r3, #0]
 8017894:	461a      	mov	r2, r3
 8017896:	4b40      	ldr	r3, [pc, #256]	; (8017998 <tcp_process+0x5b0>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801789c:	4b3f      	ldr	r3, [pc, #252]	; (801799c <tcp_process+0x5b4>)
 801789e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178a0:	885b      	ldrh	r3, [r3, #2]
 80178a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80178a4:	4a3d      	ldr	r2, [pc, #244]	; (801799c <tcp_process+0x5b4>)
 80178a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80178a8:	8812      	ldrh	r2, [r2, #0]
 80178aa:	b292      	uxth	r2, r2
 80178ac:	9202      	str	r2, [sp, #8]
 80178ae:	9301      	str	r3, [sp, #4]
 80178b0:	4b3b      	ldr	r3, [pc, #236]	; (80179a0 <tcp_process+0x5b8>)
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	4b3b      	ldr	r3, [pc, #236]	; (80179a4 <tcp_process+0x5bc>)
 80178b6:	4602      	mov	r2, r0
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f002 fbcf 	bl	801a05c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80178be:	e167      	b.n	8017b90 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80178c0:	4b32      	ldr	r3, [pc, #200]	; (801798c <tcp_process+0x5a4>)
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	f003 0302 	and.w	r3, r3, #2
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	f000 8161 	beq.w	8017b90 <tcp_process+0x7a8>
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178d2:	1e5a      	subs	r2, r3, #1
 80178d4:	4b30      	ldr	r3, [pc, #192]	; (8017998 <tcp_process+0x5b0>)
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	429a      	cmp	r2, r3
 80178da:	f040 8159 	bne.w	8017b90 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f002 f9b4 	bl	8019c4c <tcp_rexmit>
      break;
 80178e4:	e154      	b.n	8017b90 <tcp_process+0x7a8>
 80178e6:	e153      	b.n	8017b90 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	f000 fa71 	bl	8017dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80178ee:	4b32      	ldr	r3, [pc, #200]	; (80179b8 <tcp_process+0x5d0>)
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	f003 0320 	and.w	r3, r3, #32
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	f000 814c 	beq.w	8017b94 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	8b5b      	ldrh	r3, [r3, #26]
 8017900:	f043 0302 	orr.w	r3, r3, #2
 8017904:	b29a      	uxth	r2, r3
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	2207      	movs	r2, #7
 801790e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017910:	e140      	b.n	8017b94 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f000 fa5c 	bl	8017dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017918:	4b27      	ldr	r3, [pc, #156]	; (80179b8 <tcp_process+0x5d0>)
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	f003 0320 	and.w	r3, r3, #32
 8017920:	2b00      	cmp	r3, #0
 8017922:	d071      	beq.n	8017a08 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017924:	4b19      	ldr	r3, [pc, #100]	; (801798c <tcp_process+0x5a4>)
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	f003 0310 	and.w	r3, r3, #16
 801792c:	2b00      	cmp	r3, #0
 801792e:	d060      	beq.n	80179f2 <tcp_process+0x60a>
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017934:	4b16      	ldr	r3, [pc, #88]	; (8017990 <tcp_process+0x5a8>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	429a      	cmp	r2, r3
 801793a:	d15a      	bne.n	80179f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017940:	2b00      	cmp	r3, #0
 8017942:	d156      	bne.n	80179f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	8b5b      	ldrh	r3, [r3, #26]
 8017948:	f043 0302 	orr.w	r3, r3, #2
 801794c:	b29a      	uxth	r2, r3
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f7fe fdbc 	bl	80164d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017958:	4b18      	ldr	r3, [pc, #96]	; (80179bc <tcp_process+0x5d4>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	429a      	cmp	r2, r3
 8017960:	d105      	bne.n	801796e <tcp_process+0x586>
 8017962:	4b16      	ldr	r3, [pc, #88]	; (80179bc <tcp_process+0x5d4>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	68db      	ldr	r3, [r3, #12]
 8017968:	4a14      	ldr	r2, [pc, #80]	; (80179bc <tcp_process+0x5d4>)
 801796a:	6013      	str	r3, [r2, #0]
 801796c:	e02e      	b.n	80179cc <tcp_process+0x5e4>
 801796e:	4b13      	ldr	r3, [pc, #76]	; (80179bc <tcp_process+0x5d4>)
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	617b      	str	r3, [r7, #20]
 8017974:	e027      	b.n	80179c6 <tcp_process+0x5de>
 8017976:	697b      	ldr	r3, [r7, #20]
 8017978:	68db      	ldr	r3, [r3, #12]
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	429a      	cmp	r2, r3
 801797e:	d11f      	bne.n	80179c0 <tcp_process+0x5d8>
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	68da      	ldr	r2, [r3, #12]
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	60da      	str	r2, [r3, #12]
 8017988:	e020      	b.n	80179cc <tcp_process+0x5e4>
 801798a:	bf00      	nop
 801798c:	2401aec8 	.word	0x2401aec8
 8017990:	2401aec0 	.word	0x2401aec0
 8017994:	2401aec6 	.word	0x2401aec6
 8017998:	2401aebc 	.word	0x2401aebc
 801799c:	2401aeac 	.word	0x2401aeac
 80179a0:	2401b7b0 	.word	0x2401b7b0
 80179a4:	2401b7b4 	.word	0x2401b7b4
 80179a8:	0801fcec 	.word	0x0801fcec
 80179ac:	0801ff8c 	.word	0x0801ff8c
 80179b0:	0801fd38 	.word	0x0801fd38
 80179b4:	2401aec4 	.word	0x2401aec4
 80179b8:	2401aec9 	.word	0x2401aec9
 80179bc:	24022230 	.word	0x24022230
 80179c0:	697b      	ldr	r3, [r7, #20]
 80179c2:	68db      	ldr	r3, [r3, #12]
 80179c4:	617b      	str	r3, [r7, #20]
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d1d4      	bne.n	8017976 <tcp_process+0x58e>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	2200      	movs	r2, #0
 80179d0:	60da      	str	r2, [r3, #12]
 80179d2:	4b77      	ldr	r3, [pc, #476]	; (8017bb0 <tcp_process+0x7c8>)
 80179d4:	2201      	movs	r2, #1
 80179d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	220a      	movs	r2, #10
 80179dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80179de:	4b75      	ldr	r3, [pc, #468]	; (8017bb4 <tcp_process+0x7cc>)
 80179e0:	681a      	ldr	r2, [r3, #0]
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	60da      	str	r2, [r3, #12]
 80179e6:	4a73      	ldr	r2, [pc, #460]	; (8017bb4 <tcp_process+0x7cc>)
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	6013      	str	r3, [r2, #0]
 80179ec:	f002 fcf8 	bl	801a3e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80179f0:	e0d2      	b.n	8017b98 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	8b5b      	ldrh	r3, [r3, #26]
 80179f6:	f043 0302 	orr.w	r3, r3, #2
 80179fa:	b29a      	uxth	r2, r3
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	2208      	movs	r2, #8
 8017a04:	751a      	strb	r2, [r3, #20]
      break;
 8017a06:	e0c7      	b.n	8017b98 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017a08:	4b6b      	ldr	r3, [pc, #428]	; (8017bb8 <tcp_process+0x7d0>)
 8017a0a:	781b      	ldrb	r3, [r3, #0]
 8017a0c:	f003 0310 	and.w	r3, r3, #16
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	f000 80c1 	beq.w	8017b98 <tcp_process+0x7b0>
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a1a:	4b68      	ldr	r3, [pc, #416]	; (8017bbc <tcp_process+0x7d4>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	f040 80ba 	bne.w	8017b98 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f040 80b5 	bne.w	8017b98 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2206      	movs	r2, #6
 8017a32:	751a      	strb	r2, [r3, #20]
      break;
 8017a34:	e0b0      	b.n	8017b98 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f000 f9ca 	bl	8017dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017a3c:	4b60      	ldr	r3, [pc, #384]	; (8017bc0 <tcp_process+0x7d8>)
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	f003 0320 	and.w	r3, r3, #32
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	f000 80a9 	beq.w	8017b9c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	8b5b      	ldrh	r3, [r3, #26]
 8017a4e:	f043 0302 	orr.w	r3, r3, #2
 8017a52:	b29a      	uxth	r2, r3
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017a58:	6878      	ldr	r0, [r7, #4]
 8017a5a:	f7fe fd39 	bl	80164d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017a5e:	4b59      	ldr	r3, [pc, #356]	; (8017bc4 <tcp_process+0x7dc>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	687a      	ldr	r2, [r7, #4]
 8017a64:	429a      	cmp	r2, r3
 8017a66:	d105      	bne.n	8017a74 <tcp_process+0x68c>
 8017a68:	4b56      	ldr	r3, [pc, #344]	; (8017bc4 <tcp_process+0x7dc>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	68db      	ldr	r3, [r3, #12]
 8017a6e:	4a55      	ldr	r2, [pc, #340]	; (8017bc4 <tcp_process+0x7dc>)
 8017a70:	6013      	str	r3, [r2, #0]
 8017a72:	e013      	b.n	8017a9c <tcp_process+0x6b4>
 8017a74:	4b53      	ldr	r3, [pc, #332]	; (8017bc4 <tcp_process+0x7dc>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	613b      	str	r3, [r7, #16]
 8017a7a:	e00c      	b.n	8017a96 <tcp_process+0x6ae>
 8017a7c:	693b      	ldr	r3, [r7, #16]
 8017a7e:	68db      	ldr	r3, [r3, #12]
 8017a80:	687a      	ldr	r2, [r7, #4]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d104      	bne.n	8017a90 <tcp_process+0x6a8>
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	68da      	ldr	r2, [r3, #12]
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	60da      	str	r2, [r3, #12]
 8017a8e:	e005      	b.n	8017a9c <tcp_process+0x6b4>
 8017a90:	693b      	ldr	r3, [r7, #16]
 8017a92:	68db      	ldr	r3, [r3, #12]
 8017a94:	613b      	str	r3, [r7, #16]
 8017a96:	693b      	ldr	r3, [r7, #16]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d1ef      	bne.n	8017a7c <tcp_process+0x694>
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	60da      	str	r2, [r3, #12]
 8017aa2:	4b43      	ldr	r3, [pc, #268]	; (8017bb0 <tcp_process+0x7c8>)
 8017aa4:	2201      	movs	r2, #1
 8017aa6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	220a      	movs	r2, #10
 8017aac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017aae:	4b41      	ldr	r3, [pc, #260]	; (8017bb4 <tcp_process+0x7cc>)
 8017ab0:	681a      	ldr	r2, [r3, #0]
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	60da      	str	r2, [r3, #12]
 8017ab6:	4a3f      	ldr	r2, [pc, #252]	; (8017bb4 <tcp_process+0x7cc>)
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	6013      	str	r3, [r2, #0]
 8017abc:	f002 fc90 	bl	801a3e0 <tcp_timer_needed>
      }
      break;
 8017ac0:	e06c      	b.n	8017b9c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017ac2:	6878      	ldr	r0, [r7, #4]
 8017ac4:	f000 f984 	bl	8017dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017ac8:	4b3b      	ldr	r3, [pc, #236]	; (8017bb8 <tcp_process+0x7d0>)
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	f003 0310 	and.w	r3, r3, #16
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d065      	beq.n	8017ba0 <tcp_process+0x7b8>
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ad8:	4b38      	ldr	r3, [pc, #224]	; (8017bbc <tcp_process+0x7d4>)
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d15f      	bne.n	8017ba0 <tcp_process+0x7b8>
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d15b      	bne.n	8017ba0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f7fe fcf1 	bl	80164d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017aee:	4b35      	ldr	r3, [pc, #212]	; (8017bc4 <tcp_process+0x7dc>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	687a      	ldr	r2, [r7, #4]
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d105      	bne.n	8017b04 <tcp_process+0x71c>
 8017af8:	4b32      	ldr	r3, [pc, #200]	; (8017bc4 <tcp_process+0x7dc>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	68db      	ldr	r3, [r3, #12]
 8017afe:	4a31      	ldr	r2, [pc, #196]	; (8017bc4 <tcp_process+0x7dc>)
 8017b00:	6013      	str	r3, [r2, #0]
 8017b02:	e013      	b.n	8017b2c <tcp_process+0x744>
 8017b04:	4b2f      	ldr	r3, [pc, #188]	; (8017bc4 <tcp_process+0x7dc>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	60fb      	str	r3, [r7, #12]
 8017b0a:	e00c      	b.n	8017b26 <tcp_process+0x73e>
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	68db      	ldr	r3, [r3, #12]
 8017b10:	687a      	ldr	r2, [r7, #4]
 8017b12:	429a      	cmp	r2, r3
 8017b14:	d104      	bne.n	8017b20 <tcp_process+0x738>
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	68da      	ldr	r2, [r3, #12]
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	60da      	str	r2, [r3, #12]
 8017b1e:	e005      	b.n	8017b2c <tcp_process+0x744>
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	68db      	ldr	r3, [r3, #12]
 8017b24:	60fb      	str	r3, [r7, #12]
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d1ef      	bne.n	8017b0c <tcp_process+0x724>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	60da      	str	r2, [r3, #12]
 8017b32:	4b1f      	ldr	r3, [pc, #124]	; (8017bb0 <tcp_process+0x7c8>)
 8017b34:	2201      	movs	r2, #1
 8017b36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	220a      	movs	r2, #10
 8017b3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017b3e:	4b1d      	ldr	r3, [pc, #116]	; (8017bb4 <tcp_process+0x7cc>)
 8017b40:	681a      	ldr	r2, [r3, #0]
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	60da      	str	r2, [r3, #12]
 8017b46:	4a1b      	ldr	r2, [pc, #108]	; (8017bb4 <tcp_process+0x7cc>)
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	6013      	str	r3, [r2, #0]
 8017b4c:	f002 fc48 	bl	801a3e0 <tcp_timer_needed>
      }
      break;
 8017b50:	e026      	b.n	8017ba0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017b52:	6878      	ldr	r0, [r7, #4]
 8017b54:	f000 f93c 	bl	8017dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017b58:	4b17      	ldr	r3, [pc, #92]	; (8017bb8 <tcp_process+0x7d0>)
 8017b5a:	781b      	ldrb	r3, [r3, #0]
 8017b5c:	f003 0310 	and.w	r3, r3, #16
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d01f      	beq.n	8017ba4 <tcp_process+0x7bc>
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017b68:	4b14      	ldr	r3, [pc, #80]	; (8017bbc <tcp_process+0x7d4>)
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d119      	bne.n	8017ba4 <tcp_process+0x7bc>
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d115      	bne.n	8017ba4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017b78:	4b11      	ldr	r3, [pc, #68]	; (8017bc0 <tcp_process+0x7d8>)
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	f043 0310 	orr.w	r3, r3, #16
 8017b80:	b2da      	uxtb	r2, r3
 8017b82:	4b0f      	ldr	r3, [pc, #60]	; (8017bc0 <tcp_process+0x7d8>)
 8017b84:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017b86:	e00d      	b.n	8017ba4 <tcp_process+0x7bc>
    default:
      break;
 8017b88:	bf00      	nop
 8017b8a:	e00c      	b.n	8017ba6 <tcp_process+0x7be>
      break;
 8017b8c:	bf00      	nop
 8017b8e:	e00a      	b.n	8017ba6 <tcp_process+0x7be>
      break;
 8017b90:	bf00      	nop
 8017b92:	e008      	b.n	8017ba6 <tcp_process+0x7be>
      break;
 8017b94:	bf00      	nop
 8017b96:	e006      	b.n	8017ba6 <tcp_process+0x7be>
      break;
 8017b98:	bf00      	nop
 8017b9a:	e004      	b.n	8017ba6 <tcp_process+0x7be>
      break;
 8017b9c:	bf00      	nop
 8017b9e:	e002      	b.n	8017ba6 <tcp_process+0x7be>
      break;
 8017ba0:	bf00      	nop
 8017ba2:	e000      	b.n	8017ba6 <tcp_process+0x7be>
      break;
 8017ba4:	bf00      	nop
  }
  return ERR_OK;
 8017ba6:	2300      	movs	r3, #0
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3724      	adds	r7, #36	; 0x24
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd90      	pop	{r4, r7, pc}
 8017bb0:	2402222c 	.word	0x2402222c
 8017bb4:	24022240 	.word	0x24022240
 8017bb8:	2401aec8 	.word	0x2401aec8
 8017bbc:	2401aec0 	.word	0x2401aec0
 8017bc0:	2401aec9 	.word	0x2401aec9
 8017bc4:	24022230 	.word	0x24022230

08017bc8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017bc8:	b590      	push	{r4, r7, lr}
 8017bca:	b085      	sub	sp, #20
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d106      	bne.n	8017be6 <tcp_oos_insert_segment+0x1e>
 8017bd8:	4b3b      	ldr	r3, [pc, #236]	; (8017cc8 <tcp_oos_insert_segment+0x100>)
 8017bda:	f240 421f 	movw	r2, #1055	; 0x41f
 8017bde:	493b      	ldr	r1, [pc, #236]	; (8017ccc <tcp_oos_insert_segment+0x104>)
 8017be0:	483b      	ldr	r0, [pc, #236]	; (8017cd0 <tcp_oos_insert_segment+0x108>)
 8017be2:	f005 fd17 	bl	801d614 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	899b      	ldrh	r3, [r3, #12]
 8017bec:	b29b      	uxth	r3, r3
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7fb fb40 	bl	8013274 <lwip_htons>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	f003 0301 	and.w	r3, r3, #1
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d028      	beq.n	8017c52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017c00:	6838      	ldr	r0, [r7, #0]
 8017c02:	f7fe fa63 	bl	80160cc <tcp_segs_free>
    next = NULL;
 8017c06:	2300      	movs	r3, #0
 8017c08:	603b      	str	r3, [r7, #0]
 8017c0a:	e056      	b.n	8017cba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	68db      	ldr	r3, [r3, #12]
 8017c10:	899b      	ldrh	r3, [r3, #12]
 8017c12:	b29b      	uxth	r3, r3
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7fb fb2d 	bl	8013274 <lwip_htons>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	f003 0301 	and.w	r3, r3, #1
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d00d      	beq.n	8017c42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	68db      	ldr	r3, [r3, #12]
 8017c2a:	899b      	ldrh	r3, [r3, #12]
 8017c2c:	b29c      	uxth	r4, r3
 8017c2e:	2001      	movs	r0, #1
 8017c30:	f7fb fb20 	bl	8013274 <lwip_htons>
 8017c34:	4603      	mov	r3, r0
 8017c36:	461a      	mov	r2, r3
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	68db      	ldr	r3, [r3, #12]
 8017c3c:	4322      	orrs	r2, r4
 8017c3e:	b292      	uxth	r2, r2
 8017c40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017c46:	683b      	ldr	r3, [r7, #0]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017c4c:	68f8      	ldr	r0, [r7, #12]
 8017c4e:	f7fe fa52 	bl	80160f6 <tcp_seg_free>
    while (next &&
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d00e      	beq.n	8017c76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	891b      	ldrh	r3, [r3, #8]
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	4b1d      	ldr	r3, [pc, #116]	; (8017cd4 <tcp_oos_insert_segment+0x10c>)
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	441a      	add	r2, r3
 8017c64:	683b      	ldr	r3, [r7, #0]
 8017c66:	68db      	ldr	r3, [r3, #12]
 8017c68:	685b      	ldr	r3, [r3, #4]
 8017c6a:	6839      	ldr	r1, [r7, #0]
 8017c6c:	8909      	ldrh	r1, [r1, #8]
 8017c6e:	440b      	add	r3, r1
 8017c70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	daca      	bge.n	8017c0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d01e      	beq.n	8017cba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	891b      	ldrh	r3, [r3, #8]
 8017c80:	461a      	mov	r2, r3
 8017c82:	4b14      	ldr	r3, [pc, #80]	; (8017cd4 <tcp_oos_insert_segment+0x10c>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	441a      	add	r2, r3
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	68db      	ldr	r3, [r3, #12]
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	dd12      	ble.n	8017cba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	68db      	ldr	r3, [r3, #12]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	b29a      	uxth	r2, r3
 8017c9c:	4b0d      	ldr	r3, [pc, #52]	; (8017cd4 <tcp_oos_insert_segment+0x10c>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	1ad3      	subs	r3, r2, r3
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	685a      	ldr	r2, [r3, #4]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	891b      	ldrh	r3, [r3, #8]
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	4610      	mov	r0, r2
 8017cb6:	f7fc fe15 	bl	80148e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	683a      	ldr	r2, [r7, #0]
 8017cbe:	601a      	str	r2, [r3, #0]
}
 8017cc0:	bf00      	nop
 8017cc2:	3714      	adds	r7, #20
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd90      	pop	{r4, r7, pc}
 8017cc8:	0801fcec 	.word	0x0801fcec
 8017ccc:	0801ffac 	.word	0x0801ffac
 8017cd0:	0801fd38 	.word	0x0801fd38
 8017cd4:	2401aebc 	.word	0x2401aebc

08017cd8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017cd8:	b5b0      	push	{r4, r5, r7, lr}
 8017cda:	b086      	sub	sp, #24
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	60f8      	str	r0, [r7, #12]
 8017ce0:	60b9      	str	r1, [r7, #8]
 8017ce2:	607a      	str	r2, [r7, #4]
 8017ce4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017ce6:	e03e      	b.n	8017d66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017ce8:	68bb      	ldr	r3, [r7, #8]
 8017cea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017cf2:	697b      	ldr	r3, [r7, #20]
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7fd f808 	bl	8014d0c <pbuf_clen>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d06:	8a7a      	ldrh	r2, [r7, #18]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d906      	bls.n	8017d1a <tcp_free_acked_segments+0x42>
 8017d0c:	4b2a      	ldr	r3, [pc, #168]	; (8017db8 <tcp_free_acked_segments+0xe0>)
 8017d0e:	f240 4257 	movw	r2, #1111	; 0x457
 8017d12:	492a      	ldr	r1, [pc, #168]	; (8017dbc <tcp_free_acked_segments+0xe4>)
 8017d14:	482a      	ldr	r0, [pc, #168]	; (8017dc0 <tcp_free_acked_segments+0xe8>)
 8017d16:	f005 fc7d 	bl	801d614 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017d20:	8a7b      	ldrh	r3, [r7, #18]
 8017d22:	1ad3      	subs	r3, r2, r3
 8017d24:	b29a      	uxth	r2, r3
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	891a      	ldrh	r2, [r3, #8]
 8017d30:	4b24      	ldr	r3, [pc, #144]	; (8017dc4 <tcp_free_acked_segments+0xec>)
 8017d32:	881b      	ldrh	r3, [r3, #0]
 8017d34:	4413      	add	r3, r2
 8017d36:	b29a      	uxth	r2, r3
 8017d38:	4b22      	ldr	r3, [pc, #136]	; (8017dc4 <tcp_free_acked_segments+0xec>)
 8017d3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017d3c:	6978      	ldr	r0, [r7, #20]
 8017d3e:	f7fe f9da 	bl	80160f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d00c      	beq.n	8017d66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017d4c:	68bb      	ldr	r3, [r7, #8]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d109      	bne.n	8017d66 <tcp_free_acked_segments+0x8e>
 8017d52:	683b      	ldr	r3, [r7, #0]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d106      	bne.n	8017d66 <tcp_free_acked_segments+0x8e>
 8017d58:	4b17      	ldr	r3, [pc, #92]	; (8017db8 <tcp_free_acked_segments+0xe0>)
 8017d5a:	f240 4261 	movw	r2, #1121	; 0x461
 8017d5e:	491a      	ldr	r1, [pc, #104]	; (8017dc8 <tcp_free_acked_segments+0xf0>)
 8017d60:	4817      	ldr	r0, [pc, #92]	; (8017dc0 <tcp_free_acked_segments+0xe8>)
 8017d62:	f005 fc57 	bl	801d614 <iprintf>
  while (seg_list != NULL &&
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d020      	beq.n	8017dae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	68db      	ldr	r3, [r3, #12]
 8017d70:	685b      	ldr	r3, [r3, #4]
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7fb fa93 	bl	801329e <lwip_htonl>
 8017d78:	4604      	mov	r4, r0
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	891b      	ldrh	r3, [r3, #8]
 8017d7e:	461d      	mov	r5, r3
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	68db      	ldr	r3, [r3, #12]
 8017d84:	899b      	ldrh	r3, [r3, #12]
 8017d86:	b29b      	uxth	r3, r3
 8017d88:	4618      	mov	r0, r3
 8017d8a:	f7fb fa73 	bl	8013274 <lwip_htons>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	f003 0303 	and.w	r3, r3, #3
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d001      	beq.n	8017d9e <tcp_free_acked_segments+0xc6>
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	e000      	b.n	8017da0 <tcp_free_acked_segments+0xc8>
 8017d9e:	2300      	movs	r3, #0
 8017da0:	442b      	add	r3, r5
 8017da2:	18e2      	adds	r2, r4, r3
 8017da4:	4b09      	ldr	r3, [pc, #36]	; (8017dcc <tcp_free_acked_segments+0xf4>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	dd9c      	ble.n	8017ce8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017dae:	68bb      	ldr	r3, [r7, #8]
}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3718      	adds	r7, #24
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bdb0      	pop	{r4, r5, r7, pc}
 8017db8:	0801fcec 	.word	0x0801fcec
 8017dbc:	0801ffd4 	.word	0x0801ffd4
 8017dc0:	0801fd38 	.word	0x0801fd38
 8017dc4:	2401aec4 	.word	0x2401aec4
 8017dc8:	0801fffc 	.word	0x0801fffc
 8017dcc:	2401aec0 	.word	0x2401aec0

08017dd0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017dd0:	b5b0      	push	{r4, r5, r7, lr}
 8017dd2:	b094      	sub	sp, #80	; 0x50
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017dd8:	2300      	movs	r3, #0
 8017dda:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d106      	bne.n	8017df0 <tcp_receive+0x20>
 8017de2:	4ba6      	ldr	r3, [pc, #664]	; (801807c <tcp_receive+0x2ac>)
 8017de4:	f240 427b 	movw	r2, #1147	; 0x47b
 8017de8:	49a5      	ldr	r1, [pc, #660]	; (8018080 <tcp_receive+0x2b0>)
 8017dea:	48a6      	ldr	r0, [pc, #664]	; (8018084 <tcp_receive+0x2b4>)
 8017dec:	f005 fc12 	bl	801d614 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	7d1b      	ldrb	r3, [r3, #20]
 8017df4:	2b03      	cmp	r3, #3
 8017df6:	d806      	bhi.n	8017e06 <tcp_receive+0x36>
 8017df8:	4ba0      	ldr	r3, [pc, #640]	; (801807c <tcp_receive+0x2ac>)
 8017dfa:	f240 427c 	movw	r2, #1148	; 0x47c
 8017dfe:	49a2      	ldr	r1, [pc, #648]	; (8018088 <tcp_receive+0x2b8>)
 8017e00:	48a0      	ldr	r0, [pc, #640]	; (8018084 <tcp_receive+0x2b4>)
 8017e02:	f005 fc07 	bl	801d614 <iprintf>

  if (flags & TCP_ACK) {
 8017e06:	4ba1      	ldr	r3, [pc, #644]	; (801808c <tcp_receive+0x2bc>)
 8017e08:	781b      	ldrb	r3, [r3, #0]
 8017e0a:	f003 0310 	and.w	r3, r3, #16
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	f000 8263 	beq.w	80182da <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e1a:	461a      	mov	r2, r3
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e20:	4413      	add	r3, r2
 8017e22:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017e28:	4b99      	ldr	r3, [pc, #612]	; (8018090 <tcp_receive+0x2c0>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	1ad3      	subs	r3, r2, r3
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	db1b      	blt.n	8017e6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017e36:	4b96      	ldr	r3, [pc, #600]	; (8018090 <tcp_receive+0x2c0>)
 8017e38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d106      	bne.n	8017e4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017e42:	4b94      	ldr	r3, [pc, #592]	; (8018094 <tcp_receive+0x2c4>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	1ad3      	subs	r3, r2, r3
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	db0e      	blt.n	8017e6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017e50:	4b90      	ldr	r3, [pc, #576]	; (8018094 <tcp_receive+0x2c4>)
 8017e52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d125      	bne.n	8017ea4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017e58:	4b8f      	ldr	r3, [pc, #572]	; (8018098 <tcp_receive+0x2c8>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	89db      	ldrh	r3, [r3, #14]
 8017e5e:	b29a      	uxth	r2, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e66:	429a      	cmp	r2, r3
 8017e68:	d91c      	bls.n	8017ea4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017e6a:	4b8b      	ldr	r3, [pc, #556]	; (8018098 <tcp_receive+0x2c8>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	89db      	ldrh	r3, [r3, #14]
 8017e70:	b29a      	uxth	r2, r3
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d205      	bcs.n	8017e94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017e94:	4b7e      	ldr	r3, [pc, #504]	; (8018090 <tcp_receive+0x2c0>)
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017e9c:	4b7d      	ldr	r3, [pc, #500]	; (8018094 <tcp_receive+0x2c4>)
 8017e9e:	681a      	ldr	r2, [r3, #0]
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017ea4:	4b7b      	ldr	r3, [pc, #492]	; (8018094 <tcp_receive+0x2c4>)
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017eac:	1ad3      	subs	r3, r2, r3
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	dc58      	bgt.n	8017f64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017eb2:	4b7a      	ldr	r3, [pc, #488]	; (801809c <tcp_receive+0x2cc>)
 8017eb4:	881b      	ldrh	r3, [r3, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d14b      	bne.n	8017f52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017ec4:	4413      	add	r3, r2
 8017ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d142      	bne.n	8017f52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	db3d      	blt.n	8017f52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017eda:	4b6e      	ldr	r3, [pc, #440]	; (8018094 <tcp_receive+0x2c4>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d137      	bne.n	8017f52 <tcp_receive+0x182>
              found_dupack = 1;
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017eec:	2bff      	cmp	r3, #255	; 0xff
 8017eee:	d007      	beq.n	8017f00 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	b2da      	uxtb	r2, r3
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017f06:	2b03      	cmp	r3, #3
 8017f08:	d91b      	bls.n	8017f42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f14:	4413      	add	r3, r2
 8017f16:	b29a      	uxth	r2, r3
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d30a      	bcc.n	8017f38 <tcp_receive+0x168>
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f2c:	4413      	add	r3, r2
 8017f2e:	b29a      	uxth	r2, r3
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f36:	e004      	b.n	8017f42 <tcp_receive+0x172>
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017f48:	2b02      	cmp	r3, #2
 8017f4a:	d902      	bls.n	8017f52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f001 fee9 	bl	8019d24 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f040 8160 	bne.w	801821a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017f62:	e15a      	b.n	801821a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017f64:	4b4b      	ldr	r3, [pc, #300]	; (8018094 <tcp_receive+0x2c4>)
 8017f66:	681a      	ldr	r2, [r3, #0]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f6c:	1ad3      	subs	r3, r2, r3
 8017f6e:	3b01      	subs	r3, #1
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	f2c0 814d 	blt.w	8018210 <tcp_receive+0x440>
 8017f76:	4b47      	ldr	r3, [pc, #284]	; (8018094 <tcp_receive+0x2c4>)
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f7e:	1ad3      	subs	r3, r2, r3
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	f300 8145 	bgt.w	8018210 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	8b5b      	ldrh	r3, [r3, #26]
 8017f8a:	f003 0304 	and.w	r3, r3, #4
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d010      	beq.n	8017fb4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	8b5b      	ldrh	r3, [r3, #26]
 8017f96:	f023 0304 	bic.w	r3, r3, #4
 8017f9a:	b29a      	uxth	r2, r3
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017fc2:	10db      	asrs	r3, r3, #3
 8017fc4:	b21b      	sxth	r3, r3
 8017fc6:	b29a      	uxth	r2, r3
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	4413      	add	r3, r2
 8017fd2:	b29b      	uxth	r3, r3
 8017fd4:	b21a      	sxth	r2, r3
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017fdc:	4b2d      	ldr	r3, [pc, #180]	; (8018094 <tcp_receive+0x2c4>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	b29a      	uxth	r2, r3
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	1ad3      	subs	r3, r2, r3
 8017fea:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	2200      	movs	r2, #0
 8017ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017ff4:	4b27      	ldr	r3, [pc, #156]	; (8018094 <tcp_receive+0x2c4>)
 8017ff6:	681a      	ldr	r2, [r3, #0]
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	7d1b      	ldrb	r3, [r3, #20]
 8018000:	2b03      	cmp	r3, #3
 8018002:	f240 8096 	bls.w	8018132 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018012:	429a      	cmp	r2, r3
 8018014:	d244      	bcs.n	80180a0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	8b5b      	ldrh	r3, [r3, #26]
 801801a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801801e:	2b00      	cmp	r3, #0
 8018020:	d001      	beq.n	8018026 <tcp_receive+0x256>
 8018022:	2301      	movs	r3, #1
 8018024:	e000      	b.n	8018028 <tcp_receive+0x258>
 8018026:	2302      	movs	r3, #2
 8018028:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801802c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018030:	b29a      	uxth	r2, r3
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018036:	fb12 f303 	smulbb	r3, r2, r3
 801803a:	b29b      	uxth	r3, r3
 801803c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801803e:	4293      	cmp	r3, r2
 8018040:	bf28      	it	cs
 8018042:	4613      	movcs	r3, r2
 8018044:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801804c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801804e:	4413      	add	r3, r2
 8018050:	b29a      	uxth	r2, r3
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018058:	429a      	cmp	r2, r3
 801805a:	d309      	bcc.n	8018070 <tcp_receive+0x2a0>
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018062:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018064:	4413      	add	r3, r2
 8018066:	b29a      	uxth	r2, r3
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801806e:	e060      	b.n	8018132 <tcp_receive+0x362>
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801807a:	e05a      	b.n	8018132 <tcp_receive+0x362>
 801807c:	0801fcec 	.word	0x0801fcec
 8018080:	0802001c 	.word	0x0802001c
 8018084:	0801fd38 	.word	0x0801fd38
 8018088:	08020038 	.word	0x08020038
 801808c:	2401aec8 	.word	0x2401aec8
 8018090:	2401aebc 	.word	0x2401aebc
 8018094:	2401aec0 	.word	0x2401aec0
 8018098:	2401aeac 	.word	0x2401aeac
 801809c:	2401aec6 	.word	0x2401aec6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80180a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80180a8:	4413      	add	r3, r2
 80180aa:	b29a      	uxth	r2, r3
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80180b2:	429a      	cmp	r2, r3
 80180b4:	d309      	bcc.n	80180ca <tcp_receive+0x2fa>
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80180bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80180be:	4413      	add	r3, r2
 80180c0:	b29a      	uxth	r2, r3
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80180c8:	e004      	b.n	80180d4 <tcp_receive+0x304>
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d326      	bcc.n	8018132 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80180f0:	1ad3      	subs	r3, r2, r3
 80180f2:	b29a      	uxth	r2, r3
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018104:	4413      	add	r3, r2
 8018106:	b29a      	uxth	r2, r3
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801810e:	429a      	cmp	r2, r3
 8018110:	d30a      	bcc.n	8018128 <tcp_receive+0x358>
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801811c:	4413      	add	r3, r2
 801811e:	b29a      	uxth	r2, r3
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018126:	e004      	b.n	8018132 <tcp_receive+0x362>
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801812e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801813a:	4a98      	ldr	r2, [pc, #608]	; (801839c <tcp_receive+0x5cc>)
 801813c:	6878      	ldr	r0, [r7, #4]
 801813e:	f7ff fdcb 	bl	8017cd8 <tcp_free_acked_segments>
 8018142:	4602      	mov	r2, r0
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018150:	4a93      	ldr	r2, [pc, #588]	; (80183a0 <tcp_receive+0x5d0>)
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f7ff fdc0 	bl	8017cd8 <tcp_free_acked_segments>
 8018158:	4602      	mov	r2, r0
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018162:	2b00      	cmp	r3, #0
 8018164:	d104      	bne.n	8018170 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801816c:	861a      	strh	r2, [r3, #48]	; 0x30
 801816e:	e002      	b.n	8018176 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	2200      	movs	r2, #0
 8018174:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	2200      	movs	r2, #0
 801817a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018180:	2b00      	cmp	r3, #0
 8018182:	d103      	bne.n	801818c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2200      	movs	r2, #0
 8018188:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018192:	4b84      	ldr	r3, [pc, #528]	; (80183a4 <tcp_receive+0x5d4>)
 8018194:	881b      	ldrh	r3, [r3, #0]
 8018196:	4413      	add	r3, r2
 8018198:	b29a      	uxth	r2, r3
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	8b5b      	ldrh	r3, [r3, #26]
 80181a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d035      	beq.n	8018218 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d118      	bne.n	80181e6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d00c      	beq.n	80181d6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181c4:	68db      	ldr	r3, [r3, #12]
 80181c6:	685b      	ldr	r3, [r3, #4]
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7fb f868 	bl	801329e <lwip_htonl>
 80181ce:	4603      	mov	r3, r0
 80181d0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	dc20      	bgt.n	8018218 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	8b5b      	ldrh	r3, [r3, #26]
 80181da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80181de:	b29a      	uxth	r2, r3
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80181e4:	e018      	b.n	8018218 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181ee:	68db      	ldr	r3, [r3, #12]
 80181f0:	685b      	ldr	r3, [r3, #4]
 80181f2:	4618      	mov	r0, r3
 80181f4:	f7fb f853 	bl	801329e <lwip_htonl>
 80181f8:	4603      	mov	r3, r0
 80181fa:	1ae3      	subs	r3, r4, r3
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	dc0b      	bgt.n	8018218 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	8b5b      	ldrh	r3, [r3, #26]
 8018204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018208:	b29a      	uxth	r2, r3
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801820e:	e003      	b.n	8018218 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018210:	6878      	ldr	r0, [r7, #4]
 8018212:	f001 ff75 	bl	801a100 <tcp_send_empty_ack>
 8018216:	e000      	b.n	801821a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018218:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801821e:	2b00      	cmp	r3, #0
 8018220:	d05b      	beq.n	80182da <tcp_receive+0x50a>
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018226:	4b60      	ldr	r3, [pc, #384]	; (80183a8 <tcp_receive+0x5d8>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	1ad3      	subs	r3, r2, r3
 801822c:	2b00      	cmp	r3, #0
 801822e:	da54      	bge.n	80182da <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018230:	4b5e      	ldr	r3, [pc, #376]	; (80183ac <tcp_receive+0x5dc>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	b29a      	uxth	r2, r3
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801823a:	b29b      	uxth	r3, r3
 801823c:	1ad3      	subs	r3, r2, r3
 801823e:	b29b      	uxth	r3, r3
 8018240:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018244:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801824e:	10db      	asrs	r3, r3, #3
 8018250:	b21b      	sxth	r3, r3
 8018252:	b29b      	uxth	r3, r3
 8018254:	1ad3      	subs	r3, r2, r3
 8018256:	b29b      	uxth	r3, r3
 8018258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018262:	b29a      	uxth	r2, r3
 8018264:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018268:	4413      	add	r3, r2
 801826a:	b29b      	uxth	r3, r3
 801826c:	b21a      	sxth	r2, r3
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018272:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018276:	2b00      	cmp	r3, #0
 8018278:	da05      	bge.n	8018286 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801827a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801827e:	425b      	negs	r3, r3
 8018280:	b29b      	uxth	r3, r3
 8018282:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018286:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018290:	109b      	asrs	r3, r3, #2
 8018292:	b21b      	sxth	r3, r3
 8018294:	b29b      	uxth	r3, r3
 8018296:	1ad3      	subs	r3, r2, r3
 8018298:	b29b      	uxth	r3, r3
 801829a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80182a4:	b29a      	uxth	r2, r3
 80182a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80182aa:	4413      	add	r3, r2
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	b21a      	sxth	r2, r3
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80182ba:	10db      	asrs	r3, r3, #3
 80182bc:	b21b      	sxth	r3, r3
 80182be:	b29a      	uxth	r2, r3
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80182c6:	b29b      	uxth	r3, r3
 80182c8:	4413      	add	r3, r2
 80182ca:	b29b      	uxth	r3, r3
 80182cc:	b21a      	sxth	r2, r3
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	2200      	movs	r2, #0
 80182d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80182da:	4b35      	ldr	r3, [pc, #212]	; (80183b0 <tcp_receive+0x5e0>)
 80182dc:	881b      	ldrh	r3, [r3, #0]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	f000 84e1 	beq.w	8018ca6 <tcp_receive+0xed6>
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	7d1b      	ldrb	r3, [r3, #20]
 80182e8:	2b06      	cmp	r3, #6
 80182ea:	f200 84dc 	bhi.w	8018ca6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182f2:	4b30      	ldr	r3, [pc, #192]	; (80183b4 <tcp_receive+0x5e4>)
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	1ad3      	subs	r3, r2, r3
 80182f8:	3b01      	subs	r3, #1
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	f2c0 808e 	blt.w	801841c <tcp_receive+0x64c>
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018304:	4b2a      	ldr	r3, [pc, #168]	; (80183b0 <tcp_receive+0x5e0>)
 8018306:	881b      	ldrh	r3, [r3, #0]
 8018308:	4619      	mov	r1, r3
 801830a:	4b2a      	ldr	r3, [pc, #168]	; (80183b4 <tcp_receive+0x5e4>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	440b      	add	r3, r1
 8018310:	1ad3      	subs	r3, r2, r3
 8018312:	3301      	adds	r3, #1
 8018314:	2b00      	cmp	r3, #0
 8018316:	f300 8081 	bgt.w	801841c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801831a:	4b27      	ldr	r3, [pc, #156]	; (80183b8 <tcp_receive+0x5e8>)
 801831c:	685b      	ldr	r3, [r3, #4]
 801831e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018324:	4b23      	ldr	r3, [pc, #140]	; (80183b4 <tcp_receive+0x5e4>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	1ad3      	subs	r3, r2, r3
 801832a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801832c:	4b22      	ldr	r3, [pc, #136]	; (80183b8 <tcp_receive+0x5e8>)
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d106      	bne.n	8018342 <tcp_receive+0x572>
 8018334:	4b21      	ldr	r3, [pc, #132]	; (80183bc <tcp_receive+0x5ec>)
 8018336:	f240 5294 	movw	r2, #1428	; 0x594
 801833a:	4921      	ldr	r1, [pc, #132]	; (80183c0 <tcp_receive+0x5f0>)
 801833c:	4821      	ldr	r0, [pc, #132]	; (80183c4 <tcp_receive+0x5f4>)
 801833e:	f005 f969 	bl	801d614 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018348:	4293      	cmp	r3, r2
 801834a:	d906      	bls.n	801835a <tcp_receive+0x58a>
 801834c:	4b1b      	ldr	r3, [pc, #108]	; (80183bc <tcp_receive+0x5ec>)
 801834e:	f240 5295 	movw	r2, #1429	; 0x595
 8018352:	491d      	ldr	r1, [pc, #116]	; (80183c8 <tcp_receive+0x5f8>)
 8018354:	481b      	ldr	r0, [pc, #108]	; (80183c4 <tcp_receive+0x5f4>)
 8018356:	f005 f95d 	bl	801d614 <iprintf>
      off = (u16_t)off32;
 801835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801835c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018360:	4b15      	ldr	r3, [pc, #84]	; (80183b8 <tcp_receive+0x5e8>)
 8018362:	685b      	ldr	r3, [r3, #4]
 8018364:	891b      	ldrh	r3, [r3, #8]
 8018366:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801836a:	429a      	cmp	r2, r3
 801836c:	d906      	bls.n	801837c <tcp_receive+0x5ac>
 801836e:	4b13      	ldr	r3, [pc, #76]	; (80183bc <tcp_receive+0x5ec>)
 8018370:	f240 5297 	movw	r2, #1431	; 0x597
 8018374:	4915      	ldr	r1, [pc, #84]	; (80183cc <tcp_receive+0x5fc>)
 8018376:	4813      	ldr	r0, [pc, #76]	; (80183c4 <tcp_receive+0x5f4>)
 8018378:	f005 f94c 	bl	801d614 <iprintf>
      inseg.len -= off;
 801837c:	4b0e      	ldr	r3, [pc, #56]	; (80183b8 <tcp_receive+0x5e8>)
 801837e:	891a      	ldrh	r2, [r3, #8]
 8018380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018384:	1ad3      	subs	r3, r2, r3
 8018386:	b29a      	uxth	r2, r3
 8018388:	4b0b      	ldr	r3, [pc, #44]	; (80183b8 <tcp_receive+0x5e8>)
 801838a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801838c:	4b0a      	ldr	r3, [pc, #40]	; (80183b8 <tcp_receive+0x5e8>)
 801838e:	685b      	ldr	r3, [r3, #4]
 8018390:	891a      	ldrh	r2, [r3, #8]
 8018392:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018396:	1ad3      	subs	r3, r2, r3
 8018398:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801839a:	e029      	b.n	80183f0 <tcp_receive+0x620>
 801839c:	08020054 	.word	0x08020054
 80183a0:	0802005c 	.word	0x0802005c
 80183a4:	2401aec4 	.word	0x2401aec4
 80183a8:	2401aec0 	.word	0x2401aec0
 80183ac:	24022234 	.word	0x24022234
 80183b0:	2401aec6 	.word	0x2401aec6
 80183b4:	2401aebc 	.word	0x2401aebc
 80183b8:	2401ae9c 	.word	0x2401ae9c
 80183bc:	0801fcec 	.word	0x0801fcec
 80183c0:	08020064 	.word	0x08020064
 80183c4:	0801fd38 	.word	0x0801fd38
 80183c8:	08020074 	.word	0x08020074
 80183cc:	08020084 	.word	0x08020084
        off -= p->len;
 80183d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183d2:	895b      	ldrh	r3, [r3, #10]
 80183d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183d8:	1ad3      	subs	r3, r2, r3
 80183da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80183de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80183e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80183e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183e6:	2200      	movs	r2, #0
 80183e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80183ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80183f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80183f2:	895b      	ldrh	r3, [r3, #10]
 80183f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d8e9      	bhi.n	80183d0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80183fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018400:	4619      	mov	r1, r3
 8018402:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018404:	f7fc fb6e 	bl	8014ae4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801840c:	4a91      	ldr	r2, [pc, #580]	; (8018654 <tcp_receive+0x884>)
 801840e:	6013      	str	r3, [r2, #0]
 8018410:	4b91      	ldr	r3, [pc, #580]	; (8018658 <tcp_receive+0x888>)
 8018412:	68db      	ldr	r3, [r3, #12]
 8018414:	4a8f      	ldr	r2, [pc, #572]	; (8018654 <tcp_receive+0x884>)
 8018416:	6812      	ldr	r2, [r2, #0]
 8018418:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801841a:	e00d      	b.n	8018438 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801841c:	4b8d      	ldr	r3, [pc, #564]	; (8018654 <tcp_receive+0x884>)
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018424:	1ad3      	subs	r3, r2, r3
 8018426:	2b00      	cmp	r3, #0
 8018428:	da06      	bge.n	8018438 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	8b5b      	ldrh	r3, [r3, #26]
 801842e:	f043 0302 	orr.w	r3, r3, #2
 8018432:	b29a      	uxth	r2, r3
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018438:	4b86      	ldr	r3, [pc, #536]	; (8018654 <tcp_receive+0x884>)
 801843a:	681a      	ldr	r2, [r3, #0]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018440:	1ad3      	subs	r3, r2, r3
 8018442:	2b00      	cmp	r3, #0
 8018444:	f2c0 842a 	blt.w	8018c9c <tcp_receive+0xecc>
 8018448:	4b82      	ldr	r3, [pc, #520]	; (8018654 <tcp_receive+0x884>)
 801844a:	681a      	ldr	r2, [r3, #0]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018450:	6879      	ldr	r1, [r7, #4]
 8018452:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018454:	440b      	add	r3, r1
 8018456:	1ad3      	subs	r3, r2, r3
 8018458:	3301      	adds	r3, #1
 801845a:	2b00      	cmp	r3, #0
 801845c:	f300 841e 	bgt.w	8018c9c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018464:	4b7b      	ldr	r3, [pc, #492]	; (8018654 <tcp_receive+0x884>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	429a      	cmp	r2, r3
 801846a:	f040 829a 	bne.w	80189a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801846e:	4b7a      	ldr	r3, [pc, #488]	; (8018658 <tcp_receive+0x888>)
 8018470:	891c      	ldrh	r4, [r3, #8]
 8018472:	4b79      	ldr	r3, [pc, #484]	; (8018658 <tcp_receive+0x888>)
 8018474:	68db      	ldr	r3, [r3, #12]
 8018476:	899b      	ldrh	r3, [r3, #12]
 8018478:	b29b      	uxth	r3, r3
 801847a:	4618      	mov	r0, r3
 801847c:	f7fa fefa 	bl	8013274 <lwip_htons>
 8018480:	4603      	mov	r3, r0
 8018482:	b2db      	uxtb	r3, r3
 8018484:	f003 0303 	and.w	r3, r3, #3
 8018488:	2b00      	cmp	r3, #0
 801848a:	d001      	beq.n	8018490 <tcp_receive+0x6c0>
 801848c:	2301      	movs	r3, #1
 801848e:	e000      	b.n	8018492 <tcp_receive+0x6c2>
 8018490:	2300      	movs	r3, #0
 8018492:	4423      	add	r3, r4
 8018494:	b29a      	uxth	r2, r3
 8018496:	4b71      	ldr	r3, [pc, #452]	; (801865c <tcp_receive+0x88c>)
 8018498:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801849e:	4b6f      	ldr	r3, [pc, #444]	; (801865c <tcp_receive+0x88c>)
 80184a0:	881b      	ldrh	r3, [r3, #0]
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d275      	bcs.n	8018592 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80184a6:	4b6c      	ldr	r3, [pc, #432]	; (8018658 <tcp_receive+0x888>)
 80184a8:	68db      	ldr	r3, [r3, #12]
 80184aa:	899b      	ldrh	r3, [r3, #12]
 80184ac:	b29b      	uxth	r3, r3
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7fa fee0 	bl	8013274 <lwip_htons>
 80184b4:	4603      	mov	r3, r0
 80184b6:	b2db      	uxtb	r3, r3
 80184b8:	f003 0301 	and.w	r3, r3, #1
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d01f      	beq.n	8018500 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80184c0:	4b65      	ldr	r3, [pc, #404]	; (8018658 <tcp_receive+0x888>)
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	899b      	ldrh	r3, [r3, #12]
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	b21b      	sxth	r3, r3
 80184ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80184ce:	b21c      	sxth	r4, r3
 80184d0:	4b61      	ldr	r3, [pc, #388]	; (8018658 <tcp_receive+0x888>)
 80184d2:	68db      	ldr	r3, [r3, #12]
 80184d4:	899b      	ldrh	r3, [r3, #12]
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	4618      	mov	r0, r3
 80184da:	f7fa fecb 	bl	8013274 <lwip_htons>
 80184de:	4603      	mov	r3, r0
 80184e0:	b2db      	uxtb	r3, r3
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7fa fec2 	bl	8013274 <lwip_htons>
 80184f0:	4603      	mov	r3, r0
 80184f2:	b21b      	sxth	r3, r3
 80184f4:	4323      	orrs	r3, r4
 80184f6:	b21a      	sxth	r2, r3
 80184f8:	4b57      	ldr	r3, [pc, #348]	; (8018658 <tcp_receive+0x888>)
 80184fa:	68db      	ldr	r3, [r3, #12]
 80184fc:	b292      	uxth	r2, r2
 80184fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018504:	4b54      	ldr	r3, [pc, #336]	; (8018658 <tcp_receive+0x888>)
 8018506:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018508:	4b53      	ldr	r3, [pc, #332]	; (8018658 <tcp_receive+0x888>)
 801850a:	68db      	ldr	r3, [r3, #12]
 801850c:	899b      	ldrh	r3, [r3, #12]
 801850e:	b29b      	uxth	r3, r3
 8018510:	4618      	mov	r0, r3
 8018512:	f7fa feaf 	bl	8013274 <lwip_htons>
 8018516:	4603      	mov	r3, r0
 8018518:	b2db      	uxtb	r3, r3
 801851a:	f003 0302 	and.w	r3, r3, #2
 801851e:	2b00      	cmp	r3, #0
 8018520:	d005      	beq.n	801852e <tcp_receive+0x75e>
            inseg.len -= 1;
 8018522:	4b4d      	ldr	r3, [pc, #308]	; (8018658 <tcp_receive+0x888>)
 8018524:	891b      	ldrh	r3, [r3, #8]
 8018526:	3b01      	subs	r3, #1
 8018528:	b29a      	uxth	r2, r3
 801852a:	4b4b      	ldr	r3, [pc, #300]	; (8018658 <tcp_receive+0x888>)
 801852c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801852e:	4b4a      	ldr	r3, [pc, #296]	; (8018658 <tcp_receive+0x888>)
 8018530:	685b      	ldr	r3, [r3, #4]
 8018532:	4a49      	ldr	r2, [pc, #292]	; (8018658 <tcp_receive+0x888>)
 8018534:	8912      	ldrh	r2, [r2, #8]
 8018536:	4611      	mov	r1, r2
 8018538:	4618      	mov	r0, r3
 801853a:	f7fc f9d3 	bl	80148e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801853e:	4b46      	ldr	r3, [pc, #280]	; (8018658 <tcp_receive+0x888>)
 8018540:	891c      	ldrh	r4, [r3, #8]
 8018542:	4b45      	ldr	r3, [pc, #276]	; (8018658 <tcp_receive+0x888>)
 8018544:	68db      	ldr	r3, [r3, #12]
 8018546:	899b      	ldrh	r3, [r3, #12]
 8018548:	b29b      	uxth	r3, r3
 801854a:	4618      	mov	r0, r3
 801854c:	f7fa fe92 	bl	8013274 <lwip_htons>
 8018550:	4603      	mov	r3, r0
 8018552:	b2db      	uxtb	r3, r3
 8018554:	f003 0303 	and.w	r3, r3, #3
 8018558:	2b00      	cmp	r3, #0
 801855a:	d001      	beq.n	8018560 <tcp_receive+0x790>
 801855c:	2301      	movs	r3, #1
 801855e:	e000      	b.n	8018562 <tcp_receive+0x792>
 8018560:	2300      	movs	r3, #0
 8018562:	4423      	add	r3, r4
 8018564:	b29a      	uxth	r2, r3
 8018566:	4b3d      	ldr	r3, [pc, #244]	; (801865c <tcp_receive+0x88c>)
 8018568:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801856a:	4b3c      	ldr	r3, [pc, #240]	; (801865c <tcp_receive+0x88c>)
 801856c:	881b      	ldrh	r3, [r3, #0]
 801856e:	461a      	mov	r2, r3
 8018570:	4b38      	ldr	r3, [pc, #224]	; (8018654 <tcp_receive+0x884>)
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	441a      	add	r2, r3
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801857a:	6879      	ldr	r1, [r7, #4]
 801857c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801857e:	440b      	add	r3, r1
 8018580:	429a      	cmp	r2, r3
 8018582:	d006      	beq.n	8018592 <tcp_receive+0x7c2>
 8018584:	4b36      	ldr	r3, [pc, #216]	; (8018660 <tcp_receive+0x890>)
 8018586:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801858a:	4936      	ldr	r1, [pc, #216]	; (8018664 <tcp_receive+0x894>)
 801858c:	4836      	ldr	r0, [pc, #216]	; (8018668 <tcp_receive+0x898>)
 801858e:	f005 f841 	bl	801d614 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018596:	2b00      	cmp	r3, #0
 8018598:	f000 80e7 	beq.w	801876a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801859c:	4b2e      	ldr	r3, [pc, #184]	; (8018658 <tcp_receive+0x888>)
 801859e:	68db      	ldr	r3, [r3, #12]
 80185a0:	899b      	ldrh	r3, [r3, #12]
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7fa fe65 	bl	8013274 <lwip_htons>
 80185aa:	4603      	mov	r3, r0
 80185ac:	b2db      	uxtb	r3, r3
 80185ae:	f003 0301 	and.w	r3, r3, #1
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d010      	beq.n	80185d8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80185b6:	e00a      	b.n	80185ce <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185bc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185c2:	681a      	ldr	r2, [r3, #0]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80185c8:	68f8      	ldr	r0, [r7, #12]
 80185ca:	f7fd fd94 	bl	80160f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d1f0      	bne.n	80185b8 <tcp_receive+0x7e8>
 80185d6:	e0c8      	b.n	801876a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80185de:	e052      	b.n	8018686 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80185e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185e2:	68db      	ldr	r3, [r3, #12]
 80185e4:	899b      	ldrh	r3, [r3, #12]
 80185e6:	b29b      	uxth	r3, r3
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7fa fe43 	bl	8013274 <lwip_htons>
 80185ee:	4603      	mov	r3, r0
 80185f0:	b2db      	uxtb	r3, r3
 80185f2:	f003 0301 	and.w	r3, r3, #1
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d03d      	beq.n	8018676 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80185fa:	4b17      	ldr	r3, [pc, #92]	; (8018658 <tcp_receive+0x888>)
 80185fc:	68db      	ldr	r3, [r3, #12]
 80185fe:	899b      	ldrh	r3, [r3, #12]
 8018600:	b29b      	uxth	r3, r3
 8018602:	4618      	mov	r0, r3
 8018604:	f7fa fe36 	bl	8013274 <lwip_htons>
 8018608:	4603      	mov	r3, r0
 801860a:	b2db      	uxtb	r3, r3
 801860c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018610:	2b00      	cmp	r3, #0
 8018612:	d130      	bne.n	8018676 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018614:	4b10      	ldr	r3, [pc, #64]	; (8018658 <tcp_receive+0x888>)
 8018616:	68db      	ldr	r3, [r3, #12]
 8018618:	899b      	ldrh	r3, [r3, #12]
 801861a:	b29c      	uxth	r4, r3
 801861c:	2001      	movs	r0, #1
 801861e:	f7fa fe29 	bl	8013274 <lwip_htons>
 8018622:	4603      	mov	r3, r0
 8018624:	461a      	mov	r2, r3
 8018626:	4b0c      	ldr	r3, [pc, #48]	; (8018658 <tcp_receive+0x888>)
 8018628:	68db      	ldr	r3, [r3, #12]
 801862a:	4322      	orrs	r2, r4
 801862c:	b292      	uxth	r2, r2
 801862e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018630:	4b09      	ldr	r3, [pc, #36]	; (8018658 <tcp_receive+0x888>)
 8018632:	891c      	ldrh	r4, [r3, #8]
 8018634:	4b08      	ldr	r3, [pc, #32]	; (8018658 <tcp_receive+0x888>)
 8018636:	68db      	ldr	r3, [r3, #12]
 8018638:	899b      	ldrh	r3, [r3, #12]
 801863a:	b29b      	uxth	r3, r3
 801863c:	4618      	mov	r0, r3
 801863e:	f7fa fe19 	bl	8013274 <lwip_htons>
 8018642:	4603      	mov	r3, r0
 8018644:	b2db      	uxtb	r3, r3
 8018646:	f003 0303 	and.w	r3, r3, #3
 801864a:	2b00      	cmp	r3, #0
 801864c:	d00e      	beq.n	801866c <tcp_receive+0x89c>
 801864e:	2301      	movs	r3, #1
 8018650:	e00d      	b.n	801866e <tcp_receive+0x89e>
 8018652:	bf00      	nop
 8018654:	2401aebc 	.word	0x2401aebc
 8018658:	2401ae9c 	.word	0x2401ae9c
 801865c:	2401aec6 	.word	0x2401aec6
 8018660:	0801fcec 	.word	0x0801fcec
 8018664:	08020094 	.word	0x08020094
 8018668:	0801fd38 	.word	0x0801fd38
 801866c:	2300      	movs	r3, #0
 801866e:	4423      	add	r3, r4
 8018670:	b29a      	uxth	r2, r3
 8018672:	4b98      	ldr	r3, [pc, #608]	; (80188d4 <tcp_receive+0xb04>)
 8018674:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018678:	613b      	str	r3, [r7, #16]
              next = next->next;
 801867a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018680:	6938      	ldr	r0, [r7, #16]
 8018682:	f7fd fd38 	bl	80160f6 <tcp_seg_free>
            while (next &&
 8018686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018688:	2b00      	cmp	r3, #0
 801868a:	d00e      	beq.n	80186aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801868c:	4b91      	ldr	r3, [pc, #580]	; (80188d4 <tcp_receive+0xb04>)
 801868e:	881b      	ldrh	r3, [r3, #0]
 8018690:	461a      	mov	r2, r3
 8018692:	4b91      	ldr	r3, [pc, #580]	; (80188d8 <tcp_receive+0xb08>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	441a      	add	r2, r3
 8018698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801869a:	68db      	ldr	r3, [r3, #12]
 801869c:	685b      	ldr	r3, [r3, #4]
 801869e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80186a0:	8909      	ldrh	r1, [r1, #8]
 80186a2:	440b      	add	r3, r1
 80186a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	da9a      	bge.n	80185e0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80186aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d059      	beq.n	8018764 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80186b0:	4b88      	ldr	r3, [pc, #544]	; (80188d4 <tcp_receive+0xb04>)
 80186b2:	881b      	ldrh	r3, [r3, #0]
 80186b4:	461a      	mov	r2, r3
 80186b6:	4b88      	ldr	r3, [pc, #544]	; (80188d8 <tcp_receive+0xb08>)
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	441a      	add	r2, r3
 80186bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186be:	68db      	ldr	r3, [r3, #12]
 80186c0:	685b      	ldr	r3, [r3, #4]
 80186c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	dd4d      	ble.n	8018764 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80186c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	b29a      	uxth	r2, r3
 80186d0:	4b81      	ldr	r3, [pc, #516]	; (80188d8 <tcp_receive+0xb08>)
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	b29b      	uxth	r3, r3
 80186d6:	1ad3      	subs	r3, r2, r3
 80186d8:	b29a      	uxth	r2, r3
 80186da:	4b80      	ldr	r3, [pc, #512]	; (80188dc <tcp_receive+0xb0c>)
 80186dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80186de:	4b7f      	ldr	r3, [pc, #508]	; (80188dc <tcp_receive+0xb0c>)
 80186e0:	68db      	ldr	r3, [r3, #12]
 80186e2:	899b      	ldrh	r3, [r3, #12]
 80186e4:	b29b      	uxth	r3, r3
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fa fdc4 	bl	8013274 <lwip_htons>
 80186ec:	4603      	mov	r3, r0
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	f003 0302 	and.w	r3, r3, #2
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d005      	beq.n	8018704 <tcp_receive+0x934>
                inseg.len -= 1;
 80186f8:	4b78      	ldr	r3, [pc, #480]	; (80188dc <tcp_receive+0xb0c>)
 80186fa:	891b      	ldrh	r3, [r3, #8]
 80186fc:	3b01      	subs	r3, #1
 80186fe:	b29a      	uxth	r2, r3
 8018700:	4b76      	ldr	r3, [pc, #472]	; (80188dc <tcp_receive+0xb0c>)
 8018702:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018704:	4b75      	ldr	r3, [pc, #468]	; (80188dc <tcp_receive+0xb0c>)
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	4a74      	ldr	r2, [pc, #464]	; (80188dc <tcp_receive+0xb0c>)
 801870a:	8912      	ldrh	r2, [r2, #8]
 801870c:	4611      	mov	r1, r2
 801870e:	4618      	mov	r0, r3
 8018710:	f7fc f8e8 	bl	80148e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018714:	4b71      	ldr	r3, [pc, #452]	; (80188dc <tcp_receive+0xb0c>)
 8018716:	891c      	ldrh	r4, [r3, #8]
 8018718:	4b70      	ldr	r3, [pc, #448]	; (80188dc <tcp_receive+0xb0c>)
 801871a:	68db      	ldr	r3, [r3, #12]
 801871c:	899b      	ldrh	r3, [r3, #12]
 801871e:	b29b      	uxth	r3, r3
 8018720:	4618      	mov	r0, r3
 8018722:	f7fa fda7 	bl	8013274 <lwip_htons>
 8018726:	4603      	mov	r3, r0
 8018728:	b2db      	uxtb	r3, r3
 801872a:	f003 0303 	and.w	r3, r3, #3
 801872e:	2b00      	cmp	r3, #0
 8018730:	d001      	beq.n	8018736 <tcp_receive+0x966>
 8018732:	2301      	movs	r3, #1
 8018734:	e000      	b.n	8018738 <tcp_receive+0x968>
 8018736:	2300      	movs	r3, #0
 8018738:	4423      	add	r3, r4
 801873a:	b29a      	uxth	r2, r3
 801873c:	4b65      	ldr	r3, [pc, #404]	; (80188d4 <tcp_receive+0xb04>)
 801873e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018740:	4b64      	ldr	r3, [pc, #400]	; (80188d4 <tcp_receive+0xb04>)
 8018742:	881b      	ldrh	r3, [r3, #0]
 8018744:	461a      	mov	r2, r3
 8018746:	4b64      	ldr	r3, [pc, #400]	; (80188d8 <tcp_receive+0xb08>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	441a      	add	r2, r3
 801874c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801874e:	68db      	ldr	r3, [r3, #12]
 8018750:	685b      	ldr	r3, [r3, #4]
 8018752:	429a      	cmp	r2, r3
 8018754:	d006      	beq.n	8018764 <tcp_receive+0x994>
 8018756:	4b62      	ldr	r3, [pc, #392]	; (80188e0 <tcp_receive+0xb10>)
 8018758:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801875c:	4961      	ldr	r1, [pc, #388]	; (80188e4 <tcp_receive+0xb14>)
 801875e:	4862      	ldr	r0, [pc, #392]	; (80188e8 <tcp_receive+0xb18>)
 8018760:	f004 ff58 	bl	801d614 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018768:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801876a:	4b5a      	ldr	r3, [pc, #360]	; (80188d4 <tcp_receive+0xb04>)
 801876c:	881b      	ldrh	r3, [r3, #0]
 801876e:	461a      	mov	r2, r3
 8018770:	4b59      	ldr	r3, [pc, #356]	; (80188d8 <tcp_receive+0xb08>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	441a      	add	r2, r3
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801877e:	4b55      	ldr	r3, [pc, #340]	; (80188d4 <tcp_receive+0xb04>)
 8018780:	881b      	ldrh	r3, [r3, #0]
 8018782:	429a      	cmp	r2, r3
 8018784:	d206      	bcs.n	8018794 <tcp_receive+0x9c4>
 8018786:	4b56      	ldr	r3, [pc, #344]	; (80188e0 <tcp_receive+0xb10>)
 8018788:	f240 6207 	movw	r2, #1543	; 0x607
 801878c:	4957      	ldr	r1, [pc, #348]	; (80188ec <tcp_receive+0xb1c>)
 801878e:	4856      	ldr	r0, [pc, #344]	; (80188e8 <tcp_receive+0xb18>)
 8018790:	f004 ff40 	bl	801d614 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018798:	4b4e      	ldr	r3, [pc, #312]	; (80188d4 <tcp_receive+0xb04>)
 801879a:	881b      	ldrh	r3, [r3, #0]
 801879c:	1ad3      	subs	r3, r2, r3
 801879e:	b29a      	uxth	r2, r3
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80187a4:	6878      	ldr	r0, [r7, #4]
 80187a6:	f7fc ffc3 	bl	8015730 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80187aa:	4b4c      	ldr	r3, [pc, #304]	; (80188dc <tcp_receive+0xb0c>)
 80187ac:	685b      	ldr	r3, [r3, #4]
 80187ae:	891b      	ldrh	r3, [r3, #8]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d006      	beq.n	80187c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80187b4:	4b49      	ldr	r3, [pc, #292]	; (80188dc <tcp_receive+0xb0c>)
 80187b6:	685b      	ldr	r3, [r3, #4]
 80187b8:	4a4d      	ldr	r2, [pc, #308]	; (80188f0 <tcp_receive+0xb20>)
 80187ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80187bc:	4b47      	ldr	r3, [pc, #284]	; (80188dc <tcp_receive+0xb0c>)
 80187be:	2200      	movs	r2, #0
 80187c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80187c2:	4b46      	ldr	r3, [pc, #280]	; (80188dc <tcp_receive+0xb0c>)
 80187c4:	68db      	ldr	r3, [r3, #12]
 80187c6:	899b      	ldrh	r3, [r3, #12]
 80187c8:	b29b      	uxth	r3, r3
 80187ca:	4618      	mov	r0, r3
 80187cc:	f7fa fd52 	bl	8013274 <lwip_htons>
 80187d0:	4603      	mov	r3, r0
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	f003 0301 	and.w	r3, r3, #1
 80187d8:	2b00      	cmp	r3, #0
 80187da:	f000 80b8 	beq.w	801894e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80187de:	4b45      	ldr	r3, [pc, #276]	; (80188f4 <tcp_receive+0xb24>)
 80187e0:	781b      	ldrb	r3, [r3, #0]
 80187e2:	f043 0320 	orr.w	r3, r3, #32
 80187e6:	b2da      	uxtb	r2, r3
 80187e8:	4b42      	ldr	r3, [pc, #264]	; (80188f4 <tcp_receive+0xb24>)
 80187ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80187ec:	e0af      	b.n	801894e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187f8:	68db      	ldr	r3, [r3, #12]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	4a36      	ldr	r2, [pc, #216]	; (80188d8 <tcp_receive+0xb08>)
 80187fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	891b      	ldrh	r3, [r3, #8]
 8018804:	461c      	mov	r4, r3
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	68db      	ldr	r3, [r3, #12]
 801880a:	899b      	ldrh	r3, [r3, #12]
 801880c:	b29b      	uxth	r3, r3
 801880e:	4618      	mov	r0, r3
 8018810:	f7fa fd30 	bl	8013274 <lwip_htons>
 8018814:	4603      	mov	r3, r0
 8018816:	b2db      	uxtb	r3, r3
 8018818:	f003 0303 	and.w	r3, r3, #3
 801881c:	2b00      	cmp	r3, #0
 801881e:	d001      	beq.n	8018824 <tcp_receive+0xa54>
 8018820:	2301      	movs	r3, #1
 8018822:	e000      	b.n	8018826 <tcp_receive+0xa56>
 8018824:	2300      	movs	r3, #0
 8018826:	191a      	adds	r2, r3, r4
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801882c:	441a      	add	r2, r3
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018836:	461c      	mov	r4, r3
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	891b      	ldrh	r3, [r3, #8]
 801883c:	461d      	mov	r5, r3
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	68db      	ldr	r3, [r3, #12]
 8018842:	899b      	ldrh	r3, [r3, #12]
 8018844:	b29b      	uxth	r3, r3
 8018846:	4618      	mov	r0, r3
 8018848:	f7fa fd14 	bl	8013274 <lwip_htons>
 801884c:	4603      	mov	r3, r0
 801884e:	b2db      	uxtb	r3, r3
 8018850:	f003 0303 	and.w	r3, r3, #3
 8018854:	2b00      	cmp	r3, #0
 8018856:	d001      	beq.n	801885c <tcp_receive+0xa8c>
 8018858:	2301      	movs	r3, #1
 801885a:	e000      	b.n	801885e <tcp_receive+0xa8e>
 801885c:	2300      	movs	r3, #0
 801885e:	442b      	add	r3, r5
 8018860:	429c      	cmp	r4, r3
 8018862:	d206      	bcs.n	8018872 <tcp_receive+0xaa2>
 8018864:	4b1e      	ldr	r3, [pc, #120]	; (80188e0 <tcp_receive+0xb10>)
 8018866:	f240 622b 	movw	r2, #1579	; 0x62b
 801886a:	4923      	ldr	r1, [pc, #140]	; (80188f8 <tcp_receive+0xb28>)
 801886c:	481e      	ldr	r0, [pc, #120]	; (80188e8 <tcp_receive+0xb18>)
 801886e:	f004 fed1 	bl	801d614 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018872:	68bb      	ldr	r3, [r7, #8]
 8018874:	891b      	ldrh	r3, [r3, #8]
 8018876:	461c      	mov	r4, r3
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	68db      	ldr	r3, [r3, #12]
 801887c:	899b      	ldrh	r3, [r3, #12]
 801887e:	b29b      	uxth	r3, r3
 8018880:	4618      	mov	r0, r3
 8018882:	f7fa fcf7 	bl	8013274 <lwip_htons>
 8018886:	4603      	mov	r3, r0
 8018888:	b2db      	uxtb	r3, r3
 801888a:	f003 0303 	and.w	r3, r3, #3
 801888e:	2b00      	cmp	r3, #0
 8018890:	d001      	beq.n	8018896 <tcp_receive+0xac6>
 8018892:	2301      	movs	r3, #1
 8018894:	e000      	b.n	8018898 <tcp_receive+0xac8>
 8018896:	2300      	movs	r3, #0
 8018898:	1919      	adds	r1, r3, r4
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801889e:	b28b      	uxth	r3, r1
 80188a0:	1ad3      	subs	r3, r2, r3
 80188a2:	b29a      	uxth	r2, r3
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80188a8:	6878      	ldr	r0, [r7, #4]
 80188aa:	f7fc ff41 	bl	8015730 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	891b      	ldrh	r3, [r3, #8]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d028      	beq.n	801890a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80188b8:	4b0d      	ldr	r3, [pc, #52]	; (80188f0 <tcp_receive+0xb20>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d01d      	beq.n	80188fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80188c0:	4b0b      	ldr	r3, [pc, #44]	; (80188f0 <tcp_receive+0xb20>)
 80188c2:	681a      	ldr	r2, [r3, #0]
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	685b      	ldr	r3, [r3, #4]
 80188c8:	4619      	mov	r1, r3
 80188ca:	4610      	mov	r0, r2
 80188cc:	f7fc fa5e 	bl	8014d8c <pbuf_cat>
 80188d0:	e018      	b.n	8018904 <tcp_receive+0xb34>
 80188d2:	bf00      	nop
 80188d4:	2401aec6 	.word	0x2401aec6
 80188d8:	2401aebc 	.word	0x2401aebc
 80188dc:	2401ae9c 	.word	0x2401ae9c
 80188e0:	0801fcec 	.word	0x0801fcec
 80188e4:	080200cc 	.word	0x080200cc
 80188e8:	0801fd38 	.word	0x0801fd38
 80188ec:	08020108 	.word	0x08020108
 80188f0:	2401aecc 	.word	0x2401aecc
 80188f4:	2401aec9 	.word	0x2401aec9
 80188f8:	08020128 	.word	0x08020128
            } else {
              recv_data = cseg->p;
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	685b      	ldr	r3, [r3, #4]
 8018900:	4a70      	ldr	r2, [pc, #448]	; (8018ac4 <tcp_receive+0xcf4>)
 8018902:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	2200      	movs	r2, #0
 8018908:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	899b      	ldrh	r3, [r3, #12]
 8018910:	b29b      	uxth	r3, r3
 8018912:	4618      	mov	r0, r3
 8018914:	f7fa fcae 	bl	8013274 <lwip_htons>
 8018918:	4603      	mov	r3, r0
 801891a:	b2db      	uxtb	r3, r3
 801891c:	f003 0301 	and.w	r3, r3, #1
 8018920:	2b00      	cmp	r3, #0
 8018922:	d00d      	beq.n	8018940 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018924:	4b68      	ldr	r3, [pc, #416]	; (8018ac8 <tcp_receive+0xcf8>)
 8018926:	781b      	ldrb	r3, [r3, #0]
 8018928:	f043 0320 	orr.w	r3, r3, #32
 801892c:	b2da      	uxtb	r2, r3
 801892e:	4b66      	ldr	r3, [pc, #408]	; (8018ac8 <tcp_receive+0xcf8>)
 8018930:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	7d1b      	ldrb	r3, [r3, #20]
 8018936:	2b04      	cmp	r3, #4
 8018938:	d102      	bne.n	8018940 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	2207      	movs	r2, #7
 801893e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	681a      	ldr	r2, [r3, #0]
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018948:	68b8      	ldr	r0, [r7, #8]
 801894a:	f7fd fbd4 	bl	80160f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018952:	2b00      	cmp	r3, #0
 8018954:	d008      	beq.n	8018968 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	685a      	ldr	r2, [r3, #4]
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8018962:	429a      	cmp	r2, r3
 8018964:	f43f af43 	beq.w	80187ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	8b5b      	ldrh	r3, [r3, #26]
 801896c:	f003 0301 	and.w	r3, r3, #1
 8018970:	2b00      	cmp	r3, #0
 8018972:	d00e      	beq.n	8018992 <tcp_receive+0xbc2>
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	8b5b      	ldrh	r3, [r3, #26]
 8018978:	f023 0301 	bic.w	r3, r3, #1
 801897c:	b29a      	uxth	r2, r3
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	835a      	strh	r2, [r3, #26]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	8b5b      	ldrh	r3, [r3, #26]
 8018986:	f043 0302 	orr.w	r3, r3, #2
 801898a:	b29a      	uxth	r2, r3
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018990:	e188      	b.n	8018ca4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	8b5b      	ldrh	r3, [r3, #26]
 8018996:	f043 0301 	orr.w	r3, r3, #1
 801899a:	b29a      	uxth	r2, r3
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80189a0:	e180      	b.n	8018ca4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d106      	bne.n	80189b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80189aa:	4848      	ldr	r0, [pc, #288]	; (8018acc <tcp_receive+0xcfc>)
 80189ac:	f7fd fbbc 	bl	8016128 <tcp_seg_copy>
 80189b0:	4602      	mov	r2, r0
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	675a      	str	r2, [r3, #116]	; 0x74
 80189b6:	e16d      	b.n	8018c94 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80189b8:	2300      	movs	r3, #0
 80189ba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80189c2:	e157      	b.n	8018c74 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80189c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c6:	68db      	ldr	r3, [r3, #12]
 80189c8:	685a      	ldr	r2, [r3, #4]
 80189ca:	4b41      	ldr	r3, [pc, #260]	; (8018ad0 <tcp_receive+0xd00>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	429a      	cmp	r2, r3
 80189d0:	d11d      	bne.n	8018a0e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80189d2:	4b3e      	ldr	r3, [pc, #248]	; (8018acc <tcp_receive+0xcfc>)
 80189d4:	891a      	ldrh	r2, [r3, #8]
 80189d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d8:	891b      	ldrh	r3, [r3, #8]
 80189da:	429a      	cmp	r2, r3
 80189dc:	f240 814f 	bls.w	8018c7e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80189e0:	483a      	ldr	r0, [pc, #232]	; (8018acc <tcp_receive+0xcfc>)
 80189e2:	f7fd fba1 	bl	8016128 <tcp_seg_copy>
 80189e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	f000 8149 	beq.w	8018c82 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80189f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d003      	beq.n	80189fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 80189f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189f8:	697a      	ldr	r2, [r7, #20]
 80189fa:	601a      	str	r2, [r3, #0]
 80189fc:	e002      	b.n	8018a04 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	697a      	ldr	r2, [r7, #20]
 8018a02:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018a06:	6978      	ldr	r0, [r7, #20]
 8018a08:	f7ff f8de 	bl	8017bc8 <tcp_oos_insert_segment>
                }
                break;
 8018a0c:	e139      	b.n	8018c82 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d117      	bne.n	8018a44 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018a14:	4b2e      	ldr	r3, [pc, #184]	; (8018ad0 <tcp_receive+0xd00>)
 8018a16:	681a      	ldr	r2, [r3, #0]
 8018a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1a:	68db      	ldr	r3, [r3, #12]
 8018a1c:	685b      	ldr	r3, [r3, #4]
 8018a1e:	1ad3      	subs	r3, r2, r3
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	da57      	bge.n	8018ad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018a24:	4829      	ldr	r0, [pc, #164]	; (8018acc <tcp_receive+0xcfc>)
 8018a26:	f7fd fb7f 	bl	8016128 <tcp_seg_copy>
 8018a2a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018a2c:	69bb      	ldr	r3, [r7, #24]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	f000 8129 	beq.w	8018c86 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	69ba      	ldr	r2, [r7, #24]
 8018a38:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018a3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018a3c:	69b8      	ldr	r0, [r7, #24]
 8018a3e:	f7ff f8c3 	bl	8017bc8 <tcp_oos_insert_segment>
                  }
                  break;
 8018a42:	e120      	b.n	8018c86 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018a44:	4b22      	ldr	r3, [pc, #136]	; (8018ad0 <tcp_receive+0xd00>)
 8018a46:	681a      	ldr	r2, [r3, #0]
 8018a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a4a:	68db      	ldr	r3, [r3, #12]
 8018a4c:	685b      	ldr	r3, [r3, #4]
 8018a4e:	1ad3      	subs	r3, r2, r3
 8018a50:	3b01      	subs	r3, #1
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	db3e      	blt.n	8018ad4 <tcp_receive+0xd04>
 8018a56:	4b1e      	ldr	r3, [pc, #120]	; (8018ad0 <tcp_receive+0xd00>)
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a5c:	68db      	ldr	r3, [r3, #12]
 8018a5e:	685b      	ldr	r3, [r3, #4]
 8018a60:	1ad3      	subs	r3, r2, r3
 8018a62:	3301      	adds	r3, #1
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	dc35      	bgt.n	8018ad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018a68:	4818      	ldr	r0, [pc, #96]	; (8018acc <tcp_receive+0xcfc>)
 8018a6a:	f7fd fb5d 	bl	8016128 <tcp_seg_copy>
 8018a6e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018a70:	69fb      	ldr	r3, [r7, #28]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	f000 8109 	beq.w	8018c8a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a80:	8912      	ldrh	r2, [r2, #8]
 8018a82:	441a      	add	r2, r3
 8018a84:	4b12      	ldr	r3, [pc, #72]	; (8018ad0 <tcp_receive+0xd00>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	1ad3      	subs	r3, r2, r3
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	dd12      	ble.n	8018ab4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018a8e:	4b10      	ldr	r3, [pc, #64]	; (8018ad0 <tcp_receive+0xd00>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	b29a      	uxth	r2, r3
 8018a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a96:	68db      	ldr	r3, [r3, #12]
 8018a98:	685b      	ldr	r3, [r3, #4]
 8018a9a:	b29b      	uxth	r3, r3
 8018a9c:	1ad3      	subs	r3, r2, r3
 8018a9e:	b29a      	uxth	r2, r3
 8018aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aa2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aa6:	685a      	ldr	r2, [r3, #4]
 8018aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aaa:	891b      	ldrh	r3, [r3, #8]
 8018aac:	4619      	mov	r1, r3
 8018aae:	4610      	mov	r0, r2
 8018ab0:	f7fb ff18 	bl	80148e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ab6:	69fa      	ldr	r2, [r7, #28]
 8018ab8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018abc:	69f8      	ldr	r0, [r7, #28]
 8018abe:	f7ff f883 	bl	8017bc8 <tcp_oos_insert_segment>
                  }
                  break;
 8018ac2:	e0e2      	b.n	8018c8a <tcp_receive+0xeba>
 8018ac4:	2401aecc 	.word	0x2401aecc
 8018ac8:	2401aec9 	.word	0x2401aec9
 8018acc:	2401ae9c 	.word	0x2401ae9c
 8018ad0:	2401aebc 	.word	0x2401aebc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ad6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	f040 80c6 	bne.w	8018c6e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018ae2:	4b80      	ldr	r3, [pc, #512]	; (8018ce4 <tcp_receive+0xf14>)
 8018ae4:	681a      	ldr	r2, [r3, #0]
 8018ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ae8:	68db      	ldr	r3, [r3, #12]
 8018aea:	685b      	ldr	r3, [r3, #4]
 8018aec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	f340 80bd 	ble.w	8018c6e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af6:	68db      	ldr	r3, [r3, #12]
 8018af8:	899b      	ldrh	r3, [r3, #12]
 8018afa:	b29b      	uxth	r3, r3
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7fa fbb9 	bl	8013274 <lwip_htons>
 8018b02:	4603      	mov	r3, r0
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	f003 0301 	and.w	r3, r3, #1
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	f040 80bf 	bne.w	8018c8e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018b10:	4875      	ldr	r0, [pc, #468]	; (8018ce8 <tcp_receive+0xf18>)
 8018b12:	f7fd fb09 	bl	8016128 <tcp_seg_copy>
 8018b16:	4602      	mov	r2, r0
 8018b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b1a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	f000 80b6 	beq.w	8018c92 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b28:	68db      	ldr	r3, [r3, #12]
 8018b2a:	685b      	ldr	r3, [r3, #4]
 8018b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018b2e:	8912      	ldrh	r2, [r2, #8]
 8018b30:	441a      	add	r2, r3
 8018b32:	4b6c      	ldr	r3, [pc, #432]	; (8018ce4 <tcp_receive+0xf14>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	1ad3      	subs	r3, r2, r3
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	dd12      	ble.n	8018b62 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018b3c:	4b69      	ldr	r3, [pc, #420]	; (8018ce4 <tcp_receive+0xf14>)
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	b29a      	uxth	r2, r3
 8018b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b44:	68db      	ldr	r3, [r3, #12]
 8018b46:	685b      	ldr	r3, [r3, #4]
 8018b48:	b29b      	uxth	r3, r3
 8018b4a:	1ad3      	subs	r3, r2, r3
 8018b4c:	b29a      	uxth	r2, r3
 8018b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b50:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b54:	685a      	ldr	r2, [r3, #4]
 8018b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b58:	891b      	ldrh	r3, [r3, #8]
 8018b5a:	4619      	mov	r1, r3
 8018b5c:	4610      	mov	r0, r2
 8018b5e:	f7fb fec1 	bl	80148e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018b62:	4b62      	ldr	r3, [pc, #392]	; (8018cec <tcp_receive+0xf1c>)
 8018b64:	881b      	ldrh	r3, [r3, #0]
 8018b66:	461a      	mov	r2, r3
 8018b68:	4b5e      	ldr	r3, [pc, #376]	; (8018ce4 <tcp_receive+0xf14>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	441a      	add	r2, r3
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b72:	6879      	ldr	r1, [r7, #4]
 8018b74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b76:	440b      	add	r3, r1
 8018b78:	1ad3      	subs	r3, r2, r3
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f340 8089 	ble.w	8018c92 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	68db      	ldr	r3, [r3, #12]
 8018b86:	899b      	ldrh	r3, [r3, #12]
 8018b88:	b29b      	uxth	r3, r3
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7fa fb72 	bl	8013274 <lwip_htons>
 8018b90:	4603      	mov	r3, r0
 8018b92:	b2db      	uxtb	r3, r3
 8018b94:	f003 0301 	and.w	r3, r3, #1
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d022      	beq.n	8018be2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	68db      	ldr	r3, [r3, #12]
 8018ba2:	899b      	ldrh	r3, [r3, #12]
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	b21b      	sxth	r3, r3
 8018ba8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018bac:	b21c      	sxth	r4, r3
 8018bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	68db      	ldr	r3, [r3, #12]
 8018bb4:	899b      	ldrh	r3, [r3, #12]
 8018bb6:	b29b      	uxth	r3, r3
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7fa fb5b 	bl	8013274 <lwip_htons>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	b29b      	uxth	r3, r3
 8018bc4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f7fa fb52 	bl	8013274 <lwip_htons>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	b21b      	sxth	r3, r3
 8018bd4:	4323      	orrs	r3, r4
 8018bd6:	b21a      	sxth	r2, r3
 8018bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	b292      	uxth	r2, r2
 8018be0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018be6:	b29a      	uxth	r2, r3
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018bec:	4413      	add	r3, r2
 8018bee:	b299      	uxth	r1, r3
 8018bf0:	4b3c      	ldr	r3, [pc, #240]	; (8018ce4 <tcp_receive+0xf14>)
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	b29a      	uxth	r2, r3
 8018bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	1a8a      	subs	r2, r1, r2
 8018bfc:	b292      	uxth	r2, r2
 8018bfe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	685a      	ldr	r2, [r3, #4]
 8018c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	891b      	ldrh	r3, [r3, #8]
 8018c0c:	4619      	mov	r1, r3
 8018c0e:	4610      	mov	r0, r2
 8018c10:	f7fb fe68 	bl	80148e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	891c      	ldrh	r4, [r3, #8]
 8018c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	68db      	ldr	r3, [r3, #12]
 8018c20:	899b      	ldrh	r3, [r3, #12]
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7fa fb25 	bl	8013274 <lwip_htons>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	f003 0303 	and.w	r3, r3, #3
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d001      	beq.n	8018c3a <tcp_receive+0xe6a>
 8018c36:	2301      	movs	r3, #1
 8018c38:	e000      	b.n	8018c3c <tcp_receive+0xe6c>
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	4423      	add	r3, r4
 8018c3e:	b29a      	uxth	r2, r3
 8018c40:	4b2a      	ldr	r3, [pc, #168]	; (8018cec <tcp_receive+0xf1c>)
 8018c42:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018c44:	4b29      	ldr	r3, [pc, #164]	; (8018cec <tcp_receive+0xf1c>)
 8018c46:	881b      	ldrh	r3, [r3, #0]
 8018c48:	461a      	mov	r2, r3
 8018c4a:	4b26      	ldr	r3, [pc, #152]	; (8018ce4 <tcp_receive+0xf14>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	441a      	add	r2, r3
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c54:	6879      	ldr	r1, [r7, #4]
 8018c56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018c58:	440b      	add	r3, r1
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d019      	beq.n	8018c92 <tcp_receive+0xec2>
 8018c5e:	4b24      	ldr	r3, [pc, #144]	; (8018cf0 <tcp_receive+0xf20>)
 8018c60:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018c64:	4923      	ldr	r1, [pc, #140]	; (8018cf4 <tcp_receive+0xf24>)
 8018c66:	4824      	ldr	r0, [pc, #144]	; (8018cf8 <tcp_receive+0xf28>)
 8018c68:	f004 fcd4 	bl	801d614 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018c6c:	e011      	b.n	8018c92 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8018c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	f47f aea4 	bne.w	80189c4 <tcp_receive+0xbf4>
 8018c7c:	e00a      	b.n	8018c94 <tcp_receive+0xec4>
                break;
 8018c7e:	bf00      	nop
 8018c80:	e008      	b.n	8018c94 <tcp_receive+0xec4>
                break;
 8018c82:	bf00      	nop
 8018c84:	e006      	b.n	8018c94 <tcp_receive+0xec4>
                  break;
 8018c86:	bf00      	nop
 8018c88:	e004      	b.n	8018c94 <tcp_receive+0xec4>
                  break;
 8018c8a:	bf00      	nop
 8018c8c:	e002      	b.n	8018c94 <tcp_receive+0xec4>
                  break;
 8018c8e:	bf00      	nop
 8018c90:	e000      	b.n	8018c94 <tcp_receive+0xec4>
                break;
 8018c92:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f001 fa33 	bl	801a100 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018c9a:	e003      	b.n	8018ca4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f001 fa2f 	bl	801a100 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018ca2:	e01a      	b.n	8018cda <tcp_receive+0xf0a>
 8018ca4:	e019      	b.n	8018cda <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018ca6:	4b0f      	ldr	r3, [pc, #60]	; (8018ce4 <tcp_receive+0xf14>)
 8018ca8:	681a      	ldr	r2, [r3, #0]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cae:	1ad3      	subs	r3, r2, r3
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	db0a      	blt.n	8018cca <tcp_receive+0xefa>
 8018cb4:	4b0b      	ldr	r3, [pc, #44]	; (8018ce4 <tcp_receive+0xf14>)
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cbc:	6879      	ldr	r1, [r7, #4]
 8018cbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018cc0:	440b      	add	r3, r1
 8018cc2:	1ad3      	subs	r3, r2, r3
 8018cc4:	3301      	adds	r3, #1
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	dd07      	ble.n	8018cda <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	8b5b      	ldrh	r3, [r3, #26]
 8018cce:	f043 0302 	orr.w	r3, r3, #2
 8018cd2:	b29a      	uxth	r2, r3
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018cd8:	e7ff      	b.n	8018cda <tcp_receive+0xf0a>
 8018cda:	bf00      	nop
 8018cdc:	3750      	adds	r7, #80	; 0x50
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8018ce2:	bf00      	nop
 8018ce4:	2401aebc 	.word	0x2401aebc
 8018ce8:	2401ae9c 	.word	0x2401ae9c
 8018cec:	2401aec6 	.word	0x2401aec6
 8018cf0:	0801fcec 	.word	0x0801fcec
 8018cf4:	08020094 	.word	0x08020094
 8018cf8:	0801fd38 	.word	0x0801fd38

08018cfc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018cfc:	b480      	push	{r7}
 8018cfe:	b083      	sub	sp, #12
 8018d00:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018d02:	4b15      	ldr	r3, [pc, #84]	; (8018d58 <tcp_get_next_optbyte+0x5c>)
 8018d04:	881b      	ldrh	r3, [r3, #0]
 8018d06:	1c5a      	adds	r2, r3, #1
 8018d08:	b291      	uxth	r1, r2
 8018d0a:	4a13      	ldr	r2, [pc, #76]	; (8018d58 <tcp_get_next_optbyte+0x5c>)
 8018d0c:	8011      	strh	r1, [r2, #0]
 8018d0e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018d10:	4b12      	ldr	r3, [pc, #72]	; (8018d5c <tcp_get_next_optbyte+0x60>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d004      	beq.n	8018d22 <tcp_get_next_optbyte+0x26>
 8018d18:	4b11      	ldr	r3, [pc, #68]	; (8018d60 <tcp_get_next_optbyte+0x64>)
 8018d1a:	881b      	ldrh	r3, [r3, #0]
 8018d1c:	88fa      	ldrh	r2, [r7, #6]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	d208      	bcs.n	8018d34 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018d22:	4b10      	ldr	r3, [pc, #64]	; (8018d64 <tcp_get_next_optbyte+0x68>)
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	3314      	adds	r3, #20
 8018d28:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018d2a:	88fb      	ldrh	r3, [r7, #6]
 8018d2c:	683a      	ldr	r2, [r7, #0]
 8018d2e:	4413      	add	r3, r2
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	e00b      	b.n	8018d4c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018d34:	88fb      	ldrh	r3, [r7, #6]
 8018d36:	b2da      	uxtb	r2, r3
 8018d38:	4b09      	ldr	r3, [pc, #36]	; (8018d60 <tcp_get_next_optbyte+0x64>)
 8018d3a:	881b      	ldrh	r3, [r3, #0]
 8018d3c:	b2db      	uxtb	r3, r3
 8018d3e:	1ad3      	subs	r3, r2, r3
 8018d40:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018d42:	4b06      	ldr	r3, [pc, #24]	; (8018d5c <tcp_get_next_optbyte+0x60>)
 8018d44:	681a      	ldr	r2, [r3, #0]
 8018d46:	797b      	ldrb	r3, [r7, #5]
 8018d48:	4413      	add	r3, r2
 8018d4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	370c      	adds	r7, #12
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr
 8018d58:	2401aeb8 	.word	0x2401aeb8
 8018d5c:	2401aeb4 	.word	0x2401aeb4
 8018d60:	2401aeb2 	.word	0x2401aeb2
 8018d64:	2401aeac 	.word	0x2401aeac

08018d68 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b084      	sub	sp, #16
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d106      	bne.n	8018d84 <tcp_parseopt+0x1c>
 8018d76:	4b32      	ldr	r3, [pc, #200]	; (8018e40 <tcp_parseopt+0xd8>)
 8018d78:	f240 727d 	movw	r2, #1917	; 0x77d
 8018d7c:	4931      	ldr	r1, [pc, #196]	; (8018e44 <tcp_parseopt+0xdc>)
 8018d7e:	4832      	ldr	r0, [pc, #200]	; (8018e48 <tcp_parseopt+0xe0>)
 8018d80:	f004 fc48 	bl	801d614 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018d84:	4b31      	ldr	r3, [pc, #196]	; (8018e4c <tcp_parseopt+0xe4>)
 8018d86:	881b      	ldrh	r3, [r3, #0]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d056      	beq.n	8018e3a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018d8c:	4b30      	ldr	r3, [pc, #192]	; (8018e50 <tcp_parseopt+0xe8>)
 8018d8e:	2200      	movs	r2, #0
 8018d90:	801a      	strh	r2, [r3, #0]
 8018d92:	e046      	b.n	8018e22 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018d94:	f7ff ffb2 	bl	8018cfc <tcp_get_next_optbyte>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018d9c:	7bfb      	ldrb	r3, [r7, #15]
 8018d9e:	2b02      	cmp	r3, #2
 8018da0:	d006      	beq.n	8018db0 <tcp_parseopt+0x48>
 8018da2:	2b02      	cmp	r3, #2
 8018da4:	dc2c      	bgt.n	8018e00 <tcp_parseopt+0x98>
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d042      	beq.n	8018e30 <tcp_parseopt+0xc8>
 8018daa:	2b01      	cmp	r3, #1
 8018dac:	d128      	bne.n	8018e00 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018dae:	e038      	b.n	8018e22 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018db0:	f7ff ffa4 	bl	8018cfc <tcp_get_next_optbyte>
 8018db4:	4603      	mov	r3, r0
 8018db6:	2b04      	cmp	r3, #4
 8018db8:	d13c      	bne.n	8018e34 <tcp_parseopt+0xcc>
 8018dba:	4b25      	ldr	r3, [pc, #148]	; (8018e50 <tcp_parseopt+0xe8>)
 8018dbc:	881b      	ldrh	r3, [r3, #0]
 8018dbe:	3301      	adds	r3, #1
 8018dc0:	4a22      	ldr	r2, [pc, #136]	; (8018e4c <tcp_parseopt+0xe4>)
 8018dc2:	8812      	ldrh	r2, [r2, #0]
 8018dc4:	4293      	cmp	r3, r2
 8018dc6:	da35      	bge.n	8018e34 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018dc8:	f7ff ff98 	bl	8018cfc <tcp_get_next_optbyte>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	b29b      	uxth	r3, r3
 8018dd0:	021b      	lsls	r3, r3, #8
 8018dd2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018dd4:	f7ff ff92 	bl	8018cfc <tcp_get_next_optbyte>
 8018dd8:	4603      	mov	r3, r0
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	89bb      	ldrh	r3, [r7, #12]
 8018dde:	4313      	orrs	r3, r2
 8018de0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018de2:	89bb      	ldrh	r3, [r7, #12]
 8018de4:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8018de8:	4293      	cmp	r3, r2
 8018dea:	d804      	bhi.n	8018df6 <tcp_parseopt+0x8e>
 8018dec:	89bb      	ldrh	r3, [r7, #12]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d001      	beq.n	8018df6 <tcp_parseopt+0x8e>
 8018df2:	89ba      	ldrh	r2, [r7, #12]
 8018df4:	e001      	b.n	8018dfa <tcp_parseopt+0x92>
 8018df6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018dfe:	e010      	b.n	8018e22 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018e00:	f7ff ff7c 	bl	8018cfc <tcp_get_next_optbyte>
 8018e04:	4603      	mov	r3, r0
 8018e06:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018e08:	7afb      	ldrb	r3, [r7, #11]
 8018e0a:	2b01      	cmp	r3, #1
 8018e0c:	d914      	bls.n	8018e38 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018e0e:	7afb      	ldrb	r3, [r7, #11]
 8018e10:	b29a      	uxth	r2, r3
 8018e12:	4b0f      	ldr	r3, [pc, #60]	; (8018e50 <tcp_parseopt+0xe8>)
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	4413      	add	r3, r2
 8018e18:	b29b      	uxth	r3, r3
 8018e1a:	3b02      	subs	r3, #2
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	4b0c      	ldr	r3, [pc, #48]	; (8018e50 <tcp_parseopt+0xe8>)
 8018e20:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018e22:	4b0b      	ldr	r3, [pc, #44]	; (8018e50 <tcp_parseopt+0xe8>)
 8018e24:	881a      	ldrh	r2, [r3, #0]
 8018e26:	4b09      	ldr	r3, [pc, #36]	; (8018e4c <tcp_parseopt+0xe4>)
 8018e28:	881b      	ldrh	r3, [r3, #0]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d3b2      	bcc.n	8018d94 <tcp_parseopt+0x2c>
 8018e2e:	e004      	b.n	8018e3a <tcp_parseopt+0xd2>
          return;
 8018e30:	bf00      	nop
 8018e32:	e002      	b.n	8018e3a <tcp_parseopt+0xd2>
            return;
 8018e34:	bf00      	nop
 8018e36:	e000      	b.n	8018e3a <tcp_parseopt+0xd2>
            return;
 8018e38:	bf00      	nop
      }
    }
  }
}
 8018e3a:	3710      	adds	r7, #16
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	bd80      	pop	{r7, pc}
 8018e40:	0801fcec 	.word	0x0801fcec
 8018e44:	08020150 	.word	0x08020150
 8018e48:	0801fd38 	.word	0x0801fd38
 8018e4c:	2401aeb0 	.word	0x2401aeb0
 8018e50:	2401aeb8 	.word	0x2401aeb8

08018e54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018e54:	b480      	push	{r7}
 8018e56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018e58:	4b05      	ldr	r3, [pc, #20]	; (8018e70 <tcp_trigger_input_pcb_close+0x1c>)
 8018e5a:	781b      	ldrb	r3, [r3, #0]
 8018e5c:	f043 0310 	orr.w	r3, r3, #16
 8018e60:	b2da      	uxtb	r2, r3
 8018e62:	4b03      	ldr	r3, [pc, #12]	; (8018e70 <tcp_trigger_input_pcb_close+0x1c>)
 8018e64:	701a      	strb	r2, [r3, #0]
}
 8018e66:	bf00      	nop
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6e:	4770      	bx	lr
 8018e70:	2401aec9 	.word	0x2401aec9

08018e74 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b084      	sub	sp, #16
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	60f8      	str	r0, [r7, #12]
 8018e7c:	60b9      	str	r1, [r7, #8]
 8018e7e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d00a      	beq.n	8018e9c <tcp_route+0x28>
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	7a1b      	ldrb	r3, [r3, #8]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d006      	beq.n	8018e9c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	7a1b      	ldrb	r3, [r3, #8]
 8018e92:	4618      	mov	r0, r3
 8018e94:	f7fb fb1a 	bl	80144cc <netif_get_by_index>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	e003      	b.n	8018ea4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f002 fed3 	bl	801bc48 <ip4_route>
 8018ea2:	4603      	mov	r3, r0
  }
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3710      	adds	r7, #16
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018eac:	b590      	push	{r4, r7, lr}
 8018eae:	b087      	sub	sp, #28
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	60f8      	str	r0, [r7, #12]
 8018eb4:	60b9      	str	r1, [r7, #8]
 8018eb6:	603b      	str	r3, [r7, #0]
 8018eb8:	4613      	mov	r3, r2
 8018eba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d105      	bne.n	8018ece <tcp_create_segment+0x22>
 8018ec2:	4b44      	ldr	r3, [pc, #272]	; (8018fd4 <tcp_create_segment+0x128>)
 8018ec4:	22a3      	movs	r2, #163	; 0xa3
 8018ec6:	4944      	ldr	r1, [pc, #272]	; (8018fd8 <tcp_create_segment+0x12c>)
 8018ec8:	4844      	ldr	r0, [pc, #272]	; (8018fdc <tcp_create_segment+0x130>)
 8018eca:	f004 fba3 	bl	801d614 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018ece:	68bb      	ldr	r3, [r7, #8]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d105      	bne.n	8018ee0 <tcp_create_segment+0x34>
 8018ed4:	4b3f      	ldr	r3, [pc, #252]	; (8018fd4 <tcp_create_segment+0x128>)
 8018ed6:	22a4      	movs	r2, #164	; 0xa4
 8018ed8:	4941      	ldr	r1, [pc, #260]	; (8018fe0 <tcp_create_segment+0x134>)
 8018eda:	4840      	ldr	r0, [pc, #256]	; (8018fdc <tcp_create_segment+0x130>)
 8018edc:	f004 fb9a 	bl	801d614 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018ee4:	009b      	lsls	r3, r3, #2
 8018ee6:	b2db      	uxtb	r3, r3
 8018ee8:	f003 0304 	and.w	r3, r3, #4
 8018eec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018eee:	2003      	movs	r0, #3
 8018ef0:	f7fa ff60 	bl	8013db4 <memp_malloc>
 8018ef4:	6138      	str	r0, [r7, #16]
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d104      	bne.n	8018f06 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018efc:	68b8      	ldr	r0, [r7, #8]
 8018efe:	f7fb fe77 	bl	8014bf0 <pbuf_free>
    return NULL;
 8018f02:	2300      	movs	r3, #0
 8018f04:	e061      	b.n	8018fca <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018f0c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	2200      	movs	r2, #0
 8018f12:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018f14:	693b      	ldr	r3, [r7, #16]
 8018f16:	68ba      	ldr	r2, [r7, #8]
 8018f18:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	891a      	ldrh	r2, [r3, #8]
 8018f1e:	7dfb      	ldrb	r3, [r7, #23]
 8018f20:	b29b      	uxth	r3, r3
 8018f22:	429a      	cmp	r2, r3
 8018f24:	d205      	bcs.n	8018f32 <tcp_create_segment+0x86>
 8018f26:	4b2b      	ldr	r3, [pc, #172]	; (8018fd4 <tcp_create_segment+0x128>)
 8018f28:	22b0      	movs	r2, #176	; 0xb0
 8018f2a:	492e      	ldr	r1, [pc, #184]	; (8018fe4 <tcp_create_segment+0x138>)
 8018f2c:	482b      	ldr	r0, [pc, #172]	; (8018fdc <tcp_create_segment+0x130>)
 8018f2e:	f004 fb71 	bl	801d614 <iprintf>
  seg->len = p->tot_len - optlen;
 8018f32:	68bb      	ldr	r3, [r7, #8]
 8018f34:	891a      	ldrh	r2, [r3, #8]
 8018f36:	7dfb      	ldrb	r3, [r7, #23]
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	1ad3      	subs	r3, r2, r3
 8018f3c:	b29a      	uxth	r2, r3
 8018f3e:	693b      	ldr	r3, [r7, #16]
 8018f40:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018f42:	2114      	movs	r1, #20
 8018f44:	68b8      	ldr	r0, [r7, #8]
 8018f46:	f7fb fdbd 	bl	8014ac4 <pbuf_add_header>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d004      	beq.n	8018f5a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018f50:	6938      	ldr	r0, [r7, #16]
 8018f52:	f7fd f8d0 	bl	80160f6 <tcp_seg_free>
    return NULL;
 8018f56:	2300      	movs	r3, #0
 8018f58:	e037      	b.n	8018fca <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018f5a:	693b      	ldr	r3, [r7, #16]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	685a      	ldr	r2, [r3, #4]
 8018f60:	693b      	ldr	r3, [r7, #16]
 8018f62:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	8ada      	ldrh	r2, [r3, #22]
 8018f68:	693b      	ldr	r3, [r7, #16]
 8018f6a:	68dc      	ldr	r4, [r3, #12]
 8018f6c:	4610      	mov	r0, r2
 8018f6e:	f7fa f981 	bl	8013274 <lwip_htons>
 8018f72:	4603      	mov	r3, r0
 8018f74:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	8b1a      	ldrh	r2, [r3, #24]
 8018f7a:	693b      	ldr	r3, [r7, #16]
 8018f7c:	68dc      	ldr	r4, [r3, #12]
 8018f7e:	4610      	mov	r0, r2
 8018f80:	f7fa f978 	bl	8013274 <lwip_htons>
 8018f84:	4603      	mov	r3, r0
 8018f86:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018f88:	693b      	ldr	r3, [r7, #16]
 8018f8a:	68dc      	ldr	r4, [r3, #12]
 8018f8c:	6838      	ldr	r0, [r7, #0]
 8018f8e:	f7fa f986 	bl	801329e <lwip_htonl>
 8018f92:	4603      	mov	r3, r0
 8018f94:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018f96:	7dfb      	ldrb	r3, [r7, #23]
 8018f98:	089b      	lsrs	r3, r3, #2
 8018f9a:	b2db      	uxtb	r3, r3
 8018f9c:	b29b      	uxth	r3, r3
 8018f9e:	3305      	adds	r3, #5
 8018fa0:	b29b      	uxth	r3, r3
 8018fa2:	031b      	lsls	r3, r3, #12
 8018fa4:	b29a      	uxth	r2, r3
 8018fa6:	79fb      	ldrb	r3, [r7, #7]
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	4313      	orrs	r3, r2
 8018fac:	b29a      	uxth	r2, r3
 8018fae:	693b      	ldr	r3, [r7, #16]
 8018fb0:	68dc      	ldr	r4, [r3, #12]
 8018fb2:	4610      	mov	r0, r2
 8018fb4:	f7fa f95e 	bl	8013274 <lwip_htons>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	68db      	ldr	r3, [r3, #12]
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	749a      	strb	r2, [r3, #18]
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	74da      	strb	r2, [r3, #19]
  return seg;
 8018fc8:	693b      	ldr	r3, [r7, #16]
}
 8018fca:	4618      	mov	r0, r3
 8018fcc:	371c      	adds	r7, #28
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd90      	pop	{r4, r7, pc}
 8018fd2:	bf00      	nop
 8018fd4:	0802016c 	.word	0x0802016c
 8018fd8:	080201a0 	.word	0x080201a0
 8018fdc:	080201c0 	.word	0x080201c0
 8018fe0:	080201e8 	.word	0x080201e8
 8018fe4:	0802020c 	.word	0x0802020c

08018fe8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018fe8:	b590      	push	{r4, r7, lr}
 8018fea:	b08b      	sub	sp, #44	; 0x2c
 8018fec:	af02      	add	r7, sp, #8
 8018fee:	6078      	str	r0, [r7, #4]
 8018ff0:	460b      	mov	r3, r1
 8018ff2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	61fb      	str	r3, [r7, #28]
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d106      	bne.n	8019014 <tcp_split_unsent_seg+0x2c>
 8019006:	4b95      	ldr	r3, [pc, #596]	; (801925c <tcp_split_unsent_seg+0x274>)
 8019008:	f240 324b 	movw	r2, #843	; 0x34b
 801900c:	4994      	ldr	r1, [pc, #592]	; (8019260 <tcp_split_unsent_seg+0x278>)
 801900e:	4895      	ldr	r0, [pc, #596]	; (8019264 <tcp_split_unsent_seg+0x27c>)
 8019010:	f004 fb00 	bl	801d614 <iprintf>

  useg = pcb->unsent;
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019018:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801901a:	697b      	ldr	r3, [r7, #20]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d102      	bne.n	8019026 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019020:	f04f 33ff 	mov.w	r3, #4294967295
 8019024:	e116      	b.n	8019254 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8019026:	887b      	ldrh	r3, [r7, #2]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d109      	bne.n	8019040 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801902c:	4b8b      	ldr	r3, [pc, #556]	; (801925c <tcp_split_unsent_seg+0x274>)
 801902e:	f240 3253 	movw	r2, #851	; 0x353
 8019032:	498d      	ldr	r1, [pc, #564]	; (8019268 <tcp_split_unsent_seg+0x280>)
 8019034:	488b      	ldr	r0, [pc, #556]	; (8019264 <tcp_split_unsent_seg+0x27c>)
 8019036:	f004 faed 	bl	801d614 <iprintf>
    return ERR_VAL;
 801903a:	f06f 0305 	mvn.w	r3, #5
 801903e:	e109      	b.n	8019254 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019040:	697b      	ldr	r3, [r7, #20]
 8019042:	891b      	ldrh	r3, [r3, #8]
 8019044:	887a      	ldrh	r2, [r7, #2]
 8019046:	429a      	cmp	r2, r3
 8019048:	d301      	bcc.n	801904e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801904a:	2300      	movs	r3, #0
 801904c:	e102      	b.n	8019254 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019052:	887a      	ldrh	r2, [r7, #2]
 8019054:	429a      	cmp	r2, r3
 8019056:	d906      	bls.n	8019066 <tcp_split_unsent_seg+0x7e>
 8019058:	4b80      	ldr	r3, [pc, #512]	; (801925c <tcp_split_unsent_seg+0x274>)
 801905a:	f240 325b 	movw	r2, #859	; 0x35b
 801905e:	4983      	ldr	r1, [pc, #524]	; (801926c <tcp_split_unsent_seg+0x284>)
 8019060:	4880      	ldr	r0, [pc, #512]	; (8019264 <tcp_split_unsent_seg+0x27c>)
 8019062:	f004 fad7 	bl	801d614 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019066:	697b      	ldr	r3, [r7, #20]
 8019068:	891b      	ldrh	r3, [r3, #8]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d106      	bne.n	801907c <tcp_split_unsent_seg+0x94>
 801906e:	4b7b      	ldr	r3, [pc, #492]	; (801925c <tcp_split_unsent_seg+0x274>)
 8019070:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8019074:	497e      	ldr	r1, [pc, #504]	; (8019270 <tcp_split_unsent_seg+0x288>)
 8019076:	487b      	ldr	r0, [pc, #492]	; (8019264 <tcp_split_unsent_seg+0x27c>)
 8019078:	f004 facc 	bl	801d614 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801907c:	697b      	ldr	r3, [r7, #20]
 801907e:	7a9b      	ldrb	r3, [r3, #10]
 8019080:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019082:	7bfb      	ldrb	r3, [r7, #15]
 8019084:	009b      	lsls	r3, r3, #2
 8019086:	b2db      	uxtb	r3, r3
 8019088:	f003 0304 	and.w	r3, r3, #4
 801908c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801908e:	697b      	ldr	r3, [r7, #20]
 8019090:	891a      	ldrh	r2, [r3, #8]
 8019092:	887b      	ldrh	r3, [r7, #2]
 8019094:	1ad3      	subs	r3, r2, r3
 8019096:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019098:	7bbb      	ldrb	r3, [r7, #14]
 801909a:	b29a      	uxth	r2, r3
 801909c:	89bb      	ldrh	r3, [r7, #12]
 801909e:	4413      	add	r3, r2
 80190a0:	b29b      	uxth	r3, r3
 80190a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190a6:	4619      	mov	r1, r3
 80190a8:	2036      	movs	r0, #54	; 0x36
 80190aa:	f7fb fab9 	bl	8014620 <pbuf_alloc>
 80190ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80190b0:	693b      	ldr	r3, [r7, #16]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f000 80b7 	beq.w	8019226 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80190b8:	697b      	ldr	r3, [r7, #20]
 80190ba:	685b      	ldr	r3, [r3, #4]
 80190bc:	891a      	ldrh	r2, [r3, #8]
 80190be:	697b      	ldr	r3, [r7, #20]
 80190c0:	891b      	ldrh	r3, [r3, #8]
 80190c2:	1ad3      	subs	r3, r2, r3
 80190c4:	b29a      	uxth	r2, r3
 80190c6:	887b      	ldrh	r3, [r7, #2]
 80190c8:	4413      	add	r3, r2
 80190ca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80190cc:	697b      	ldr	r3, [r7, #20]
 80190ce:	6858      	ldr	r0, [r3, #4]
 80190d0:	693b      	ldr	r3, [r7, #16]
 80190d2:	685a      	ldr	r2, [r3, #4]
 80190d4:	7bbb      	ldrb	r3, [r7, #14]
 80190d6:	18d1      	adds	r1, r2, r3
 80190d8:	897b      	ldrh	r3, [r7, #10]
 80190da:	89ba      	ldrh	r2, [r7, #12]
 80190dc:	f7fb ff7e 	bl	8014fdc <pbuf_copy_partial>
 80190e0:	4603      	mov	r3, r0
 80190e2:	461a      	mov	r2, r3
 80190e4:	89bb      	ldrh	r3, [r7, #12]
 80190e6:	4293      	cmp	r3, r2
 80190e8:	f040 809f 	bne.w	801922a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	68db      	ldr	r3, [r3, #12]
 80190f0:	899b      	ldrh	r3, [r3, #12]
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7fa f8bd 	bl	8013274 <lwip_htons>
 80190fa:	4603      	mov	r3, r0
 80190fc:	b2db      	uxtb	r3, r3
 80190fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019102:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019104:	2300      	movs	r3, #0
 8019106:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019108:	7efb      	ldrb	r3, [r7, #27]
 801910a:	f003 0308 	and.w	r3, r3, #8
 801910e:	2b00      	cmp	r3, #0
 8019110:	d007      	beq.n	8019122 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019112:	7efb      	ldrb	r3, [r7, #27]
 8019114:	f023 0308 	bic.w	r3, r3, #8
 8019118:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801911a:	7ebb      	ldrb	r3, [r7, #26]
 801911c:	f043 0308 	orr.w	r3, r3, #8
 8019120:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8019122:	7efb      	ldrb	r3, [r7, #27]
 8019124:	f003 0301 	and.w	r3, r3, #1
 8019128:	2b00      	cmp	r3, #0
 801912a:	d007      	beq.n	801913c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801912c:	7efb      	ldrb	r3, [r7, #27]
 801912e:	f023 0301 	bic.w	r3, r3, #1
 8019132:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019134:	7ebb      	ldrb	r3, [r7, #26]
 8019136:	f043 0301 	orr.w	r3, r3, #1
 801913a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801913c:	697b      	ldr	r3, [r7, #20]
 801913e:	68db      	ldr	r3, [r3, #12]
 8019140:	685b      	ldr	r3, [r3, #4]
 8019142:	4618      	mov	r0, r3
 8019144:	f7fa f8ab 	bl	801329e <lwip_htonl>
 8019148:	4602      	mov	r2, r0
 801914a:	887b      	ldrh	r3, [r7, #2]
 801914c:	18d1      	adds	r1, r2, r3
 801914e:	7eba      	ldrb	r2, [r7, #26]
 8019150:	7bfb      	ldrb	r3, [r7, #15]
 8019152:	9300      	str	r3, [sp, #0]
 8019154:	460b      	mov	r3, r1
 8019156:	6939      	ldr	r1, [r7, #16]
 8019158:	6878      	ldr	r0, [r7, #4]
 801915a:	f7ff fea7 	bl	8018eac <tcp_create_segment>
 801915e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019160:	69fb      	ldr	r3, [r7, #28]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d063      	beq.n	801922e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019166:	697b      	ldr	r3, [r7, #20]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	4618      	mov	r0, r3
 801916c:	f7fb fdce 	bl	8014d0c <pbuf_clen>
 8019170:	4603      	mov	r3, r0
 8019172:	461a      	mov	r2, r3
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801917a:	1a9b      	subs	r3, r3, r2
 801917c:	b29a      	uxth	r2, r3
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019184:	697b      	ldr	r3, [r7, #20]
 8019186:	6858      	ldr	r0, [r3, #4]
 8019188:	697b      	ldr	r3, [r7, #20]
 801918a:	685b      	ldr	r3, [r3, #4]
 801918c:	891a      	ldrh	r2, [r3, #8]
 801918e:	89bb      	ldrh	r3, [r7, #12]
 8019190:	1ad3      	subs	r3, r2, r3
 8019192:	b29b      	uxth	r3, r3
 8019194:	4619      	mov	r1, r3
 8019196:	f7fb fba5 	bl	80148e4 <pbuf_realloc>
  useg->len -= remainder;
 801919a:	697b      	ldr	r3, [r7, #20]
 801919c:	891a      	ldrh	r2, [r3, #8]
 801919e:	89bb      	ldrh	r3, [r7, #12]
 80191a0:	1ad3      	subs	r3, r2, r3
 80191a2:	b29a      	uxth	r2, r3
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80191a8:	697b      	ldr	r3, [r7, #20]
 80191aa:	68db      	ldr	r3, [r3, #12]
 80191ac:	899b      	ldrh	r3, [r3, #12]
 80191ae:	b29c      	uxth	r4, r3
 80191b0:	7efb      	ldrb	r3, [r7, #27]
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	4618      	mov	r0, r3
 80191b6:	f7fa f85d 	bl	8013274 <lwip_htons>
 80191ba:	4603      	mov	r3, r0
 80191bc:	461a      	mov	r2, r3
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	68db      	ldr	r3, [r3, #12]
 80191c2:	4322      	orrs	r2, r4
 80191c4:	b292      	uxth	r2, r2
 80191c6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	685b      	ldr	r3, [r3, #4]
 80191cc:	4618      	mov	r0, r3
 80191ce:	f7fb fd9d 	bl	8014d0c <pbuf_clen>
 80191d2:	4603      	mov	r3, r0
 80191d4:	461a      	mov	r2, r3
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80191dc:	4413      	add	r3, r2
 80191de:	b29a      	uxth	r2, r3
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80191e6:	69fb      	ldr	r3, [r7, #28]
 80191e8:	685b      	ldr	r3, [r3, #4]
 80191ea:	4618      	mov	r0, r3
 80191ec:	f7fb fd8e 	bl	8014d0c <pbuf_clen>
 80191f0:	4603      	mov	r3, r0
 80191f2:	461a      	mov	r2, r3
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80191fa:	4413      	add	r3, r2
 80191fc:	b29a      	uxth	r2, r3
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019204:	697b      	ldr	r3, [r7, #20]
 8019206:	681a      	ldr	r2, [r3, #0]
 8019208:	69fb      	ldr	r3, [r7, #28]
 801920a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801920c:	697b      	ldr	r3, [r7, #20]
 801920e:	69fa      	ldr	r2, [r7, #28]
 8019210:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019212:	69fb      	ldr	r3, [r7, #28]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d103      	bne.n	8019222 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2200      	movs	r2, #0
 801921e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8019222:	2300      	movs	r3, #0
 8019224:	e016      	b.n	8019254 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8019226:	bf00      	nop
 8019228:	e002      	b.n	8019230 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801922a:	bf00      	nop
 801922c:	e000      	b.n	8019230 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801922e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019230:	69fb      	ldr	r3, [r7, #28]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d006      	beq.n	8019244 <tcp_split_unsent_seg+0x25c>
 8019236:	4b09      	ldr	r3, [pc, #36]	; (801925c <tcp_split_unsent_seg+0x274>)
 8019238:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801923c:	490d      	ldr	r1, [pc, #52]	; (8019274 <tcp_split_unsent_seg+0x28c>)
 801923e:	4809      	ldr	r0, [pc, #36]	; (8019264 <tcp_split_unsent_seg+0x27c>)
 8019240:	f004 f9e8 	bl	801d614 <iprintf>
  if (p != NULL) {
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d002      	beq.n	8019250 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801924a:	6938      	ldr	r0, [r7, #16]
 801924c:	f7fb fcd0 	bl	8014bf0 <pbuf_free>
  }

  return ERR_MEM;
 8019250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019254:	4618      	mov	r0, r3
 8019256:	3724      	adds	r7, #36	; 0x24
 8019258:	46bd      	mov	sp, r7
 801925a:	bd90      	pop	{r4, r7, pc}
 801925c:	0802016c 	.word	0x0802016c
 8019260:	08020500 	.word	0x08020500
 8019264:	080201c0 	.word	0x080201c0
 8019268:	08020524 	.word	0x08020524
 801926c:	08020548 	.word	0x08020548
 8019270:	08020558 	.word	0x08020558
 8019274:	08020568 	.word	0x08020568

08019278 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019278:	b590      	push	{r4, r7, lr}
 801927a:	b085      	sub	sp, #20
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d106      	bne.n	8019294 <tcp_send_fin+0x1c>
 8019286:	4b21      	ldr	r3, [pc, #132]	; (801930c <tcp_send_fin+0x94>)
 8019288:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801928c:	4920      	ldr	r1, [pc, #128]	; (8019310 <tcp_send_fin+0x98>)
 801928e:	4821      	ldr	r0, [pc, #132]	; (8019314 <tcp_send_fin+0x9c>)
 8019290:	f004 f9c0 	bl	801d614 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019298:	2b00      	cmp	r3, #0
 801929a:	d02e      	beq.n	80192fa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80192a0:	60fb      	str	r3, [r7, #12]
 80192a2:	e002      	b.n	80192aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d1f8      	bne.n	80192a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	68db      	ldr	r3, [r3, #12]
 80192b6:	899b      	ldrh	r3, [r3, #12]
 80192b8:	b29b      	uxth	r3, r3
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7f9 ffda 	bl	8013274 <lwip_htons>
 80192c0:	4603      	mov	r3, r0
 80192c2:	b2db      	uxtb	r3, r3
 80192c4:	f003 0307 	and.w	r3, r3, #7
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d116      	bne.n	80192fa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	68db      	ldr	r3, [r3, #12]
 80192d0:	899b      	ldrh	r3, [r3, #12]
 80192d2:	b29c      	uxth	r4, r3
 80192d4:	2001      	movs	r0, #1
 80192d6:	f7f9 ffcd 	bl	8013274 <lwip_htons>
 80192da:	4603      	mov	r3, r0
 80192dc:	461a      	mov	r2, r3
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	4322      	orrs	r2, r4
 80192e4:	b292      	uxth	r2, r2
 80192e6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	8b5b      	ldrh	r3, [r3, #26]
 80192ec:	f043 0320 	orr.w	r3, r3, #32
 80192f0:	b29a      	uxth	r2, r3
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80192f6:	2300      	movs	r3, #0
 80192f8:	e004      	b.n	8019304 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80192fa:	2101      	movs	r1, #1
 80192fc:	6878      	ldr	r0, [r7, #4]
 80192fe:	f000 f80b 	bl	8019318 <tcp_enqueue_flags>
 8019302:	4603      	mov	r3, r0
}
 8019304:	4618      	mov	r0, r3
 8019306:	3714      	adds	r7, #20
 8019308:	46bd      	mov	sp, r7
 801930a:	bd90      	pop	{r4, r7, pc}
 801930c:	0802016c 	.word	0x0802016c
 8019310:	08020574 	.word	0x08020574
 8019314:	080201c0 	.word	0x080201c0

08019318 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b08a      	sub	sp, #40	; 0x28
 801931c:	af02      	add	r7, sp, #8
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	460b      	mov	r3, r1
 8019322:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019324:	2300      	movs	r3, #0
 8019326:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019328:	2300      	movs	r3, #0
 801932a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801932c:	78fb      	ldrb	r3, [r7, #3]
 801932e:	f003 0303 	and.w	r3, r3, #3
 8019332:	2b00      	cmp	r3, #0
 8019334:	d106      	bne.n	8019344 <tcp_enqueue_flags+0x2c>
 8019336:	4b67      	ldr	r3, [pc, #412]	; (80194d4 <tcp_enqueue_flags+0x1bc>)
 8019338:	f240 4211 	movw	r2, #1041	; 0x411
 801933c:	4966      	ldr	r1, [pc, #408]	; (80194d8 <tcp_enqueue_flags+0x1c0>)
 801933e:	4867      	ldr	r0, [pc, #412]	; (80194dc <tcp_enqueue_flags+0x1c4>)
 8019340:	f004 f968 	bl	801d614 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d106      	bne.n	8019358 <tcp_enqueue_flags+0x40>
 801934a:	4b62      	ldr	r3, [pc, #392]	; (80194d4 <tcp_enqueue_flags+0x1bc>)
 801934c:	f240 4213 	movw	r2, #1043	; 0x413
 8019350:	4963      	ldr	r1, [pc, #396]	; (80194e0 <tcp_enqueue_flags+0x1c8>)
 8019352:	4862      	ldr	r0, [pc, #392]	; (80194dc <tcp_enqueue_flags+0x1c4>)
 8019354:	f004 f95e 	bl	801d614 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019358:	78fb      	ldrb	r3, [r7, #3]
 801935a:	f003 0302 	and.w	r3, r3, #2
 801935e:	2b00      	cmp	r3, #0
 8019360:	d001      	beq.n	8019366 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019362:	2301      	movs	r3, #1
 8019364:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019366:	7ffb      	ldrb	r3, [r7, #31]
 8019368:	009b      	lsls	r3, r3, #2
 801936a:	b2db      	uxtb	r3, r3
 801936c:	f003 0304 	and.w	r3, r3, #4
 8019370:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019372:	7dfb      	ldrb	r3, [r7, #23]
 8019374:	b29b      	uxth	r3, r3
 8019376:	f44f 7220 	mov.w	r2, #640	; 0x280
 801937a:	4619      	mov	r1, r3
 801937c:	2036      	movs	r0, #54	; 0x36
 801937e:	f7fb f94f 	bl	8014620 <pbuf_alloc>
 8019382:	6138      	str	r0, [r7, #16]
 8019384:	693b      	ldr	r3, [r7, #16]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d109      	bne.n	801939e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	8b5b      	ldrh	r3, [r3, #26]
 801938e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019392:	b29a      	uxth	r2, r3
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019398:	f04f 33ff 	mov.w	r3, #4294967295
 801939c:	e095      	b.n	80194ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801939e:	693b      	ldr	r3, [r7, #16]
 80193a0:	895a      	ldrh	r2, [r3, #10]
 80193a2:	7dfb      	ldrb	r3, [r7, #23]
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d206      	bcs.n	80193b8 <tcp_enqueue_flags+0xa0>
 80193aa:	4b4a      	ldr	r3, [pc, #296]	; (80194d4 <tcp_enqueue_flags+0x1bc>)
 80193ac:	f240 4239 	movw	r2, #1081	; 0x439
 80193b0:	494c      	ldr	r1, [pc, #304]	; (80194e4 <tcp_enqueue_flags+0x1cc>)
 80193b2:	484a      	ldr	r0, [pc, #296]	; (80194dc <tcp_enqueue_flags+0x1c4>)
 80193b4:	f004 f92e 	bl	801d614 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80193bc:	78fa      	ldrb	r2, [r7, #3]
 80193be:	7ffb      	ldrb	r3, [r7, #31]
 80193c0:	9300      	str	r3, [sp, #0]
 80193c2:	460b      	mov	r3, r1
 80193c4:	6939      	ldr	r1, [r7, #16]
 80193c6:	6878      	ldr	r0, [r7, #4]
 80193c8:	f7ff fd70 	bl	8018eac <tcp_create_segment>
 80193cc:	60f8      	str	r0, [r7, #12]
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d109      	bne.n	80193e8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	8b5b      	ldrh	r3, [r3, #26]
 80193d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193dc:	b29a      	uxth	r2, r3
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80193e2:	f04f 33ff 	mov.w	r3, #4294967295
 80193e6:	e070      	b.n	80194ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	68db      	ldr	r3, [r3, #12]
 80193ec:	f003 0303 	and.w	r3, r3, #3
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d006      	beq.n	8019402 <tcp_enqueue_flags+0xea>
 80193f4:	4b37      	ldr	r3, [pc, #220]	; (80194d4 <tcp_enqueue_flags+0x1bc>)
 80193f6:	f240 4242 	movw	r2, #1090	; 0x442
 80193fa:	493b      	ldr	r1, [pc, #236]	; (80194e8 <tcp_enqueue_flags+0x1d0>)
 80193fc:	4837      	ldr	r0, [pc, #220]	; (80194dc <tcp_enqueue_flags+0x1c4>)
 80193fe:	f004 f909 	bl	801d614 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	891b      	ldrh	r3, [r3, #8]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d006      	beq.n	8019418 <tcp_enqueue_flags+0x100>
 801940a:	4b32      	ldr	r3, [pc, #200]	; (80194d4 <tcp_enqueue_flags+0x1bc>)
 801940c:	f240 4243 	movw	r2, #1091	; 0x443
 8019410:	4936      	ldr	r1, [pc, #216]	; (80194ec <tcp_enqueue_flags+0x1d4>)
 8019412:	4832      	ldr	r0, [pc, #200]	; (80194dc <tcp_enqueue_flags+0x1c4>)
 8019414:	f004 f8fe 	bl	801d614 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801941c:	2b00      	cmp	r3, #0
 801941e:	d103      	bne.n	8019428 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	68fa      	ldr	r2, [r7, #12]
 8019424:	66da      	str	r2, [r3, #108]	; 0x6c
 8019426:	e00d      	b.n	8019444 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801942c:	61bb      	str	r3, [r7, #24]
 801942e:	e002      	b.n	8019436 <tcp_enqueue_flags+0x11e>
 8019430:	69bb      	ldr	r3, [r7, #24]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	61bb      	str	r3, [r7, #24]
 8019436:	69bb      	ldr	r3, [r7, #24]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d1f8      	bne.n	8019430 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801943e:	69bb      	ldr	r3, [r7, #24]
 8019440:	68fa      	ldr	r2, [r7, #12]
 8019442:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2200      	movs	r2, #0
 8019448:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801944c:	78fb      	ldrb	r3, [r7, #3]
 801944e:	f003 0302 	and.w	r3, r3, #2
 8019452:	2b00      	cmp	r3, #0
 8019454:	d104      	bne.n	8019460 <tcp_enqueue_flags+0x148>
 8019456:	78fb      	ldrb	r3, [r7, #3]
 8019458:	f003 0301 	and.w	r3, r3, #1
 801945c:	2b00      	cmp	r3, #0
 801945e:	d004      	beq.n	801946a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019464:	1c5a      	adds	r2, r3, #1
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801946a:	78fb      	ldrb	r3, [r7, #3]
 801946c:	f003 0301 	and.w	r3, r3, #1
 8019470:	2b00      	cmp	r3, #0
 8019472:	d006      	beq.n	8019482 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	8b5b      	ldrh	r3, [r3, #26]
 8019478:	f043 0320 	orr.w	r3, r3, #32
 801947c:	b29a      	uxth	r2, r3
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	4618      	mov	r0, r3
 8019488:	f7fb fc40 	bl	8014d0c <pbuf_clen>
 801948c:	4603      	mov	r3, r0
 801948e:	461a      	mov	r2, r3
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019496:	4413      	add	r3, r2
 8019498:	b29a      	uxth	r2, r3
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d00e      	beq.n	80194c8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d10a      	bne.n	80194c8 <tcp_enqueue_flags+0x1b0>
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d106      	bne.n	80194c8 <tcp_enqueue_flags+0x1b0>
 80194ba:	4b06      	ldr	r3, [pc, #24]	; (80194d4 <tcp_enqueue_flags+0x1bc>)
 80194bc:	f240 4265 	movw	r2, #1125	; 0x465
 80194c0:	490b      	ldr	r1, [pc, #44]	; (80194f0 <tcp_enqueue_flags+0x1d8>)
 80194c2:	4806      	ldr	r0, [pc, #24]	; (80194dc <tcp_enqueue_flags+0x1c4>)
 80194c4:	f004 f8a6 	bl	801d614 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80194c8:	2300      	movs	r3, #0
}
 80194ca:	4618      	mov	r0, r3
 80194cc:	3720      	adds	r7, #32
 80194ce:	46bd      	mov	sp, r7
 80194d0:	bd80      	pop	{r7, pc}
 80194d2:	bf00      	nop
 80194d4:	0802016c 	.word	0x0802016c
 80194d8:	08020590 	.word	0x08020590
 80194dc:	080201c0 	.word	0x080201c0
 80194e0:	080205e8 	.word	0x080205e8
 80194e4:	08020608 	.word	0x08020608
 80194e8:	08020644 	.word	0x08020644
 80194ec:	0802065c 	.word	0x0802065c
 80194f0:	08020688 	.word	0x08020688

080194f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80194f4:	b5b0      	push	{r4, r5, r7, lr}
 80194f6:	b08a      	sub	sp, #40	; 0x28
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d106      	bne.n	8019510 <tcp_output+0x1c>
 8019502:	4b9e      	ldr	r3, [pc, #632]	; (801977c <tcp_output+0x288>)
 8019504:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019508:	499d      	ldr	r1, [pc, #628]	; (8019780 <tcp_output+0x28c>)
 801950a:	489e      	ldr	r0, [pc, #632]	; (8019784 <tcp_output+0x290>)
 801950c:	f004 f882 	bl	801d614 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	7d1b      	ldrb	r3, [r3, #20]
 8019514:	2b01      	cmp	r3, #1
 8019516:	d106      	bne.n	8019526 <tcp_output+0x32>
 8019518:	4b98      	ldr	r3, [pc, #608]	; (801977c <tcp_output+0x288>)
 801951a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801951e:	499a      	ldr	r1, [pc, #616]	; (8019788 <tcp_output+0x294>)
 8019520:	4898      	ldr	r0, [pc, #608]	; (8019784 <tcp_output+0x290>)
 8019522:	f004 f877 	bl	801d614 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019526:	4b99      	ldr	r3, [pc, #612]	; (801978c <tcp_output+0x298>)
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	687a      	ldr	r2, [r7, #4]
 801952c:	429a      	cmp	r2, r3
 801952e:	d101      	bne.n	8019534 <tcp_output+0x40>
    return ERR_OK;
 8019530:	2300      	movs	r3, #0
 8019532:	e1ce      	b.n	80198d2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019540:	4293      	cmp	r3, r2
 8019542:	bf28      	it	cs
 8019544:	4613      	movcs	r3, r2
 8019546:	b29b      	uxth	r3, r3
 8019548:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801954e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019552:	2b00      	cmp	r3, #0
 8019554:	d10b      	bne.n	801956e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	8b5b      	ldrh	r3, [r3, #26]
 801955a:	f003 0302 	and.w	r3, r3, #2
 801955e:	2b00      	cmp	r3, #0
 8019560:	f000 81aa 	beq.w	80198b8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019564:	6878      	ldr	r0, [r7, #4]
 8019566:	f000 fdcb 	bl	801a100 <tcp_send_empty_ack>
 801956a:	4603      	mov	r3, r0
 801956c:	e1b1      	b.n	80198d2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801956e:	6879      	ldr	r1, [r7, #4]
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	3304      	adds	r3, #4
 8019574:	461a      	mov	r2, r3
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	f7ff fc7c 	bl	8018e74 <tcp_route>
 801957c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801957e:	697b      	ldr	r3, [r7, #20]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d102      	bne.n	801958a <tcp_output+0x96>
    return ERR_RTE;
 8019584:	f06f 0303 	mvn.w	r3, #3
 8019588:	e1a3      	b.n	80198d2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d003      	beq.n	8019598 <tcp_output+0xa4>
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d111      	bne.n	80195bc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019598:	697b      	ldr	r3, [r7, #20]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d002      	beq.n	80195a4 <tcp_output+0xb0>
 801959e:	697b      	ldr	r3, [r7, #20]
 80195a0:	3304      	adds	r3, #4
 80195a2:	e000      	b.n	80195a6 <tcp_output+0xb2>
 80195a4:	2300      	movs	r3, #0
 80195a6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80195a8:	693b      	ldr	r3, [r7, #16]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d102      	bne.n	80195b4 <tcp_output+0xc0>
      return ERR_RTE;
 80195ae:	f06f 0303 	mvn.w	r3, #3
 80195b2:	e18e      	b.n	80198d2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	681a      	ldr	r2, [r3, #0]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80195bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195be:	68db      	ldr	r3, [r3, #12]
 80195c0:	685b      	ldr	r3, [r3, #4]
 80195c2:	4618      	mov	r0, r3
 80195c4:	f7f9 fe6b 	bl	801329e <lwip_htonl>
 80195c8:	4602      	mov	r2, r0
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195ce:	1ad3      	subs	r3, r2, r3
 80195d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195d2:	8912      	ldrh	r2, [r2, #8]
 80195d4:	4413      	add	r3, r2
 80195d6:	69ba      	ldr	r2, [r7, #24]
 80195d8:	429a      	cmp	r2, r3
 80195da:	d227      	bcs.n	801962c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80195e2:	461a      	mov	r2, r3
 80195e4:	69bb      	ldr	r3, [r7, #24]
 80195e6:	4293      	cmp	r3, r2
 80195e8:	d114      	bne.n	8019614 <tcp_output+0x120>
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d110      	bne.n	8019614 <tcp_output+0x120>
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d10b      	bne.n	8019614 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	2200      	movs	r2, #0
 8019600:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2201      	movs	r2, #1
 8019608:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	2200      	movs	r2, #0
 8019610:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	8b5b      	ldrh	r3, [r3, #26]
 8019618:	f003 0302 	and.w	r3, r3, #2
 801961c:	2b00      	cmp	r3, #0
 801961e:	f000 814d 	beq.w	80198bc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019622:	6878      	ldr	r0, [r7, #4]
 8019624:	f000 fd6c 	bl	801a100 <tcp_send_empty_ack>
 8019628:	4603      	mov	r3, r0
 801962a:	e152      	b.n	80198d2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	2200      	movs	r2, #0
 8019630:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019638:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801963a:	6a3b      	ldr	r3, [r7, #32]
 801963c:	2b00      	cmp	r3, #0
 801963e:	f000 811c 	beq.w	801987a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019642:	e002      	b.n	801964a <tcp_output+0x156>
 8019644:	6a3b      	ldr	r3, [r7, #32]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	623b      	str	r3, [r7, #32]
 801964a:	6a3b      	ldr	r3, [r7, #32]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d1f8      	bne.n	8019644 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019652:	e112      	b.n	801987a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019656:	68db      	ldr	r3, [r3, #12]
 8019658:	899b      	ldrh	r3, [r3, #12]
 801965a:	b29b      	uxth	r3, r3
 801965c:	4618      	mov	r0, r3
 801965e:	f7f9 fe09 	bl	8013274 <lwip_htons>
 8019662:	4603      	mov	r3, r0
 8019664:	b2db      	uxtb	r3, r3
 8019666:	f003 0304 	and.w	r3, r3, #4
 801966a:	2b00      	cmp	r3, #0
 801966c:	d006      	beq.n	801967c <tcp_output+0x188>
 801966e:	4b43      	ldr	r3, [pc, #268]	; (801977c <tcp_output+0x288>)
 8019670:	f240 5236 	movw	r2, #1334	; 0x536
 8019674:	4946      	ldr	r1, [pc, #280]	; (8019790 <tcp_output+0x29c>)
 8019676:	4843      	ldr	r0, [pc, #268]	; (8019784 <tcp_output+0x290>)
 8019678:	f003 ffcc 	bl	801d614 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019680:	2b00      	cmp	r3, #0
 8019682:	d01f      	beq.n	80196c4 <tcp_output+0x1d0>
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	8b5b      	ldrh	r3, [r3, #26]
 8019688:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801968c:	2b00      	cmp	r3, #0
 801968e:	d119      	bne.n	80196c4 <tcp_output+0x1d0>
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019694:	2b00      	cmp	r3, #0
 8019696:	d00b      	beq.n	80196b0 <tcp_output+0x1bc>
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d110      	bne.n	80196c4 <tcp_output+0x1d0>
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196a6:	891a      	ldrh	r2, [r3, #8]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d209      	bcs.n	80196c4 <tcp_output+0x1d0>
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d004      	beq.n	80196c4 <tcp_output+0x1d0>
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196c0:	2b0f      	cmp	r3, #15
 80196c2:	d901      	bls.n	80196c8 <tcp_output+0x1d4>
 80196c4:	2301      	movs	r3, #1
 80196c6:	e000      	b.n	80196ca <tcp_output+0x1d6>
 80196c8:	2300      	movs	r3, #0
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d106      	bne.n	80196dc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	8b5b      	ldrh	r3, [r3, #26]
 80196d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	f000 80e4 	beq.w	80198a4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	7d1b      	ldrb	r3, [r3, #20]
 80196e0:	2b02      	cmp	r3, #2
 80196e2:	d00d      	beq.n	8019700 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80196e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e6:	68db      	ldr	r3, [r3, #12]
 80196e8:	899b      	ldrh	r3, [r3, #12]
 80196ea:	b29c      	uxth	r4, r3
 80196ec:	2010      	movs	r0, #16
 80196ee:	f7f9 fdc1 	bl	8013274 <lwip_htons>
 80196f2:	4603      	mov	r3, r0
 80196f4:	461a      	mov	r2, r3
 80196f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f8:	68db      	ldr	r3, [r3, #12]
 80196fa:	4322      	orrs	r2, r4
 80196fc:	b292      	uxth	r2, r2
 80196fe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019700:	697a      	ldr	r2, [r7, #20]
 8019702:	6879      	ldr	r1, [r7, #4]
 8019704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019706:	f000 f909 	bl	801991c <tcp_output_segment>
 801970a:	4603      	mov	r3, r0
 801970c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801970e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d009      	beq.n	801972a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	8b5b      	ldrh	r3, [r3, #26]
 801971a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801971e:	b29a      	uxth	r2, r3
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	835a      	strh	r2, [r3, #26]
      return err;
 8019724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019728:	e0d3      	b.n	80198d2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801972c:	681a      	ldr	r2, [r3, #0]
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	7d1b      	ldrb	r3, [r3, #20]
 8019736:	2b02      	cmp	r3, #2
 8019738:	d006      	beq.n	8019748 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	8b5b      	ldrh	r3, [r3, #26]
 801973e:	f023 0303 	bic.w	r3, r3, #3
 8019742:	b29a      	uxth	r2, r3
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801974a:	68db      	ldr	r3, [r3, #12]
 801974c:	685b      	ldr	r3, [r3, #4]
 801974e:	4618      	mov	r0, r3
 8019750:	f7f9 fda5 	bl	801329e <lwip_htonl>
 8019754:	4604      	mov	r4, r0
 8019756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019758:	891b      	ldrh	r3, [r3, #8]
 801975a:	461d      	mov	r5, r3
 801975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801975e:	68db      	ldr	r3, [r3, #12]
 8019760:	899b      	ldrh	r3, [r3, #12]
 8019762:	b29b      	uxth	r3, r3
 8019764:	4618      	mov	r0, r3
 8019766:	f7f9 fd85 	bl	8013274 <lwip_htons>
 801976a:	4603      	mov	r3, r0
 801976c:	b2db      	uxtb	r3, r3
 801976e:	f003 0303 	and.w	r3, r3, #3
 8019772:	2b00      	cmp	r3, #0
 8019774:	d00e      	beq.n	8019794 <tcp_output+0x2a0>
 8019776:	2301      	movs	r3, #1
 8019778:	e00d      	b.n	8019796 <tcp_output+0x2a2>
 801977a:	bf00      	nop
 801977c:	0802016c 	.word	0x0802016c
 8019780:	080206b0 	.word	0x080206b0
 8019784:	080201c0 	.word	0x080201c0
 8019788:	080206c8 	.word	0x080206c8
 801978c:	24022244 	.word	0x24022244
 8019790:	080206f0 	.word	0x080206f0
 8019794:	2300      	movs	r3, #0
 8019796:	442b      	add	r3, r5
 8019798:	4423      	add	r3, r4
 801979a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	1ad3      	subs	r3, r2, r3
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	da02      	bge.n	80197ae <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	68ba      	ldr	r2, [r7, #8]
 80197ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80197ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b0:	891b      	ldrh	r3, [r3, #8]
 80197b2:	461c      	mov	r4, r3
 80197b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b6:	68db      	ldr	r3, [r3, #12]
 80197b8:	899b      	ldrh	r3, [r3, #12]
 80197ba:	b29b      	uxth	r3, r3
 80197bc:	4618      	mov	r0, r3
 80197be:	f7f9 fd59 	bl	8013274 <lwip_htons>
 80197c2:	4603      	mov	r3, r0
 80197c4:	b2db      	uxtb	r3, r3
 80197c6:	f003 0303 	and.w	r3, r3, #3
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d001      	beq.n	80197d2 <tcp_output+0x2de>
 80197ce:	2301      	movs	r3, #1
 80197d0:	e000      	b.n	80197d4 <tcp_output+0x2e0>
 80197d2:	2300      	movs	r3, #0
 80197d4:	4423      	add	r3, r4
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d049      	beq.n	801986e <tcp_output+0x37a>
      seg->next = NULL;
 80197da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197dc:	2200      	movs	r2, #0
 80197de:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d105      	bne.n	80197f4 <tcp_output+0x300>
        pcb->unacked = seg;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197ec:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80197ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f0:	623b      	str	r3, [r7, #32]
 80197f2:	e03f      	b.n	8019874 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80197f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f6:	68db      	ldr	r3, [r3, #12]
 80197f8:	685b      	ldr	r3, [r3, #4]
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7f9 fd4f 	bl	801329e <lwip_htonl>
 8019800:	4604      	mov	r4, r0
 8019802:	6a3b      	ldr	r3, [r7, #32]
 8019804:	68db      	ldr	r3, [r3, #12]
 8019806:	685b      	ldr	r3, [r3, #4]
 8019808:	4618      	mov	r0, r3
 801980a:	f7f9 fd48 	bl	801329e <lwip_htonl>
 801980e:	4603      	mov	r3, r0
 8019810:	1ae3      	subs	r3, r4, r3
 8019812:	2b00      	cmp	r3, #0
 8019814:	da24      	bge.n	8019860 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	3370      	adds	r3, #112	; 0x70
 801981a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801981c:	e002      	b.n	8019824 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801981e:	69fb      	ldr	r3, [r7, #28]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019824:	69fb      	ldr	r3, [r7, #28]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d011      	beq.n	8019850 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801982c:	69fb      	ldr	r3, [r7, #28]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	68db      	ldr	r3, [r3, #12]
 8019832:	685b      	ldr	r3, [r3, #4]
 8019834:	4618      	mov	r0, r3
 8019836:	f7f9 fd32 	bl	801329e <lwip_htonl>
 801983a:	4604      	mov	r4, r0
 801983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983e:	68db      	ldr	r3, [r3, #12]
 8019840:	685b      	ldr	r3, [r3, #4]
 8019842:	4618      	mov	r0, r3
 8019844:	f7f9 fd2b 	bl	801329e <lwip_htonl>
 8019848:	4603      	mov	r3, r0
 801984a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801984c:	2b00      	cmp	r3, #0
 801984e:	dbe6      	blt.n	801981e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019850:	69fb      	ldr	r3, [r7, #28]
 8019852:	681a      	ldr	r2, [r3, #0]
 8019854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019856:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019858:	69fb      	ldr	r3, [r7, #28]
 801985a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801985c:	601a      	str	r2, [r3, #0]
 801985e:	e009      	b.n	8019874 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019860:	6a3b      	ldr	r3, [r7, #32]
 8019862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019864:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019866:	6a3b      	ldr	r3, [r7, #32]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	623b      	str	r3, [r7, #32]
 801986c:	e002      	b.n	8019874 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801986e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019870:	f7fc fc41 	bl	80160f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019878:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801987c:	2b00      	cmp	r3, #0
 801987e:	d012      	beq.n	80198a6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019882:	68db      	ldr	r3, [r3, #12]
 8019884:	685b      	ldr	r3, [r3, #4]
 8019886:	4618      	mov	r0, r3
 8019888:	f7f9 fd09 	bl	801329e <lwip_htonl>
 801988c:	4602      	mov	r2, r0
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019892:	1ad3      	subs	r3, r2, r3
 8019894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019896:	8912      	ldrh	r2, [r2, #8]
 8019898:	4413      	add	r3, r2
  while (seg != NULL &&
 801989a:	69ba      	ldr	r2, [r7, #24]
 801989c:	429a      	cmp	r2, r3
 801989e:	f4bf aed9 	bcs.w	8019654 <tcp_output+0x160>
 80198a2:	e000      	b.n	80198a6 <tcp_output+0x3b2>
      break;
 80198a4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d108      	bne.n	80198c0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	2200      	movs	r2, #0
 80198b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80198b6:	e004      	b.n	80198c2 <tcp_output+0x3ce>
    goto output_done;
 80198b8:	bf00      	nop
 80198ba:	e002      	b.n	80198c2 <tcp_output+0x3ce>
    goto output_done;
 80198bc:	bf00      	nop
 80198be:	e000      	b.n	80198c2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80198c0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	8b5b      	ldrh	r3, [r3, #26]
 80198c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80198ca:	b29a      	uxth	r2, r3
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80198d0:	2300      	movs	r3, #0
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	3728      	adds	r7, #40	; 0x28
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bdb0      	pop	{r4, r5, r7, pc}
 80198da:	bf00      	nop

080198dc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80198dc:	b580      	push	{r7, lr}
 80198de:	b082      	sub	sp, #8
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d106      	bne.n	80198f8 <tcp_output_segment_busy+0x1c>
 80198ea:	4b09      	ldr	r3, [pc, #36]	; (8019910 <tcp_output_segment_busy+0x34>)
 80198ec:	f240 529a 	movw	r2, #1434	; 0x59a
 80198f0:	4908      	ldr	r1, [pc, #32]	; (8019914 <tcp_output_segment_busy+0x38>)
 80198f2:	4809      	ldr	r0, [pc, #36]	; (8019918 <tcp_output_segment_busy+0x3c>)
 80198f4:	f003 fe8e 	bl	801d614 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	685b      	ldr	r3, [r3, #4]
 80198fc:	7b9b      	ldrb	r3, [r3, #14]
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d001      	beq.n	8019906 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019902:	2301      	movs	r3, #1
 8019904:	e000      	b.n	8019908 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019906:	2300      	movs	r3, #0
}
 8019908:	4618      	mov	r0, r3
 801990a:	3708      	adds	r7, #8
 801990c:	46bd      	mov	sp, r7
 801990e:	bd80      	pop	{r7, pc}
 8019910:	0802016c 	.word	0x0802016c
 8019914:	08020708 	.word	0x08020708
 8019918:	080201c0 	.word	0x080201c0

0801991c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801991c:	b5b0      	push	{r4, r5, r7, lr}
 801991e:	b08c      	sub	sp, #48	; 0x30
 8019920:	af04      	add	r7, sp, #16
 8019922:	60f8      	str	r0, [r7, #12]
 8019924:	60b9      	str	r1, [r7, #8]
 8019926:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d106      	bne.n	801993c <tcp_output_segment+0x20>
 801992e:	4b63      	ldr	r3, [pc, #396]	; (8019abc <tcp_output_segment+0x1a0>)
 8019930:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8019934:	4962      	ldr	r1, [pc, #392]	; (8019ac0 <tcp_output_segment+0x1a4>)
 8019936:	4863      	ldr	r0, [pc, #396]	; (8019ac4 <tcp_output_segment+0x1a8>)
 8019938:	f003 fe6c 	bl	801d614 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801993c:	68bb      	ldr	r3, [r7, #8]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d106      	bne.n	8019950 <tcp_output_segment+0x34>
 8019942:	4b5e      	ldr	r3, [pc, #376]	; (8019abc <tcp_output_segment+0x1a0>)
 8019944:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8019948:	495f      	ldr	r1, [pc, #380]	; (8019ac8 <tcp_output_segment+0x1ac>)
 801994a:	485e      	ldr	r0, [pc, #376]	; (8019ac4 <tcp_output_segment+0x1a8>)
 801994c:	f003 fe62 	bl	801d614 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d106      	bne.n	8019964 <tcp_output_segment+0x48>
 8019956:	4b59      	ldr	r3, [pc, #356]	; (8019abc <tcp_output_segment+0x1a0>)
 8019958:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801995c:	495b      	ldr	r1, [pc, #364]	; (8019acc <tcp_output_segment+0x1b0>)
 801995e:	4859      	ldr	r0, [pc, #356]	; (8019ac4 <tcp_output_segment+0x1a8>)
 8019960:	f003 fe58 	bl	801d614 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019964:	68f8      	ldr	r0, [r7, #12]
 8019966:	f7ff ffb9 	bl	80198dc <tcp_output_segment_busy>
 801996a:	4603      	mov	r3, r0
 801996c:	2b00      	cmp	r3, #0
 801996e:	d001      	beq.n	8019974 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019970:	2300      	movs	r3, #0
 8019972:	e09f      	b.n	8019ab4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019974:	68bb      	ldr	r3, [r7, #8]
 8019976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	68dc      	ldr	r4, [r3, #12]
 801997c:	4610      	mov	r0, r2
 801997e:	f7f9 fc8e 	bl	801329e <lwip_htonl>
 8019982:	4603      	mov	r3, r0
 8019984:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019986:	68bb      	ldr	r3, [r7, #8]
 8019988:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	68dc      	ldr	r4, [r3, #12]
 801998e:	4610      	mov	r0, r2
 8019990:	f7f9 fc70 	bl	8013274 <lwip_htons>
 8019994:	4603      	mov	r3, r0
 8019996:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801999c:	68ba      	ldr	r2, [r7, #8]
 801999e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80199a0:	441a      	add	r2, r3
 80199a2:	68bb      	ldr	r3, [r7, #8]
 80199a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	68db      	ldr	r3, [r3, #12]
 80199aa:	3314      	adds	r3, #20
 80199ac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	7a9b      	ldrb	r3, [r3, #10]
 80199b2:	f003 0301 	and.w	r3, r3, #1
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d015      	beq.n	80199e6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	3304      	adds	r3, #4
 80199be:	461a      	mov	r2, r3
 80199c0:	6879      	ldr	r1, [r7, #4]
 80199c2:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80199c6:	f7fc fe8d 	bl	80166e4 <tcp_eff_send_mss_netif>
 80199ca:	4603      	mov	r3, r0
 80199cc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80199ce:	8b7b      	ldrh	r3, [r7, #26]
 80199d0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7f9 fc62 	bl	801329e <lwip_htonl>
 80199da:	4602      	mov	r2, r0
 80199dc:	69fb      	ldr	r3, [r7, #28]
 80199de:	601a      	str	r2, [r3, #0]
    opts += 1;
 80199e0:	69fb      	ldr	r3, [r7, #28]
 80199e2:	3304      	adds	r3, #4
 80199e4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80199e6:	68bb      	ldr	r3, [r7, #8]
 80199e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	da02      	bge.n	80199f6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	2200      	movs	r2, #0
 80199f4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d10c      	bne.n	8019a18 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80199fe:	4b34      	ldr	r3, [pc, #208]	; (8019ad0 <tcp_output_segment+0x1b4>)
 8019a00:	681a      	ldr	r2, [r3, #0]
 8019a02:	68bb      	ldr	r3, [r7, #8]
 8019a04:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	68db      	ldr	r3, [r3, #12]
 8019a0a:	685b      	ldr	r3, [r3, #4]
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	f7f9 fc46 	bl	801329e <lwip_htonl>
 8019a12:	4602      	mov	r2, r0
 8019a14:	68bb      	ldr	r3, [r7, #8]
 8019a16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	68da      	ldr	r2, [r3, #12]
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	685b      	ldr	r3, [r3, #4]
 8019a20:	685b      	ldr	r3, [r3, #4]
 8019a22:	1ad3      	subs	r3, r2, r3
 8019a24:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	685b      	ldr	r3, [r3, #4]
 8019a2a:	8959      	ldrh	r1, [r3, #10]
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	685b      	ldr	r3, [r3, #4]
 8019a30:	8b3a      	ldrh	r2, [r7, #24]
 8019a32:	1a8a      	subs	r2, r1, r2
 8019a34:	b292      	uxth	r2, r2
 8019a36:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	685b      	ldr	r3, [r3, #4]
 8019a3c:	8919      	ldrh	r1, [r3, #8]
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	685b      	ldr	r3, [r3, #4]
 8019a42:	8b3a      	ldrh	r2, [r7, #24]
 8019a44:	1a8a      	subs	r2, r1, r2
 8019a46:	b292      	uxth	r2, r2
 8019a48:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	68fa      	ldr	r2, [r7, #12]
 8019a50:	68d2      	ldr	r2, [r2, #12]
 8019a52:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	68db      	ldr	r3, [r3, #12]
 8019a58:	2200      	movs	r2, #0
 8019a5a:	741a      	strb	r2, [r3, #16]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	68db      	ldr	r3, [r3, #12]
 8019a64:	f103 0214 	add.w	r2, r3, #20
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	7a9b      	ldrb	r3, [r3, #10]
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	f003 0304 	and.w	r3, r3, #4
 8019a72:	4413      	add	r3, r2
 8019a74:	69fa      	ldr	r2, [r7, #28]
 8019a76:	429a      	cmp	r2, r3
 8019a78:	d006      	beq.n	8019a88 <tcp_output_segment+0x16c>
 8019a7a:	4b10      	ldr	r3, [pc, #64]	; (8019abc <tcp_output_segment+0x1a0>)
 8019a7c:	f240 621c 	movw	r2, #1564	; 0x61c
 8019a80:	4914      	ldr	r1, [pc, #80]	; (8019ad4 <tcp_output_segment+0x1b8>)
 8019a82:	4810      	ldr	r0, [pc, #64]	; (8019ac4 <tcp_output_segment+0x1a8>)
 8019a84:	f003 fdc6 	bl	801d614 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	6858      	ldr	r0, [r3, #4]
 8019a8c:	68b9      	ldr	r1, [r7, #8]
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	1d1c      	adds	r4, r3, #4
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	7add      	ldrb	r5, [r3, #11]
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	7a9b      	ldrb	r3, [r3, #10]
 8019a9a:	687a      	ldr	r2, [r7, #4]
 8019a9c:	9202      	str	r2, [sp, #8]
 8019a9e:	2206      	movs	r2, #6
 8019aa0:	9201      	str	r2, [sp, #4]
 8019aa2:	9300      	str	r3, [sp, #0]
 8019aa4:	462b      	mov	r3, r5
 8019aa6:	4622      	mov	r2, r4
 8019aa8:	f002 fa8c 	bl	801bfc4 <ip4_output_if>
 8019aac:	4603      	mov	r3, r0
 8019aae:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3720      	adds	r7, #32
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bdb0      	pop	{r4, r5, r7, pc}
 8019abc:	0802016c 	.word	0x0802016c
 8019ac0:	08020730 	.word	0x08020730
 8019ac4:	080201c0 	.word	0x080201c0
 8019ac8:	08020750 	.word	0x08020750
 8019acc:	08020770 	.word	0x08020770
 8019ad0:	24022234 	.word	0x24022234
 8019ad4:	08020794 	.word	0x08020794

08019ad8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019ad8:	b5b0      	push	{r4, r5, r7, lr}
 8019ada:	b084      	sub	sp, #16
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d106      	bne.n	8019af4 <tcp_rexmit_rto_prepare+0x1c>
 8019ae6:	4b31      	ldr	r3, [pc, #196]	; (8019bac <tcp_rexmit_rto_prepare+0xd4>)
 8019ae8:	f240 6263 	movw	r2, #1635	; 0x663
 8019aec:	4930      	ldr	r1, [pc, #192]	; (8019bb0 <tcp_rexmit_rto_prepare+0xd8>)
 8019aee:	4831      	ldr	r0, [pc, #196]	; (8019bb4 <tcp_rexmit_rto_prepare+0xdc>)
 8019af0:	f003 fd90 	bl	801d614 <iprintf>

  if (pcb->unacked == NULL) {
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d102      	bne.n	8019b02 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019afc:	f06f 0305 	mvn.w	r3, #5
 8019b00:	e050      	b.n	8019ba4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b06:	60fb      	str	r3, [r7, #12]
 8019b08:	e00b      	b.n	8019b22 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019b0a:	68f8      	ldr	r0, [r7, #12]
 8019b0c:	f7ff fee6 	bl	80198dc <tcp_output_segment_busy>
 8019b10:	4603      	mov	r3, r0
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d002      	beq.n	8019b1c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019b16:	f06f 0305 	mvn.w	r3, #5
 8019b1a:	e043      	b.n	8019ba4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	60fb      	str	r3, [r7, #12]
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d1ef      	bne.n	8019b0a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019b2a:	68f8      	ldr	r0, [r7, #12]
 8019b2c:	f7ff fed6 	bl	80198dc <tcp_output_segment_busy>
 8019b30:	4603      	mov	r3, r0
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d002      	beq.n	8019b3c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019b36:	f06f 0305 	mvn.w	r3, #5
 8019b3a:	e033      	b.n	8019ba4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	2200      	movs	r2, #0
 8019b50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	8b5b      	ldrh	r3, [r3, #26]
 8019b56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019b5a:	b29a      	uxth	r2, r3
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	68db      	ldr	r3, [r3, #12]
 8019b64:	685b      	ldr	r3, [r3, #4]
 8019b66:	4618      	mov	r0, r3
 8019b68:	f7f9 fb99 	bl	801329e <lwip_htonl>
 8019b6c:	4604      	mov	r4, r0
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	891b      	ldrh	r3, [r3, #8]
 8019b72:	461d      	mov	r5, r3
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	68db      	ldr	r3, [r3, #12]
 8019b78:	899b      	ldrh	r3, [r3, #12]
 8019b7a:	b29b      	uxth	r3, r3
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	f7f9 fb79 	bl	8013274 <lwip_htons>
 8019b82:	4603      	mov	r3, r0
 8019b84:	b2db      	uxtb	r3, r3
 8019b86:	f003 0303 	and.w	r3, r3, #3
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d001      	beq.n	8019b92 <tcp_rexmit_rto_prepare+0xba>
 8019b8e:	2301      	movs	r3, #1
 8019b90:	e000      	b.n	8019b94 <tcp_rexmit_rto_prepare+0xbc>
 8019b92:	2300      	movs	r3, #0
 8019b94:	442b      	add	r3, r5
 8019b96:	18e2      	adds	r2, r4, r3
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8019ba2:	2300      	movs	r3, #0
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3710      	adds	r7, #16
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bdb0      	pop	{r4, r5, r7, pc}
 8019bac:	0802016c 	.word	0x0802016c
 8019bb0:	080207a8 	.word	0x080207a8
 8019bb4:	080201c0 	.word	0x080201c0

08019bb8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b082      	sub	sp, #8
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d106      	bne.n	8019bd4 <tcp_rexmit_rto_commit+0x1c>
 8019bc6:	4b0d      	ldr	r3, [pc, #52]	; (8019bfc <tcp_rexmit_rto_commit+0x44>)
 8019bc8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019bcc:	490c      	ldr	r1, [pc, #48]	; (8019c00 <tcp_rexmit_rto_commit+0x48>)
 8019bce:	480d      	ldr	r0, [pc, #52]	; (8019c04 <tcp_rexmit_rto_commit+0x4c>)
 8019bd0:	f003 fd20 	bl	801d614 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019bda:	2bff      	cmp	r3, #255	; 0xff
 8019bdc:	d007      	beq.n	8019bee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019be4:	3301      	adds	r3, #1
 8019be6:	b2da      	uxtb	r2, r3
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019bee:	6878      	ldr	r0, [r7, #4]
 8019bf0:	f7ff fc80 	bl	80194f4 <tcp_output>
}
 8019bf4:	bf00      	nop
 8019bf6:	3708      	adds	r7, #8
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}
 8019bfc:	0802016c 	.word	0x0802016c
 8019c00:	080207cc 	.word	0x080207cc
 8019c04:	080201c0 	.word	0x080201c0

08019c08 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b082      	sub	sp, #8
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d106      	bne.n	8019c24 <tcp_rexmit_rto+0x1c>
 8019c16:	4b0a      	ldr	r3, [pc, #40]	; (8019c40 <tcp_rexmit_rto+0x38>)
 8019c18:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8019c1c:	4909      	ldr	r1, [pc, #36]	; (8019c44 <tcp_rexmit_rto+0x3c>)
 8019c1e:	480a      	ldr	r0, [pc, #40]	; (8019c48 <tcp_rexmit_rto+0x40>)
 8019c20:	f003 fcf8 	bl	801d614 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f7ff ff57 	bl	8019ad8 <tcp_rexmit_rto_prepare>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d102      	bne.n	8019c36 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019c30:	6878      	ldr	r0, [r7, #4]
 8019c32:	f7ff ffc1 	bl	8019bb8 <tcp_rexmit_rto_commit>
  }
}
 8019c36:	bf00      	nop
 8019c38:	3708      	adds	r7, #8
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}
 8019c3e:	bf00      	nop
 8019c40:	0802016c 	.word	0x0802016c
 8019c44:	080207f0 	.word	0x080207f0
 8019c48:	080201c0 	.word	0x080201c0

08019c4c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019c4c:	b590      	push	{r4, r7, lr}
 8019c4e:	b085      	sub	sp, #20
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d106      	bne.n	8019c68 <tcp_rexmit+0x1c>
 8019c5a:	4b2f      	ldr	r3, [pc, #188]	; (8019d18 <tcp_rexmit+0xcc>)
 8019c5c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8019c60:	492e      	ldr	r1, [pc, #184]	; (8019d1c <tcp_rexmit+0xd0>)
 8019c62:	482f      	ldr	r0, [pc, #188]	; (8019d20 <tcp_rexmit+0xd4>)
 8019c64:	f003 fcd6 	bl	801d614 <iprintf>

  if (pcb->unacked == NULL) {
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d102      	bne.n	8019c76 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019c70:	f06f 0305 	mvn.w	r3, #5
 8019c74:	e04c      	b.n	8019d10 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c7a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019c7c:	68b8      	ldr	r0, [r7, #8]
 8019c7e:	f7ff fe2d 	bl	80198dc <tcp_output_segment_busy>
 8019c82:	4603      	mov	r3, r0
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d002      	beq.n	8019c8e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019c88:	f06f 0305 	mvn.w	r3, #5
 8019c8c:	e040      	b.n	8019d10 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	681a      	ldr	r2, [r3, #0]
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	336c      	adds	r3, #108	; 0x6c
 8019c9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019c9c:	e002      	b.n	8019ca4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d011      	beq.n	8019cd0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	68db      	ldr	r3, [r3, #12]
 8019cb2:	685b      	ldr	r3, [r3, #4]
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f7f9 faf2 	bl	801329e <lwip_htonl>
 8019cba:	4604      	mov	r4, r0
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	68db      	ldr	r3, [r3, #12]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f7f9 faeb 	bl	801329e <lwip_htonl>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	dbe6      	blt.n	8019c9e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	681a      	ldr	r2, [r3, #0]
 8019cd4:	68bb      	ldr	r3, [r7, #8]
 8019cd6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	68ba      	ldr	r2, [r7, #8]
 8019cdc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019cde:	68bb      	ldr	r3, [r7, #8]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d103      	bne.n	8019cee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	2200      	movs	r2, #0
 8019cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019cf4:	2bff      	cmp	r3, #255	; 0xff
 8019cf6:	d007      	beq.n	8019d08 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019cfe:	3301      	adds	r3, #1
 8019d00:	b2da      	uxtb	r2, r3
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019d0e:	2300      	movs	r3, #0
}
 8019d10:	4618      	mov	r0, r3
 8019d12:	3714      	adds	r7, #20
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd90      	pop	{r4, r7, pc}
 8019d18:	0802016c 	.word	0x0802016c
 8019d1c:	0802080c 	.word	0x0802080c
 8019d20:	080201c0 	.word	0x080201c0

08019d24 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b082      	sub	sp, #8
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d106      	bne.n	8019d40 <tcp_rexmit_fast+0x1c>
 8019d32:	4b2a      	ldr	r3, [pc, #168]	; (8019ddc <tcp_rexmit_fast+0xb8>)
 8019d34:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8019d38:	4929      	ldr	r1, [pc, #164]	; (8019de0 <tcp_rexmit_fast+0xbc>)
 8019d3a:	482a      	ldr	r0, [pc, #168]	; (8019de4 <tcp_rexmit_fast+0xc0>)
 8019d3c:	f003 fc6a 	bl	801d614 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d045      	beq.n	8019dd4 <tcp_rexmit_fast+0xb0>
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	8b5b      	ldrh	r3, [r3, #26]
 8019d4c:	f003 0304 	and.w	r3, r3, #4
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d13f      	bne.n	8019dd4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f7ff ff79 	bl	8019c4c <tcp_rexmit>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d139      	bne.n	8019dd4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019d6c:	4293      	cmp	r3, r2
 8019d6e:	bf28      	it	cs
 8019d70:	4613      	movcs	r3, r2
 8019d72:	b29b      	uxth	r3, r3
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	da00      	bge.n	8019d7a <tcp_rexmit_fast+0x56>
 8019d78:	3301      	adds	r3, #1
 8019d7a:	105b      	asrs	r3, r3, #1
 8019d7c:	b29a      	uxth	r2, r3
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019d8a:	461a      	mov	r2, r3
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d90:	005b      	lsls	r3, r3, #1
 8019d92:	429a      	cmp	r2, r3
 8019d94:	d206      	bcs.n	8019da4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d9a:	005b      	lsls	r3, r3, #1
 8019d9c:	b29a      	uxth	r2, r3
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019dae:	4619      	mov	r1, r3
 8019db0:	0049      	lsls	r1, r1, #1
 8019db2:	440b      	add	r3, r1
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	4413      	add	r3, r2
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	8b5b      	ldrh	r3, [r3, #26]
 8019dc4:	f043 0304 	orr.w	r3, r3, #4
 8019dc8:	b29a      	uxth	r2, r3
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8019dd4:	bf00      	nop
 8019dd6:	3708      	adds	r7, #8
 8019dd8:	46bd      	mov	sp, r7
 8019dda:	bd80      	pop	{r7, pc}
 8019ddc:	0802016c 	.word	0x0802016c
 8019de0:	08020824 	.word	0x08020824
 8019de4:	080201c0 	.word	0x080201c0

08019de8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b086      	sub	sp, #24
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	60f8      	str	r0, [r7, #12]
 8019df0:	607b      	str	r3, [r7, #4]
 8019df2:	460b      	mov	r3, r1
 8019df4:	817b      	strh	r3, [r7, #10]
 8019df6:	4613      	mov	r3, r2
 8019df8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019dfa:	897a      	ldrh	r2, [r7, #10]
 8019dfc:	893b      	ldrh	r3, [r7, #8]
 8019dfe:	4413      	add	r3, r2
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	3314      	adds	r3, #20
 8019e04:	b29b      	uxth	r3, r3
 8019e06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019e0a:	4619      	mov	r1, r3
 8019e0c:	2022      	movs	r0, #34	; 0x22
 8019e0e:	f7fa fc07 	bl	8014620 <pbuf_alloc>
 8019e12:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d04d      	beq.n	8019eb6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019e1a:	897b      	ldrh	r3, [r7, #10]
 8019e1c:	3313      	adds	r3, #19
 8019e1e:	697a      	ldr	r2, [r7, #20]
 8019e20:	8952      	ldrh	r2, [r2, #10]
 8019e22:	4293      	cmp	r3, r2
 8019e24:	db06      	blt.n	8019e34 <tcp_output_alloc_header_common+0x4c>
 8019e26:	4b26      	ldr	r3, [pc, #152]	; (8019ec0 <tcp_output_alloc_header_common+0xd8>)
 8019e28:	f240 7223 	movw	r2, #1827	; 0x723
 8019e2c:	4925      	ldr	r1, [pc, #148]	; (8019ec4 <tcp_output_alloc_header_common+0xdc>)
 8019e2e:	4826      	ldr	r0, [pc, #152]	; (8019ec8 <tcp_output_alloc_header_common+0xe0>)
 8019e30:	f003 fbf0 	bl	801d614 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	685b      	ldr	r3, [r3, #4]
 8019e38:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019e3a:	8c3b      	ldrh	r3, [r7, #32]
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7f9 fa19 	bl	8013274 <lwip_htons>
 8019e42:	4603      	mov	r3, r0
 8019e44:	461a      	mov	r2, r3
 8019e46:	693b      	ldr	r3, [r7, #16]
 8019e48:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	f7f9 fa11 	bl	8013274 <lwip_htons>
 8019e52:	4603      	mov	r3, r0
 8019e54:	461a      	mov	r2, r3
 8019e56:	693b      	ldr	r3, [r7, #16]
 8019e58:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019e5a:	693b      	ldr	r3, [r7, #16]
 8019e5c:	687a      	ldr	r2, [r7, #4]
 8019e5e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019e60:	68f8      	ldr	r0, [r7, #12]
 8019e62:	f7f9 fa1c 	bl	801329e <lwip_htonl>
 8019e66:	4602      	mov	r2, r0
 8019e68:	693b      	ldr	r3, [r7, #16]
 8019e6a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019e6c:	897b      	ldrh	r3, [r7, #10]
 8019e6e:	089b      	lsrs	r3, r3, #2
 8019e70:	b29b      	uxth	r3, r3
 8019e72:	3305      	adds	r3, #5
 8019e74:	b29b      	uxth	r3, r3
 8019e76:	031b      	lsls	r3, r3, #12
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019e7e:	b29b      	uxth	r3, r3
 8019e80:	4313      	orrs	r3, r2
 8019e82:	b29b      	uxth	r3, r3
 8019e84:	4618      	mov	r0, r3
 8019e86:	f7f9 f9f5 	bl	8013274 <lwip_htons>
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	693b      	ldr	r3, [r7, #16]
 8019e90:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019e92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019e94:	4618      	mov	r0, r3
 8019e96:	f7f9 f9ed 	bl	8013274 <lwip_htons>
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	461a      	mov	r2, r3
 8019e9e:	693b      	ldr	r3, [r7, #16]
 8019ea0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019ea2:	693b      	ldr	r3, [r7, #16]
 8019ea4:	2200      	movs	r2, #0
 8019ea6:	741a      	strb	r2, [r3, #16]
 8019ea8:	2200      	movs	r2, #0
 8019eaa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	2200      	movs	r2, #0
 8019eb0:	749a      	strb	r2, [r3, #18]
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8019eb6:	697b      	ldr	r3, [r7, #20]
}
 8019eb8:	4618      	mov	r0, r3
 8019eba:	3718      	adds	r7, #24
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}
 8019ec0:	0802016c 	.word	0x0802016c
 8019ec4:	08020844 	.word	0x08020844
 8019ec8:	080201c0 	.word	0x080201c0

08019ecc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019ecc:	b5b0      	push	{r4, r5, r7, lr}
 8019ece:	b08a      	sub	sp, #40	; 0x28
 8019ed0:	af04      	add	r7, sp, #16
 8019ed2:	60f8      	str	r0, [r7, #12]
 8019ed4:	607b      	str	r3, [r7, #4]
 8019ed6:	460b      	mov	r3, r1
 8019ed8:	817b      	strh	r3, [r7, #10]
 8019eda:	4613      	mov	r3, r2
 8019edc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d106      	bne.n	8019ef2 <tcp_output_alloc_header+0x26>
 8019ee4:	4b15      	ldr	r3, [pc, #84]	; (8019f3c <tcp_output_alloc_header+0x70>)
 8019ee6:	f240 7242 	movw	r2, #1858	; 0x742
 8019eea:	4915      	ldr	r1, [pc, #84]	; (8019f40 <tcp_output_alloc_header+0x74>)
 8019eec:	4815      	ldr	r0, [pc, #84]	; (8019f44 <tcp_output_alloc_header+0x78>)
 8019eee:	f003 fb91 	bl	801d614 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	8adb      	ldrh	r3, [r3, #22]
 8019efa:	68fa      	ldr	r2, [r7, #12]
 8019efc:	8b12      	ldrh	r2, [r2, #24]
 8019efe:	68f9      	ldr	r1, [r7, #12]
 8019f00:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8019f02:	893d      	ldrh	r5, [r7, #8]
 8019f04:	897c      	ldrh	r4, [r7, #10]
 8019f06:	9103      	str	r1, [sp, #12]
 8019f08:	2110      	movs	r1, #16
 8019f0a:	9102      	str	r1, [sp, #8]
 8019f0c:	9201      	str	r2, [sp, #4]
 8019f0e:	9300      	str	r3, [sp, #0]
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	462a      	mov	r2, r5
 8019f14:	4621      	mov	r1, r4
 8019f16:	f7ff ff67 	bl	8019de8 <tcp_output_alloc_header_common>
 8019f1a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019f1c:	697b      	ldr	r3, [r7, #20]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d006      	beq.n	8019f30 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f26:	68fa      	ldr	r2, [r7, #12]
 8019f28:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019f2a:	441a      	add	r2, r3
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8019f30:	697b      	ldr	r3, [r7, #20]
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	3718      	adds	r7, #24
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bdb0      	pop	{r4, r5, r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	0802016c 	.word	0x0802016c
 8019f40:	08020874 	.word	0x08020874
 8019f44:	080201c0 	.word	0x080201c0

08019f48 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b088      	sub	sp, #32
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	60f8      	str	r0, [r7, #12]
 8019f50:	60b9      	str	r1, [r7, #8]
 8019f52:	4611      	mov	r1, r2
 8019f54:	461a      	mov	r2, r3
 8019f56:	460b      	mov	r3, r1
 8019f58:	71fb      	strb	r3, [r7, #7]
 8019f5a:	4613      	mov	r3, r2
 8019f5c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d106      	bne.n	8019f76 <tcp_output_fill_options+0x2e>
 8019f68:	4b13      	ldr	r3, [pc, #76]	; (8019fb8 <tcp_output_fill_options+0x70>)
 8019f6a:	f240 7256 	movw	r2, #1878	; 0x756
 8019f6e:	4913      	ldr	r1, [pc, #76]	; (8019fbc <tcp_output_fill_options+0x74>)
 8019f70:	4813      	ldr	r0, [pc, #76]	; (8019fc0 <tcp_output_fill_options+0x78>)
 8019f72:	f003 fb4f 	bl	801d614 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	685b      	ldr	r3, [r3, #4]
 8019f7a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019f7c:	69bb      	ldr	r3, [r7, #24]
 8019f7e:	3314      	adds	r3, #20
 8019f80:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019f82:	69bb      	ldr	r3, [r7, #24]
 8019f84:	f103 0214 	add.w	r2, r3, #20
 8019f88:	8bfb      	ldrh	r3, [r7, #30]
 8019f8a:	009b      	lsls	r3, r3, #2
 8019f8c:	4619      	mov	r1, r3
 8019f8e:	79fb      	ldrb	r3, [r7, #7]
 8019f90:	009b      	lsls	r3, r3, #2
 8019f92:	f003 0304 	and.w	r3, r3, #4
 8019f96:	440b      	add	r3, r1
 8019f98:	4413      	add	r3, r2
 8019f9a:	697a      	ldr	r2, [r7, #20]
 8019f9c:	429a      	cmp	r2, r3
 8019f9e:	d006      	beq.n	8019fae <tcp_output_fill_options+0x66>
 8019fa0:	4b05      	ldr	r3, [pc, #20]	; (8019fb8 <tcp_output_fill_options+0x70>)
 8019fa2:	f240 7275 	movw	r2, #1909	; 0x775
 8019fa6:	4907      	ldr	r1, [pc, #28]	; (8019fc4 <tcp_output_fill_options+0x7c>)
 8019fa8:	4805      	ldr	r0, [pc, #20]	; (8019fc0 <tcp_output_fill_options+0x78>)
 8019faa:	f003 fb33 	bl	801d614 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019fae:	bf00      	nop
 8019fb0:	3720      	adds	r7, #32
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}
 8019fb6:	bf00      	nop
 8019fb8:	0802016c 	.word	0x0802016c
 8019fbc:	0802089c 	.word	0x0802089c
 8019fc0:	080201c0 	.word	0x080201c0
 8019fc4:	08020794 	.word	0x08020794

08019fc8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	b08a      	sub	sp, #40	; 0x28
 8019fcc:	af04      	add	r7, sp, #16
 8019fce:	60f8      	str	r0, [r7, #12]
 8019fd0:	60b9      	str	r1, [r7, #8]
 8019fd2:	607a      	str	r2, [r7, #4]
 8019fd4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019fd6:	68bb      	ldr	r3, [r7, #8]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d106      	bne.n	8019fea <tcp_output_control_segment+0x22>
 8019fdc:	4b1c      	ldr	r3, [pc, #112]	; (801a050 <tcp_output_control_segment+0x88>)
 8019fde:	f240 7287 	movw	r2, #1927	; 0x787
 8019fe2:	491c      	ldr	r1, [pc, #112]	; (801a054 <tcp_output_control_segment+0x8c>)
 8019fe4:	481c      	ldr	r0, [pc, #112]	; (801a058 <tcp_output_control_segment+0x90>)
 8019fe6:	f003 fb15 	bl	801d614 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019fea:	683a      	ldr	r2, [r7, #0]
 8019fec:	6879      	ldr	r1, [r7, #4]
 8019fee:	68f8      	ldr	r0, [r7, #12]
 8019ff0:	f7fe ff40 	bl	8018e74 <tcp_route>
 8019ff4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019ff6:	693b      	ldr	r3, [r7, #16]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d102      	bne.n	801a002 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019ffc:	23fc      	movs	r3, #252	; 0xfc
 8019ffe:	75fb      	strb	r3, [r7, #23]
 801a000:	e01c      	b.n	801a03c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d006      	beq.n	801a016 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	7adb      	ldrb	r3, [r3, #11]
 801a00c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a00e:	68fb      	ldr	r3, [r7, #12]
 801a010:	7a9b      	ldrb	r3, [r3, #10]
 801a012:	757b      	strb	r3, [r7, #21]
 801a014:	e003      	b.n	801a01e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a016:	23ff      	movs	r3, #255	; 0xff
 801a018:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a01a:	2300      	movs	r3, #0
 801a01c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a01e:	7dba      	ldrb	r2, [r7, #22]
 801a020:	693b      	ldr	r3, [r7, #16]
 801a022:	9302      	str	r3, [sp, #8]
 801a024:	2306      	movs	r3, #6
 801a026:	9301      	str	r3, [sp, #4]
 801a028:	7d7b      	ldrb	r3, [r7, #21]
 801a02a:	9300      	str	r3, [sp, #0]
 801a02c:	4613      	mov	r3, r2
 801a02e:	683a      	ldr	r2, [r7, #0]
 801a030:	6879      	ldr	r1, [r7, #4]
 801a032:	68b8      	ldr	r0, [r7, #8]
 801a034:	f001 ffc6 	bl	801bfc4 <ip4_output_if>
 801a038:	4603      	mov	r3, r0
 801a03a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a03c:	68b8      	ldr	r0, [r7, #8]
 801a03e:	f7fa fdd7 	bl	8014bf0 <pbuf_free>
  return err;
 801a042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a046:	4618      	mov	r0, r3
 801a048:	3718      	adds	r7, #24
 801a04a:	46bd      	mov	sp, r7
 801a04c:	bd80      	pop	{r7, pc}
 801a04e:	bf00      	nop
 801a050:	0802016c 	.word	0x0802016c
 801a054:	080208c4 	.word	0x080208c4
 801a058:	080201c0 	.word	0x080201c0

0801a05c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a05c:	b590      	push	{r4, r7, lr}
 801a05e:	b08b      	sub	sp, #44	; 0x2c
 801a060:	af04      	add	r7, sp, #16
 801a062:	60f8      	str	r0, [r7, #12]
 801a064:	60b9      	str	r1, [r7, #8]
 801a066:	607a      	str	r2, [r7, #4]
 801a068:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a06a:	683b      	ldr	r3, [r7, #0]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d106      	bne.n	801a07e <tcp_rst+0x22>
 801a070:	4b1f      	ldr	r3, [pc, #124]	; (801a0f0 <tcp_rst+0x94>)
 801a072:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a076:	491f      	ldr	r1, [pc, #124]	; (801a0f4 <tcp_rst+0x98>)
 801a078:	481f      	ldr	r0, [pc, #124]	; (801a0f8 <tcp_rst+0x9c>)
 801a07a:	f003 facb 	bl	801d614 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a080:	2b00      	cmp	r3, #0
 801a082:	d106      	bne.n	801a092 <tcp_rst+0x36>
 801a084:	4b1a      	ldr	r3, [pc, #104]	; (801a0f0 <tcp_rst+0x94>)
 801a086:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a08a:	491c      	ldr	r1, [pc, #112]	; (801a0fc <tcp_rst+0xa0>)
 801a08c:	481a      	ldr	r0, [pc, #104]	; (801a0f8 <tcp_rst+0x9c>)
 801a08e:	f003 fac1 	bl	801d614 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a092:	2300      	movs	r3, #0
 801a094:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a096:	f24d 0316 	movw	r3, #53270	; 0xd016
 801a09a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a09c:	7dfb      	ldrb	r3, [r7, #23]
 801a09e:	b29c      	uxth	r4, r3
 801a0a0:	68b8      	ldr	r0, [r7, #8]
 801a0a2:	f7f9 f8fc 	bl	801329e <lwip_htonl>
 801a0a6:	4602      	mov	r2, r0
 801a0a8:	8abb      	ldrh	r3, [r7, #20]
 801a0aa:	9303      	str	r3, [sp, #12]
 801a0ac:	2314      	movs	r3, #20
 801a0ae:	9302      	str	r3, [sp, #8]
 801a0b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a0b2:	9301      	str	r3, [sp, #4]
 801a0b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a0b6:	9300      	str	r3, [sp, #0]
 801a0b8:	4613      	mov	r3, r2
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	4621      	mov	r1, r4
 801a0be:	6878      	ldr	r0, [r7, #4]
 801a0c0:	f7ff fe92 	bl	8019de8 <tcp_output_alloc_header_common>
 801a0c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d00c      	beq.n	801a0e6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a0cc:	7dfb      	ldrb	r3, [r7, #23]
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	6939      	ldr	r1, [r7, #16]
 801a0d2:	68f8      	ldr	r0, [r7, #12]
 801a0d4:	f7ff ff38 	bl	8019f48 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0da:	683a      	ldr	r2, [r7, #0]
 801a0dc:	6939      	ldr	r1, [r7, #16]
 801a0de:	68f8      	ldr	r0, [r7, #12]
 801a0e0:	f7ff ff72 	bl	8019fc8 <tcp_output_control_segment>
 801a0e4:	e000      	b.n	801a0e8 <tcp_rst+0x8c>
    return;
 801a0e6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a0e8:	371c      	adds	r7, #28
 801a0ea:	46bd      	mov	sp, r7
 801a0ec:	bd90      	pop	{r4, r7, pc}
 801a0ee:	bf00      	nop
 801a0f0:	0802016c 	.word	0x0802016c
 801a0f4:	080208f0 	.word	0x080208f0
 801a0f8:	080201c0 	.word	0x080201c0
 801a0fc:	0802090c 	.word	0x0802090c

0801a100 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a100:	b590      	push	{r4, r7, lr}
 801a102:	b087      	sub	sp, #28
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a108:	2300      	movs	r3, #0
 801a10a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a10c:	2300      	movs	r3, #0
 801a10e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d106      	bne.n	801a124 <tcp_send_empty_ack+0x24>
 801a116:	4b28      	ldr	r3, [pc, #160]	; (801a1b8 <tcp_send_empty_ack+0xb8>)
 801a118:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a11c:	4927      	ldr	r1, [pc, #156]	; (801a1bc <tcp_send_empty_ack+0xbc>)
 801a11e:	4828      	ldr	r0, [pc, #160]	; (801a1c0 <tcp_send_empty_ack+0xc0>)
 801a120:	f003 fa78 	bl	801d614 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a124:	7dfb      	ldrb	r3, [r7, #23]
 801a126:	009b      	lsls	r3, r3, #2
 801a128:	b2db      	uxtb	r3, r3
 801a12a:	f003 0304 	and.w	r3, r3, #4
 801a12e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a130:	7d7b      	ldrb	r3, [r7, #21]
 801a132:	b29c      	uxth	r4, r3
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a138:	4618      	mov	r0, r3
 801a13a:	f7f9 f8b0 	bl	801329e <lwip_htonl>
 801a13e:	4603      	mov	r3, r0
 801a140:	2200      	movs	r2, #0
 801a142:	4621      	mov	r1, r4
 801a144:	6878      	ldr	r0, [r7, #4]
 801a146:	f7ff fec1 	bl	8019ecc <tcp_output_alloc_header>
 801a14a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a14c:	693b      	ldr	r3, [r7, #16]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d109      	bne.n	801a166 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	8b5b      	ldrh	r3, [r3, #26]
 801a156:	f043 0303 	orr.w	r3, r3, #3
 801a15a:	b29a      	uxth	r2, r3
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a160:	f06f 0301 	mvn.w	r3, #1
 801a164:	e023      	b.n	801a1ae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a166:	7dbb      	ldrb	r3, [r7, #22]
 801a168:	7dfa      	ldrb	r2, [r7, #23]
 801a16a:	6939      	ldr	r1, [r7, #16]
 801a16c:	6878      	ldr	r0, [r7, #4]
 801a16e:	f7ff feeb 	bl	8019f48 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a172:	687a      	ldr	r2, [r7, #4]
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	3304      	adds	r3, #4
 801a178:	6939      	ldr	r1, [r7, #16]
 801a17a:	6878      	ldr	r0, [r7, #4]
 801a17c:	f7ff ff24 	bl	8019fc8 <tcp_output_control_segment>
 801a180:	4603      	mov	r3, r0
 801a182:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d007      	beq.n	801a19c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	8b5b      	ldrh	r3, [r3, #26]
 801a190:	f043 0303 	orr.w	r3, r3, #3
 801a194:	b29a      	uxth	r2, r3
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	835a      	strh	r2, [r3, #26]
 801a19a:	e006      	b.n	801a1aa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	8b5b      	ldrh	r3, [r3, #26]
 801a1a0:	f023 0303 	bic.w	r3, r3, #3
 801a1a4:	b29a      	uxth	r2, r3
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	371c      	adds	r7, #28
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	bd90      	pop	{r4, r7, pc}
 801a1b6:	bf00      	nop
 801a1b8:	0802016c 	.word	0x0802016c
 801a1bc:	08020928 	.word	0x08020928
 801a1c0:	080201c0 	.word	0x080201c0

0801a1c4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a1c4:	b590      	push	{r4, r7, lr}
 801a1c6:	b087      	sub	sp, #28
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d106      	bne.n	801a1e4 <tcp_keepalive+0x20>
 801a1d6:	4b18      	ldr	r3, [pc, #96]	; (801a238 <tcp_keepalive+0x74>)
 801a1d8:	f640 0224 	movw	r2, #2084	; 0x824
 801a1dc:	4917      	ldr	r1, [pc, #92]	; (801a23c <tcp_keepalive+0x78>)
 801a1de:	4818      	ldr	r0, [pc, #96]	; (801a240 <tcp_keepalive+0x7c>)
 801a1e0:	f003 fa18 	bl	801d614 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a1e4:	7dfb      	ldrb	r3, [r7, #23]
 801a1e6:	b29c      	uxth	r4, r3
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1ec:	3b01      	subs	r3, #1
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	f7f9 f855 	bl	801329e <lwip_htonl>
 801a1f4:	4603      	mov	r3, r0
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	4621      	mov	r1, r4
 801a1fa:	6878      	ldr	r0, [r7, #4]
 801a1fc:	f7ff fe66 	bl	8019ecc <tcp_output_alloc_header>
 801a200:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a202:	693b      	ldr	r3, [r7, #16]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d102      	bne.n	801a20e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a208:	f04f 33ff 	mov.w	r3, #4294967295
 801a20c:	e010      	b.n	801a230 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a20e:	7dfb      	ldrb	r3, [r7, #23]
 801a210:	2200      	movs	r2, #0
 801a212:	6939      	ldr	r1, [r7, #16]
 801a214:	6878      	ldr	r0, [r7, #4]
 801a216:	f7ff fe97 	bl	8019f48 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a21a:	687a      	ldr	r2, [r7, #4]
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	3304      	adds	r3, #4
 801a220:	6939      	ldr	r1, [r7, #16]
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	f7ff fed0 	bl	8019fc8 <tcp_output_control_segment>
 801a228:	4603      	mov	r3, r0
 801a22a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a22c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a230:	4618      	mov	r0, r3
 801a232:	371c      	adds	r7, #28
 801a234:	46bd      	mov	sp, r7
 801a236:	bd90      	pop	{r4, r7, pc}
 801a238:	0802016c 	.word	0x0802016c
 801a23c:	08020948 	.word	0x08020948
 801a240:	080201c0 	.word	0x080201c0

0801a244 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a244:	b590      	push	{r4, r7, lr}
 801a246:	b08b      	sub	sp, #44	; 0x2c
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a24c:	2300      	movs	r3, #0
 801a24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d106      	bne.n	801a266 <tcp_zero_window_probe+0x22>
 801a258:	4b4c      	ldr	r3, [pc, #304]	; (801a38c <tcp_zero_window_probe+0x148>)
 801a25a:	f640 024f 	movw	r2, #2127	; 0x84f
 801a25e:	494c      	ldr	r1, [pc, #304]	; (801a390 <tcp_zero_window_probe+0x14c>)
 801a260:	484c      	ldr	r0, [pc, #304]	; (801a394 <tcp_zero_window_probe+0x150>)
 801a262:	f003 f9d7 	bl	801d614 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a26a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a26c:	6a3b      	ldr	r3, [r7, #32]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d101      	bne.n	801a276 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a272:	2300      	movs	r3, #0
 801a274:	e086      	b.n	801a384 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a27c:	2bff      	cmp	r3, #255	; 0xff
 801a27e:	d007      	beq.n	801a290 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a286:	3301      	adds	r3, #1
 801a288:	b2da      	uxtb	r2, r3
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a290:	6a3b      	ldr	r3, [r7, #32]
 801a292:	68db      	ldr	r3, [r3, #12]
 801a294:	899b      	ldrh	r3, [r3, #12]
 801a296:	b29b      	uxth	r3, r3
 801a298:	4618      	mov	r0, r3
 801a29a:	f7f8 ffeb 	bl	8013274 <lwip_htons>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	b2db      	uxtb	r3, r3
 801a2a2:	f003 0301 	and.w	r3, r3, #1
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d005      	beq.n	801a2b6 <tcp_zero_window_probe+0x72>
 801a2aa:	6a3b      	ldr	r3, [r7, #32]
 801a2ac:	891b      	ldrh	r3, [r3, #8]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d101      	bne.n	801a2b6 <tcp_zero_window_probe+0x72>
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	e000      	b.n	801a2b8 <tcp_zero_window_probe+0x74>
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a2ba:	7ffb      	ldrb	r3, [r7, #31]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	bf0c      	ite	eq
 801a2c0:	2301      	moveq	r3, #1
 801a2c2:	2300      	movne	r3, #0
 801a2c4:	b2db      	uxtb	r3, r3
 801a2c6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2cc:	b299      	uxth	r1, r3
 801a2ce:	6a3b      	ldr	r3, [r7, #32]
 801a2d0:	68db      	ldr	r3, [r3, #12]
 801a2d2:	685b      	ldr	r3, [r3, #4]
 801a2d4:	8bba      	ldrh	r2, [r7, #28]
 801a2d6:	6878      	ldr	r0, [r7, #4]
 801a2d8:	f7ff fdf8 	bl	8019ecc <tcp_output_alloc_header>
 801a2dc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a2de:	69bb      	ldr	r3, [r7, #24]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d102      	bne.n	801a2ea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a2e8:	e04c      	b.n	801a384 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a2ea:	69bb      	ldr	r3, [r7, #24]
 801a2ec:	685b      	ldr	r3, [r3, #4]
 801a2ee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a2f0:	7ffb      	ldrb	r3, [r7, #31]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d011      	beq.n	801a31a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a2f6:	697b      	ldr	r3, [r7, #20]
 801a2f8:	899b      	ldrh	r3, [r3, #12]
 801a2fa:	b29b      	uxth	r3, r3
 801a2fc:	b21b      	sxth	r3, r3
 801a2fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a302:	b21c      	sxth	r4, r3
 801a304:	2011      	movs	r0, #17
 801a306:	f7f8 ffb5 	bl	8013274 <lwip_htons>
 801a30a:	4603      	mov	r3, r0
 801a30c:	b21b      	sxth	r3, r3
 801a30e:	4323      	orrs	r3, r4
 801a310:	b21b      	sxth	r3, r3
 801a312:	b29a      	uxth	r2, r3
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	819a      	strh	r2, [r3, #12]
 801a318:	e010      	b.n	801a33c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a31a:	69bb      	ldr	r3, [r7, #24]
 801a31c:	685b      	ldr	r3, [r3, #4]
 801a31e:	3314      	adds	r3, #20
 801a320:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a322:	6a3b      	ldr	r3, [r7, #32]
 801a324:	6858      	ldr	r0, [r3, #4]
 801a326:	6a3b      	ldr	r3, [r7, #32]
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	891a      	ldrh	r2, [r3, #8]
 801a32c:	6a3b      	ldr	r3, [r7, #32]
 801a32e:	891b      	ldrh	r3, [r3, #8]
 801a330:	1ad3      	subs	r3, r2, r3
 801a332:	b29b      	uxth	r3, r3
 801a334:	2201      	movs	r2, #1
 801a336:	6939      	ldr	r1, [r7, #16]
 801a338:	f7fa fe50 	bl	8014fdc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a33c:	6a3b      	ldr	r3, [r7, #32]
 801a33e:	68db      	ldr	r3, [r3, #12]
 801a340:	685b      	ldr	r3, [r3, #4]
 801a342:	4618      	mov	r0, r3
 801a344:	f7f8 ffab 	bl	801329e <lwip_htonl>
 801a348:	4603      	mov	r3, r0
 801a34a:	3301      	adds	r3, #1
 801a34c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	1ad3      	subs	r3, r2, r3
 801a356:	2b00      	cmp	r3, #0
 801a358:	da02      	bge.n	801a360 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	68fa      	ldr	r2, [r7, #12]
 801a35e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a364:	2200      	movs	r2, #0
 801a366:	69b9      	ldr	r1, [r7, #24]
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	f7ff fded 	bl	8019f48 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a36e:	687a      	ldr	r2, [r7, #4]
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	3304      	adds	r3, #4
 801a374:	69b9      	ldr	r1, [r7, #24]
 801a376:	6878      	ldr	r0, [r7, #4]
 801a378:	f7ff fe26 	bl	8019fc8 <tcp_output_control_segment>
 801a37c:	4603      	mov	r3, r0
 801a37e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a380:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a384:	4618      	mov	r0, r3
 801a386:	372c      	adds	r7, #44	; 0x2c
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd90      	pop	{r4, r7, pc}
 801a38c:	0802016c 	.word	0x0802016c
 801a390:	08020964 	.word	0x08020964
 801a394:	080201c0 	.word	0x080201c0

0801a398 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b082      	sub	sp, #8
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a3a0:	f7fa ff0a 	bl	80151b8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a3a4:	4b0a      	ldr	r3, [pc, #40]	; (801a3d0 <tcpip_tcp_timer+0x38>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d103      	bne.n	801a3b4 <tcpip_tcp_timer+0x1c>
 801a3ac:	4b09      	ldr	r3, [pc, #36]	; (801a3d4 <tcpip_tcp_timer+0x3c>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d005      	beq.n	801a3c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	4908      	ldr	r1, [pc, #32]	; (801a3d8 <tcpip_tcp_timer+0x40>)
 801a3b8:	20fa      	movs	r0, #250	; 0xfa
 801a3ba:	f000 f8f3 	bl	801a5a4 <sys_timeout>
 801a3be:	e003      	b.n	801a3c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a3c0:	4b06      	ldr	r3, [pc, #24]	; (801a3dc <tcpip_tcp_timer+0x44>)
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	601a      	str	r2, [r3, #0]
  }
}
 801a3c6:	bf00      	nop
 801a3c8:	bf00      	nop
 801a3ca:	3708      	adds	r7, #8
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd80      	pop	{r7, pc}
 801a3d0:	24022230 	.word	0x24022230
 801a3d4:	24022240 	.word	0x24022240
 801a3d8:	0801a399 	.word	0x0801a399
 801a3dc:	2401aed8 	.word	0x2401aed8

0801a3e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a3e4:	4b0a      	ldr	r3, [pc, #40]	; (801a410 <tcp_timer_needed+0x30>)
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d10f      	bne.n	801a40c <tcp_timer_needed+0x2c>
 801a3ec:	4b09      	ldr	r3, [pc, #36]	; (801a414 <tcp_timer_needed+0x34>)
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d103      	bne.n	801a3fc <tcp_timer_needed+0x1c>
 801a3f4:	4b08      	ldr	r3, [pc, #32]	; (801a418 <tcp_timer_needed+0x38>)
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d007      	beq.n	801a40c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a3fc:	4b04      	ldr	r3, [pc, #16]	; (801a410 <tcp_timer_needed+0x30>)
 801a3fe:	2201      	movs	r2, #1
 801a400:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a402:	2200      	movs	r2, #0
 801a404:	4905      	ldr	r1, [pc, #20]	; (801a41c <tcp_timer_needed+0x3c>)
 801a406:	20fa      	movs	r0, #250	; 0xfa
 801a408:	f000 f8cc 	bl	801a5a4 <sys_timeout>
  }
}
 801a40c:	bf00      	nop
 801a40e:	bd80      	pop	{r7, pc}
 801a410:	2401aed8 	.word	0x2401aed8
 801a414:	24022230 	.word	0x24022230
 801a418:	24022240 	.word	0x24022240
 801a41c:	0801a399 	.word	0x0801a399

0801a420 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b086      	sub	sp, #24
 801a424:	af00      	add	r7, sp, #0
 801a426:	60f8      	str	r0, [r7, #12]
 801a428:	60b9      	str	r1, [r7, #8]
 801a42a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a42c:	200a      	movs	r0, #10
 801a42e:	f7f9 fcc1 	bl	8013db4 <memp_malloc>
 801a432:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a434:	693b      	ldr	r3, [r7, #16]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d109      	bne.n	801a44e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a43a:	693b      	ldr	r3, [r7, #16]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d151      	bne.n	801a4e4 <sys_timeout_abs+0xc4>
 801a440:	4b2a      	ldr	r3, [pc, #168]	; (801a4ec <sys_timeout_abs+0xcc>)
 801a442:	22be      	movs	r2, #190	; 0xbe
 801a444:	492a      	ldr	r1, [pc, #168]	; (801a4f0 <sys_timeout_abs+0xd0>)
 801a446:	482b      	ldr	r0, [pc, #172]	; (801a4f4 <sys_timeout_abs+0xd4>)
 801a448:	f003 f8e4 	bl	801d614 <iprintf>
    return;
 801a44c:	e04a      	b.n	801a4e4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a44e:	693b      	ldr	r3, [r7, #16]
 801a450:	2200      	movs	r2, #0
 801a452:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a454:	693b      	ldr	r3, [r7, #16]
 801a456:	68ba      	ldr	r2, [r7, #8]
 801a458:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a45a:	693b      	ldr	r3, [r7, #16]
 801a45c:	687a      	ldr	r2, [r7, #4]
 801a45e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a460:	693b      	ldr	r3, [r7, #16]
 801a462:	68fa      	ldr	r2, [r7, #12]
 801a464:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a466:	4b24      	ldr	r3, [pc, #144]	; (801a4f8 <sys_timeout_abs+0xd8>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d103      	bne.n	801a476 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a46e:	4a22      	ldr	r2, [pc, #136]	; (801a4f8 <sys_timeout_abs+0xd8>)
 801a470:	693b      	ldr	r3, [r7, #16]
 801a472:	6013      	str	r3, [r2, #0]
    return;
 801a474:	e037      	b.n	801a4e6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a476:	693b      	ldr	r3, [r7, #16]
 801a478:	685a      	ldr	r2, [r3, #4]
 801a47a:	4b1f      	ldr	r3, [pc, #124]	; (801a4f8 <sys_timeout_abs+0xd8>)
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	685b      	ldr	r3, [r3, #4]
 801a480:	1ad3      	subs	r3, r2, r3
 801a482:	0fdb      	lsrs	r3, r3, #31
 801a484:	f003 0301 	and.w	r3, r3, #1
 801a488:	b2db      	uxtb	r3, r3
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d007      	beq.n	801a49e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a48e:	4b1a      	ldr	r3, [pc, #104]	; (801a4f8 <sys_timeout_abs+0xd8>)
 801a490:	681a      	ldr	r2, [r3, #0]
 801a492:	693b      	ldr	r3, [r7, #16]
 801a494:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a496:	4a18      	ldr	r2, [pc, #96]	; (801a4f8 <sys_timeout_abs+0xd8>)
 801a498:	693b      	ldr	r3, [r7, #16]
 801a49a:	6013      	str	r3, [r2, #0]
 801a49c:	e023      	b.n	801a4e6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a49e:	4b16      	ldr	r3, [pc, #88]	; (801a4f8 <sys_timeout_abs+0xd8>)
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	617b      	str	r3, [r7, #20]
 801a4a4:	e01a      	b.n	801a4dc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a4a6:	697b      	ldr	r3, [r7, #20]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d00b      	beq.n	801a4c6 <sys_timeout_abs+0xa6>
 801a4ae:	693b      	ldr	r3, [r7, #16]
 801a4b0:	685a      	ldr	r2, [r3, #4]
 801a4b2:	697b      	ldr	r3, [r7, #20]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	685b      	ldr	r3, [r3, #4]
 801a4b8:	1ad3      	subs	r3, r2, r3
 801a4ba:	0fdb      	lsrs	r3, r3, #31
 801a4bc:	f003 0301 	and.w	r3, r3, #1
 801a4c0:	b2db      	uxtb	r3, r3
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d007      	beq.n	801a4d6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a4c6:	697b      	ldr	r3, [r7, #20]
 801a4c8:	681a      	ldr	r2, [r3, #0]
 801a4ca:	693b      	ldr	r3, [r7, #16]
 801a4cc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a4ce:	697b      	ldr	r3, [r7, #20]
 801a4d0:	693a      	ldr	r2, [r7, #16]
 801a4d2:	601a      	str	r2, [r3, #0]
        break;
 801a4d4:	e007      	b.n	801a4e6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a4d6:	697b      	ldr	r3, [r7, #20]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	617b      	str	r3, [r7, #20]
 801a4dc:	697b      	ldr	r3, [r7, #20]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d1e1      	bne.n	801a4a6 <sys_timeout_abs+0x86>
 801a4e2:	e000      	b.n	801a4e6 <sys_timeout_abs+0xc6>
    return;
 801a4e4:	bf00      	nop
      }
    }
  }
}
 801a4e6:	3718      	adds	r7, #24
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bd80      	pop	{r7, pc}
 801a4ec:	08020988 	.word	0x08020988
 801a4f0:	080209bc 	.word	0x080209bc
 801a4f4:	080209fc 	.word	0x080209fc
 801a4f8:	2401aed0 	.word	0x2401aed0

0801a4fc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b086      	sub	sp, #24
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a508:	697b      	ldr	r3, [r7, #20]
 801a50a:	685b      	ldr	r3, [r3, #4]
 801a50c:	4798      	blx	r3

  now = sys_now();
 801a50e:	f7f4 fb7f 	bl	800ec10 <sys_now>
 801a512:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a514:	697b      	ldr	r3, [r7, #20]
 801a516:	681a      	ldr	r2, [r3, #0]
 801a518:	4b0f      	ldr	r3, [pc, #60]	; (801a558 <lwip_cyclic_timer+0x5c>)
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	4413      	add	r3, r2
 801a51e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a520:	68fa      	ldr	r2, [r7, #12]
 801a522:	693b      	ldr	r3, [r7, #16]
 801a524:	1ad3      	subs	r3, r2, r3
 801a526:	0fdb      	lsrs	r3, r3, #31
 801a528:	f003 0301 	and.w	r3, r3, #1
 801a52c:	b2db      	uxtb	r3, r3
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d009      	beq.n	801a546 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a532:	697b      	ldr	r3, [r7, #20]
 801a534:	681a      	ldr	r2, [r3, #0]
 801a536:	693b      	ldr	r3, [r7, #16]
 801a538:	4413      	add	r3, r2
 801a53a:	687a      	ldr	r2, [r7, #4]
 801a53c:	4907      	ldr	r1, [pc, #28]	; (801a55c <lwip_cyclic_timer+0x60>)
 801a53e:	4618      	mov	r0, r3
 801a540:	f7ff ff6e 	bl	801a420 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a544:	e004      	b.n	801a550 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	4904      	ldr	r1, [pc, #16]	; (801a55c <lwip_cyclic_timer+0x60>)
 801a54a:	68f8      	ldr	r0, [r7, #12]
 801a54c:	f7ff ff68 	bl	801a420 <sys_timeout_abs>
}
 801a550:	bf00      	nop
 801a552:	3718      	adds	r7, #24
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}
 801a558:	2401aed4 	.word	0x2401aed4
 801a55c:	0801a4fd 	.word	0x0801a4fd

0801a560 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b082      	sub	sp, #8
 801a564:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a566:	2301      	movs	r3, #1
 801a568:	607b      	str	r3, [r7, #4]
 801a56a:	e00e      	b.n	801a58a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a56c:	4a0b      	ldr	r2, [pc, #44]	; (801a59c <sys_timeouts_init+0x3c>)
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	00db      	lsls	r3, r3, #3
 801a578:	4a08      	ldr	r2, [pc, #32]	; (801a59c <sys_timeouts_init+0x3c>)
 801a57a:	4413      	add	r3, r2
 801a57c:	461a      	mov	r2, r3
 801a57e:	4908      	ldr	r1, [pc, #32]	; (801a5a0 <sys_timeouts_init+0x40>)
 801a580:	f000 f810 	bl	801a5a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	3301      	adds	r3, #1
 801a588:	607b      	str	r3, [r7, #4]
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	2b02      	cmp	r3, #2
 801a58e:	d9ed      	bls.n	801a56c <sys_timeouts_init+0xc>
  }
}
 801a590:	bf00      	nop
 801a592:	bf00      	nop
 801a594:	3708      	adds	r7, #8
 801a596:	46bd      	mov	sp, r7
 801a598:	bd80      	pop	{r7, pc}
 801a59a:	bf00      	nop
 801a59c:	08021608 	.word	0x08021608
 801a5a0:	0801a4fd 	.word	0x0801a4fd

0801a5a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b086      	sub	sp, #24
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	60f8      	str	r0, [r7, #12]
 801a5ac:	60b9      	str	r1, [r7, #8]
 801a5ae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a5b6:	d306      	bcc.n	801a5c6 <sys_timeout+0x22>
 801a5b8:	4b0a      	ldr	r3, [pc, #40]	; (801a5e4 <sys_timeout+0x40>)
 801a5ba:	f240 1229 	movw	r2, #297	; 0x129
 801a5be:	490a      	ldr	r1, [pc, #40]	; (801a5e8 <sys_timeout+0x44>)
 801a5c0:	480a      	ldr	r0, [pc, #40]	; (801a5ec <sys_timeout+0x48>)
 801a5c2:	f003 f827 	bl	801d614 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a5c6:	f7f4 fb23 	bl	800ec10 <sys_now>
 801a5ca:	4602      	mov	r2, r0
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	4413      	add	r3, r2
 801a5d0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a5d2:	687a      	ldr	r2, [r7, #4]
 801a5d4:	68b9      	ldr	r1, [r7, #8]
 801a5d6:	6978      	ldr	r0, [r7, #20]
 801a5d8:	f7ff ff22 	bl	801a420 <sys_timeout_abs>
#endif
}
 801a5dc:	bf00      	nop
 801a5de:	3718      	adds	r7, #24
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd80      	pop	{r7, pc}
 801a5e4:	08020988 	.word	0x08020988
 801a5e8:	08020a24 	.word	0x08020a24
 801a5ec:	080209fc 	.word	0x080209fc

0801a5f0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b084      	sub	sp, #16
 801a5f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a5f6:	f7f4 fb0b 	bl	800ec10 <sys_now>
 801a5fa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a5fc:	4b17      	ldr	r3, [pc, #92]	; (801a65c <sys_check_timeouts+0x6c>)
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a602:	68bb      	ldr	r3, [r7, #8]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d022      	beq.n	801a64e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a608:	68bb      	ldr	r3, [r7, #8]
 801a60a:	685b      	ldr	r3, [r3, #4]
 801a60c:	68fa      	ldr	r2, [r7, #12]
 801a60e:	1ad3      	subs	r3, r2, r3
 801a610:	0fdb      	lsrs	r3, r3, #31
 801a612:	f003 0301 	and.w	r3, r3, #1
 801a616:	b2db      	uxtb	r3, r3
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d11a      	bne.n	801a652 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	4a0e      	ldr	r2, [pc, #56]	; (801a65c <sys_check_timeouts+0x6c>)
 801a622:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a624:	68bb      	ldr	r3, [r7, #8]
 801a626:	689b      	ldr	r3, [r3, #8]
 801a628:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a62a:	68bb      	ldr	r3, [r7, #8]
 801a62c:	68db      	ldr	r3, [r3, #12]
 801a62e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	4a0a      	ldr	r2, [pc, #40]	; (801a660 <sys_check_timeouts+0x70>)
 801a636:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a638:	68b9      	ldr	r1, [r7, #8]
 801a63a:	200a      	movs	r0, #10
 801a63c:	f7f9 fc30 	bl	8013ea0 <memp_free>
    if (handler != NULL) {
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	2b00      	cmp	r3, #0
 801a644:	d0da      	beq.n	801a5fc <sys_check_timeouts+0xc>
      handler(arg);
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	6838      	ldr	r0, [r7, #0]
 801a64a:	4798      	blx	r3
  do {
 801a64c:	e7d6      	b.n	801a5fc <sys_check_timeouts+0xc>
      return;
 801a64e:	bf00      	nop
 801a650:	e000      	b.n	801a654 <sys_check_timeouts+0x64>
      return;
 801a652:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a654:	3710      	adds	r7, #16
 801a656:	46bd      	mov	sp, r7
 801a658:	bd80      	pop	{r7, pc}
 801a65a:	bf00      	nop
 801a65c:	2401aed0 	.word	0x2401aed0
 801a660:	2401aed4 	.word	0x2401aed4

0801a664 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b082      	sub	sp, #8
 801a668:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a66a:	4b16      	ldr	r3, [pc, #88]	; (801a6c4 <sys_timeouts_sleeptime+0x60>)
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d102      	bne.n	801a678 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a672:	f04f 33ff 	mov.w	r3, #4294967295
 801a676:	e020      	b.n	801a6ba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a678:	f7f4 faca 	bl	800ec10 <sys_now>
 801a67c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a67e:	4b11      	ldr	r3, [pc, #68]	; (801a6c4 <sys_timeouts_sleeptime+0x60>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	685a      	ldr	r2, [r3, #4]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	1ad3      	subs	r3, r2, r3
 801a688:	0fdb      	lsrs	r3, r3, #31
 801a68a:	f003 0301 	and.w	r3, r3, #1
 801a68e:	b2db      	uxtb	r3, r3
 801a690:	2b00      	cmp	r3, #0
 801a692:	d001      	beq.n	801a698 <sys_timeouts_sleeptime+0x34>
    return 0;
 801a694:	2300      	movs	r3, #0
 801a696:	e010      	b.n	801a6ba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a698:	4b0a      	ldr	r3, [pc, #40]	; (801a6c4 <sys_timeouts_sleeptime+0x60>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	685a      	ldr	r2, [r3, #4]
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	1ad3      	subs	r3, r2, r3
 801a6a2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a6a4:	683b      	ldr	r3, [r7, #0]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	da06      	bge.n	801a6b8 <sys_timeouts_sleeptime+0x54>
 801a6aa:	4b07      	ldr	r3, [pc, #28]	; (801a6c8 <sys_timeouts_sleeptime+0x64>)
 801a6ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801a6b0:	4906      	ldr	r1, [pc, #24]	; (801a6cc <sys_timeouts_sleeptime+0x68>)
 801a6b2:	4807      	ldr	r0, [pc, #28]	; (801a6d0 <sys_timeouts_sleeptime+0x6c>)
 801a6b4:	f002 ffae 	bl	801d614 <iprintf>
    return ret;
 801a6b8:	683b      	ldr	r3, [r7, #0]
  }
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	3708      	adds	r7, #8
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	bd80      	pop	{r7, pc}
 801a6c2:	bf00      	nop
 801a6c4:	2401aed0 	.word	0x2401aed0
 801a6c8:	08020988 	.word	0x08020988
 801a6cc:	08020a5c 	.word	0x08020a5c
 801a6d0:	080209fc 	.word	0x080209fc

0801a6d4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a6d8:	f002 ffb4 	bl	801d644 <rand>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	b29b      	uxth	r3, r3
 801a6e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801a6ea:	b29a      	uxth	r2, r3
 801a6ec:	4b01      	ldr	r3, [pc, #4]	; (801a6f4 <udp_init+0x20>)
 801a6ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a6f0:	bf00      	nop
 801a6f2:	bd80      	pop	{r7, pc}
 801a6f4:	24000070 	.word	0x24000070

0801a6f8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b084      	sub	sp, #16
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	60f8      	str	r0, [r7, #12]
 801a700:	60b9      	str	r1, [r7, #8]
 801a702:	4613      	mov	r3, r2
 801a704:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d105      	bne.n	801a718 <udp_input_local_match+0x20>
 801a70c:	4b27      	ldr	r3, [pc, #156]	; (801a7ac <udp_input_local_match+0xb4>)
 801a70e:	2287      	movs	r2, #135	; 0x87
 801a710:	4927      	ldr	r1, [pc, #156]	; (801a7b0 <udp_input_local_match+0xb8>)
 801a712:	4828      	ldr	r0, [pc, #160]	; (801a7b4 <udp_input_local_match+0xbc>)
 801a714:	f002 ff7e 	bl	801d614 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a718:	68bb      	ldr	r3, [r7, #8]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d105      	bne.n	801a72a <udp_input_local_match+0x32>
 801a71e:	4b23      	ldr	r3, [pc, #140]	; (801a7ac <udp_input_local_match+0xb4>)
 801a720:	2288      	movs	r2, #136	; 0x88
 801a722:	4925      	ldr	r1, [pc, #148]	; (801a7b8 <udp_input_local_match+0xc0>)
 801a724:	4823      	ldr	r0, [pc, #140]	; (801a7b4 <udp_input_local_match+0xbc>)
 801a726:	f002 ff75 	bl	801d614 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	7a1b      	ldrb	r3, [r3, #8]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d00b      	beq.n	801a74a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	7a1a      	ldrb	r2, [r3, #8]
 801a736:	4b21      	ldr	r3, [pc, #132]	; (801a7bc <udp_input_local_match+0xc4>)
 801a738:	685b      	ldr	r3, [r3, #4]
 801a73a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a73e:	3301      	adds	r3, #1
 801a740:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a742:	429a      	cmp	r2, r3
 801a744:	d001      	beq.n	801a74a <udp_input_local_match+0x52>
    return 0;
 801a746:	2300      	movs	r3, #0
 801a748:	e02b      	b.n	801a7a2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a74a:	79fb      	ldrb	r3, [r7, #7]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d018      	beq.n	801a782 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d013      	beq.n	801a77e <udp_input_local_match+0x86>
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d00f      	beq.n	801a77e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a75e:	4b17      	ldr	r3, [pc, #92]	; (801a7bc <udp_input_local_match+0xc4>)
 801a760:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a762:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a766:	d00a      	beq.n	801a77e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	681a      	ldr	r2, [r3, #0]
 801a76c:	4b13      	ldr	r3, [pc, #76]	; (801a7bc <udp_input_local_match+0xc4>)
 801a76e:	695b      	ldr	r3, [r3, #20]
 801a770:	405a      	eors	r2, r3
 801a772:	68bb      	ldr	r3, [r7, #8]
 801a774:	3308      	adds	r3, #8
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d110      	bne.n	801a7a0 <udp_input_local_match+0xa8>
          return 1;
 801a77e:	2301      	movs	r3, #1
 801a780:	e00f      	b.n	801a7a2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d009      	beq.n	801a79c <udp_input_local_match+0xa4>
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d005      	beq.n	801a79c <udp_input_local_match+0xa4>
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	681a      	ldr	r2, [r3, #0]
 801a794:	4b09      	ldr	r3, [pc, #36]	; (801a7bc <udp_input_local_match+0xc4>)
 801a796:	695b      	ldr	r3, [r3, #20]
 801a798:	429a      	cmp	r2, r3
 801a79a:	d101      	bne.n	801a7a0 <udp_input_local_match+0xa8>
        return 1;
 801a79c:	2301      	movs	r3, #1
 801a79e:	e000      	b.n	801a7a2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a7a0:	2300      	movs	r3, #0
}
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	3710      	adds	r7, #16
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	bd80      	pop	{r7, pc}
 801a7aa:	bf00      	nop
 801a7ac:	08020a70 	.word	0x08020a70
 801a7b0:	08020aa0 	.word	0x08020aa0
 801a7b4:	08020ac4 	.word	0x08020ac4
 801a7b8:	08020aec 	.word	0x08020aec
 801a7bc:	2401b7a0 	.word	0x2401b7a0

0801a7c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a7c0:	b590      	push	{r4, r7, lr}
 801a7c2:	b08d      	sub	sp, #52	; 0x34
 801a7c4:	af02      	add	r7, sp, #8
 801a7c6:	6078      	str	r0, [r7, #4]
 801a7c8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d105      	bne.n	801a7e0 <udp_input+0x20>
 801a7d4:	4b7c      	ldr	r3, [pc, #496]	; (801a9c8 <udp_input+0x208>)
 801a7d6:	22cf      	movs	r2, #207	; 0xcf
 801a7d8:	497c      	ldr	r1, [pc, #496]	; (801a9cc <udp_input+0x20c>)
 801a7da:	487d      	ldr	r0, [pc, #500]	; (801a9d0 <udp_input+0x210>)
 801a7dc:	f002 ff1a 	bl	801d614 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d105      	bne.n	801a7f2 <udp_input+0x32>
 801a7e6:	4b78      	ldr	r3, [pc, #480]	; (801a9c8 <udp_input+0x208>)
 801a7e8:	22d0      	movs	r2, #208	; 0xd0
 801a7ea:	497a      	ldr	r1, [pc, #488]	; (801a9d4 <udp_input+0x214>)
 801a7ec:	4878      	ldr	r0, [pc, #480]	; (801a9d0 <udp_input+0x210>)
 801a7ee:	f002 ff11 	bl	801d614 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	895b      	ldrh	r3, [r3, #10]
 801a7f6:	2b07      	cmp	r3, #7
 801a7f8:	d803      	bhi.n	801a802 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a7fa:	6878      	ldr	r0, [r7, #4]
 801a7fc:	f7fa f9f8 	bl	8014bf0 <pbuf_free>
    goto end;
 801a800:	e0de      	b.n	801a9c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	685b      	ldr	r3, [r3, #4]
 801a806:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a808:	4b73      	ldr	r3, [pc, #460]	; (801a9d8 <udp_input+0x218>)
 801a80a:	695b      	ldr	r3, [r3, #20]
 801a80c:	4a72      	ldr	r2, [pc, #456]	; (801a9d8 <udp_input+0x218>)
 801a80e:	6812      	ldr	r2, [r2, #0]
 801a810:	4611      	mov	r1, r2
 801a812:	4618      	mov	r0, r3
 801a814:	f001 fcae 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801a818:	4603      	mov	r3, r0
 801a81a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a81c:	697b      	ldr	r3, [r7, #20]
 801a81e:	881b      	ldrh	r3, [r3, #0]
 801a820:	b29b      	uxth	r3, r3
 801a822:	4618      	mov	r0, r3
 801a824:	f7f8 fd26 	bl	8013274 <lwip_htons>
 801a828:	4603      	mov	r3, r0
 801a82a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	885b      	ldrh	r3, [r3, #2]
 801a830:	b29b      	uxth	r3, r3
 801a832:	4618      	mov	r0, r3
 801a834:	f7f8 fd1e 	bl	8013274 <lwip_htons>
 801a838:	4603      	mov	r3, r0
 801a83a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a83c:	2300      	movs	r3, #0
 801a83e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801a840:	2300      	movs	r3, #0
 801a842:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a844:	2300      	movs	r3, #0
 801a846:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a848:	4b64      	ldr	r3, [pc, #400]	; (801a9dc <udp_input+0x21c>)
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	627b      	str	r3, [r7, #36]	; 0x24
 801a84e:	e054      	b.n	801a8fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a852:	8a5b      	ldrh	r3, [r3, #18]
 801a854:	89fa      	ldrh	r2, [r7, #14]
 801a856:	429a      	cmp	r2, r3
 801a858:	d14a      	bne.n	801a8f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a85a:	7cfb      	ldrb	r3, [r7, #19]
 801a85c:	461a      	mov	r2, r3
 801a85e:	6839      	ldr	r1, [r7, #0]
 801a860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a862:	f7ff ff49 	bl	801a6f8 <udp_input_local_match>
 801a866:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d041      	beq.n	801a8f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a86e:	7c1b      	ldrb	r3, [r3, #16]
 801a870:	f003 0304 	and.w	r3, r3, #4
 801a874:	2b00      	cmp	r3, #0
 801a876:	d11d      	bne.n	801a8b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a878:	69fb      	ldr	r3, [r7, #28]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d102      	bne.n	801a884 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a880:	61fb      	str	r3, [r7, #28]
 801a882:	e017      	b.n	801a8b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a884:	7cfb      	ldrb	r3, [r7, #19]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d014      	beq.n	801a8b4 <udp_input+0xf4>
 801a88a:	4b53      	ldr	r3, [pc, #332]	; (801a9d8 <udp_input+0x218>)
 801a88c:	695b      	ldr	r3, [r3, #20]
 801a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a892:	d10f      	bne.n	801a8b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a894:	69fb      	ldr	r3, [r7, #28]
 801a896:	681a      	ldr	r2, [r3, #0]
 801a898:	683b      	ldr	r3, [r7, #0]
 801a89a:	3304      	adds	r3, #4
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	429a      	cmp	r2, r3
 801a8a0:	d008      	beq.n	801a8b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8a4:	681a      	ldr	r2, [r3, #0]
 801a8a6:	683b      	ldr	r3, [r7, #0]
 801a8a8:	3304      	adds	r3, #4
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	d101      	bne.n	801a8b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b6:	8a9b      	ldrh	r3, [r3, #20]
 801a8b8:	8a3a      	ldrh	r2, [r7, #16]
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d118      	bne.n	801a8f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d005      	beq.n	801a8d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8c8:	685a      	ldr	r2, [r3, #4]
 801a8ca:	4b43      	ldr	r3, [pc, #268]	; (801a9d8 <udp_input+0x218>)
 801a8cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	d10e      	bne.n	801a8f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a8d2:	6a3b      	ldr	r3, [r7, #32]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d014      	beq.n	801a902 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8da:	68da      	ldr	r2, [r3, #12]
 801a8dc:	6a3b      	ldr	r3, [r7, #32]
 801a8de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a8e0:	4b3e      	ldr	r3, [pc, #248]	; (801a9dc <udp_input+0x21c>)
 801a8e2:	681a      	ldr	r2, [r3, #0]
 801a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a8e8:	4a3c      	ldr	r2, [pc, #240]	; (801a9dc <udp_input+0x21c>)
 801a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a8ee:	e008      	b.n	801a902 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8f6:	68db      	ldr	r3, [r3, #12]
 801a8f8:	627b      	str	r3, [r7, #36]	; 0x24
 801a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d1a7      	bne.n	801a850 <udp_input+0x90>
 801a900:	e000      	b.n	801a904 <udp_input+0x144>
        break;
 801a902:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a906:	2b00      	cmp	r3, #0
 801a908:	d101      	bne.n	801a90e <udp_input+0x14e>
    pcb = uncon_pcb;
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a910:	2b00      	cmp	r3, #0
 801a912:	d002      	beq.n	801a91a <udp_input+0x15a>
    for_us = 1;
 801a914:	2301      	movs	r3, #1
 801a916:	76fb      	strb	r3, [r7, #27]
 801a918:	e00a      	b.n	801a930 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a91a:	683b      	ldr	r3, [r7, #0]
 801a91c:	3304      	adds	r3, #4
 801a91e:	681a      	ldr	r2, [r3, #0]
 801a920:	4b2d      	ldr	r3, [pc, #180]	; (801a9d8 <udp_input+0x218>)
 801a922:	695b      	ldr	r3, [r3, #20]
 801a924:	429a      	cmp	r2, r3
 801a926:	bf0c      	ite	eq
 801a928:	2301      	moveq	r3, #1
 801a92a:	2300      	movne	r3, #0
 801a92c:	b2db      	uxtb	r3, r3
 801a92e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a930:	7efb      	ldrb	r3, [r7, #27]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d041      	beq.n	801a9ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a936:	2108      	movs	r1, #8
 801a938:	6878      	ldr	r0, [r7, #4]
 801a93a:	f7fa f8d3 	bl	8014ae4 <pbuf_remove_header>
 801a93e:	4603      	mov	r3, r0
 801a940:	2b00      	cmp	r3, #0
 801a942:	d00a      	beq.n	801a95a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a944:	4b20      	ldr	r3, [pc, #128]	; (801a9c8 <udp_input+0x208>)
 801a946:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801a94a:	4925      	ldr	r1, [pc, #148]	; (801a9e0 <udp_input+0x220>)
 801a94c:	4820      	ldr	r0, [pc, #128]	; (801a9d0 <udp_input+0x210>)
 801a94e:	f002 fe61 	bl	801d614 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a952:	6878      	ldr	r0, [r7, #4]
 801a954:	f7fa f94c 	bl	8014bf0 <pbuf_free>
      goto end;
 801a958:	e032      	b.n	801a9c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d012      	beq.n	801a986 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a962:	699b      	ldr	r3, [r3, #24]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d00a      	beq.n	801a97e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a96a:	699c      	ldr	r4, [r3, #24]
 801a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a96e:	69d8      	ldr	r0, [r3, #28]
 801a970:	8a3b      	ldrh	r3, [r7, #16]
 801a972:	9300      	str	r3, [sp, #0]
 801a974:	4b1b      	ldr	r3, [pc, #108]	; (801a9e4 <udp_input+0x224>)
 801a976:	687a      	ldr	r2, [r7, #4]
 801a978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a97a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a97c:	e021      	b.n	801a9c2 <udp_input+0x202>
        pbuf_free(p);
 801a97e:	6878      	ldr	r0, [r7, #4]
 801a980:	f7fa f936 	bl	8014bf0 <pbuf_free>
        goto end;
 801a984:	e01c      	b.n	801a9c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a986:	7cfb      	ldrb	r3, [r7, #19]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d112      	bne.n	801a9b2 <udp_input+0x1f2>
 801a98c:	4b12      	ldr	r3, [pc, #72]	; (801a9d8 <udp_input+0x218>)
 801a98e:	695b      	ldr	r3, [r3, #20]
 801a990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a994:	2be0      	cmp	r3, #224	; 0xe0
 801a996:	d00c      	beq.n	801a9b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a998:	4b0f      	ldr	r3, [pc, #60]	; (801a9d8 <udp_input+0x218>)
 801a99a:	899b      	ldrh	r3, [r3, #12]
 801a99c:	3308      	adds	r3, #8
 801a99e:	b29b      	uxth	r3, r3
 801a9a0:	b21b      	sxth	r3, r3
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	6878      	ldr	r0, [r7, #4]
 801a9a6:	f7fa f910 	bl	8014bca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a9aa:	2103      	movs	r1, #3
 801a9ac:	6878      	ldr	r0, [r7, #4]
 801a9ae:	f001 f8b7 	bl	801bb20 <icmp_dest_unreach>
      pbuf_free(p);
 801a9b2:	6878      	ldr	r0, [r7, #4]
 801a9b4:	f7fa f91c 	bl	8014bf0 <pbuf_free>
  return;
 801a9b8:	e003      	b.n	801a9c2 <udp_input+0x202>
    pbuf_free(p);
 801a9ba:	6878      	ldr	r0, [r7, #4]
 801a9bc:	f7fa f918 	bl	8014bf0 <pbuf_free>
  return;
 801a9c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a9c2:	372c      	adds	r7, #44	; 0x2c
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd90      	pop	{r4, r7, pc}
 801a9c8:	08020a70 	.word	0x08020a70
 801a9cc:	08020b14 	.word	0x08020b14
 801a9d0:	08020ac4 	.word	0x08020ac4
 801a9d4:	08020b2c 	.word	0x08020b2c
 801a9d8:	2401b7a0 	.word	0x2401b7a0
 801a9dc:	24022248 	.word	0x24022248
 801a9e0:	08020b48 	.word	0x08020b48
 801a9e4:	2401b7b0 	.word	0x2401b7b0

0801a9e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a9e8:	b480      	push	{r7}
 801a9ea:	b085      	sub	sp, #20
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
 801a9f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d01e      	beq.n	801aa36 <udp_netif_ip_addr_changed+0x4e>
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d01a      	beq.n	801aa36 <udp_netif_ip_addr_changed+0x4e>
 801aa00:	683b      	ldr	r3, [r7, #0]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d017      	beq.n	801aa36 <udp_netif_ip_addr_changed+0x4e>
 801aa06:	683b      	ldr	r3, [r7, #0]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d013      	beq.n	801aa36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801aa0e:	4b0d      	ldr	r3, [pc, #52]	; (801aa44 <udp_netif_ip_addr_changed+0x5c>)
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	60fb      	str	r3, [r7, #12]
 801aa14:	e00c      	b.n	801aa30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	681a      	ldr	r2, [r3, #0]
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	429a      	cmp	r2, r3
 801aa20:	d103      	bne.n	801aa2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	681a      	ldr	r2, [r3, #0]
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	68db      	ldr	r3, [r3, #12]
 801aa2e:	60fb      	str	r3, [r7, #12]
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d1ef      	bne.n	801aa16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801aa36:	bf00      	nop
 801aa38:	3714      	adds	r7, #20
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa40:	4770      	bx	lr
 801aa42:	bf00      	nop
 801aa44:	24022248 	.word	0x24022248

0801aa48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b082      	sub	sp, #8
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801aa50:	4915      	ldr	r1, [pc, #84]	; (801aaa8 <etharp_free_entry+0x60>)
 801aa52:	687a      	ldr	r2, [r7, #4]
 801aa54:	4613      	mov	r3, r2
 801aa56:	005b      	lsls	r3, r3, #1
 801aa58:	4413      	add	r3, r2
 801aa5a:	00db      	lsls	r3, r3, #3
 801aa5c:	440b      	add	r3, r1
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d013      	beq.n	801aa8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801aa64:	4910      	ldr	r1, [pc, #64]	; (801aaa8 <etharp_free_entry+0x60>)
 801aa66:	687a      	ldr	r2, [r7, #4]
 801aa68:	4613      	mov	r3, r2
 801aa6a:	005b      	lsls	r3, r3, #1
 801aa6c:	4413      	add	r3, r2
 801aa6e:	00db      	lsls	r3, r3, #3
 801aa70:	440b      	add	r3, r1
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	4618      	mov	r0, r3
 801aa76:	f7fa f8bb 	bl	8014bf0 <pbuf_free>
    arp_table[i].q = NULL;
 801aa7a:	490b      	ldr	r1, [pc, #44]	; (801aaa8 <etharp_free_entry+0x60>)
 801aa7c:	687a      	ldr	r2, [r7, #4]
 801aa7e:	4613      	mov	r3, r2
 801aa80:	005b      	lsls	r3, r3, #1
 801aa82:	4413      	add	r3, r2
 801aa84:	00db      	lsls	r3, r3, #3
 801aa86:	440b      	add	r3, r1
 801aa88:	2200      	movs	r2, #0
 801aa8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801aa8c:	4906      	ldr	r1, [pc, #24]	; (801aaa8 <etharp_free_entry+0x60>)
 801aa8e:	687a      	ldr	r2, [r7, #4]
 801aa90:	4613      	mov	r3, r2
 801aa92:	005b      	lsls	r3, r3, #1
 801aa94:	4413      	add	r3, r2
 801aa96:	00db      	lsls	r3, r3, #3
 801aa98:	440b      	add	r3, r1
 801aa9a:	3314      	adds	r3, #20
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801aaa0:	bf00      	nop
 801aaa2:	3708      	adds	r7, #8
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	2401aedc 	.word	0x2401aedc

0801aaac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b082      	sub	sp, #8
 801aab0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aab2:	2300      	movs	r3, #0
 801aab4:	607b      	str	r3, [r7, #4]
 801aab6:	e096      	b.n	801abe6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801aab8:	494f      	ldr	r1, [pc, #316]	; (801abf8 <etharp_tmr+0x14c>)
 801aaba:	687a      	ldr	r2, [r7, #4]
 801aabc:	4613      	mov	r3, r2
 801aabe:	005b      	lsls	r3, r3, #1
 801aac0:	4413      	add	r3, r2
 801aac2:	00db      	lsls	r3, r3, #3
 801aac4:	440b      	add	r3, r1
 801aac6:	3314      	adds	r3, #20
 801aac8:	781b      	ldrb	r3, [r3, #0]
 801aaca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801aacc:	78fb      	ldrb	r3, [r7, #3]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	f000 8086 	beq.w	801abe0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801aad4:	4948      	ldr	r1, [pc, #288]	; (801abf8 <etharp_tmr+0x14c>)
 801aad6:	687a      	ldr	r2, [r7, #4]
 801aad8:	4613      	mov	r3, r2
 801aada:	005b      	lsls	r3, r3, #1
 801aadc:	4413      	add	r3, r2
 801aade:	00db      	lsls	r3, r3, #3
 801aae0:	440b      	add	r3, r1
 801aae2:	3312      	adds	r3, #18
 801aae4:	881b      	ldrh	r3, [r3, #0]
 801aae6:	3301      	adds	r3, #1
 801aae8:	b298      	uxth	r0, r3
 801aaea:	4943      	ldr	r1, [pc, #268]	; (801abf8 <etharp_tmr+0x14c>)
 801aaec:	687a      	ldr	r2, [r7, #4]
 801aaee:	4613      	mov	r3, r2
 801aaf0:	005b      	lsls	r3, r3, #1
 801aaf2:	4413      	add	r3, r2
 801aaf4:	00db      	lsls	r3, r3, #3
 801aaf6:	440b      	add	r3, r1
 801aaf8:	3312      	adds	r3, #18
 801aafa:	4602      	mov	r2, r0
 801aafc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801aafe:	493e      	ldr	r1, [pc, #248]	; (801abf8 <etharp_tmr+0x14c>)
 801ab00:	687a      	ldr	r2, [r7, #4]
 801ab02:	4613      	mov	r3, r2
 801ab04:	005b      	lsls	r3, r3, #1
 801ab06:	4413      	add	r3, r2
 801ab08:	00db      	lsls	r3, r3, #3
 801ab0a:	440b      	add	r3, r1
 801ab0c:	3312      	adds	r3, #18
 801ab0e:	881b      	ldrh	r3, [r3, #0]
 801ab10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801ab14:	d215      	bcs.n	801ab42 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ab16:	4938      	ldr	r1, [pc, #224]	; (801abf8 <etharp_tmr+0x14c>)
 801ab18:	687a      	ldr	r2, [r7, #4]
 801ab1a:	4613      	mov	r3, r2
 801ab1c:	005b      	lsls	r3, r3, #1
 801ab1e:	4413      	add	r3, r2
 801ab20:	00db      	lsls	r3, r3, #3
 801ab22:	440b      	add	r3, r1
 801ab24:	3314      	adds	r3, #20
 801ab26:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ab28:	2b01      	cmp	r3, #1
 801ab2a:	d10e      	bne.n	801ab4a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ab2c:	4932      	ldr	r1, [pc, #200]	; (801abf8 <etharp_tmr+0x14c>)
 801ab2e:	687a      	ldr	r2, [r7, #4]
 801ab30:	4613      	mov	r3, r2
 801ab32:	005b      	lsls	r3, r3, #1
 801ab34:	4413      	add	r3, r2
 801ab36:	00db      	lsls	r3, r3, #3
 801ab38:	440b      	add	r3, r1
 801ab3a:	3312      	adds	r3, #18
 801ab3c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ab3e:	2b04      	cmp	r3, #4
 801ab40:	d903      	bls.n	801ab4a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ab42:	6878      	ldr	r0, [r7, #4]
 801ab44:	f7ff ff80 	bl	801aa48 <etharp_free_entry>
 801ab48:	e04a      	b.n	801abe0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ab4a:	492b      	ldr	r1, [pc, #172]	; (801abf8 <etharp_tmr+0x14c>)
 801ab4c:	687a      	ldr	r2, [r7, #4]
 801ab4e:	4613      	mov	r3, r2
 801ab50:	005b      	lsls	r3, r3, #1
 801ab52:	4413      	add	r3, r2
 801ab54:	00db      	lsls	r3, r3, #3
 801ab56:	440b      	add	r3, r1
 801ab58:	3314      	adds	r3, #20
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	2b03      	cmp	r3, #3
 801ab5e:	d10a      	bne.n	801ab76 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ab60:	4925      	ldr	r1, [pc, #148]	; (801abf8 <etharp_tmr+0x14c>)
 801ab62:	687a      	ldr	r2, [r7, #4]
 801ab64:	4613      	mov	r3, r2
 801ab66:	005b      	lsls	r3, r3, #1
 801ab68:	4413      	add	r3, r2
 801ab6a:	00db      	lsls	r3, r3, #3
 801ab6c:	440b      	add	r3, r1
 801ab6e:	3314      	adds	r3, #20
 801ab70:	2204      	movs	r2, #4
 801ab72:	701a      	strb	r2, [r3, #0]
 801ab74:	e034      	b.n	801abe0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ab76:	4920      	ldr	r1, [pc, #128]	; (801abf8 <etharp_tmr+0x14c>)
 801ab78:	687a      	ldr	r2, [r7, #4]
 801ab7a:	4613      	mov	r3, r2
 801ab7c:	005b      	lsls	r3, r3, #1
 801ab7e:	4413      	add	r3, r2
 801ab80:	00db      	lsls	r3, r3, #3
 801ab82:	440b      	add	r3, r1
 801ab84:	3314      	adds	r3, #20
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	2b04      	cmp	r3, #4
 801ab8a:	d10a      	bne.n	801aba2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ab8c:	491a      	ldr	r1, [pc, #104]	; (801abf8 <etharp_tmr+0x14c>)
 801ab8e:	687a      	ldr	r2, [r7, #4]
 801ab90:	4613      	mov	r3, r2
 801ab92:	005b      	lsls	r3, r3, #1
 801ab94:	4413      	add	r3, r2
 801ab96:	00db      	lsls	r3, r3, #3
 801ab98:	440b      	add	r3, r1
 801ab9a:	3314      	adds	r3, #20
 801ab9c:	2202      	movs	r2, #2
 801ab9e:	701a      	strb	r2, [r3, #0]
 801aba0:	e01e      	b.n	801abe0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aba2:	4915      	ldr	r1, [pc, #84]	; (801abf8 <etharp_tmr+0x14c>)
 801aba4:	687a      	ldr	r2, [r7, #4]
 801aba6:	4613      	mov	r3, r2
 801aba8:	005b      	lsls	r3, r3, #1
 801abaa:	4413      	add	r3, r2
 801abac:	00db      	lsls	r3, r3, #3
 801abae:	440b      	add	r3, r1
 801abb0:	3314      	adds	r3, #20
 801abb2:	781b      	ldrb	r3, [r3, #0]
 801abb4:	2b01      	cmp	r3, #1
 801abb6:	d113      	bne.n	801abe0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801abb8:	490f      	ldr	r1, [pc, #60]	; (801abf8 <etharp_tmr+0x14c>)
 801abba:	687a      	ldr	r2, [r7, #4]
 801abbc:	4613      	mov	r3, r2
 801abbe:	005b      	lsls	r3, r3, #1
 801abc0:	4413      	add	r3, r2
 801abc2:	00db      	lsls	r3, r3, #3
 801abc4:	440b      	add	r3, r1
 801abc6:	3308      	adds	r3, #8
 801abc8:	6818      	ldr	r0, [r3, #0]
 801abca:	687a      	ldr	r2, [r7, #4]
 801abcc:	4613      	mov	r3, r2
 801abce:	005b      	lsls	r3, r3, #1
 801abd0:	4413      	add	r3, r2
 801abd2:	00db      	lsls	r3, r3, #3
 801abd4:	4a08      	ldr	r2, [pc, #32]	; (801abf8 <etharp_tmr+0x14c>)
 801abd6:	4413      	add	r3, r2
 801abd8:	3304      	adds	r3, #4
 801abda:	4619      	mov	r1, r3
 801abdc:	f000 fe6e 	bl	801b8bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	3301      	adds	r3, #1
 801abe4:	607b      	str	r3, [r7, #4]
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	2b09      	cmp	r3, #9
 801abea:	f77f af65 	ble.w	801aab8 <etharp_tmr+0xc>
      }
    }
  }
}
 801abee:	bf00      	nop
 801abf0:	bf00      	nop
 801abf2:	3708      	adds	r7, #8
 801abf4:	46bd      	mov	sp, r7
 801abf6:	bd80      	pop	{r7, pc}
 801abf8:	2401aedc 	.word	0x2401aedc

0801abfc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b08a      	sub	sp, #40	; 0x28
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	60f8      	str	r0, [r7, #12]
 801ac04:	460b      	mov	r3, r1
 801ac06:	607a      	str	r2, [r7, #4]
 801ac08:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ac0a:	230a      	movs	r3, #10
 801ac0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ac0e:	230a      	movs	r3, #10
 801ac10:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ac12:	230a      	movs	r3, #10
 801ac14:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801ac16:	2300      	movs	r3, #0
 801ac18:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ac1a:	230a      	movs	r3, #10
 801ac1c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ac1e:	2300      	movs	r3, #0
 801ac20:	83bb      	strh	r3, [r7, #28]
 801ac22:	2300      	movs	r3, #0
 801ac24:	837b      	strh	r3, [r7, #26]
 801ac26:	2300      	movs	r3, #0
 801ac28:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	843b      	strh	r3, [r7, #32]
 801ac2e:	e0ae      	b.n	801ad8e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ac30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac34:	49a6      	ldr	r1, [pc, #664]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ac36:	4613      	mov	r3, r2
 801ac38:	005b      	lsls	r3, r3, #1
 801ac3a:	4413      	add	r3, r2
 801ac3c:	00db      	lsls	r3, r3, #3
 801ac3e:	440b      	add	r3, r1
 801ac40:	3314      	adds	r3, #20
 801ac42:	781b      	ldrb	r3, [r3, #0]
 801ac44:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ac46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ac4a:	2b0a      	cmp	r3, #10
 801ac4c:	d105      	bne.n	801ac5a <etharp_find_entry+0x5e>
 801ac4e:	7dfb      	ldrb	r3, [r7, #23]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d102      	bne.n	801ac5a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ac54:	8c3b      	ldrh	r3, [r7, #32]
 801ac56:	847b      	strh	r3, [r7, #34]	; 0x22
 801ac58:	e095      	b.n	801ad86 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ac5a:	7dfb      	ldrb	r3, [r7, #23]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	f000 8092 	beq.w	801ad86 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ac62:	7dfb      	ldrb	r3, [r7, #23]
 801ac64:	2b01      	cmp	r3, #1
 801ac66:	d009      	beq.n	801ac7c <etharp_find_entry+0x80>
 801ac68:	7dfb      	ldrb	r3, [r7, #23]
 801ac6a:	2b01      	cmp	r3, #1
 801ac6c:	d806      	bhi.n	801ac7c <etharp_find_entry+0x80>
 801ac6e:	4b99      	ldr	r3, [pc, #612]	; (801aed4 <etharp_find_entry+0x2d8>)
 801ac70:	f240 1223 	movw	r2, #291	; 0x123
 801ac74:	4998      	ldr	r1, [pc, #608]	; (801aed8 <etharp_find_entry+0x2dc>)
 801ac76:	4899      	ldr	r0, [pc, #612]	; (801aedc <etharp_find_entry+0x2e0>)
 801ac78:	f002 fccc 	bl	801d614 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d020      	beq.n	801acc4 <etharp_find_entry+0xc8>
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	6819      	ldr	r1, [r3, #0]
 801ac86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac8a:	4891      	ldr	r0, [pc, #580]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ac8c:	4613      	mov	r3, r2
 801ac8e:	005b      	lsls	r3, r3, #1
 801ac90:	4413      	add	r3, r2
 801ac92:	00db      	lsls	r3, r3, #3
 801ac94:	4403      	add	r3, r0
 801ac96:	3304      	adds	r3, #4
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	4299      	cmp	r1, r3
 801ac9c:	d112      	bne.n	801acc4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d00c      	beq.n	801acbe <etharp_find_entry+0xc2>
 801aca4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aca8:	4989      	ldr	r1, [pc, #548]	; (801aed0 <etharp_find_entry+0x2d4>)
 801acaa:	4613      	mov	r3, r2
 801acac:	005b      	lsls	r3, r3, #1
 801acae:	4413      	add	r3, r2
 801acb0:	00db      	lsls	r3, r3, #3
 801acb2:	440b      	add	r3, r1
 801acb4:	3308      	adds	r3, #8
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	687a      	ldr	r2, [r7, #4]
 801acba:	429a      	cmp	r2, r3
 801acbc:	d102      	bne.n	801acc4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801acbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801acc2:	e100      	b.n	801aec6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801acc4:	7dfb      	ldrb	r3, [r7, #23]
 801acc6:	2b01      	cmp	r3, #1
 801acc8:	d140      	bne.n	801ad4c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801acca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acce:	4980      	ldr	r1, [pc, #512]	; (801aed0 <etharp_find_entry+0x2d4>)
 801acd0:	4613      	mov	r3, r2
 801acd2:	005b      	lsls	r3, r3, #1
 801acd4:	4413      	add	r3, r2
 801acd6:	00db      	lsls	r3, r3, #3
 801acd8:	440b      	add	r3, r1
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d01a      	beq.n	801ad16 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ace0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ace4:	497a      	ldr	r1, [pc, #488]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ace6:	4613      	mov	r3, r2
 801ace8:	005b      	lsls	r3, r3, #1
 801acea:	4413      	add	r3, r2
 801acec:	00db      	lsls	r3, r3, #3
 801acee:	440b      	add	r3, r1
 801acf0:	3312      	adds	r3, #18
 801acf2:	881b      	ldrh	r3, [r3, #0]
 801acf4:	8bba      	ldrh	r2, [r7, #28]
 801acf6:	429a      	cmp	r2, r3
 801acf8:	d845      	bhi.n	801ad86 <etharp_find_entry+0x18a>
            old_queue = i;
 801acfa:	8c3b      	ldrh	r3, [r7, #32]
 801acfc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801acfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad02:	4973      	ldr	r1, [pc, #460]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ad04:	4613      	mov	r3, r2
 801ad06:	005b      	lsls	r3, r3, #1
 801ad08:	4413      	add	r3, r2
 801ad0a:	00db      	lsls	r3, r3, #3
 801ad0c:	440b      	add	r3, r1
 801ad0e:	3312      	adds	r3, #18
 801ad10:	881b      	ldrh	r3, [r3, #0]
 801ad12:	83bb      	strh	r3, [r7, #28]
 801ad14:	e037      	b.n	801ad86 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ad16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad1a:	496d      	ldr	r1, [pc, #436]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ad1c:	4613      	mov	r3, r2
 801ad1e:	005b      	lsls	r3, r3, #1
 801ad20:	4413      	add	r3, r2
 801ad22:	00db      	lsls	r3, r3, #3
 801ad24:	440b      	add	r3, r1
 801ad26:	3312      	adds	r3, #18
 801ad28:	881b      	ldrh	r3, [r3, #0]
 801ad2a:	8b7a      	ldrh	r2, [r7, #26]
 801ad2c:	429a      	cmp	r2, r3
 801ad2e:	d82a      	bhi.n	801ad86 <etharp_find_entry+0x18a>
            old_pending = i;
 801ad30:	8c3b      	ldrh	r3, [r7, #32]
 801ad32:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ad34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad38:	4965      	ldr	r1, [pc, #404]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ad3a:	4613      	mov	r3, r2
 801ad3c:	005b      	lsls	r3, r3, #1
 801ad3e:	4413      	add	r3, r2
 801ad40:	00db      	lsls	r3, r3, #3
 801ad42:	440b      	add	r3, r1
 801ad44:	3312      	adds	r3, #18
 801ad46:	881b      	ldrh	r3, [r3, #0]
 801ad48:	837b      	strh	r3, [r7, #26]
 801ad4a:	e01c      	b.n	801ad86 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ad4c:	7dfb      	ldrb	r3, [r7, #23]
 801ad4e:	2b01      	cmp	r3, #1
 801ad50:	d919      	bls.n	801ad86 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ad52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad56:	495e      	ldr	r1, [pc, #376]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ad58:	4613      	mov	r3, r2
 801ad5a:	005b      	lsls	r3, r3, #1
 801ad5c:	4413      	add	r3, r2
 801ad5e:	00db      	lsls	r3, r3, #3
 801ad60:	440b      	add	r3, r1
 801ad62:	3312      	adds	r3, #18
 801ad64:	881b      	ldrh	r3, [r3, #0]
 801ad66:	8b3a      	ldrh	r2, [r7, #24]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d80c      	bhi.n	801ad86 <etharp_find_entry+0x18a>
            old_stable = i;
 801ad6c:	8c3b      	ldrh	r3, [r7, #32]
 801ad6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ad70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad74:	4956      	ldr	r1, [pc, #344]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ad76:	4613      	mov	r3, r2
 801ad78:	005b      	lsls	r3, r3, #1
 801ad7a:	4413      	add	r3, r2
 801ad7c:	00db      	lsls	r3, r3, #3
 801ad7e:	440b      	add	r3, r1
 801ad80:	3312      	adds	r3, #18
 801ad82:	881b      	ldrh	r3, [r3, #0]
 801ad84:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ad86:	8c3b      	ldrh	r3, [r7, #32]
 801ad88:	3301      	adds	r3, #1
 801ad8a:	b29b      	uxth	r3, r3
 801ad8c:	843b      	strh	r3, [r7, #32]
 801ad8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ad92:	2b09      	cmp	r3, #9
 801ad94:	f77f af4c 	ble.w	801ac30 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ad98:	7afb      	ldrb	r3, [r7, #11]
 801ad9a:	f003 0302 	and.w	r3, r3, #2
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d108      	bne.n	801adb4 <etharp_find_entry+0x1b8>
 801ada2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ada6:	2b0a      	cmp	r3, #10
 801ada8:	d107      	bne.n	801adba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801adaa:	7afb      	ldrb	r3, [r7, #11]
 801adac:	f003 0301 	and.w	r3, r3, #1
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d102      	bne.n	801adba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801adb4:	f04f 33ff 	mov.w	r3, #4294967295
 801adb8:	e085      	b.n	801aec6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801adba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801adbe:	2b09      	cmp	r3, #9
 801adc0:	dc02      	bgt.n	801adc8 <etharp_find_entry+0x1cc>
    i = empty;
 801adc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801adc4:	843b      	strh	r3, [r7, #32]
 801adc6:	e039      	b.n	801ae3c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801adc8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801adcc:	2b09      	cmp	r3, #9
 801adce:	dc14      	bgt.n	801adfa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801add0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801add2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801add4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801add8:	493d      	ldr	r1, [pc, #244]	; (801aed0 <etharp_find_entry+0x2d4>)
 801adda:	4613      	mov	r3, r2
 801addc:	005b      	lsls	r3, r3, #1
 801adde:	4413      	add	r3, r2
 801ade0:	00db      	lsls	r3, r3, #3
 801ade2:	440b      	add	r3, r1
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d018      	beq.n	801ae1c <etharp_find_entry+0x220>
 801adea:	4b3a      	ldr	r3, [pc, #232]	; (801aed4 <etharp_find_entry+0x2d8>)
 801adec:	f240 126d 	movw	r2, #365	; 0x16d
 801adf0:	493b      	ldr	r1, [pc, #236]	; (801aee0 <etharp_find_entry+0x2e4>)
 801adf2:	483a      	ldr	r0, [pc, #232]	; (801aedc <etharp_find_entry+0x2e0>)
 801adf4:	f002 fc0e 	bl	801d614 <iprintf>
 801adf8:	e010      	b.n	801ae1c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801adfa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801adfe:	2b09      	cmp	r3, #9
 801ae00:	dc02      	bgt.n	801ae08 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ae02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ae04:	843b      	strh	r3, [r7, #32]
 801ae06:	e009      	b.n	801ae1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ae08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ae0c:	2b09      	cmp	r3, #9
 801ae0e:	dc02      	bgt.n	801ae16 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ae10:	8bfb      	ldrh	r3, [r7, #30]
 801ae12:	843b      	strh	r3, [r7, #32]
 801ae14:	e002      	b.n	801ae1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ae16:	f04f 33ff 	mov.w	r3, #4294967295
 801ae1a:	e054      	b.n	801aec6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ae1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae20:	2b09      	cmp	r3, #9
 801ae22:	dd06      	ble.n	801ae32 <etharp_find_entry+0x236>
 801ae24:	4b2b      	ldr	r3, [pc, #172]	; (801aed4 <etharp_find_entry+0x2d8>)
 801ae26:	f240 127f 	movw	r2, #383	; 0x17f
 801ae2a:	492e      	ldr	r1, [pc, #184]	; (801aee4 <etharp_find_entry+0x2e8>)
 801ae2c:	482b      	ldr	r0, [pc, #172]	; (801aedc <etharp_find_entry+0x2e0>)
 801ae2e:	f002 fbf1 	bl	801d614 <iprintf>
    etharp_free_entry(i);
 801ae32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae36:	4618      	mov	r0, r3
 801ae38:	f7ff fe06 	bl	801aa48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ae3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae40:	2b09      	cmp	r3, #9
 801ae42:	dd06      	ble.n	801ae52 <etharp_find_entry+0x256>
 801ae44:	4b23      	ldr	r3, [pc, #140]	; (801aed4 <etharp_find_entry+0x2d8>)
 801ae46:	f240 1283 	movw	r2, #387	; 0x183
 801ae4a:	4926      	ldr	r1, [pc, #152]	; (801aee4 <etharp_find_entry+0x2e8>)
 801ae4c:	4823      	ldr	r0, [pc, #140]	; (801aedc <etharp_find_entry+0x2e0>)
 801ae4e:	f002 fbe1 	bl	801d614 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ae52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae56:	491e      	ldr	r1, [pc, #120]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ae58:	4613      	mov	r3, r2
 801ae5a:	005b      	lsls	r3, r3, #1
 801ae5c:	4413      	add	r3, r2
 801ae5e:	00db      	lsls	r3, r3, #3
 801ae60:	440b      	add	r3, r1
 801ae62:	3314      	adds	r3, #20
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d006      	beq.n	801ae78 <etharp_find_entry+0x27c>
 801ae6a:	4b1a      	ldr	r3, [pc, #104]	; (801aed4 <etharp_find_entry+0x2d8>)
 801ae6c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801ae70:	491d      	ldr	r1, [pc, #116]	; (801aee8 <etharp_find_entry+0x2ec>)
 801ae72:	481a      	ldr	r0, [pc, #104]	; (801aedc <etharp_find_entry+0x2e0>)
 801ae74:	f002 fbce 	bl	801d614 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d00b      	beq.n	801ae96 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801ae7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	6819      	ldr	r1, [r3, #0]
 801ae86:	4812      	ldr	r0, [pc, #72]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ae88:	4613      	mov	r3, r2
 801ae8a:	005b      	lsls	r3, r3, #1
 801ae8c:	4413      	add	r3, r2
 801ae8e:	00db      	lsls	r3, r3, #3
 801ae90:	4403      	add	r3, r0
 801ae92:	3304      	adds	r3, #4
 801ae94:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801ae96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae9a:	490d      	ldr	r1, [pc, #52]	; (801aed0 <etharp_find_entry+0x2d4>)
 801ae9c:	4613      	mov	r3, r2
 801ae9e:	005b      	lsls	r3, r3, #1
 801aea0:	4413      	add	r3, r2
 801aea2:	00db      	lsls	r3, r3, #3
 801aea4:	440b      	add	r3, r1
 801aea6:	3312      	adds	r3, #18
 801aea8:	2200      	movs	r2, #0
 801aeaa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801aeac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aeb0:	4907      	ldr	r1, [pc, #28]	; (801aed0 <etharp_find_entry+0x2d4>)
 801aeb2:	4613      	mov	r3, r2
 801aeb4:	005b      	lsls	r3, r3, #1
 801aeb6:	4413      	add	r3, r2
 801aeb8:	00db      	lsls	r3, r3, #3
 801aeba:	440b      	add	r3, r1
 801aebc:	3308      	adds	r3, #8
 801aebe:	687a      	ldr	r2, [r7, #4]
 801aec0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801aec2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801aec6:	4618      	mov	r0, r3
 801aec8:	3728      	adds	r7, #40	; 0x28
 801aeca:	46bd      	mov	sp, r7
 801aecc:	bd80      	pop	{r7, pc}
 801aece:	bf00      	nop
 801aed0:	2401aedc 	.word	0x2401aedc
 801aed4:	08020dd4 	.word	0x08020dd4
 801aed8:	08020e0c 	.word	0x08020e0c
 801aedc:	08020e4c 	.word	0x08020e4c
 801aee0:	08020e74 	.word	0x08020e74
 801aee4:	08020e8c 	.word	0x08020e8c
 801aee8:	08020ea0 	.word	0x08020ea0

0801aeec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b088      	sub	sp, #32
 801aef0:	af02      	add	r7, sp, #8
 801aef2:	60f8      	str	r0, [r7, #12]
 801aef4:	60b9      	str	r1, [r7, #8]
 801aef6:	607a      	str	r2, [r7, #4]
 801aef8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801af00:	2b06      	cmp	r3, #6
 801af02:	d006      	beq.n	801af12 <etharp_update_arp_entry+0x26>
 801af04:	4b48      	ldr	r3, [pc, #288]	; (801b028 <etharp_update_arp_entry+0x13c>)
 801af06:	f240 12a9 	movw	r2, #425	; 0x1a9
 801af0a:	4948      	ldr	r1, [pc, #288]	; (801b02c <etharp_update_arp_entry+0x140>)
 801af0c:	4848      	ldr	r0, [pc, #288]	; (801b030 <etharp_update_arp_entry+0x144>)
 801af0e:	f002 fb81 	bl	801d614 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	2b00      	cmp	r3, #0
 801af16:	d012      	beq.n	801af3e <etharp_update_arp_entry+0x52>
 801af18:	68bb      	ldr	r3, [r7, #8]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d00e      	beq.n	801af3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	68f9      	ldr	r1, [r7, #12]
 801af26:	4618      	mov	r0, r3
 801af28:	f001 f924 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801af2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d105      	bne.n	801af3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801af3a:	2be0      	cmp	r3, #224	; 0xe0
 801af3c:	d102      	bne.n	801af44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801af3e:	f06f 030f 	mvn.w	r3, #15
 801af42:	e06c      	b.n	801b01e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801af44:	78fb      	ldrb	r3, [r7, #3]
 801af46:	68fa      	ldr	r2, [r7, #12]
 801af48:	4619      	mov	r1, r3
 801af4a:	68b8      	ldr	r0, [r7, #8]
 801af4c:	f7ff fe56 	bl	801abfc <etharp_find_entry>
 801af50:	4603      	mov	r3, r0
 801af52:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801af54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801af58:	2b00      	cmp	r3, #0
 801af5a:	da02      	bge.n	801af62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801af5c:	8afb      	ldrh	r3, [r7, #22]
 801af5e:	b25b      	sxtb	r3, r3
 801af60:	e05d      	b.n	801b01e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801af62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801af66:	4933      	ldr	r1, [pc, #204]	; (801b034 <etharp_update_arp_entry+0x148>)
 801af68:	4613      	mov	r3, r2
 801af6a:	005b      	lsls	r3, r3, #1
 801af6c:	4413      	add	r3, r2
 801af6e:	00db      	lsls	r3, r3, #3
 801af70:	440b      	add	r3, r1
 801af72:	3314      	adds	r3, #20
 801af74:	2202      	movs	r2, #2
 801af76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801af78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801af7c:	492d      	ldr	r1, [pc, #180]	; (801b034 <etharp_update_arp_entry+0x148>)
 801af7e:	4613      	mov	r3, r2
 801af80:	005b      	lsls	r3, r3, #1
 801af82:	4413      	add	r3, r2
 801af84:	00db      	lsls	r3, r3, #3
 801af86:	440b      	add	r3, r1
 801af88:	3308      	adds	r3, #8
 801af8a:	68fa      	ldr	r2, [r7, #12]
 801af8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801af8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801af92:	4613      	mov	r3, r2
 801af94:	005b      	lsls	r3, r3, #1
 801af96:	4413      	add	r3, r2
 801af98:	00db      	lsls	r3, r3, #3
 801af9a:	3308      	adds	r3, #8
 801af9c:	4a25      	ldr	r2, [pc, #148]	; (801b034 <etharp_update_arp_entry+0x148>)
 801af9e:	4413      	add	r3, r2
 801afa0:	3304      	adds	r3, #4
 801afa2:	2206      	movs	r2, #6
 801afa4:	6879      	ldr	r1, [r7, #4]
 801afa6:	4618      	mov	r0, r3
 801afa8:	f002 fa5a 	bl	801d460 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801afac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afb0:	4920      	ldr	r1, [pc, #128]	; (801b034 <etharp_update_arp_entry+0x148>)
 801afb2:	4613      	mov	r3, r2
 801afb4:	005b      	lsls	r3, r3, #1
 801afb6:	4413      	add	r3, r2
 801afb8:	00db      	lsls	r3, r3, #3
 801afba:	440b      	add	r3, r1
 801afbc:	3312      	adds	r3, #18
 801afbe:	2200      	movs	r2, #0
 801afc0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801afc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afc6:	491b      	ldr	r1, [pc, #108]	; (801b034 <etharp_update_arp_entry+0x148>)
 801afc8:	4613      	mov	r3, r2
 801afca:	005b      	lsls	r3, r3, #1
 801afcc:	4413      	add	r3, r2
 801afce:	00db      	lsls	r3, r3, #3
 801afd0:	440b      	add	r3, r1
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d021      	beq.n	801b01c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801afd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801afdc:	4915      	ldr	r1, [pc, #84]	; (801b034 <etharp_update_arp_entry+0x148>)
 801afde:	4613      	mov	r3, r2
 801afe0:	005b      	lsls	r3, r3, #1
 801afe2:	4413      	add	r3, r2
 801afe4:	00db      	lsls	r3, r3, #3
 801afe6:	440b      	add	r3, r1
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801afec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aff0:	4910      	ldr	r1, [pc, #64]	; (801b034 <etharp_update_arp_entry+0x148>)
 801aff2:	4613      	mov	r3, r2
 801aff4:	005b      	lsls	r3, r3, #1
 801aff6:	4413      	add	r3, r2
 801aff8:	00db      	lsls	r3, r3, #3
 801affa:	440b      	add	r3, r1
 801affc:	2200      	movs	r2, #0
 801affe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801b006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b00a:	9300      	str	r3, [sp, #0]
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	6939      	ldr	r1, [r7, #16]
 801b010:	68f8      	ldr	r0, [r7, #12]
 801b012:	f001 ffb7 	bl	801cf84 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b016:	6938      	ldr	r0, [r7, #16]
 801b018:	f7f9 fdea 	bl	8014bf0 <pbuf_free>
  }
  return ERR_OK;
 801b01c:	2300      	movs	r3, #0
}
 801b01e:	4618      	mov	r0, r3
 801b020:	3718      	adds	r7, #24
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}
 801b026:	bf00      	nop
 801b028:	08020dd4 	.word	0x08020dd4
 801b02c:	08020ecc 	.word	0x08020ecc
 801b030:	08020e4c 	.word	0x08020e4c
 801b034:	2401aedc 	.word	0x2401aedc

0801b038 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b084      	sub	sp, #16
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b040:	2300      	movs	r3, #0
 801b042:	60fb      	str	r3, [r7, #12]
 801b044:	e01e      	b.n	801b084 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b046:	4913      	ldr	r1, [pc, #76]	; (801b094 <etharp_cleanup_netif+0x5c>)
 801b048:	68fa      	ldr	r2, [r7, #12]
 801b04a:	4613      	mov	r3, r2
 801b04c:	005b      	lsls	r3, r3, #1
 801b04e:	4413      	add	r3, r2
 801b050:	00db      	lsls	r3, r3, #3
 801b052:	440b      	add	r3, r1
 801b054:	3314      	adds	r3, #20
 801b056:	781b      	ldrb	r3, [r3, #0]
 801b058:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b05a:	7afb      	ldrb	r3, [r7, #11]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d00e      	beq.n	801b07e <etharp_cleanup_netif+0x46>
 801b060:	490c      	ldr	r1, [pc, #48]	; (801b094 <etharp_cleanup_netif+0x5c>)
 801b062:	68fa      	ldr	r2, [r7, #12]
 801b064:	4613      	mov	r3, r2
 801b066:	005b      	lsls	r3, r3, #1
 801b068:	4413      	add	r3, r2
 801b06a:	00db      	lsls	r3, r3, #3
 801b06c:	440b      	add	r3, r1
 801b06e:	3308      	adds	r3, #8
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	687a      	ldr	r2, [r7, #4]
 801b074:	429a      	cmp	r2, r3
 801b076:	d102      	bne.n	801b07e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b078:	68f8      	ldr	r0, [r7, #12]
 801b07a:	f7ff fce5 	bl	801aa48 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	3301      	adds	r3, #1
 801b082:	60fb      	str	r3, [r7, #12]
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	2b09      	cmp	r3, #9
 801b088:	dddd      	ble.n	801b046 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b08a:	bf00      	nop
 801b08c:	bf00      	nop
 801b08e:	3710      	adds	r7, #16
 801b090:	46bd      	mov	sp, r7
 801b092:	bd80      	pop	{r7, pc}
 801b094:	2401aedc 	.word	0x2401aedc

0801b098 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b098:	b5b0      	push	{r4, r5, r7, lr}
 801b09a:	b08a      	sub	sp, #40	; 0x28
 801b09c:	af04      	add	r7, sp, #16
 801b09e:	6078      	str	r0, [r7, #4]
 801b0a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d107      	bne.n	801b0b8 <etharp_input+0x20>
 801b0a8:	4b3d      	ldr	r3, [pc, #244]	; (801b1a0 <etharp_input+0x108>)
 801b0aa:	f240 228a 	movw	r2, #650	; 0x28a
 801b0ae:	493d      	ldr	r1, [pc, #244]	; (801b1a4 <etharp_input+0x10c>)
 801b0b0:	483d      	ldr	r0, [pc, #244]	; (801b1a8 <etharp_input+0x110>)
 801b0b2:	f002 faaf 	bl	801d614 <iprintf>
 801b0b6:	e06f      	b.n	801b198 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	685b      	ldr	r3, [r3, #4]
 801b0bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b0be:	693b      	ldr	r3, [r7, #16]
 801b0c0:	881b      	ldrh	r3, [r3, #0]
 801b0c2:	b29b      	uxth	r3, r3
 801b0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b0c8:	d10c      	bne.n	801b0e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b0ca:	693b      	ldr	r3, [r7, #16]
 801b0cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b0ce:	2b06      	cmp	r3, #6
 801b0d0:	d108      	bne.n	801b0e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b0d2:	693b      	ldr	r3, [r7, #16]
 801b0d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b0d6:	2b04      	cmp	r3, #4
 801b0d8:	d104      	bne.n	801b0e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b0da:	693b      	ldr	r3, [r7, #16]
 801b0dc:	885b      	ldrh	r3, [r3, #2]
 801b0de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b0e0:	2b08      	cmp	r3, #8
 801b0e2:	d003      	beq.n	801b0ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b0e4:	6878      	ldr	r0, [r7, #4]
 801b0e6:	f7f9 fd83 	bl	8014bf0 <pbuf_free>
    return;
 801b0ea:	e055      	b.n	801b198 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b0ec:	693b      	ldr	r3, [r7, #16]
 801b0ee:	330e      	adds	r3, #14
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b0f4:	693b      	ldr	r3, [r7, #16]
 801b0f6:	3318      	adds	r3, #24
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	3304      	adds	r3, #4
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d102      	bne.n	801b10c <etharp_input+0x74>
    for_us = 0;
 801b106:	2300      	movs	r3, #0
 801b108:	75fb      	strb	r3, [r7, #23]
 801b10a:	e009      	b.n	801b120 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b10c:	68ba      	ldr	r2, [r7, #8]
 801b10e:	683b      	ldr	r3, [r7, #0]
 801b110:	3304      	adds	r3, #4
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	429a      	cmp	r2, r3
 801b116:	bf0c      	ite	eq
 801b118:	2301      	moveq	r3, #1
 801b11a:	2300      	movne	r3, #0
 801b11c:	b2db      	uxtb	r3, r3
 801b11e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b120:	693b      	ldr	r3, [r7, #16]
 801b122:	f103 0208 	add.w	r2, r3, #8
 801b126:	7dfb      	ldrb	r3, [r7, #23]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d001      	beq.n	801b130 <etharp_input+0x98>
 801b12c:	2301      	movs	r3, #1
 801b12e:	e000      	b.n	801b132 <etharp_input+0x9a>
 801b130:	2302      	movs	r3, #2
 801b132:	f107 010c 	add.w	r1, r7, #12
 801b136:	6838      	ldr	r0, [r7, #0]
 801b138:	f7ff fed8 	bl	801aeec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b13c:	693b      	ldr	r3, [r7, #16]
 801b13e:	88db      	ldrh	r3, [r3, #6]
 801b140:	b29b      	uxth	r3, r3
 801b142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b146:	d003      	beq.n	801b150 <etharp_input+0xb8>
 801b148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b14c:	d01e      	beq.n	801b18c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b14e:	e020      	b.n	801b192 <etharp_input+0xfa>
      if (for_us) {
 801b150:	7dfb      	ldrb	r3, [r7, #23]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d01c      	beq.n	801b190 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b156:	683b      	ldr	r3, [r7, #0]
 801b158:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801b15c:	693b      	ldr	r3, [r7, #16]
 801b15e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801b168:	683b      	ldr	r3, [r7, #0]
 801b16a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b16c:	693a      	ldr	r2, [r7, #16]
 801b16e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b170:	2102      	movs	r1, #2
 801b172:	9103      	str	r1, [sp, #12]
 801b174:	f107 010c 	add.w	r1, r7, #12
 801b178:	9102      	str	r1, [sp, #8]
 801b17a:	9201      	str	r2, [sp, #4]
 801b17c:	9300      	str	r3, [sp, #0]
 801b17e:	462b      	mov	r3, r5
 801b180:	4622      	mov	r2, r4
 801b182:	4601      	mov	r1, r0
 801b184:	6838      	ldr	r0, [r7, #0]
 801b186:	f000 faeb 	bl	801b760 <etharp_raw>
      break;
 801b18a:	e001      	b.n	801b190 <etharp_input+0xf8>
      break;
 801b18c:	bf00      	nop
 801b18e:	e000      	b.n	801b192 <etharp_input+0xfa>
      break;
 801b190:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b192:	6878      	ldr	r0, [r7, #4]
 801b194:	f7f9 fd2c 	bl	8014bf0 <pbuf_free>
}
 801b198:	3718      	adds	r7, #24
 801b19a:	46bd      	mov	sp, r7
 801b19c:	bdb0      	pop	{r4, r5, r7, pc}
 801b19e:	bf00      	nop
 801b1a0:	08020dd4 	.word	0x08020dd4
 801b1a4:	08020f24 	.word	0x08020f24
 801b1a8:	08020e4c 	.word	0x08020e4c

0801b1ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b086      	sub	sp, #24
 801b1b0:	af02      	add	r7, sp, #8
 801b1b2:	60f8      	str	r0, [r7, #12]
 801b1b4:	60b9      	str	r1, [r7, #8]
 801b1b6:	4613      	mov	r3, r2
 801b1b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b1ba:	79fa      	ldrb	r2, [r7, #7]
 801b1bc:	4944      	ldr	r1, [pc, #272]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b1be:	4613      	mov	r3, r2
 801b1c0:	005b      	lsls	r3, r3, #1
 801b1c2:	4413      	add	r3, r2
 801b1c4:	00db      	lsls	r3, r3, #3
 801b1c6:	440b      	add	r3, r1
 801b1c8:	3314      	adds	r3, #20
 801b1ca:	781b      	ldrb	r3, [r3, #0]
 801b1cc:	2b01      	cmp	r3, #1
 801b1ce:	d806      	bhi.n	801b1de <etharp_output_to_arp_index+0x32>
 801b1d0:	4b40      	ldr	r3, [pc, #256]	; (801b2d4 <etharp_output_to_arp_index+0x128>)
 801b1d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b1d6:	4940      	ldr	r1, [pc, #256]	; (801b2d8 <etharp_output_to_arp_index+0x12c>)
 801b1d8:	4840      	ldr	r0, [pc, #256]	; (801b2dc <etharp_output_to_arp_index+0x130>)
 801b1da:	f002 fa1b 	bl	801d614 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b1de:	79fa      	ldrb	r2, [r7, #7]
 801b1e0:	493b      	ldr	r1, [pc, #236]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b1e2:	4613      	mov	r3, r2
 801b1e4:	005b      	lsls	r3, r3, #1
 801b1e6:	4413      	add	r3, r2
 801b1e8:	00db      	lsls	r3, r3, #3
 801b1ea:	440b      	add	r3, r1
 801b1ec:	3314      	adds	r3, #20
 801b1ee:	781b      	ldrb	r3, [r3, #0]
 801b1f0:	2b02      	cmp	r3, #2
 801b1f2:	d153      	bne.n	801b29c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b1f4:	79fa      	ldrb	r2, [r7, #7]
 801b1f6:	4936      	ldr	r1, [pc, #216]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b1f8:	4613      	mov	r3, r2
 801b1fa:	005b      	lsls	r3, r3, #1
 801b1fc:	4413      	add	r3, r2
 801b1fe:	00db      	lsls	r3, r3, #3
 801b200:	440b      	add	r3, r1
 801b202:	3312      	adds	r3, #18
 801b204:	881b      	ldrh	r3, [r3, #0]
 801b206:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801b20a:	d919      	bls.n	801b240 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b20c:	79fa      	ldrb	r2, [r7, #7]
 801b20e:	4613      	mov	r3, r2
 801b210:	005b      	lsls	r3, r3, #1
 801b212:	4413      	add	r3, r2
 801b214:	00db      	lsls	r3, r3, #3
 801b216:	4a2e      	ldr	r2, [pc, #184]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b218:	4413      	add	r3, r2
 801b21a:	3304      	adds	r3, #4
 801b21c:	4619      	mov	r1, r3
 801b21e:	68f8      	ldr	r0, [r7, #12]
 801b220:	f000 fb4c 	bl	801b8bc <etharp_request>
 801b224:	4603      	mov	r3, r0
 801b226:	2b00      	cmp	r3, #0
 801b228:	d138      	bne.n	801b29c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b22a:	79fa      	ldrb	r2, [r7, #7]
 801b22c:	4928      	ldr	r1, [pc, #160]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b22e:	4613      	mov	r3, r2
 801b230:	005b      	lsls	r3, r3, #1
 801b232:	4413      	add	r3, r2
 801b234:	00db      	lsls	r3, r3, #3
 801b236:	440b      	add	r3, r1
 801b238:	3314      	adds	r3, #20
 801b23a:	2203      	movs	r2, #3
 801b23c:	701a      	strb	r2, [r3, #0]
 801b23e:	e02d      	b.n	801b29c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b240:	79fa      	ldrb	r2, [r7, #7]
 801b242:	4923      	ldr	r1, [pc, #140]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b244:	4613      	mov	r3, r2
 801b246:	005b      	lsls	r3, r3, #1
 801b248:	4413      	add	r3, r2
 801b24a:	00db      	lsls	r3, r3, #3
 801b24c:	440b      	add	r3, r1
 801b24e:	3312      	adds	r3, #18
 801b250:	881b      	ldrh	r3, [r3, #0]
 801b252:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801b256:	d321      	bcc.n	801b29c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b258:	79fa      	ldrb	r2, [r7, #7]
 801b25a:	4613      	mov	r3, r2
 801b25c:	005b      	lsls	r3, r3, #1
 801b25e:	4413      	add	r3, r2
 801b260:	00db      	lsls	r3, r3, #3
 801b262:	4a1b      	ldr	r2, [pc, #108]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b264:	4413      	add	r3, r2
 801b266:	1d19      	adds	r1, r3, #4
 801b268:	79fa      	ldrb	r2, [r7, #7]
 801b26a:	4613      	mov	r3, r2
 801b26c:	005b      	lsls	r3, r3, #1
 801b26e:	4413      	add	r3, r2
 801b270:	00db      	lsls	r3, r3, #3
 801b272:	3308      	adds	r3, #8
 801b274:	4a16      	ldr	r2, [pc, #88]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b276:	4413      	add	r3, r2
 801b278:	3304      	adds	r3, #4
 801b27a:	461a      	mov	r2, r3
 801b27c:	68f8      	ldr	r0, [r7, #12]
 801b27e:	f000 fafb 	bl	801b878 <etharp_request_dst>
 801b282:	4603      	mov	r3, r0
 801b284:	2b00      	cmp	r3, #0
 801b286:	d109      	bne.n	801b29c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b288:	79fa      	ldrb	r2, [r7, #7]
 801b28a:	4911      	ldr	r1, [pc, #68]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b28c:	4613      	mov	r3, r2
 801b28e:	005b      	lsls	r3, r3, #1
 801b290:	4413      	add	r3, r2
 801b292:	00db      	lsls	r3, r3, #3
 801b294:	440b      	add	r3, r1
 801b296:	3314      	adds	r3, #20
 801b298:	2203      	movs	r2, #3
 801b29a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801b2a2:	79fa      	ldrb	r2, [r7, #7]
 801b2a4:	4613      	mov	r3, r2
 801b2a6:	005b      	lsls	r3, r3, #1
 801b2a8:	4413      	add	r3, r2
 801b2aa:	00db      	lsls	r3, r3, #3
 801b2ac:	3308      	adds	r3, #8
 801b2ae:	4a08      	ldr	r2, [pc, #32]	; (801b2d0 <etharp_output_to_arp_index+0x124>)
 801b2b0:	4413      	add	r3, r2
 801b2b2:	3304      	adds	r3, #4
 801b2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b2b8:	9200      	str	r2, [sp, #0]
 801b2ba:	460a      	mov	r2, r1
 801b2bc:	68b9      	ldr	r1, [r7, #8]
 801b2be:	68f8      	ldr	r0, [r7, #12]
 801b2c0:	f001 fe60 	bl	801cf84 <ethernet_output>
 801b2c4:	4603      	mov	r3, r0
}
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	3710      	adds	r7, #16
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}
 801b2ce:	bf00      	nop
 801b2d0:	2401aedc 	.word	0x2401aedc
 801b2d4:	08020dd4 	.word	0x08020dd4
 801b2d8:	08020f44 	.word	0x08020f44
 801b2dc:	08020e4c 	.word	0x08020e4c

0801b2e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b08a      	sub	sp, #40	; 0x28
 801b2e4:	af02      	add	r7, sp, #8
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	60b9      	str	r1, [r7, #8]
 801b2ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d106      	bne.n	801b304 <etharp_output+0x24>
 801b2f6:	4b73      	ldr	r3, [pc, #460]	; (801b4c4 <etharp_output+0x1e4>)
 801b2f8:	f240 321e 	movw	r2, #798	; 0x31e
 801b2fc:	4972      	ldr	r1, [pc, #456]	; (801b4c8 <etharp_output+0x1e8>)
 801b2fe:	4873      	ldr	r0, [pc, #460]	; (801b4cc <etharp_output+0x1ec>)
 801b300:	f002 f988 	bl	801d614 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b304:	68bb      	ldr	r3, [r7, #8]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d106      	bne.n	801b318 <etharp_output+0x38>
 801b30a:	4b6e      	ldr	r3, [pc, #440]	; (801b4c4 <etharp_output+0x1e4>)
 801b30c:	f240 321f 	movw	r2, #799	; 0x31f
 801b310:	496f      	ldr	r1, [pc, #444]	; (801b4d0 <etharp_output+0x1f0>)
 801b312:	486e      	ldr	r0, [pc, #440]	; (801b4cc <etharp_output+0x1ec>)
 801b314:	f002 f97e 	bl	801d614 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d106      	bne.n	801b32c <etharp_output+0x4c>
 801b31e:	4b69      	ldr	r3, [pc, #420]	; (801b4c4 <etharp_output+0x1e4>)
 801b320:	f44f 7248 	mov.w	r2, #800	; 0x320
 801b324:	496b      	ldr	r1, [pc, #428]	; (801b4d4 <etharp_output+0x1f4>)
 801b326:	4869      	ldr	r0, [pc, #420]	; (801b4cc <etharp_output+0x1ec>)
 801b328:	f002 f974 	bl	801d614 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	68f9      	ldr	r1, [r7, #12]
 801b332:	4618      	mov	r0, r3
 801b334:	f000 ff1e 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801b338:	4603      	mov	r3, r0
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d002      	beq.n	801b344 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b33e:	4b66      	ldr	r3, [pc, #408]	; (801b4d8 <etharp_output+0x1f8>)
 801b340:	61fb      	str	r3, [r7, #28]
 801b342:	e0af      	b.n	801b4a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b34c:	2be0      	cmp	r3, #224	; 0xe0
 801b34e:	d118      	bne.n	801b382 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b350:	2301      	movs	r3, #1
 801b352:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b354:	2300      	movs	r3, #0
 801b356:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b358:	235e      	movs	r3, #94	; 0x5e
 801b35a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	3301      	adds	r3, #1
 801b360:	781b      	ldrb	r3, [r3, #0]
 801b362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b366:	b2db      	uxtb	r3, r3
 801b368:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	3302      	adds	r3, #2
 801b36e:	781b      	ldrb	r3, [r3, #0]
 801b370:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	3303      	adds	r3, #3
 801b376:	781b      	ldrb	r3, [r3, #0]
 801b378:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b37a:	f107 0310 	add.w	r3, r7, #16
 801b37e:	61fb      	str	r3, [r7, #28]
 801b380:	e090      	b.n	801b4a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681a      	ldr	r2, [r3, #0]
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	3304      	adds	r3, #4
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	405a      	eors	r2, r3
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	3308      	adds	r3, #8
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	4013      	ands	r3, r2
 801b396:	2b00      	cmp	r3, #0
 801b398:	d012      	beq.n	801b3c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b3a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801b3a4:	4293      	cmp	r3, r2
 801b3a6:	d00b      	beq.n	801b3c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	330c      	adds	r3, #12
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d003      	beq.n	801b3ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	330c      	adds	r3, #12
 801b3b6:	61bb      	str	r3, [r7, #24]
 801b3b8:	e002      	b.n	801b3c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b3ba:	f06f 0303 	mvn.w	r3, #3
 801b3be:	e07d      	b.n	801b4bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b3c0:	4b46      	ldr	r3, [pc, #280]	; (801b4dc <etharp_output+0x1fc>)
 801b3c2:	781b      	ldrb	r3, [r3, #0]
 801b3c4:	4619      	mov	r1, r3
 801b3c6:	4a46      	ldr	r2, [pc, #280]	; (801b4e0 <etharp_output+0x200>)
 801b3c8:	460b      	mov	r3, r1
 801b3ca:	005b      	lsls	r3, r3, #1
 801b3cc:	440b      	add	r3, r1
 801b3ce:	00db      	lsls	r3, r3, #3
 801b3d0:	4413      	add	r3, r2
 801b3d2:	3314      	adds	r3, #20
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	2b01      	cmp	r3, #1
 801b3d8:	d925      	bls.n	801b426 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b3da:	4b40      	ldr	r3, [pc, #256]	; (801b4dc <etharp_output+0x1fc>)
 801b3dc:	781b      	ldrb	r3, [r3, #0]
 801b3de:	4619      	mov	r1, r3
 801b3e0:	4a3f      	ldr	r2, [pc, #252]	; (801b4e0 <etharp_output+0x200>)
 801b3e2:	460b      	mov	r3, r1
 801b3e4:	005b      	lsls	r3, r3, #1
 801b3e6:	440b      	add	r3, r1
 801b3e8:	00db      	lsls	r3, r3, #3
 801b3ea:	4413      	add	r3, r2
 801b3ec:	3308      	adds	r3, #8
 801b3ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b3f0:	68fa      	ldr	r2, [r7, #12]
 801b3f2:	429a      	cmp	r2, r3
 801b3f4:	d117      	bne.n	801b426 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b3f6:	69bb      	ldr	r3, [r7, #24]
 801b3f8:	681a      	ldr	r2, [r3, #0]
 801b3fa:	4b38      	ldr	r3, [pc, #224]	; (801b4dc <etharp_output+0x1fc>)
 801b3fc:	781b      	ldrb	r3, [r3, #0]
 801b3fe:	4618      	mov	r0, r3
 801b400:	4937      	ldr	r1, [pc, #220]	; (801b4e0 <etharp_output+0x200>)
 801b402:	4603      	mov	r3, r0
 801b404:	005b      	lsls	r3, r3, #1
 801b406:	4403      	add	r3, r0
 801b408:	00db      	lsls	r3, r3, #3
 801b40a:	440b      	add	r3, r1
 801b40c:	3304      	adds	r3, #4
 801b40e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b410:	429a      	cmp	r2, r3
 801b412:	d108      	bne.n	801b426 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b414:	4b31      	ldr	r3, [pc, #196]	; (801b4dc <etharp_output+0x1fc>)
 801b416:	781b      	ldrb	r3, [r3, #0]
 801b418:	461a      	mov	r2, r3
 801b41a:	68b9      	ldr	r1, [r7, #8]
 801b41c:	68f8      	ldr	r0, [r7, #12]
 801b41e:	f7ff fec5 	bl	801b1ac <etharp_output_to_arp_index>
 801b422:	4603      	mov	r3, r0
 801b424:	e04a      	b.n	801b4bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b426:	2300      	movs	r3, #0
 801b428:	75fb      	strb	r3, [r7, #23]
 801b42a:	e031      	b.n	801b490 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b42c:	7dfa      	ldrb	r2, [r7, #23]
 801b42e:	492c      	ldr	r1, [pc, #176]	; (801b4e0 <etharp_output+0x200>)
 801b430:	4613      	mov	r3, r2
 801b432:	005b      	lsls	r3, r3, #1
 801b434:	4413      	add	r3, r2
 801b436:	00db      	lsls	r3, r3, #3
 801b438:	440b      	add	r3, r1
 801b43a:	3314      	adds	r3, #20
 801b43c:	781b      	ldrb	r3, [r3, #0]
 801b43e:	2b01      	cmp	r3, #1
 801b440:	d923      	bls.n	801b48a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b442:	7dfa      	ldrb	r2, [r7, #23]
 801b444:	4926      	ldr	r1, [pc, #152]	; (801b4e0 <etharp_output+0x200>)
 801b446:	4613      	mov	r3, r2
 801b448:	005b      	lsls	r3, r3, #1
 801b44a:	4413      	add	r3, r2
 801b44c:	00db      	lsls	r3, r3, #3
 801b44e:	440b      	add	r3, r1
 801b450:	3308      	adds	r3, #8
 801b452:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b454:	68fa      	ldr	r2, [r7, #12]
 801b456:	429a      	cmp	r2, r3
 801b458:	d117      	bne.n	801b48a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b45a:	69bb      	ldr	r3, [r7, #24]
 801b45c:	6819      	ldr	r1, [r3, #0]
 801b45e:	7dfa      	ldrb	r2, [r7, #23]
 801b460:	481f      	ldr	r0, [pc, #124]	; (801b4e0 <etharp_output+0x200>)
 801b462:	4613      	mov	r3, r2
 801b464:	005b      	lsls	r3, r3, #1
 801b466:	4413      	add	r3, r2
 801b468:	00db      	lsls	r3, r3, #3
 801b46a:	4403      	add	r3, r0
 801b46c:	3304      	adds	r3, #4
 801b46e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b470:	4299      	cmp	r1, r3
 801b472:	d10a      	bne.n	801b48a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b474:	4a19      	ldr	r2, [pc, #100]	; (801b4dc <etharp_output+0x1fc>)
 801b476:	7dfb      	ldrb	r3, [r7, #23]
 801b478:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b47a:	7dfb      	ldrb	r3, [r7, #23]
 801b47c:	461a      	mov	r2, r3
 801b47e:	68b9      	ldr	r1, [r7, #8]
 801b480:	68f8      	ldr	r0, [r7, #12]
 801b482:	f7ff fe93 	bl	801b1ac <etharp_output_to_arp_index>
 801b486:	4603      	mov	r3, r0
 801b488:	e018      	b.n	801b4bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b48a:	7dfb      	ldrb	r3, [r7, #23]
 801b48c:	3301      	adds	r3, #1
 801b48e:	75fb      	strb	r3, [r7, #23]
 801b490:	7dfb      	ldrb	r3, [r7, #23]
 801b492:	2b09      	cmp	r3, #9
 801b494:	d9ca      	bls.n	801b42c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b496:	68ba      	ldr	r2, [r7, #8]
 801b498:	69b9      	ldr	r1, [r7, #24]
 801b49a:	68f8      	ldr	r0, [r7, #12]
 801b49c:	f000 f822 	bl	801b4e4 <etharp_query>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	e00b      	b.n	801b4bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801b4aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b4ae:	9300      	str	r3, [sp, #0]
 801b4b0:	69fb      	ldr	r3, [r7, #28]
 801b4b2:	68b9      	ldr	r1, [r7, #8]
 801b4b4:	68f8      	ldr	r0, [r7, #12]
 801b4b6:	f001 fd65 	bl	801cf84 <ethernet_output>
 801b4ba:	4603      	mov	r3, r0
}
 801b4bc:	4618      	mov	r0, r3
 801b4be:	3720      	adds	r7, #32
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	bd80      	pop	{r7, pc}
 801b4c4:	08020dd4 	.word	0x08020dd4
 801b4c8:	08020f24 	.word	0x08020f24
 801b4cc:	08020e4c 	.word	0x08020e4c
 801b4d0:	08020f74 	.word	0x08020f74
 801b4d4:	08020f14 	.word	0x08020f14
 801b4d8:	08021624 	.word	0x08021624
 801b4dc:	2401afcc 	.word	0x2401afcc
 801b4e0:	2401aedc 	.word	0x2401aedc

0801b4e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b08c      	sub	sp, #48	; 0x30
 801b4e8:	af02      	add	r7, sp, #8
 801b4ea:	60f8      	str	r0, [r7, #12]
 801b4ec:	60b9      	str	r1, [r7, #8]
 801b4ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	3326      	adds	r3, #38	; 0x26
 801b4f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b4f6:	23ff      	movs	r3, #255	; 0xff
 801b4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801b4fc:	2300      	movs	r3, #0
 801b4fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	68f9      	ldr	r1, [r7, #12]
 801b506:	4618      	mov	r0, r3
 801b508:	f000 fe34 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801b50c:	4603      	mov	r3, r0
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d10c      	bne.n	801b52c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b51a:	2be0      	cmp	r3, #224	; 0xe0
 801b51c:	d006      	beq.n	801b52c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b51e:	68bb      	ldr	r3, [r7, #8]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d003      	beq.n	801b52c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b524:	68bb      	ldr	r3, [r7, #8]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d102      	bne.n	801b532 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b52c:	f06f 030f 	mvn.w	r3, #15
 801b530:	e101      	b.n	801b736 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b532:	68fa      	ldr	r2, [r7, #12]
 801b534:	2101      	movs	r1, #1
 801b536:	68b8      	ldr	r0, [r7, #8]
 801b538:	f7ff fb60 	bl	801abfc <etharp_find_entry>
 801b53c:	4603      	mov	r3, r0
 801b53e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b540:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b544:	2b00      	cmp	r3, #0
 801b546:	da02      	bge.n	801b54e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b548:	8a7b      	ldrh	r3, [r7, #18]
 801b54a:	b25b      	sxtb	r3, r3
 801b54c:	e0f3      	b.n	801b736 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b54e:	8a7b      	ldrh	r3, [r7, #18]
 801b550:	2b7e      	cmp	r3, #126	; 0x7e
 801b552:	d906      	bls.n	801b562 <etharp_query+0x7e>
 801b554:	4b7a      	ldr	r3, [pc, #488]	; (801b740 <etharp_query+0x25c>)
 801b556:	f240 32c1 	movw	r2, #961	; 0x3c1
 801b55a:	497a      	ldr	r1, [pc, #488]	; (801b744 <etharp_query+0x260>)
 801b55c:	487a      	ldr	r0, [pc, #488]	; (801b748 <etharp_query+0x264>)
 801b55e:	f002 f859 	bl	801d614 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b562:	8a7b      	ldrh	r3, [r7, #18]
 801b564:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b566:	7c7a      	ldrb	r2, [r7, #17]
 801b568:	4978      	ldr	r1, [pc, #480]	; (801b74c <etharp_query+0x268>)
 801b56a:	4613      	mov	r3, r2
 801b56c:	005b      	lsls	r3, r3, #1
 801b56e:	4413      	add	r3, r2
 801b570:	00db      	lsls	r3, r3, #3
 801b572:	440b      	add	r3, r1
 801b574:	3314      	adds	r3, #20
 801b576:	781b      	ldrb	r3, [r3, #0]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d115      	bne.n	801b5a8 <etharp_query+0xc4>
    is_new_entry = 1;
 801b57c:	2301      	movs	r3, #1
 801b57e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b580:	7c7a      	ldrb	r2, [r7, #17]
 801b582:	4972      	ldr	r1, [pc, #456]	; (801b74c <etharp_query+0x268>)
 801b584:	4613      	mov	r3, r2
 801b586:	005b      	lsls	r3, r3, #1
 801b588:	4413      	add	r3, r2
 801b58a:	00db      	lsls	r3, r3, #3
 801b58c:	440b      	add	r3, r1
 801b58e:	3314      	adds	r3, #20
 801b590:	2201      	movs	r2, #1
 801b592:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b594:	7c7a      	ldrb	r2, [r7, #17]
 801b596:	496d      	ldr	r1, [pc, #436]	; (801b74c <etharp_query+0x268>)
 801b598:	4613      	mov	r3, r2
 801b59a:	005b      	lsls	r3, r3, #1
 801b59c:	4413      	add	r3, r2
 801b59e:	00db      	lsls	r3, r3, #3
 801b5a0:	440b      	add	r3, r1
 801b5a2:	3308      	adds	r3, #8
 801b5a4:	68fa      	ldr	r2, [r7, #12]
 801b5a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b5a8:	7c7a      	ldrb	r2, [r7, #17]
 801b5aa:	4968      	ldr	r1, [pc, #416]	; (801b74c <etharp_query+0x268>)
 801b5ac:	4613      	mov	r3, r2
 801b5ae:	005b      	lsls	r3, r3, #1
 801b5b0:	4413      	add	r3, r2
 801b5b2:	00db      	lsls	r3, r3, #3
 801b5b4:	440b      	add	r3, r1
 801b5b6:	3314      	adds	r3, #20
 801b5b8:	781b      	ldrb	r3, [r3, #0]
 801b5ba:	2b01      	cmp	r3, #1
 801b5bc:	d011      	beq.n	801b5e2 <etharp_query+0xfe>
 801b5be:	7c7a      	ldrb	r2, [r7, #17]
 801b5c0:	4962      	ldr	r1, [pc, #392]	; (801b74c <etharp_query+0x268>)
 801b5c2:	4613      	mov	r3, r2
 801b5c4:	005b      	lsls	r3, r3, #1
 801b5c6:	4413      	add	r3, r2
 801b5c8:	00db      	lsls	r3, r3, #3
 801b5ca:	440b      	add	r3, r1
 801b5cc:	3314      	adds	r3, #20
 801b5ce:	781b      	ldrb	r3, [r3, #0]
 801b5d0:	2b01      	cmp	r3, #1
 801b5d2:	d806      	bhi.n	801b5e2 <etharp_query+0xfe>
 801b5d4:	4b5a      	ldr	r3, [pc, #360]	; (801b740 <etharp_query+0x25c>)
 801b5d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 801b5da:	495d      	ldr	r1, [pc, #372]	; (801b750 <etharp_query+0x26c>)
 801b5dc:	485a      	ldr	r0, [pc, #360]	; (801b748 <etharp_query+0x264>)
 801b5de:	f002 f819 	bl	801d614 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b5e2:	6a3b      	ldr	r3, [r7, #32]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d102      	bne.n	801b5ee <etharp_query+0x10a>
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d10c      	bne.n	801b608 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b5ee:	68b9      	ldr	r1, [r7, #8]
 801b5f0:	68f8      	ldr	r0, [r7, #12]
 801b5f2:	f000 f963 	bl	801b8bc <etharp_request>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d102      	bne.n	801b608 <etharp_query+0x124>
      return result;
 801b602:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801b606:	e096      	b.n	801b736 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d106      	bne.n	801b61c <etharp_query+0x138>
 801b60e:	4b4c      	ldr	r3, [pc, #304]	; (801b740 <etharp_query+0x25c>)
 801b610:	f240 32e1 	movw	r2, #993	; 0x3e1
 801b614:	494f      	ldr	r1, [pc, #316]	; (801b754 <etharp_query+0x270>)
 801b616:	484c      	ldr	r0, [pc, #304]	; (801b748 <etharp_query+0x264>)
 801b618:	f001 fffc 	bl	801d614 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b61c:	7c7a      	ldrb	r2, [r7, #17]
 801b61e:	494b      	ldr	r1, [pc, #300]	; (801b74c <etharp_query+0x268>)
 801b620:	4613      	mov	r3, r2
 801b622:	005b      	lsls	r3, r3, #1
 801b624:	4413      	add	r3, r2
 801b626:	00db      	lsls	r3, r3, #3
 801b628:	440b      	add	r3, r1
 801b62a:	3314      	adds	r3, #20
 801b62c:	781b      	ldrb	r3, [r3, #0]
 801b62e:	2b01      	cmp	r3, #1
 801b630:	d917      	bls.n	801b662 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b632:	4a49      	ldr	r2, [pc, #292]	; (801b758 <etharp_query+0x274>)
 801b634:	7c7b      	ldrb	r3, [r7, #17]
 801b636:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b638:	7c7a      	ldrb	r2, [r7, #17]
 801b63a:	4613      	mov	r3, r2
 801b63c:	005b      	lsls	r3, r3, #1
 801b63e:	4413      	add	r3, r2
 801b640:	00db      	lsls	r3, r3, #3
 801b642:	3308      	adds	r3, #8
 801b644:	4a41      	ldr	r2, [pc, #260]	; (801b74c <etharp_query+0x268>)
 801b646:	4413      	add	r3, r2
 801b648:	3304      	adds	r3, #4
 801b64a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b64e:	9200      	str	r2, [sp, #0]
 801b650:	697a      	ldr	r2, [r7, #20]
 801b652:	6879      	ldr	r1, [r7, #4]
 801b654:	68f8      	ldr	r0, [r7, #12]
 801b656:	f001 fc95 	bl	801cf84 <ethernet_output>
 801b65a:	4603      	mov	r3, r0
 801b65c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b660:	e067      	b.n	801b732 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b662:	7c7a      	ldrb	r2, [r7, #17]
 801b664:	4939      	ldr	r1, [pc, #228]	; (801b74c <etharp_query+0x268>)
 801b666:	4613      	mov	r3, r2
 801b668:	005b      	lsls	r3, r3, #1
 801b66a:	4413      	add	r3, r2
 801b66c:	00db      	lsls	r3, r3, #3
 801b66e:	440b      	add	r3, r1
 801b670:	3314      	adds	r3, #20
 801b672:	781b      	ldrb	r3, [r3, #0]
 801b674:	2b01      	cmp	r3, #1
 801b676:	d15c      	bne.n	801b732 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b678:	2300      	movs	r3, #0
 801b67a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b680:	e01c      	b.n	801b6bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b682:	69fb      	ldr	r3, [r7, #28]
 801b684:	895a      	ldrh	r2, [r3, #10]
 801b686:	69fb      	ldr	r3, [r7, #28]
 801b688:	891b      	ldrh	r3, [r3, #8]
 801b68a:	429a      	cmp	r2, r3
 801b68c:	d10a      	bne.n	801b6a4 <etharp_query+0x1c0>
 801b68e:	69fb      	ldr	r3, [r7, #28]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d006      	beq.n	801b6a4 <etharp_query+0x1c0>
 801b696:	4b2a      	ldr	r3, [pc, #168]	; (801b740 <etharp_query+0x25c>)
 801b698:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801b69c:	492f      	ldr	r1, [pc, #188]	; (801b75c <etharp_query+0x278>)
 801b69e:	482a      	ldr	r0, [pc, #168]	; (801b748 <etharp_query+0x264>)
 801b6a0:	f001 ffb8 	bl	801d614 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b6a4:	69fb      	ldr	r3, [r7, #28]
 801b6a6:	7b1b      	ldrb	r3, [r3, #12]
 801b6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d002      	beq.n	801b6b6 <etharp_query+0x1d2>
        copy_needed = 1;
 801b6b0:	2301      	movs	r3, #1
 801b6b2:	61bb      	str	r3, [r7, #24]
        break;
 801b6b4:	e005      	b.n	801b6c2 <etharp_query+0x1de>
      }
      p = p->next;
 801b6b6:	69fb      	ldr	r3, [r7, #28]
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b6bc:	69fb      	ldr	r3, [r7, #28]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d1df      	bne.n	801b682 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b6c2:	69bb      	ldr	r3, [r7, #24]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d007      	beq.n	801b6d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b6c8:	687a      	ldr	r2, [r7, #4]
 801b6ca:	f44f 7120 	mov.w	r1, #640	; 0x280
 801b6ce:	200e      	movs	r0, #14
 801b6d0:	f7f9 fcf6 	bl	80150c0 <pbuf_clone>
 801b6d4:	61f8      	str	r0, [r7, #28]
 801b6d6:	e004      	b.n	801b6e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b6dc:	69f8      	ldr	r0, [r7, #28]
 801b6de:	f7f9 fb2d 	bl	8014d3c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b6e2:	69fb      	ldr	r3, [r7, #28]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d021      	beq.n	801b72c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b6e8:	7c7a      	ldrb	r2, [r7, #17]
 801b6ea:	4918      	ldr	r1, [pc, #96]	; (801b74c <etharp_query+0x268>)
 801b6ec:	4613      	mov	r3, r2
 801b6ee:	005b      	lsls	r3, r3, #1
 801b6f0:	4413      	add	r3, r2
 801b6f2:	00db      	lsls	r3, r3, #3
 801b6f4:	440b      	add	r3, r1
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d00a      	beq.n	801b712 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b6fc:	7c7a      	ldrb	r2, [r7, #17]
 801b6fe:	4913      	ldr	r1, [pc, #76]	; (801b74c <etharp_query+0x268>)
 801b700:	4613      	mov	r3, r2
 801b702:	005b      	lsls	r3, r3, #1
 801b704:	4413      	add	r3, r2
 801b706:	00db      	lsls	r3, r3, #3
 801b708:	440b      	add	r3, r1
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	4618      	mov	r0, r3
 801b70e:	f7f9 fa6f 	bl	8014bf0 <pbuf_free>
      }
      arp_table[i].q = p;
 801b712:	7c7a      	ldrb	r2, [r7, #17]
 801b714:	490d      	ldr	r1, [pc, #52]	; (801b74c <etharp_query+0x268>)
 801b716:	4613      	mov	r3, r2
 801b718:	005b      	lsls	r3, r3, #1
 801b71a:	4413      	add	r3, r2
 801b71c:	00db      	lsls	r3, r3, #3
 801b71e:	440b      	add	r3, r1
 801b720:	69fa      	ldr	r2, [r7, #28]
 801b722:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b724:	2300      	movs	r3, #0
 801b726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b72a:	e002      	b.n	801b732 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b72c:	23ff      	movs	r3, #255	; 0xff
 801b72e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801b732:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801b736:	4618      	mov	r0, r3
 801b738:	3728      	adds	r7, #40	; 0x28
 801b73a:	46bd      	mov	sp, r7
 801b73c:	bd80      	pop	{r7, pc}
 801b73e:	bf00      	nop
 801b740:	08020dd4 	.word	0x08020dd4
 801b744:	08020f80 	.word	0x08020f80
 801b748:	08020e4c 	.word	0x08020e4c
 801b74c:	2401aedc 	.word	0x2401aedc
 801b750:	08020f90 	.word	0x08020f90
 801b754:	08020f74 	.word	0x08020f74
 801b758:	2401afcc 	.word	0x2401afcc
 801b75c:	08020fb8 	.word	0x08020fb8

0801b760 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b08a      	sub	sp, #40	; 0x28
 801b764:	af02      	add	r7, sp, #8
 801b766:	60f8      	str	r0, [r7, #12]
 801b768:	60b9      	str	r1, [r7, #8]
 801b76a:	607a      	str	r2, [r7, #4]
 801b76c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b76e:	2300      	movs	r3, #0
 801b770:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d106      	bne.n	801b786 <etharp_raw+0x26>
 801b778:	4b3a      	ldr	r3, [pc, #232]	; (801b864 <etharp_raw+0x104>)
 801b77a:	f240 4257 	movw	r2, #1111	; 0x457
 801b77e:	493a      	ldr	r1, [pc, #232]	; (801b868 <etharp_raw+0x108>)
 801b780:	483a      	ldr	r0, [pc, #232]	; (801b86c <etharp_raw+0x10c>)
 801b782:	f001 ff47 	bl	801d614 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b786:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b78a:	211c      	movs	r1, #28
 801b78c:	200e      	movs	r0, #14
 801b78e:	f7f8 ff47 	bl	8014620 <pbuf_alloc>
 801b792:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b794:	69bb      	ldr	r3, [r7, #24]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d102      	bne.n	801b7a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b79a:	f04f 33ff 	mov.w	r3, #4294967295
 801b79e:	e05d      	b.n	801b85c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b7a0:	69bb      	ldr	r3, [r7, #24]
 801b7a2:	895b      	ldrh	r3, [r3, #10]
 801b7a4:	2b1b      	cmp	r3, #27
 801b7a6:	d806      	bhi.n	801b7b6 <etharp_raw+0x56>
 801b7a8:	4b2e      	ldr	r3, [pc, #184]	; (801b864 <etharp_raw+0x104>)
 801b7aa:	f240 4262 	movw	r2, #1122	; 0x462
 801b7ae:	4930      	ldr	r1, [pc, #192]	; (801b870 <etharp_raw+0x110>)
 801b7b0:	482e      	ldr	r0, [pc, #184]	; (801b86c <etharp_raw+0x10c>)
 801b7b2:	f001 ff2f 	bl	801d614 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b7b6:	69bb      	ldr	r3, [r7, #24]
 801b7b8:	685b      	ldr	r3, [r3, #4]
 801b7ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b7bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b7be:	4618      	mov	r0, r3
 801b7c0:	f7f7 fd58 	bl	8013274 <lwip_htons>
 801b7c4:	4603      	mov	r3, r0
 801b7c6:	461a      	mov	r2, r3
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b7d2:	2b06      	cmp	r3, #6
 801b7d4:	d006      	beq.n	801b7e4 <etharp_raw+0x84>
 801b7d6:	4b23      	ldr	r3, [pc, #140]	; (801b864 <etharp_raw+0x104>)
 801b7d8:	f240 4269 	movw	r2, #1129	; 0x469
 801b7dc:	4925      	ldr	r1, [pc, #148]	; (801b874 <etharp_raw+0x114>)
 801b7de:	4823      	ldr	r0, [pc, #140]	; (801b86c <etharp_raw+0x10c>)
 801b7e0:	f001 ff18 	bl	801d614 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b7e4:	697b      	ldr	r3, [r7, #20]
 801b7e6:	3308      	adds	r3, #8
 801b7e8:	2206      	movs	r2, #6
 801b7ea:	6839      	ldr	r1, [r7, #0]
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	f001 fe37 	bl	801d460 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b7f2:	697b      	ldr	r3, [r7, #20]
 801b7f4:	3312      	adds	r3, #18
 801b7f6:	2206      	movs	r2, #6
 801b7f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f001 fe30 	bl	801d460 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	330e      	adds	r3, #14
 801b804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b806:	6812      	ldr	r2, [r2, #0]
 801b808:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b80a:	697b      	ldr	r3, [r7, #20]
 801b80c:	3318      	adds	r3, #24
 801b80e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b810:	6812      	ldr	r2, [r2, #0]
 801b812:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	2200      	movs	r2, #0
 801b818:	701a      	strb	r2, [r3, #0]
 801b81a:	2200      	movs	r2, #0
 801b81c:	f042 0201 	orr.w	r2, r2, #1
 801b820:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b822:	697b      	ldr	r3, [r7, #20]
 801b824:	2200      	movs	r2, #0
 801b826:	f042 0208 	orr.w	r2, r2, #8
 801b82a:	709a      	strb	r2, [r3, #2]
 801b82c:	2200      	movs	r2, #0
 801b82e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b830:	697b      	ldr	r3, [r7, #20]
 801b832:	2206      	movs	r2, #6
 801b834:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b836:	697b      	ldr	r3, [r7, #20]
 801b838:	2204      	movs	r2, #4
 801b83a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b83c:	f640 0306 	movw	r3, #2054	; 0x806
 801b840:	9300      	str	r3, [sp, #0]
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	68ba      	ldr	r2, [r7, #8]
 801b846:	69b9      	ldr	r1, [r7, #24]
 801b848:	68f8      	ldr	r0, [r7, #12]
 801b84a:	f001 fb9b 	bl	801cf84 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b84e:	69b8      	ldr	r0, [r7, #24]
 801b850:	f7f9 f9ce 	bl	8014bf0 <pbuf_free>
  p = NULL;
 801b854:	2300      	movs	r3, #0
 801b856:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b858:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b85c:	4618      	mov	r0, r3
 801b85e:	3720      	adds	r7, #32
 801b860:	46bd      	mov	sp, r7
 801b862:	bd80      	pop	{r7, pc}
 801b864:	08020dd4 	.word	0x08020dd4
 801b868:	08020f24 	.word	0x08020f24
 801b86c:	08020e4c 	.word	0x08020e4c
 801b870:	08020fd4 	.word	0x08020fd4
 801b874:	08021008 	.word	0x08021008

0801b878 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b878:	b580      	push	{r7, lr}
 801b87a:	b088      	sub	sp, #32
 801b87c:	af04      	add	r7, sp, #16
 801b87e:	60f8      	str	r0, [r7, #12]
 801b880:	60b9      	str	r1, [r7, #8]
 801b882:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b894:	2201      	movs	r2, #1
 801b896:	9203      	str	r2, [sp, #12]
 801b898:	68ba      	ldr	r2, [r7, #8]
 801b89a:	9202      	str	r2, [sp, #8]
 801b89c:	4a06      	ldr	r2, [pc, #24]	; (801b8b8 <etharp_request_dst+0x40>)
 801b89e:	9201      	str	r2, [sp, #4]
 801b8a0:	9300      	str	r3, [sp, #0]
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	687a      	ldr	r2, [r7, #4]
 801b8a6:	68f8      	ldr	r0, [r7, #12]
 801b8a8:	f7ff ff5a 	bl	801b760 <etharp_raw>
 801b8ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	3710      	adds	r7, #16
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bd80      	pop	{r7, pc}
 801b8b6:	bf00      	nop
 801b8b8:	0802162c 	.word	0x0802162c

0801b8bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	b082      	sub	sp, #8
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
 801b8c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b8c6:	4a05      	ldr	r2, [pc, #20]	; (801b8dc <etharp_request+0x20>)
 801b8c8:	6839      	ldr	r1, [r7, #0]
 801b8ca:	6878      	ldr	r0, [r7, #4]
 801b8cc:	f7ff ffd4 	bl	801b878 <etharp_request_dst>
 801b8d0:	4603      	mov	r3, r0
}
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	3708      	adds	r7, #8
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	bd80      	pop	{r7, pc}
 801b8da:	bf00      	nop
 801b8dc:	08021624 	.word	0x08021624

0801b8e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b08e      	sub	sp, #56	; 0x38
 801b8e4:	af04      	add	r7, sp, #16
 801b8e6:	6078      	str	r0, [r7, #4]
 801b8e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b8ea:	4b87      	ldr	r3, [pc, #540]	; (801bb08 <icmp_input+0x228>)
 801b8ec:	689b      	ldr	r3, [r3, #8]
 801b8ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f2:	781b      	ldrb	r3, [r3, #0]
 801b8f4:	f003 030f 	and.w	r3, r3, #15
 801b8f8:	b2db      	uxtb	r3, r3
 801b8fa:	009b      	lsls	r3, r3, #2
 801b8fc:	b2db      	uxtb	r3, r3
 801b8fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801b900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b902:	2b13      	cmp	r3, #19
 801b904:	f240 80e8 	bls.w	801bad8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	895b      	ldrh	r3, [r3, #10]
 801b90c:	2b03      	cmp	r3, #3
 801b90e:	f240 80e5 	bls.w	801badc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	685b      	ldr	r3, [r3, #4]
 801b916:	781b      	ldrb	r3, [r3, #0]
 801b918:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b91c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801b920:	2b00      	cmp	r3, #0
 801b922:	f000 80d2 	beq.w	801baca <icmp_input+0x1ea>
 801b926:	2b08      	cmp	r3, #8
 801b928:	f040 80d2 	bne.w	801bad0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b92c:	4b77      	ldr	r3, [pc, #476]	; (801bb0c <icmp_input+0x22c>)
 801b92e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b930:	4b75      	ldr	r3, [pc, #468]	; (801bb08 <icmp_input+0x228>)
 801b932:	695b      	ldr	r3, [r3, #20]
 801b934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b938:	2be0      	cmp	r3, #224	; 0xe0
 801b93a:	f000 80d6 	beq.w	801baea <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b93e:	4b72      	ldr	r3, [pc, #456]	; (801bb08 <icmp_input+0x228>)
 801b940:	695b      	ldr	r3, [r3, #20]
 801b942:	4a71      	ldr	r2, [pc, #452]	; (801bb08 <icmp_input+0x228>)
 801b944:	6812      	ldr	r2, [r2, #0]
 801b946:	4611      	mov	r1, r2
 801b948:	4618      	mov	r0, r3
 801b94a:	f000 fc13 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801b94e:	4603      	mov	r3, r0
 801b950:	2b00      	cmp	r3, #0
 801b952:	f040 80cc 	bne.w	801baee <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	891b      	ldrh	r3, [r3, #8]
 801b95a:	2b07      	cmp	r3, #7
 801b95c:	f240 80c0 	bls.w	801bae0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801b960:	6878      	ldr	r0, [r7, #4]
 801b962:	f7f7 fd24 	bl	80133ae <inet_chksum_pbuf>
 801b966:	4603      	mov	r3, r0
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d003      	beq.n	801b974 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801b96c:	6878      	ldr	r0, [r7, #4]
 801b96e:	f7f9 f93f 	bl	8014bf0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801b972:	e0c5      	b.n	801bb00 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b976:	330e      	adds	r3, #14
 801b978:	4619      	mov	r1, r3
 801b97a:	6878      	ldr	r0, [r7, #4]
 801b97c:	f7f9 f8a2 	bl	8014ac4 <pbuf_add_header>
 801b980:	4603      	mov	r3, r0
 801b982:	2b00      	cmp	r3, #0
 801b984:	d04b      	beq.n	801ba1e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	891a      	ldrh	r2, [r3, #8]
 801b98a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b98c:	4413      	add	r3, r2
 801b98e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	891b      	ldrh	r3, [r3, #8]
 801b994:	8b7a      	ldrh	r2, [r7, #26]
 801b996:	429a      	cmp	r2, r3
 801b998:	f0c0 80ab 	bcc.w	801baf2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b99c:	8b7b      	ldrh	r3, [r7, #26]
 801b99e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b9a2:	4619      	mov	r1, r3
 801b9a4:	200e      	movs	r0, #14
 801b9a6:	f7f8 fe3b 	bl	8014620 <pbuf_alloc>
 801b9aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b9ac:	697b      	ldr	r3, [r7, #20]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	f000 80a1 	beq.w	801baf6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b9b4:	697b      	ldr	r3, [r7, #20]
 801b9b6:	895b      	ldrh	r3, [r3, #10]
 801b9b8:	461a      	mov	r2, r3
 801b9ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b9bc:	3308      	adds	r3, #8
 801b9be:	429a      	cmp	r2, r3
 801b9c0:	d203      	bcs.n	801b9ca <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b9c2:	6978      	ldr	r0, [r7, #20]
 801b9c4:	f7f9 f914 	bl	8014bf0 <pbuf_free>
          goto icmperr;
 801b9c8:	e096      	b.n	801baf8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b9ca:	697b      	ldr	r3, [r7, #20]
 801b9cc:	685b      	ldr	r3, [r3, #4]
 801b9ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b9d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f001 fd44 	bl	801d460 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b9d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b9da:	4619      	mov	r1, r3
 801b9dc:	6978      	ldr	r0, [r7, #20]
 801b9de:	f7f9 f881 	bl	8014ae4 <pbuf_remove_header>
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d009      	beq.n	801b9fc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b9e8:	4b49      	ldr	r3, [pc, #292]	; (801bb10 <icmp_input+0x230>)
 801b9ea:	22b6      	movs	r2, #182	; 0xb6
 801b9ec:	4949      	ldr	r1, [pc, #292]	; (801bb14 <icmp_input+0x234>)
 801b9ee:	484a      	ldr	r0, [pc, #296]	; (801bb18 <icmp_input+0x238>)
 801b9f0:	f001 fe10 	bl	801d614 <iprintf>
          pbuf_free(r);
 801b9f4:	6978      	ldr	r0, [r7, #20]
 801b9f6:	f7f9 f8fb 	bl	8014bf0 <pbuf_free>
          goto icmperr;
 801b9fa:	e07d      	b.n	801baf8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b9fc:	6879      	ldr	r1, [r7, #4]
 801b9fe:	6978      	ldr	r0, [r7, #20]
 801ba00:	f7f9 fa1a 	bl	8014e38 <pbuf_copy>
 801ba04:	4603      	mov	r3, r0
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d003      	beq.n	801ba12 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ba0a:	6978      	ldr	r0, [r7, #20]
 801ba0c:	f7f9 f8f0 	bl	8014bf0 <pbuf_free>
          goto icmperr;
 801ba10:	e072      	b.n	801baf8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801ba12:	6878      	ldr	r0, [r7, #4]
 801ba14:	f7f9 f8ec 	bl	8014bf0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ba18:	697b      	ldr	r3, [r7, #20]
 801ba1a:	607b      	str	r3, [r7, #4]
 801ba1c:	e00f      	b.n	801ba3e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ba1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ba20:	330e      	adds	r3, #14
 801ba22:	4619      	mov	r1, r3
 801ba24:	6878      	ldr	r0, [r7, #4]
 801ba26:	f7f9 f85d 	bl	8014ae4 <pbuf_remove_header>
 801ba2a:	4603      	mov	r3, r0
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d006      	beq.n	801ba3e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ba30:	4b37      	ldr	r3, [pc, #220]	; (801bb10 <icmp_input+0x230>)
 801ba32:	22c7      	movs	r2, #199	; 0xc7
 801ba34:	4939      	ldr	r1, [pc, #228]	; (801bb1c <icmp_input+0x23c>)
 801ba36:	4838      	ldr	r0, [pc, #224]	; (801bb18 <icmp_input+0x238>)
 801ba38:	f001 fdec 	bl	801d614 <iprintf>
          goto icmperr;
 801ba3c:	e05c      	b.n	801baf8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	685b      	ldr	r3, [r3, #4]
 801ba42:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ba44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ba46:	4619      	mov	r1, r3
 801ba48:	6878      	ldr	r0, [r7, #4]
 801ba4a:	f7f9 f83b 	bl	8014ac4 <pbuf_add_header>
 801ba4e:	4603      	mov	r3, r0
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d13c      	bne.n	801bace <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	685b      	ldr	r3, [r3, #4]
 801ba58:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ba5a:	69fb      	ldr	r3, [r7, #28]
 801ba5c:	681a      	ldr	r2, [r3, #0]
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ba62:	4b29      	ldr	r3, [pc, #164]	; (801bb08 <icmp_input+0x228>)
 801ba64:	691a      	ldr	r2, [r3, #16]
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ba6a:	693b      	ldr	r3, [r7, #16]
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801ba70:	693b      	ldr	r3, [r7, #16]
 801ba72:	885b      	ldrh	r3, [r3, #2]
 801ba74:	b29b      	uxth	r3, r3
 801ba76:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801ba7a:	4293      	cmp	r3, r2
 801ba7c:	d907      	bls.n	801ba8e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	885b      	ldrh	r3, [r3, #2]
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	3309      	adds	r3, #9
 801ba86:	b29a      	uxth	r2, r3
 801ba88:	693b      	ldr	r3, [r7, #16]
 801ba8a:	805a      	strh	r2, [r3, #2]
 801ba8c:	e006      	b.n	801ba9c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801ba8e:	693b      	ldr	r3, [r7, #16]
 801ba90:	885b      	ldrh	r3, [r3, #2]
 801ba92:	b29b      	uxth	r3, r3
 801ba94:	3308      	adds	r3, #8
 801ba96:	b29a      	uxth	r2, r3
 801ba98:	693b      	ldr	r3, [r7, #16]
 801ba9a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	22ff      	movs	r2, #255	; 0xff
 801baa0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	2200      	movs	r2, #0
 801baa6:	729a      	strb	r2, [r3, #10]
 801baa8:	2200      	movs	r2, #0
 801baaa:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801baac:	683b      	ldr	r3, [r7, #0]
 801baae:	9302      	str	r3, [sp, #8]
 801bab0:	2301      	movs	r3, #1
 801bab2:	9301      	str	r3, [sp, #4]
 801bab4:	2300      	movs	r3, #0
 801bab6:	9300      	str	r3, [sp, #0]
 801bab8:	23ff      	movs	r3, #255	; 0xff
 801baba:	2200      	movs	r2, #0
 801babc:	69f9      	ldr	r1, [r7, #28]
 801babe:	6878      	ldr	r0, [r7, #4]
 801bac0:	f000 fa80 	bl	801bfc4 <ip4_output_if>
 801bac4:	4603      	mov	r3, r0
 801bac6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801bac8:	e001      	b.n	801bace <icmp_input+0x1ee>
      break;
 801baca:	bf00      	nop
 801bacc:	e000      	b.n	801bad0 <icmp_input+0x1f0>
      break;
 801bace:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bad0:	6878      	ldr	r0, [r7, #4]
 801bad2:	f7f9 f88d 	bl	8014bf0 <pbuf_free>
  return;
 801bad6:	e013      	b.n	801bb00 <icmp_input+0x220>
    goto lenerr;
 801bad8:	bf00      	nop
 801bada:	e002      	b.n	801bae2 <icmp_input+0x202>
    goto lenerr;
 801badc:	bf00      	nop
 801bade:	e000      	b.n	801bae2 <icmp_input+0x202>
        goto lenerr;
 801bae0:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bae2:	6878      	ldr	r0, [r7, #4]
 801bae4:	f7f9 f884 	bl	8014bf0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bae8:	e00a      	b.n	801bb00 <icmp_input+0x220>
        goto icmperr;
 801baea:	bf00      	nop
 801baec:	e004      	b.n	801baf8 <icmp_input+0x218>
        goto icmperr;
 801baee:	bf00      	nop
 801baf0:	e002      	b.n	801baf8 <icmp_input+0x218>
          goto icmperr;
 801baf2:	bf00      	nop
 801baf4:	e000      	b.n	801baf8 <icmp_input+0x218>
          goto icmperr;
 801baf6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801baf8:	6878      	ldr	r0, [r7, #4]
 801bafa:	f7f9 f879 	bl	8014bf0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bafe:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801bb00:	3728      	adds	r7, #40	; 0x28
 801bb02:	46bd      	mov	sp, r7
 801bb04:	bd80      	pop	{r7, pc}
 801bb06:	bf00      	nop
 801bb08:	2401b7a0 	.word	0x2401b7a0
 801bb0c:	2401b7b4 	.word	0x2401b7b4
 801bb10:	0802104c 	.word	0x0802104c
 801bb14:	08021084 	.word	0x08021084
 801bb18:	080210bc 	.word	0x080210bc
 801bb1c:	080210e4 	.word	0x080210e4

0801bb20 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b082      	sub	sp, #8
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
 801bb28:	460b      	mov	r3, r1
 801bb2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bb2c:	78fb      	ldrb	r3, [r7, #3]
 801bb2e:	461a      	mov	r2, r3
 801bb30:	2103      	movs	r1, #3
 801bb32:	6878      	ldr	r0, [r7, #4]
 801bb34:	f000 f814 	bl	801bb60 <icmp_send_response>
}
 801bb38:	bf00      	nop
 801bb3a:	3708      	adds	r7, #8
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}

0801bb40 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b082      	sub	sp, #8
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
 801bb48:	460b      	mov	r3, r1
 801bb4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801bb4c:	78fb      	ldrb	r3, [r7, #3]
 801bb4e:	461a      	mov	r2, r3
 801bb50:	210b      	movs	r1, #11
 801bb52:	6878      	ldr	r0, [r7, #4]
 801bb54:	f000 f804 	bl	801bb60 <icmp_send_response>
}
 801bb58:	bf00      	nop
 801bb5a:	3708      	adds	r7, #8
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}

0801bb60 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801bb60:	b580      	push	{r7, lr}
 801bb62:	b08c      	sub	sp, #48	; 0x30
 801bb64:	af04      	add	r7, sp, #16
 801bb66:	6078      	str	r0, [r7, #4]
 801bb68:	460b      	mov	r3, r1
 801bb6a:	70fb      	strb	r3, [r7, #3]
 801bb6c:	4613      	mov	r3, r2
 801bb6e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801bb70:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bb74:	2124      	movs	r1, #36	; 0x24
 801bb76:	2022      	movs	r0, #34	; 0x22
 801bb78:	f7f8 fd52 	bl	8014620 <pbuf_alloc>
 801bb7c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801bb7e:	69fb      	ldr	r3, [r7, #28]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d056      	beq.n	801bc32 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801bb84:	69fb      	ldr	r3, [r7, #28]
 801bb86:	895b      	ldrh	r3, [r3, #10]
 801bb88:	2b23      	cmp	r3, #35	; 0x23
 801bb8a:	d806      	bhi.n	801bb9a <icmp_send_response+0x3a>
 801bb8c:	4b2b      	ldr	r3, [pc, #172]	; (801bc3c <icmp_send_response+0xdc>)
 801bb8e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801bb92:	492b      	ldr	r1, [pc, #172]	; (801bc40 <icmp_send_response+0xe0>)
 801bb94:	482b      	ldr	r0, [pc, #172]	; (801bc44 <icmp_send_response+0xe4>)
 801bb96:	f001 fd3d 	bl	801d614 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	685b      	ldr	r3, [r3, #4]
 801bb9e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801bba0:	69fb      	ldr	r3, [r7, #28]
 801bba2:	685b      	ldr	r3, [r3, #4]
 801bba4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	78fa      	ldrb	r2, [r7, #3]
 801bbaa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	78ba      	ldrb	r2, [r7, #2]
 801bbb0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801bbb2:	697b      	ldr	r3, [r7, #20]
 801bbb4:	2200      	movs	r2, #0
 801bbb6:	711a      	strb	r2, [r3, #4]
 801bbb8:	2200      	movs	r2, #0
 801bbba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801bbbc:	697b      	ldr	r3, [r7, #20]
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	719a      	strb	r2, [r3, #6]
 801bbc2:	2200      	movs	r2, #0
 801bbc4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801bbc6:	69fb      	ldr	r3, [r7, #28]
 801bbc8:	685b      	ldr	r3, [r3, #4]
 801bbca:	f103 0008 	add.w	r0, r3, #8
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	685b      	ldr	r3, [r3, #4]
 801bbd2:	221c      	movs	r2, #28
 801bbd4:	4619      	mov	r1, r3
 801bbd6:	f001 fc43 	bl	801d460 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801bbda:	69bb      	ldr	r3, [r7, #24]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bbe0:	f107 030c 	add.w	r3, r7, #12
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f000 f82f 	bl	801bc48 <ip4_route>
 801bbea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bbec:	693b      	ldr	r3, [r7, #16]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d01b      	beq.n	801bc2a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	2200      	movs	r2, #0
 801bbf6:	709a      	strb	r2, [r3, #2]
 801bbf8:	2200      	movs	r2, #0
 801bbfa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801bbfc:	69fb      	ldr	r3, [r7, #28]
 801bbfe:	895b      	ldrh	r3, [r3, #10]
 801bc00:	4619      	mov	r1, r3
 801bc02:	6978      	ldr	r0, [r7, #20]
 801bc04:	f7f7 fbc1 	bl	801338a <inet_chksum>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	461a      	mov	r2, r3
 801bc0c:	697b      	ldr	r3, [r7, #20]
 801bc0e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bc10:	f107 020c 	add.w	r2, r7, #12
 801bc14:	693b      	ldr	r3, [r7, #16]
 801bc16:	9302      	str	r3, [sp, #8]
 801bc18:	2301      	movs	r3, #1
 801bc1a:	9301      	str	r3, [sp, #4]
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	9300      	str	r3, [sp, #0]
 801bc20:	23ff      	movs	r3, #255	; 0xff
 801bc22:	2100      	movs	r1, #0
 801bc24:	69f8      	ldr	r0, [r7, #28]
 801bc26:	f000 f9cd 	bl	801bfc4 <ip4_output_if>
  }
  pbuf_free(q);
 801bc2a:	69f8      	ldr	r0, [r7, #28]
 801bc2c:	f7f8 ffe0 	bl	8014bf0 <pbuf_free>
 801bc30:	e000      	b.n	801bc34 <icmp_send_response+0xd4>
    return;
 801bc32:	bf00      	nop
}
 801bc34:	3720      	adds	r7, #32
 801bc36:	46bd      	mov	sp, r7
 801bc38:	bd80      	pop	{r7, pc}
 801bc3a:	bf00      	nop
 801bc3c:	0802104c 	.word	0x0802104c
 801bc40:	08021118 	.word	0x08021118
 801bc44:	080210bc 	.word	0x080210bc

0801bc48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801bc48:	b480      	push	{r7}
 801bc4a:	b085      	sub	sp, #20
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801bc50:	4b33      	ldr	r3, [pc, #204]	; (801bd20 <ip4_route+0xd8>)
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	60fb      	str	r3, [r7, #12]
 801bc56:	e036      	b.n	801bcc6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bc5e:	f003 0301 	and.w	r3, r3, #1
 801bc62:	b2db      	uxtb	r3, r3
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d02b      	beq.n	801bcc0 <ip4_route+0x78>
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bc6e:	089b      	lsrs	r3, r3, #2
 801bc70:	f003 0301 	and.w	r3, r3, #1
 801bc74:	b2db      	uxtb	r3, r3
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d022      	beq.n	801bcc0 <ip4_route+0x78>
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	3304      	adds	r3, #4
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d01d      	beq.n	801bcc0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681a      	ldr	r2, [r3, #0]
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	3304      	adds	r3, #4
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	405a      	eors	r2, r3
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	3308      	adds	r3, #8
 801bc94:	681b      	ldr	r3, [r3, #0]
 801bc96:	4013      	ands	r3, r2
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d101      	bne.n	801bca0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	e038      	b.n	801bd12 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bca6:	f003 0302 	and.w	r3, r3, #2
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d108      	bne.n	801bcc0 <ip4_route+0x78>
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	330c      	adds	r3, #12
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	429a      	cmp	r2, r3
 801bcba:	d101      	bne.n	801bcc0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	e028      	b.n	801bd12 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	60fb      	str	r3, [r7, #12]
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d1c5      	bne.n	801bc58 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bccc:	4b15      	ldr	r3, [pc, #84]	; (801bd24 <ip4_route+0xdc>)
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d01a      	beq.n	801bd0a <ip4_route+0xc2>
 801bcd4:	4b13      	ldr	r3, [pc, #76]	; (801bd24 <ip4_route+0xdc>)
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bcdc:	f003 0301 	and.w	r3, r3, #1
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d012      	beq.n	801bd0a <ip4_route+0xc2>
 801bce4:	4b0f      	ldr	r3, [pc, #60]	; (801bd24 <ip4_route+0xdc>)
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bcec:	f003 0304 	and.w	r3, r3, #4
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d00a      	beq.n	801bd0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bcf4:	4b0b      	ldr	r3, [pc, #44]	; (801bd24 <ip4_route+0xdc>)
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	3304      	adds	r3, #4
 801bcfa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d004      	beq.n	801bd0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	b2db      	uxtb	r3, r3
 801bd06:	2b7f      	cmp	r3, #127	; 0x7f
 801bd08:	d101      	bne.n	801bd0e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	e001      	b.n	801bd12 <ip4_route+0xca>
  }

  return netif_default;
 801bd0e:	4b05      	ldr	r3, [pc, #20]	; (801bd24 <ip4_route+0xdc>)
 801bd10:	681b      	ldr	r3, [r3, #0]
}
 801bd12:	4618      	mov	r0, r3
 801bd14:	3714      	adds	r7, #20
 801bd16:	46bd      	mov	sp, r7
 801bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd1c:	4770      	bx	lr
 801bd1e:	bf00      	nop
 801bd20:	24022220 	.word	0x24022220
 801bd24:	24022224 	.word	0x24022224

0801bd28 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b082      	sub	sp, #8
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bd36:	f003 0301 	and.w	r3, r3, #1
 801bd3a:	b2db      	uxtb	r3, r3
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d016      	beq.n	801bd6e <ip4_input_accept+0x46>
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	3304      	adds	r3, #4
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d011      	beq.n	801bd6e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bd4a:	4b0b      	ldr	r3, [pc, #44]	; (801bd78 <ip4_input_accept+0x50>)
 801bd4c:	695a      	ldr	r2, [r3, #20]
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	3304      	adds	r3, #4
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	429a      	cmp	r2, r3
 801bd56:	d008      	beq.n	801bd6a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bd58:	4b07      	ldr	r3, [pc, #28]	; (801bd78 <ip4_input_accept+0x50>)
 801bd5a:	695b      	ldr	r3, [r3, #20]
 801bd5c:	6879      	ldr	r1, [r7, #4]
 801bd5e:	4618      	mov	r0, r3
 801bd60:	f000 fa08 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801bd64:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d001      	beq.n	801bd6e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bd6a:	2301      	movs	r3, #1
 801bd6c:	e000      	b.n	801bd70 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bd6e:	2300      	movs	r3, #0
}
 801bd70:	4618      	mov	r0, r3
 801bd72:	3708      	adds	r7, #8
 801bd74:	46bd      	mov	sp, r7
 801bd76:	bd80      	pop	{r7, pc}
 801bd78:	2401b7a0 	.word	0x2401b7a0

0801bd7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b086      	sub	sp, #24
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
 801bd84:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	685b      	ldr	r3, [r3, #4]
 801bd8a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801bd8c:	697b      	ldr	r3, [r7, #20]
 801bd8e:	781b      	ldrb	r3, [r3, #0]
 801bd90:	091b      	lsrs	r3, r3, #4
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	2b04      	cmp	r3, #4
 801bd96:	d004      	beq.n	801bda2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bd98:	6878      	ldr	r0, [r7, #4]
 801bd9a:	f7f8 ff29 	bl	8014bf0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bd9e:	2300      	movs	r3, #0
 801bda0:	e107      	b.n	801bfb2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	781b      	ldrb	r3, [r3, #0]
 801bda6:	f003 030f 	and.w	r3, r3, #15
 801bdaa:	b2db      	uxtb	r3, r3
 801bdac:	009b      	lsls	r3, r3, #2
 801bdae:	b2db      	uxtb	r3, r3
 801bdb0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bdb2:	697b      	ldr	r3, [r7, #20]
 801bdb4:	885b      	ldrh	r3, [r3, #2]
 801bdb6:	b29b      	uxth	r3, r3
 801bdb8:	4618      	mov	r0, r3
 801bdba:	f7f7 fa5b 	bl	8013274 <lwip_htons>
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	891b      	ldrh	r3, [r3, #8]
 801bdc6:	89ba      	ldrh	r2, [r7, #12]
 801bdc8:	429a      	cmp	r2, r3
 801bdca:	d204      	bcs.n	801bdd6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801bdcc:	89bb      	ldrh	r3, [r7, #12]
 801bdce:	4619      	mov	r1, r3
 801bdd0:	6878      	ldr	r0, [r7, #4]
 801bdd2:	f7f8 fd87 	bl	80148e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	895b      	ldrh	r3, [r3, #10]
 801bdda:	89fa      	ldrh	r2, [r7, #14]
 801bddc:	429a      	cmp	r2, r3
 801bdde:	d807      	bhi.n	801bdf0 <ip4_input+0x74>
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	891b      	ldrh	r3, [r3, #8]
 801bde4:	89ba      	ldrh	r2, [r7, #12]
 801bde6:	429a      	cmp	r2, r3
 801bde8:	d802      	bhi.n	801bdf0 <ip4_input+0x74>
 801bdea:	89fb      	ldrh	r3, [r7, #14]
 801bdec:	2b13      	cmp	r3, #19
 801bdee:	d804      	bhi.n	801bdfa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bdf0:	6878      	ldr	r0, [r7, #4]
 801bdf2:	f7f8 fefd 	bl	8014bf0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	e0db      	b.n	801bfb2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bdfa:	697b      	ldr	r3, [r7, #20]
 801bdfc:	691b      	ldr	r3, [r3, #16]
 801bdfe:	4a6f      	ldr	r2, [pc, #444]	; (801bfbc <ip4_input+0x240>)
 801be00:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801be02:	697b      	ldr	r3, [r7, #20]
 801be04:	68db      	ldr	r3, [r3, #12]
 801be06:	4a6d      	ldr	r2, [pc, #436]	; (801bfbc <ip4_input+0x240>)
 801be08:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801be0a:	4b6c      	ldr	r3, [pc, #432]	; (801bfbc <ip4_input+0x240>)
 801be0c:	695b      	ldr	r3, [r3, #20]
 801be0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801be12:	2be0      	cmp	r3, #224	; 0xe0
 801be14:	d112      	bne.n	801be3c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801be1c:	f003 0301 	and.w	r3, r3, #1
 801be20:	b2db      	uxtb	r3, r3
 801be22:	2b00      	cmp	r3, #0
 801be24:	d007      	beq.n	801be36 <ip4_input+0xba>
 801be26:	683b      	ldr	r3, [r7, #0]
 801be28:	3304      	adds	r3, #4
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d002      	beq.n	801be36 <ip4_input+0xba>
      netif = inp;
 801be30:	683b      	ldr	r3, [r7, #0]
 801be32:	613b      	str	r3, [r7, #16]
 801be34:	e02a      	b.n	801be8c <ip4_input+0x110>
    } else {
      netif = NULL;
 801be36:	2300      	movs	r3, #0
 801be38:	613b      	str	r3, [r7, #16]
 801be3a:	e027      	b.n	801be8c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801be3c:	6838      	ldr	r0, [r7, #0]
 801be3e:	f7ff ff73 	bl	801bd28 <ip4_input_accept>
 801be42:	4603      	mov	r3, r0
 801be44:	2b00      	cmp	r3, #0
 801be46:	d002      	beq.n	801be4e <ip4_input+0xd2>
      netif = inp;
 801be48:	683b      	ldr	r3, [r7, #0]
 801be4a:	613b      	str	r3, [r7, #16]
 801be4c:	e01e      	b.n	801be8c <ip4_input+0x110>
    } else {
      netif = NULL;
 801be4e:	2300      	movs	r3, #0
 801be50:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801be52:	4b5a      	ldr	r3, [pc, #360]	; (801bfbc <ip4_input+0x240>)
 801be54:	695b      	ldr	r3, [r3, #20]
 801be56:	b2db      	uxtb	r3, r3
 801be58:	2b7f      	cmp	r3, #127	; 0x7f
 801be5a:	d017      	beq.n	801be8c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801be5c:	4b58      	ldr	r3, [pc, #352]	; (801bfc0 <ip4_input+0x244>)
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	613b      	str	r3, [r7, #16]
 801be62:	e00e      	b.n	801be82 <ip4_input+0x106>
          if (netif == inp) {
 801be64:	693a      	ldr	r2, [r7, #16]
 801be66:	683b      	ldr	r3, [r7, #0]
 801be68:	429a      	cmp	r2, r3
 801be6a:	d006      	beq.n	801be7a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801be6c:	6938      	ldr	r0, [r7, #16]
 801be6e:	f7ff ff5b 	bl	801bd28 <ip4_input_accept>
 801be72:	4603      	mov	r3, r0
 801be74:	2b00      	cmp	r3, #0
 801be76:	d108      	bne.n	801be8a <ip4_input+0x10e>
 801be78:	e000      	b.n	801be7c <ip4_input+0x100>
            continue;
 801be7a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801be7c:	693b      	ldr	r3, [r7, #16]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	613b      	str	r3, [r7, #16]
 801be82:	693b      	ldr	r3, [r7, #16]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d1ed      	bne.n	801be64 <ip4_input+0xe8>
 801be88:	e000      	b.n	801be8c <ip4_input+0x110>
            break;
 801be8a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801be8c:	4b4b      	ldr	r3, [pc, #300]	; (801bfbc <ip4_input+0x240>)
 801be8e:	691b      	ldr	r3, [r3, #16]
 801be90:	6839      	ldr	r1, [r7, #0]
 801be92:	4618      	mov	r0, r3
 801be94:	f000 f96e 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801be98:	4603      	mov	r3, r0
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d105      	bne.n	801beaa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801be9e:	4b47      	ldr	r3, [pc, #284]	; (801bfbc <ip4_input+0x240>)
 801bea0:	691b      	ldr	r3, [r3, #16]
 801bea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bea6:	2be0      	cmp	r3, #224	; 0xe0
 801bea8:	d104      	bne.n	801beb4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801beaa:	6878      	ldr	r0, [r7, #4]
 801beac:	f7f8 fea0 	bl	8014bf0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801beb0:	2300      	movs	r3, #0
 801beb2:	e07e      	b.n	801bfb2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801beb4:	693b      	ldr	r3, [r7, #16]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d104      	bne.n	801bec4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801beba:	6878      	ldr	r0, [r7, #4]
 801bebc:	f7f8 fe98 	bl	8014bf0 <pbuf_free>
    return ERR_OK;
 801bec0:	2300      	movs	r3, #0
 801bec2:	e076      	b.n	801bfb2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bec4:	697b      	ldr	r3, [r7, #20]
 801bec6:	88db      	ldrh	r3, [r3, #6]
 801bec8:	b29b      	uxth	r3, r3
 801beca:	461a      	mov	r2, r3
 801becc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801bed0:	4013      	ands	r3, r2
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d00b      	beq.n	801beee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bed6:	6878      	ldr	r0, [r7, #4]
 801bed8:	f000 fc92 	bl	801c800 <ip4_reass>
 801bedc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d101      	bne.n	801bee8 <ip4_input+0x16c>
      return ERR_OK;
 801bee4:	2300      	movs	r3, #0
 801bee6:	e064      	b.n	801bfb2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	685b      	ldr	r3, [r3, #4]
 801beec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801beee:	4a33      	ldr	r2, [pc, #204]	; (801bfbc <ip4_input+0x240>)
 801bef0:	693b      	ldr	r3, [r7, #16]
 801bef2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bef4:	4a31      	ldr	r2, [pc, #196]	; (801bfbc <ip4_input+0x240>)
 801bef6:	683b      	ldr	r3, [r7, #0]
 801bef8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801befa:	4a30      	ldr	r2, [pc, #192]	; (801bfbc <ip4_input+0x240>)
 801befc:	697b      	ldr	r3, [r7, #20]
 801befe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bf00:	697b      	ldr	r3, [r7, #20]
 801bf02:	781b      	ldrb	r3, [r3, #0]
 801bf04:	f003 030f 	and.w	r3, r3, #15
 801bf08:	b2db      	uxtb	r3, r3
 801bf0a:	009b      	lsls	r3, r3, #2
 801bf0c:	b2db      	uxtb	r3, r3
 801bf0e:	b29a      	uxth	r2, r3
 801bf10:	4b2a      	ldr	r3, [pc, #168]	; (801bfbc <ip4_input+0x240>)
 801bf12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bf14:	89fb      	ldrh	r3, [r7, #14]
 801bf16:	4619      	mov	r1, r3
 801bf18:	6878      	ldr	r0, [r7, #4]
 801bf1a:	f7f8 fde3 	bl	8014ae4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	7a5b      	ldrb	r3, [r3, #9]
 801bf22:	2b11      	cmp	r3, #17
 801bf24:	d006      	beq.n	801bf34 <ip4_input+0x1b8>
 801bf26:	2b11      	cmp	r3, #17
 801bf28:	dc13      	bgt.n	801bf52 <ip4_input+0x1d6>
 801bf2a:	2b01      	cmp	r3, #1
 801bf2c:	d00c      	beq.n	801bf48 <ip4_input+0x1cc>
 801bf2e:	2b06      	cmp	r3, #6
 801bf30:	d005      	beq.n	801bf3e <ip4_input+0x1c2>
 801bf32:	e00e      	b.n	801bf52 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bf34:	6839      	ldr	r1, [r7, #0]
 801bf36:	6878      	ldr	r0, [r7, #4]
 801bf38:	f7fe fc42 	bl	801a7c0 <udp_input>
        break;
 801bf3c:	e026      	b.n	801bf8c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bf3e:	6839      	ldr	r1, [r7, #0]
 801bf40:	6878      	ldr	r0, [r7, #4]
 801bf42:	f7fa fc8d 	bl	8016860 <tcp_input>
        break;
 801bf46:	e021      	b.n	801bf8c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bf48:	6839      	ldr	r1, [r7, #0]
 801bf4a:	6878      	ldr	r0, [r7, #4]
 801bf4c:	f7ff fcc8 	bl	801b8e0 <icmp_input>
        break;
 801bf50:	e01c      	b.n	801bf8c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bf52:	4b1a      	ldr	r3, [pc, #104]	; (801bfbc <ip4_input+0x240>)
 801bf54:	695b      	ldr	r3, [r3, #20]
 801bf56:	6939      	ldr	r1, [r7, #16]
 801bf58:	4618      	mov	r0, r3
 801bf5a:	f000 f90b 	bl	801c174 <ip4_addr_isbroadcast_u32>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d10f      	bne.n	801bf84 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bf64:	4b15      	ldr	r3, [pc, #84]	; (801bfbc <ip4_input+0x240>)
 801bf66:	695b      	ldr	r3, [r3, #20]
 801bf68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bf6c:	2be0      	cmp	r3, #224	; 0xe0
 801bf6e:	d009      	beq.n	801bf84 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bf70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bf74:	4619      	mov	r1, r3
 801bf76:	6878      	ldr	r0, [r7, #4]
 801bf78:	f7f8 fe27 	bl	8014bca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bf7c:	2102      	movs	r1, #2
 801bf7e:	6878      	ldr	r0, [r7, #4]
 801bf80:	f7ff fdce 	bl	801bb20 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bf84:	6878      	ldr	r0, [r7, #4]
 801bf86:	f7f8 fe33 	bl	8014bf0 <pbuf_free>
        break;
 801bf8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bf8c:	4b0b      	ldr	r3, [pc, #44]	; (801bfbc <ip4_input+0x240>)
 801bf8e:	2200      	movs	r2, #0
 801bf90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bf92:	4b0a      	ldr	r3, [pc, #40]	; (801bfbc <ip4_input+0x240>)
 801bf94:	2200      	movs	r2, #0
 801bf96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bf98:	4b08      	ldr	r3, [pc, #32]	; (801bfbc <ip4_input+0x240>)
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bf9e:	4b07      	ldr	r3, [pc, #28]	; (801bfbc <ip4_input+0x240>)
 801bfa0:	2200      	movs	r2, #0
 801bfa2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bfa4:	4b05      	ldr	r3, [pc, #20]	; (801bfbc <ip4_input+0x240>)
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bfaa:	4b04      	ldr	r3, [pc, #16]	; (801bfbc <ip4_input+0x240>)
 801bfac:	2200      	movs	r2, #0
 801bfae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bfb0:	2300      	movs	r3, #0
}
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	3718      	adds	r7, #24
 801bfb6:	46bd      	mov	sp, r7
 801bfb8:	bd80      	pop	{r7, pc}
 801bfba:	bf00      	nop
 801bfbc:	2401b7a0 	.word	0x2401b7a0
 801bfc0:	24022220 	.word	0x24022220

0801bfc4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bfc4:	b580      	push	{r7, lr}
 801bfc6:	b08a      	sub	sp, #40	; 0x28
 801bfc8:	af04      	add	r7, sp, #16
 801bfca:	60f8      	str	r0, [r7, #12]
 801bfcc:	60b9      	str	r1, [r7, #8]
 801bfce:	607a      	str	r2, [r7, #4]
 801bfd0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bfd2:	68bb      	ldr	r3, [r7, #8]
 801bfd4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d009      	beq.n	801bff0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bfdc:	68bb      	ldr	r3, [r7, #8]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d003      	beq.n	801bfea <ip4_output_if+0x26>
 801bfe2:	68bb      	ldr	r3, [r7, #8]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d102      	bne.n	801bff0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfec:	3304      	adds	r3, #4
 801bfee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bff0:	78fa      	ldrb	r2, [r7, #3]
 801bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bff4:	9302      	str	r3, [sp, #8]
 801bff6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801bffa:	9301      	str	r3, [sp, #4]
 801bffc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c000:	9300      	str	r3, [sp, #0]
 801c002:	4613      	mov	r3, r2
 801c004:	687a      	ldr	r2, [r7, #4]
 801c006:	6979      	ldr	r1, [r7, #20]
 801c008:	68f8      	ldr	r0, [r7, #12]
 801c00a:	f000 f805 	bl	801c018 <ip4_output_if_src>
 801c00e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c010:	4618      	mov	r0, r3
 801c012:	3718      	adds	r7, #24
 801c014:	46bd      	mov	sp, r7
 801c016:	bd80      	pop	{r7, pc}

0801c018 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c018:	b580      	push	{r7, lr}
 801c01a:	b088      	sub	sp, #32
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	60f8      	str	r0, [r7, #12]
 801c020:	60b9      	str	r1, [r7, #8]
 801c022:	607a      	str	r2, [r7, #4]
 801c024:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	7b9b      	ldrb	r3, [r3, #14]
 801c02a:	2b01      	cmp	r3, #1
 801c02c:	d006      	beq.n	801c03c <ip4_output_if_src+0x24>
 801c02e:	4b4b      	ldr	r3, [pc, #300]	; (801c15c <ip4_output_if_src+0x144>)
 801c030:	f44f 7255 	mov.w	r2, #852	; 0x354
 801c034:	494a      	ldr	r1, [pc, #296]	; (801c160 <ip4_output_if_src+0x148>)
 801c036:	484b      	ldr	r0, [pc, #300]	; (801c164 <ip4_output_if_src+0x14c>)
 801c038:	f001 faec 	bl	801d614 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d060      	beq.n	801c104 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c042:	2314      	movs	r3, #20
 801c044:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c046:	2114      	movs	r1, #20
 801c048:	68f8      	ldr	r0, [r7, #12]
 801c04a:	f7f8 fd3b 	bl	8014ac4 <pbuf_add_header>
 801c04e:	4603      	mov	r3, r0
 801c050:	2b00      	cmp	r3, #0
 801c052:	d002      	beq.n	801c05a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c054:	f06f 0301 	mvn.w	r3, #1
 801c058:	e07c      	b.n	801c154 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	685b      	ldr	r3, [r3, #4]
 801c05e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	895b      	ldrh	r3, [r3, #10]
 801c064:	2b13      	cmp	r3, #19
 801c066:	d806      	bhi.n	801c076 <ip4_output_if_src+0x5e>
 801c068:	4b3c      	ldr	r3, [pc, #240]	; (801c15c <ip4_output_if_src+0x144>)
 801c06a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801c06e:	493e      	ldr	r1, [pc, #248]	; (801c168 <ip4_output_if_src+0x150>)
 801c070:	483c      	ldr	r0, [pc, #240]	; (801c164 <ip4_output_if_src+0x14c>)
 801c072:	f001 facf 	bl	801d614 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c076:	69fb      	ldr	r3, [r7, #28]
 801c078:	78fa      	ldrb	r2, [r7, #3]
 801c07a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c07c:	69fb      	ldr	r3, [r7, #28]
 801c07e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c082:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681a      	ldr	r2, [r3, #0]
 801c088:	69fb      	ldr	r3, [r7, #28]
 801c08a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c08c:	8b7b      	ldrh	r3, [r7, #26]
 801c08e:	089b      	lsrs	r3, r3, #2
 801c090:	b29b      	uxth	r3, r3
 801c092:	b2db      	uxtb	r3, r3
 801c094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c098:	b2da      	uxtb	r2, r3
 801c09a:	69fb      	ldr	r3, [r7, #28]
 801c09c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c09e:	69fb      	ldr	r3, [r7, #28]
 801c0a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c0a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	891b      	ldrh	r3, [r3, #8]
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	f7f7 f8e2 	bl	8013274 <lwip_htons>
 801c0b0:	4603      	mov	r3, r0
 801c0b2:	461a      	mov	r2, r3
 801c0b4:	69fb      	ldr	r3, [r7, #28]
 801c0b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c0b8:	69fb      	ldr	r3, [r7, #28]
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	719a      	strb	r2, [r3, #6]
 801c0be:	2200      	movs	r2, #0
 801c0c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c0c2:	4b2a      	ldr	r3, [pc, #168]	; (801c16c <ip4_output_if_src+0x154>)
 801c0c4:	881b      	ldrh	r3, [r3, #0]
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f7f7 f8d4 	bl	8013274 <lwip_htons>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	461a      	mov	r2, r3
 801c0d0:	69fb      	ldr	r3, [r7, #28]
 801c0d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c0d4:	4b25      	ldr	r3, [pc, #148]	; (801c16c <ip4_output_if_src+0x154>)
 801c0d6:	881b      	ldrh	r3, [r3, #0]
 801c0d8:	3301      	adds	r3, #1
 801c0da:	b29a      	uxth	r2, r3
 801c0dc:	4b23      	ldr	r3, [pc, #140]	; (801c16c <ip4_output_if_src+0x154>)
 801c0de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d104      	bne.n	801c0f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c0e6:	4b22      	ldr	r3, [pc, #136]	; (801c170 <ip4_output_if_src+0x158>)
 801c0e8:	681a      	ldr	r2, [r3, #0]
 801c0ea:	69fb      	ldr	r3, [r7, #28]
 801c0ec:	60da      	str	r2, [r3, #12]
 801c0ee:	e003      	b.n	801c0f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c0f0:	68bb      	ldr	r3, [r7, #8]
 801c0f2:	681a      	ldr	r2, [r3, #0]
 801c0f4:	69fb      	ldr	r3, [r7, #28]
 801c0f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c0f8:	69fb      	ldr	r3, [r7, #28]
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	729a      	strb	r2, [r3, #10]
 801c0fe:	2200      	movs	r2, #0
 801c100:	72da      	strb	r2, [r3, #11]
 801c102:	e00f      	b.n	801c124 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	895b      	ldrh	r3, [r3, #10]
 801c108:	2b13      	cmp	r3, #19
 801c10a:	d802      	bhi.n	801c112 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c10c:	f06f 0301 	mvn.w	r3, #1
 801c110:	e020      	b.n	801c154 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	685b      	ldr	r3, [r3, #4]
 801c116:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c118:	69fb      	ldr	r3, [r7, #28]
 801c11a:	691b      	ldr	r3, [r3, #16]
 801c11c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c11e:	f107 0314 	add.w	r3, r7, #20
 801c122:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c126:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d00c      	beq.n	801c146 <ip4_output_if_src+0x12e>
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	891a      	ldrh	r2, [r3, #8]
 801c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c132:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c134:	429a      	cmp	r2, r3
 801c136:	d906      	bls.n	801c146 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c138:	687a      	ldr	r2, [r7, #4]
 801c13a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c13c:	68f8      	ldr	r0, [r7, #12]
 801c13e:	f000 fd4d 	bl	801cbdc <ip4_frag>
 801c142:	4603      	mov	r3, r0
 801c144:	e006      	b.n	801c154 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c148:	695b      	ldr	r3, [r3, #20]
 801c14a:	687a      	ldr	r2, [r7, #4]
 801c14c:	68f9      	ldr	r1, [r7, #12]
 801c14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c150:	4798      	blx	r3
 801c152:	4603      	mov	r3, r0
}
 801c154:	4618      	mov	r0, r3
 801c156:	3720      	adds	r7, #32
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}
 801c15c:	08021144 	.word	0x08021144
 801c160:	08021178 	.word	0x08021178
 801c164:	08021184 	.word	0x08021184
 801c168:	080211ac 	.word	0x080211ac
 801c16c:	2401afce 	.word	0x2401afce
 801c170:	08021620 	.word	0x08021620

0801c174 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c174:	b480      	push	{r7}
 801c176:	b085      	sub	sp, #20
 801c178:	af00      	add	r7, sp, #0
 801c17a:	6078      	str	r0, [r7, #4]
 801c17c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c188:	d002      	beq.n	801c190 <ip4_addr_isbroadcast_u32+0x1c>
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d101      	bne.n	801c194 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c190:	2301      	movs	r3, #1
 801c192:	e02a      	b.n	801c1ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c194:	683b      	ldr	r3, [r7, #0]
 801c196:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c19a:	f003 0302 	and.w	r3, r3, #2
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d101      	bne.n	801c1a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	e021      	b.n	801c1ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c1a6:	683b      	ldr	r3, [r7, #0]
 801c1a8:	3304      	adds	r3, #4
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	687a      	ldr	r2, [r7, #4]
 801c1ae:	429a      	cmp	r2, r3
 801c1b0:	d101      	bne.n	801c1b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	e019      	b.n	801c1ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c1b6:	68fa      	ldr	r2, [r7, #12]
 801c1b8:	683b      	ldr	r3, [r7, #0]
 801c1ba:	3304      	adds	r3, #4
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	405a      	eors	r2, r3
 801c1c0:	683b      	ldr	r3, [r7, #0]
 801c1c2:	3308      	adds	r3, #8
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	4013      	ands	r3, r2
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d10d      	bne.n	801c1e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c1cc:	683b      	ldr	r3, [r7, #0]
 801c1ce:	3308      	adds	r3, #8
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	43da      	mvns	r2, r3
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c1d8:	683b      	ldr	r3, [r7, #0]
 801c1da:	3308      	adds	r3, #8
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c1e0:	429a      	cmp	r2, r3
 801c1e2:	d101      	bne.n	801c1e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c1e4:	2301      	movs	r3, #1
 801c1e6:	e000      	b.n	801c1ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c1e8:	2300      	movs	r3, #0
  }
}
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	3714      	adds	r7, #20
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f4:	4770      	bx	lr
	...

0801c1f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b084      	sub	sp, #16
 801c1fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c1fe:	2300      	movs	r3, #0
 801c200:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c202:	4b12      	ldr	r3, [pc, #72]	; (801c24c <ip_reass_tmr+0x54>)
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c208:	e018      	b.n	801c23c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	7fdb      	ldrb	r3, [r3, #31]
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d00b      	beq.n	801c22a <ip_reass_tmr+0x32>
      r->timer--;
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	7fdb      	ldrb	r3, [r3, #31]
 801c216:	3b01      	subs	r3, #1
 801c218:	b2da      	uxtb	r2, r3
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	60fb      	str	r3, [r7, #12]
 801c228:	e008      	b.n	801c23c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c234:	68b9      	ldr	r1, [r7, #8]
 801c236:	6878      	ldr	r0, [r7, #4]
 801c238:	f000 f80a 	bl	801c250 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d1e3      	bne.n	801c20a <ip_reass_tmr+0x12>
    }
  }
}
 801c242:	bf00      	nop
 801c244:	bf00      	nop
 801c246:	3710      	adds	r7, #16
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}
 801c24c:	2401afd0 	.word	0x2401afd0

0801c250 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c250:	b580      	push	{r7, lr}
 801c252:	b088      	sub	sp, #32
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
 801c258:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c25a:	2300      	movs	r3, #0
 801c25c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c25e:	683a      	ldr	r2, [r7, #0]
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	429a      	cmp	r2, r3
 801c264:	d105      	bne.n	801c272 <ip_reass_free_complete_datagram+0x22>
 801c266:	4b45      	ldr	r3, [pc, #276]	; (801c37c <ip_reass_free_complete_datagram+0x12c>)
 801c268:	22ab      	movs	r2, #171	; 0xab
 801c26a:	4945      	ldr	r1, [pc, #276]	; (801c380 <ip_reass_free_complete_datagram+0x130>)
 801c26c:	4845      	ldr	r0, [pc, #276]	; (801c384 <ip_reass_free_complete_datagram+0x134>)
 801c26e:	f001 f9d1 	bl	801d614 <iprintf>
  if (prev != NULL) {
 801c272:	683b      	ldr	r3, [r7, #0]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d00a      	beq.n	801c28e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c278:	683b      	ldr	r3, [r7, #0]
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	687a      	ldr	r2, [r7, #4]
 801c27e:	429a      	cmp	r2, r3
 801c280:	d005      	beq.n	801c28e <ip_reass_free_complete_datagram+0x3e>
 801c282:	4b3e      	ldr	r3, [pc, #248]	; (801c37c <ip_reass_free_complete_datagram+0x12c>)
 801c284:	22ad      	movs	r2, #173	; 0xad
 801c286:	4940      	ldr	r1, [pc, #256]	; (801c388 <ip_reass_free_complete_datagram+0x138>)
 801c288:	483e      	ldr	r0, [pc, #248]	; (801c384 <ip_reass_free_complete_datagram+0x134>)
 801c28a:	f001 f9c3 	bl	801d614 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	685b      	ldr	r3, [r3, #4]
 801c292:	685b      	ldr	r3, [r3, #4]
 801c294:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c296:	697b      	ldr	r3, [r7, #20]
 801c298:	889b      	ldrh	r3, [r3, #4]
 801c29a:	b29b      	uxth	r3, r3
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d12a      	bne.n	801c2f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	685b      	ldr	r3, [r3, #4]
 801c2a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c2a6:	697b      	ldr	r3, [r7, #20]
 801c2a8:	681a      	ldr	r2, [r3, #0]
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c2ae:	69bb      	ldr	r3, [r7, #24]
 801c2b0:	6858      	ldr	r0, [r3, #4]
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	3308      	adds	r3, #8
 801c2b6:	2214      	movs	r2, #20
 801c2b8:	4619      	mov	r1, r3
 801c2ba:	f001 f8d1 	bl	801d460 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c2be:	2101      	movs	r1, #1
 801c2c0:	69b8      	ldr	r0, [r7, #24]
 801c2c2:	f7ff fc3d 	bl	801bb40 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c2c6:	69b8      	ldr	r0, [r7, #24]
 801c2c8:	f7f8 fd20 	bl	8014d0c <pbuf_clen>
 801c2cc:	4603      	mov	r3, r0
 801c2ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c2d0:	8bfa      	ldrh	r2, [r7, #30]
 801c2d2:	8a7b      	ldrh	r3, [r7, #18]
 801c2d4:	4413      	add	r3, r2
 801c2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c2da:	db05      	blt.n	801c2e8 <ip_reass_free_complete_datagram+0x98>
 801c2dc:	4b27      	ldr	r3, [pc, #156]	; (801c37c <ip_reass_free_complete_datagram+0x12c>)
 801c2de:	22bc      	movs	r2, #188	; 0xbc
 801c2e0:	492a      	ldr	r1, [pc, #168]	; (801c38c <ip_reass_free_complete_datagram+0x13c>)
 801c2e2:	4828      	ldr	r0, [pc, #160]	; (801c384 <ip_reass_free_complete_datagram+0x134>)
 801c2e4:	f001 f996 	bl	801d614 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c2e8:	8bfa      	ldrh	r2, [r7, #30]
 801c2ea:	8a7b      	ldrh	r3, [r7, #18]
 801c2ec:	4413      	add	r3, r2
 801c2ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c2f0:	69b8      	ldr	r0, [r7, #24]
 801c2f2:	f7f8 fc7d 	bl	8014bf0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	685b      	ldr	r3, [r3, #4]
 801c2fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c2fc:	e01f      	b.n	801c33e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c2fe:	69bb      	ldr	r3, [r7, #24]
 801c300:	685b      	ldr	r3, [r3, #4]
 801c302:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c304:	69bb      	ldr	r3, [r7, #24]
 801c306:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c308:	697b      	ldr	r3, [r7, #20]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c30e:	68f8      	ldr	r0, [r7, #12]
 801c310:	f7f8 fcfc 	bl	8014d0c <pbuf_clen>
 801c314:	4603      	mov	r3, r0
 801c316:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c318:	8bfa      	ldrh	r2, [r7, #30]
 801c31a:	8a7b      	ldrh	r3, [r7, #18]
 801c31c:	4413      	add	r3, r2
 801c31e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c322:	db05      	blt.n	801c330 <ip_reass_free_complete_datagram+0xe0>
 801c324:	4b15      	ldr	r3, [pc, #84]	; (801c37c <ip_reass_free_complete_datagram+0x12c>)
 801c326:	22cc      	movs	r2, #204	; 0xcc
 801c328:	4918      	ldr	r1, [pc, #96]	; (801c38c <ip_reass_free_complete_datagram+0x13c>)
 801c32a:	4816      	ldr	r0, [pc, #88]	; (801c384 <ip_reass_free_complete_datagram+0x134>)
 801c32c:	f001 f972 	bl	801d614 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c330:	8bfa      	ldrh	r2, [r7, #30]
 801c332:	8a7b      	ldrh	r3, [r7, #18]
 801c334:	4413      	add	r3, r2
 801c336:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c338:	68f8      	ldr	r0, [r7, #12]
 801c33a:	f7f8 fc59 	bl	8014bf0 <pbuf_free>
  while (p != NULL) {
 801c33e:	69bb      	ldr	r3, [r7, #24]
 801c340:	2b00      	cmp	r3, #0
 801c342:	d1dc      	bne.n	801c2fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c344:	6839      	ldr	r1, [r7, #0]
 801c346:	6878      	ldr	r0, [r7, #4]
 801c348:	f000 f8c2 	bl	801c4d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c34c:	4b10      	ldr	r3, [pc, #64]	; (801c390 <ip_reass_free_complete_datagram+0x140>)
 801c34e:	881b      	ldrh	r3, [r3, #0]
 801c350:	8bfa      	ldrh	r2, [r7, #30]
 801c352:	429a      	cmp	r2, r3
 801c354:	d905      	bls.n	801c362 <ip_reass_free_complete_datagram+0x112>
 801c356:	4b09      	ldr	r3, [pc, #36]	; (801c37c <ip_reass_free_complete_datagram+0x12c>)
 801c358:	22d2      	movs	r2, #210	; 0xd2
 801c35a:	490e      	ldr	r1, [pc, #56]	; (801c394 <ip_reass_free_complete_datagram+0x144>)
 801c35c:	4809      	ldr	r0, [pc, #36]	; (801c384 <ip_reass_free_complete_datagram+0x134>)
 801c35e:	f001 f959 	bl	801d614 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c362:	4b0b      	ldr	r3, [pc, #44]	; (801c390 <ip_reass_free_complete_datagram+0x140>)
 801c364:	881a      	ldrh	r2, [r3, #0]
 801c366:	8bfb      	ldrh	r3, [r7, #30]
 801c368:	1ad3      	subs	r3, r2, r3
 801c36a:	b29a      	uxth	r2, r3
 801c36c:	4b08      	ldr	r3, [pc, #32]	; (801c390 <ip_reass_free_complete_datagram+0x140>)
 801c36e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c370:	8bfb      	ldrh	r3, [r7, #30]
}
 801c372:	4618      	mov	r0, r3
 801c374:	3720      	adds	r7, #32
 801c376:	46bd      	mov	sp, r7
 801c378:	bd80      	pop	{r7, pc}
 801c37a:	bf00      	nop
 801c37c:	080211dc 	.word	0x080211dc
 801c380:	08021218 	.word	0x08021218
 801c384:	08021224 	.word	0x08021224
 801c388:	0802124c 	.word	0x0802124c
 801c38c:	08021260 	.word	0x08021260
 801c390:	2401afd4 	.word	0x2401afd4
 801c394:	08021280 	.word	0x08021280

0801c398 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c398:	b580      	push	{r7, lr}
 801c39a:	b08a      	sub	sp, #40	; 0x28
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
 801c3a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c3b6:	4b28      	ldr	r3, [pc, #160]	; (801c458 <ip_reass_remove_oldest_datagram+0xc0>)
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801c3bc:	e030      	b.n	801c420 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3c0:	695a      	ldr	r2, [r3, #20]
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	68db      	ldr	r3, [r3, #12]
 801c3c6:	429a      	cmp	r2, r3
 801c3c8:	d10c      	bne.n	801c3e4 <ip_reass_remove_oldest_datagram+0x4c>
 801c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3cc:	699a      	ldr	r2, [r3, #24]
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	691b      	ldr	r3, [r3, #16]
 801c3d2:	429a      	cmp	r2, r3
 801c3d4:	d106      	bne.n	801c3e4 <ip_reass_remove_oldest_datagram+0x4c>
 801c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3d8:	899a      	ldrh	r2, [r3, #12]
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	889b      	ldrh	r3, [r3, #4]
 801c3de:	b29b      	uxth	r3, r3
 801c3e0:	429a      	cmp	r2, r3
 801c3e2:	d014      	beq.n	801c40e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c3e4:	693b      	ldr	r3, [r7, #16]
 801c3e6:	3301      	adds	r3, #1
 801c3e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c3ea:	6a3b      	ldr	r3, [r7, #32]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d104      	bne.n	801c3fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c3f4:	69fb      	ldr	r3, [r7, #28]
 801c3f6:	61bb      	str	r3, [r7, #24]
 801c3f8:	e009      	b.n	801c40e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3fc:	7fda      	ldrb	r2, [r3, #31]
 801c3fe:	6a3b      	ldr	r3, [r7, #32]
 801c400:	7fdb      	ldrb	r3, [r3, #31]
 801c402:	429a      	cmp	r2, r3
 801c404:	d803      	bhi.n	801c40e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c408:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c40a:	69fb      	ldr	r3, [r7, #28]
 801c40c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d001      	beq.n	801c41a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c418:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c422:	2b00      	cmp	r3, #0
 801c424:	d1cb      	bne.n	801c3be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c426:	6a3b      	ldr	r3, [r7, #32]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d008      	beq.n	801c43e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c42c:	69b9      	ldr	r1, [r7, #24]
 801c42e:	6a38      	ldr	r0, [r7, #32]
 801c430:	f7ff ff0e 	bl	801c250 <ip_reass_free_complete_datagram>
 801c434:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c436:	697a      	ldr	r2, [r7, #20]
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	4413      	add	r3, r2
 801c43c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c43e:	697a      	ldr	r2, [r7, #20]
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	429a      	cmp	r2, r3
 801c444:	da02      	bge.n	801c44c <ip_reass_remove_oldest_datagram+0xb4>
 801c446:	693b      	ldr	r3, [r7, #16]
 801c448:	2b01      	cmp	r3, #1
 801c44a:	dcac      	bgt.n	801c3a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c44c:	697b      	ldr	r3, [r7, #20]
}
 801c44e:	4618      	mov	r0, r3
 801c450:	3728      	adds	r7, #40	; 0x28
 801c452:	46bd      	mov	sp, r7
 801c454:	bd80      	pop	{r7, pc}
 801c456:	bf00      	nop
 801c458:	2401afd0 	.word	0x2401afd0

0801c45c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b084      	sub	sp, #16
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
 801c464:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c466:	2004      	movs	r0, #4
 801c468:	f7f7 fca4 	bl	8013db4 <memp_malloc>
 801c46c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d110      	bne.n	801c496 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c474:	6839      	ldr	r1, [r7, #0]
 801c476:	6878      	ldr	r0, [r7, #4]
 801c478:	f7ff ff8e 	bl	801c398 <ip_reass_remove_oldest_datagram>
 801c47c:	4602      	mov	r2, r0
 801c47e:	683b      	ldr	r3, [r7, #0]
 801c480:	4293      	cmp	r3, r2
 801c482:	dc03      	bgt.n	801c48c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c484:	2004      	movs	r0, #4
 801c486:	f7f7 fc95 	bl	8013db4 <memp_malloc>
 801c48a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d101      	bne.n	801c496 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c492:	2300      	movs	r3, #0
 801c494:	e016      	b.n	801c4c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c496:	2220      	movs	r2, #32
 801c498:	2100      	movs	r1, #0
 801c49a:	68f8      	ldr	r0, [r7, #12]
 801c49c:	f001 f808 	bl	801d4b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	220f      	movs	r2, #15
 801c4a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c4a6:	4b09      	ldr	r3, [pc, #36]	; (801c4cc <ip_reass_enqueue_new_datagram+0x70>)
 801c4a8:	681a      	ldr	r2, [r3, #0]
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c4ae:	4a07      	ldr	r2, [pc, #28]	; (801c4cc <ip_reass_enqueue_new_datagram+0x70>)
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	3308      	adds	r3, #8
 801c4b8:	2214      	movs	r2, #20
 801c4ba:	6879      	ldr	r1, [r7, #4]
 801c4bc:	4618      	mov	r0, r3
 801c4be:	f000 ffcf 	bl	801d460 <memcpy>
  return ipr;
 801c4c2:	68fb      	ldr	r3, [r7, #12]
}
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	3710      	adds	r7, #16
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bd80      	pop	{r7, pc}
 801c4cc:	2401afd0 	.word	0x2401afd0

0801c4d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b082      	sub	sp, #8
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
 801c4d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c4da:	4b10      	ldr	r3, [pc, #64]	; (801c51c <ip_reass_dequeue_datagram+0x4c>)
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	687a      	ldr	r2, [r7, #4]
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d104      	bne.n	801c4ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	4a0c      	ldr	r2, [pc, #48]	; (801c51c <ip_reass_dequeue_datagram+0x4c>)
 801c4ea:	6013      	str	r3, [r2, #0]
 801c4ec:	e00d      	b.n	801c50a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c4ee:	683b      	ldr	r3, [r7, #0]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d106      	bne.n	801c502 <ip_reass_dequeue_datagram+0x32>
 801c4f4:	4b0a      	ldr	r3, [pc, #40]	; (801c520 <ip_reass_dequeue_datagram+0x50>)
 801c4f6:	f240 1245 	movw	r2, #325	; 0x145
 801c4fa:	490a      	ldr	r1, [pc, #40]	; (801c524 <ip_reass_dequeue_datagram+0x54>)
 801c4fc:	480a      	ldr	r0, [pc, #40]	; (801c528 <ip_reass_dequeue_datagram+0x58>)
 801c4fe:	f001 f889 	bl	801d614 <iprintf>
    prev->next = ipr->next;
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	681a      	ldr	r2, [r3, #0]
 801c506:	683b      	ldr	r3, [r7, #0]
 801c508:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c50a:	6879      	ldr	r1, [r7, #4]
 801c50c:	2004      	movs	r0, #4
 801c50e:	f7f7 fcc7 	bl	8013ea0 <memp_free>
}
 801c512:	bf00      	nop
 801c514:	3708      	adds	r7, #8
 801c516:	46bd      	mov	sp, r7
 801c518:	bd80      	pop	{r7, pc}
 801c51a:	bf00      	nop
 801c51c:	2401afd0 	.word	0x2401afd0
 801c520:	080211dc 	.word	0x080211dc
 801c524:	080212a4 	.word	0x080212a4
 801c528:	08021224 	.word	0x08021224

0801c52c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c52c:	b580      	push	{r7, lr}
 801c52e:	b08c      	sub	sp, #48	; 0x30
 801c530:	af00      	add	r7, sp, #0
 801c532:	60f8      	str	r0, [r7, #12]
 801c534:	60b9      	str	r1, [r7, #8]
 801c536:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c538:	2300      	movs	r3, #0
 801c53a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c53c:	2301      	movs	r3, #1
 801c53e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c540:	68bb      	ldr	r3, [r7, #8]
 801c542:	685b      	ldr	r3, [r3, #4]
 801c544:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c546:	69fb      	ldr	r3, [r7, #28]
 801c548:	885b      	ldrh	r3, [r3, #2]
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7f6 fe91 	bl	8013274 <lwip_htons>
 801c552:	4603      	mov	r3, r0
 801c554:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c556:	69fb      	ldr	r3, [r7, #28]
 801c558:	781b      	ldrb	r3, [r3, #0]
 801c55a:	f003 030f 	and.w	r3, r3, #15
 801c55e:	b2db      	uxtb	r3, r3
 801c560:	009b      	lsls	r3, r3, #2
 801c562:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c564:	7e7b      	ldrb	r3, [r7, #25]
 801c566:	b29b      	uxth	r3, r3
 801c568:	8b7a      	ldrh	r2, [r7, #26]
 801c56a:	429a      	cmp	r2, r3
 801c56c:	d202      	bcs.n	801c574 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c56e:	f04f 33ff 	mov.w	r3, #4294967295
 801c572:	e135      	b.n	801c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c574:	7e7b      	ldrb	r3, [r7, #25]
 801c576:	b29b      	uxth	r3, r3
 801c578:	8b7a      	ldrh	r2, [r7, #26]
 801c57a:	1ad3      	subs	r3, r2, r3
 801c57c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c57e:	69fb      	ldr	r3, [r7, #28]
 801c580:	88db      	ldrh	r3, [r3, #6]
 801c582:	b29b      	uxth	r3, r3
 801c584:	4618      	mov	r0, r3
 801c586:	f7f6 fe75 	bl	8013274 <lwip_htons>
 801c58a:	4603      	mov	r3, r0
 801c58c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c590:	b29b      	uxth	r3, r3
 801c592:	00db      	lsls	r3, r3, #3
 801c594:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c596:	68bb      	ldr	r3, [r7, #8]
 801c598:	685b      	ldr	r3, [r3, #4]
 801c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c59e:	2200      	movs	r2, #0
 801c5a0:	701a      	strb	r2, [r3, #0]
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	705a      	strb	r2, [r3, #1]
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	709a      	strb	r2, [r3, #2]
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5b0:	8afa      	ldrh	r2, [r7, #22]
 801c5b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c5b4:	8afa      	ldrh	r2, [r7, #22]
 801c5b6:	8b7b      	ldrh	r3, [r7, #26]
 801c5b8:	4413      	add	r3, r2
 801c5ba:	b29a      	uxth	r2, r3
 801c5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5c2:	88db      	ldrh	r3, [r3, #6]
 801c5c4:	b29b      	uxth	r3, r3
 801c5c6:	8afa      	ldrh	r2, [r7, #22]
 801c5c8:	429a      	cmp	r2, r3
 801c5ca:	d902      	bls.n	801c5d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c5cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c5d0:	e106      	b.n	801c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	685b      	ldr	r3, [r3, #4]
 801c5d6:	627b      	str	r3, [r7, #36]	; 0x24
 801c5d8:	e068      	b.n	801c6ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5dc:	685b      	ldr	r3, [r3, #4]
 801c5de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5e2:	889b      	ldrh	r3, [r3, #4]
 801c5e4:	b29a      	uxth	r2, r3
 801c5e6:	693b      	ldr	r3, [r7, #16]
 801c5e8:	889b      	ldrh	r3, [r3, #4]
 801c5ea:	b29b      	uxth	r3, r3
 801c5ec:	429a      	cmp	r2, r3
 801c5ee:	d235      	bcs.n	801c65c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d020      	beq.n	801c63e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5fe:	889b      	ldrh	r3, [r3, #4]
 801c600:	b29a      	uxth	r2, r3
 801c602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c604:	88db      	ldrh	r3, [r3, #6]
 801c606:	b29b      	uxth	r3, r3
 801c608:	429a      	cmp	r2, r3
 801c60a:	d307      	bcc.n	801c61c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c60e:	88db      	ldrh	r3, [r3, #6]
 801c610:	b29a      	uxth	r2, r3
 801c612:	693b      	ldr	r3, [r7, #16]
 801c614:	889b      	ldrh	r3, [r3, #4]
 801c616:	b29b      	uxth	r3, r3
 801c618:	429a      	cmp	r2, r3
 801c61a:	d902      	bls.n	801c622 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c61c:	f04f 33ff 	mov.w	r3, #4294967295
 801c620:	e0de      	b.n	801c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c624:	68ba      	ldr	r2, [r7, #8]
 801c626:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c62a:	88db      	ldrh	r3, [r3, #6]
 801c62c:	b29a      	uxth	r2, r3
 801c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c630:	889b      	ldrh	r3, [r3, #4]
 801c632:	b29b      	uxth	r3, r3
 801c634:	429a      	cmp	r2, r3
 801c636:	d03d      	beq.n	801c6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c638:	2300      	movs	r3, #0
 801c63a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c63c:	e03a      	b.n	801c6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c640:	88db      	ldrh	r3, [r3, #6]
 801c642:	b29a      	uxth	r2, r3
 801c644:	693b      	ldr	r3, [r7, #16]
 801c646:	889b      	ldrh	r3, [r3, #4]
 801c648:	b29b      	uxth	r3, r3
 801c64a:	429a      	cmp	r2, r3
 801c64c:	d902      	bls.n	801c654 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c64e:	f04f 33ff 	mov.w	r3, #4294967295
 801c652:	e0c5      	b.n	801c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	68ba      	ldr	r2, [r7, #8]
 801c658:	605a      	str	r2, [r3, #4]
      break;
 801c65a:	e02b      	b.n	801c6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c65e:	889b      	ldrh	r3, [r3, #4]
 801c660:	b29a      	uxth	r2, r3
 801c662:	693b      	ldr	r3, [r7, #16]
 801c664:	889b      	ldrh	r3, [r3, #4]
 801c666:	b29b      	uxth	r3, r3
 801c668:	429a      	cmp	r2, r3
 801c66a:	d102      	bne.n	801c672 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c66c:	f04f 33ff 	mov.w	r3, #4294967295
 801c670:	e0b6      	b.n	801c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c674:	889b      	ldrh	r3, [r3, #4]
 801c676:	b29a      	uxth	r2, r3
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	88db      	ldrh	r3, [r3, #6]
 801c67c:	b29b      	uxth	r3, r3
 801c67e:	429a      	cmp	r2, r3
 801c680:	d202      	bcs.n	801c688 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c682:	f04f 33ff 	mov.w	r3, #4294967295
 801c686:	e0ab      	b.n	801c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d009      	beq.n	801c6a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c690:	88db      	ldrh	r3, [r3, #6]
 801c692:	b29a      	uxth	r2, r3
 801c694:	693b      	ldr	r3, [r7, #16]
 801c696:	889b      	ldrh	r3, [r3, #4]
 801c698:	b29b      	uxth	r3, r3
 801c69a:	429a      	cmp	r2, r3
 801c69c:	d001      	beq.n	801c6a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c69e:	2300      	movs	r3, #0
 801c6a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c6a2:	693b      	ldr	r3, [r7, #16]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801c6a8:	693b      	ldr	r3, [r7, #16]
 801c6aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d193      	bne.n	801c5da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c6b2:	e000      	b.n	801c6b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c6b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d12d      	bne.n	801c718 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d01c      	beq.n	801c6fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6c4:	88db      	ldrh	r3, [r3, #6]
 801c6c6:	b29a      	uxth	r2, r3
 801c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6ca:	889b      	ldrh	r3, [r3, #4]
 801c6cc:	b29b      	uxth	r3, r3
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	d906      	bls.n	801c6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c6d2:	4b45      	ldr	r3, [pc, #276]	; (801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c6d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801c6d8:	4944      	ldr	r1, [pc, #272]	; (801c7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c6da:	4845      	ldr	r0, [pc, #276]	; (801c7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c6dc:	f000 ff9a 	bl	801d614 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6e2:	68ba      	ldr	r2, [r7, #8]
 801c6e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6e8:	88db      	ldrh	r3, [r3, #6]
 801c6ea:	b29a      	uxth	r2, r3
 801c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6ee:	889b      	ldrh	r3, [r3, #4]
 801c6f0:	b29b      	uxth	r3, r3
 801c6f2:	429a      	cmp	r2, r3
 801c6f4:	d010      	beq.n	801c718 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	623b      	str	r3, [r7, #32]
 801c6fa:	e00d      	b.n	801c718 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	685b      	ldr	r3, [r3, #4]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d006      	beq.n	801c712 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c704:	4b38      	ldr	r3, [pc, #224]	; (801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c706:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801c70a:	493a      	ldr	r1, [pc, #232]	; (801c7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c70c:	4838      	ldr	r0, [pc, #224]	; (801c7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c70e:	f000 ff81 	bl	801d614 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	68ba      	ldr	r2, [r7, #8]
 801c716:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d105      	bne.n	801c72a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	7f9b      	ldrb	r3, [r3, #30]
 801c722:	f003 0301 	and.w	r3, r3, #1
 801c726:	2b00      	cmp	r3, #0
 801c728:	d059      	beq.n	801c7de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c72a:	6a3b      	ldr	r3, [r7, #32]
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d04f      	beq.n	801c7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	685b      	ldr	r3, [r3, #4]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d006      	beq.n	801c746 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	685b      	ldr	r3, [r3, #4]
 801c73c:	685b      	ldr	r3, [r3, #4]
 801c73e:	889b      	ldrh	r3, [r3, #4]
 801c740:	b29b      	uxth	r3, r3
 801c742:	2b00      	cmp	r3, #0
 801c744:	d002      	beq.n	801c74c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c746:	2300      	movs	r3, #0
 801c748:	623b      	str	r3, [r7, #32]
 801c74a:	e041      	b.n	801c7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c74e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801c756:	e012      	b.n	801c77e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c75a:	685b      	ldr	r3, [r3, #4]
 801c75c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c760:	88db      	ldrh	r3, [r3, #6]
 801c762:	b29a      	uxth	r2, r3
 801c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c766:	889b      	ldrh	r3, [r3, #4]
 801c768:	b29b      	uxth	r3, r3
 801c76a:	429a      	cmp	r2, r3
 801c76c:	d002      	beq.n	801c774 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c76e:	2300      	movs	r3, #0
 801c770:	623b      	str	r3, [r7, #32]
            break;
 801c772:	e007      	b.n	801c784 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c776:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801c778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c780:	2b00      	cmp	r3, #0
 801c782:	d1e9      	bne.n	801c758 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c784:	6a3b      	ldr	r3, [r7, #32]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d022      	beq.n	801c7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	685b      	ldr	r3, [r3, #4]
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d106      	bne.n	801c7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c792:	4b15      	ldr	r3, [pc, #84]	; (801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c794:	f240 12df 	movw	r2, #479	; 0x1df
 801c798:	4917      	ldr	r1, [pc, #92]	; (801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c79a:	4815      	ldr	r0, [pc, #84]	; (801c7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c79c:	f000 ff3a 	bl	801d614 <iprintf>
          LWIP_ASSERT("sanity check",
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	685b      	ldr	r3, [r3, #4]
 801c7a4:	685b      	ldr	r3, [r3, #4]
 801c7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c7a8:	429a      	cmp	r2, r3
 801c7aa:	d106      	bne.n	801c7ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c7ac:	4b0e      	ldr	r3, [pc, #56]	; (801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c7ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801c7b2:	4911      	ldr	r1, [pc, #68]	; (801c7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c7b4:	480e      	ldr	r0, [pc, #56]	; (801c7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c7b6:	f000 ff2d 	bl	801d614 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d006      	beq.n	801c7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c7c2:	4b09      	ldr	r3, [pc, #36]	; (801c7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c7c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801c7c8:	490c      	ldr	r1, [pc, #48]	; (801c7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c7ca:	4809      	ldr	r0, [pc, #36]	; (801c7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c7cc:	f000 ff22 	bl	801d614 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c7d0:	6a3b      	ldr	r3, [r7, #32]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	bf14      	ite	ne
 801c7d6:	2301      	movne	r3, #1
 801c7d8:	2300      	moveq	r3, #0
 801c7da:	b2db      	uxtb	r3, r3
 801c7dc:	e000      	b.n	801c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c7de:	2300      	movs	r3, #0
}
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	3730      	adds	r7, #48	; 0x30
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	080211dc 	.word	0x080211dc
 801c7ec:	080212c0 	.word	0x080212c0
 801c7f0:	08021224 	.word	0x08021224
 801c7f4:	080212e0 	.word	0x080212e0
 801c7f8:	08021318 	.word	0x08021318
 801c7fc:	08021328 	.word	0x08021328

0801c800 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b08e      	sub	sp, #56	; 0x38
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	685b      	ldr	r3, [r3, #4]
 801c80c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c810:	781b      	ldrb	r3, [r3, #0]
 801c812:	f003 030f 	and.w	r3, r3, #15
 801c816:	b2db      	uxtb	r3, r3
 801c818:	009b      	lsls	r3, r3, #2
 801c81a:	b2db      	uxtb	r3, r3
 801c81c:	2b14      	cmp	r3, #20
 801c81e:	f040 8167 	bne.w	801caf0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c824:	88db      	ldrh	r3, [r3, #6]
 801c826:	b29b      	uxth	r3, r3
 801c828:	4618      	mov	r0, r3
 801c82a:	f7f6 fd23 	bl	8013274 <lwip_htons>
 801c82e:	4603      	mov	r3, r0
 801c830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c834:	b29b      	uxth	r3, r3
 801c836:	00db      	lsls	r3, r3, #3
 801c838:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c83c:	885b      	ldrh	r3, [r3, #2]
 801c83e:	b29b      	uxth	r3, r3
 801c840:	4618      	mov	r0, r3
 801c842:	f7f6 fd17 	bl	8013274 <lwip_htons>
 801c846:	4603      	mov	r3, r0
 801c848:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c84c:	781b      	ldrb	r3, [r3, #0]
 801c84e:	f003 030f 	and.w	r3, r3, #15
 801c852:	b2db      	uxtb	r3, r3
 801c854:	009b      	lsls	r3, r3, #2
 801c856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801c85a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c85e:	b29b      	uxth	r3, r3
 801c860:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c862:	429a      	cmp	r2, r3
 801c864:	f0c0 8146 	bcc.w	801caf4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c86c:	b29b      	uxth	r3, r3
 801c86e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c870:	1ad3      	subs	r3, r2, r3
 801c872:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c874:	6878      	ldr	r0, [r7, #4]
 801c876:	f7f8 fa49 	bl	8014d0c <pbuf_clen>
 801c87a:	4603      	mov	r3, r0
 801c87c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c87e:	4b9f      	ldr	r3, [pc, #636]	; (801cafc <ip4_reass+0x2fc>)
 801c880:	881b      	ldrh	r3, [r3, #0]
 801c882:	461a      	mov	r2, r3
 801c884:	8c3b      	ldrh	r3, [r7, #32]
 801c886:	4413      	add	r3, r2
 801c888:	2b0a      	cmp	r3, #10
 801c88a:	dd10      	ble.n	801c8ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c88c:	8c3b      	ldrh	r3, [r7, #32]
 801c88e:	4619      	mov	r1, r3
 801c890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c892:	f7ff fd81 	bl	801c398 <ip_reass_remove_oldest_datagram>
 801c896:	4603      	mov	r3, r0
 801c898:	2b00      	cmp	r3, #0
 801c89a:	f000 812d 	beq.w	801caf8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c89e:	4b97      	ldr	r3, [pc, #604]	; (801cafc <ip4_reass+0x2fc>)
 801c8a0:	881b      	ldrh	r3, [r3, #0]
 801c8a2:	461a      	mov	r2, r3
 801c8a4:	8c3b      	ldrh	r3, [r7, #32]
 801c8a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c8a8:	2b0a      	cmp	r3, #10
 801c8aa:	f300 8125 	bgt.w	801caf8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c8ae:	4b94      	ldr	r3, [pc, #592]	; (801cb00 <ip4_reass+0x300>)
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	633b      	str	r3, [r7, #48]	; 0x30
 801c8b4:	e015      	b.n	801c8e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8b8:	695a      	ldr	r2, [r3, #20]
 801c8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8bc:	68db      	ldr	r3, [r3, #12]
 801c8be:	429a      	cmp	r2, r3
 801c8c0:	d10c      	bne.n	801c8dc <ip4_reass+0xdc>
 801c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8c4:	699a      	ldr	r2, [r3, #24]
 801c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8c8:	691b      	ldr	r3, [r3, #16]
 801c8ca:	429a      	cmp	r2, r3
 801c8cc:	d106      	bne.n	801c8dc <ip4_reass+0xdc>
 801c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8d0:	899a      	ldrh	r2, [r3, #12]
 801c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8d4:	889b      	ldrh	r3, [r3, #4]
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	429a      	cmp	r2, r3
 801c8da:	d006      	beq.n	801c8ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	633b      	str	r3, [r7, #48]	; 0x30
 801c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d1e6      	bne.n	801c8b6 <ip4_reass+0xb6>
 801c8e8:	e000      	b.n	801c8ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c8ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d109      	bne.n	801c906 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c8f2:	8c3b      	ldrh	r3, [r7, #32]
 801c8f4:	4619      	mov	r1, r3
 801c8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c8f8:	f7ff fdb0 	bl	801c45c <ip_reass_enqueue_new_datagram>
 801c8fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c900:	2b00      	cmp	r3, #0
 801c902:	d11c      	bne.n	801c93e <ip4_reass+0x13e>
      goto nullreturn;
 801c904:	e109      	b.n	801cb1a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c908:	88db      	ldrh	r3, [r3, #6]
 801c90a:	b29b      	uxth	r3, r3
 801c90c:	4618      	mov	r0, r3
 801c90e:	f7f6 fcb1 	bl	8013274 <lwip_htons>
 801c912:	4603      	mov	r3, r0
 801c914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d110      	bne.n	801c93e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c91e:	89db      	ldrh	r3, [r3, #14]
 801c920:	4618      	mov	r0, r3
 801c922:	f7f6 fca7 	bl	8013274 <lwip_htons>
 801c926:	4603      	mov	r3, r0
 801c928:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d006      	beq.n	801c93e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c932:	3308      	adds	r3, #8
 801c934:	2214      	movs	r2, #20
 801c936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c938:	4618      	mov	r0, r3
 801c93a:	f000 fd91 	bl	801d460 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c940:	88db      	ldrh	r3, [r3, #6]
 801c942:	b29b      	uxth	r3, r3
 801c944:	f003 0320 	and.w	r3, r3, #32
 801c948:	2b00      	cmp	r3, #0
 801c94a:	bf0c      	ite	eq
 801c94c:	2301      	moveq	r3, #1
 801c94e:	2300      	movne	r3, #0
 801c950:	b2db      	uxtb	r3, r3
 801c952:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c954:	69fb      	ldr	r3, [r7, #28]
 801c956:	2b00      	cmp	r3, #0
 801c958:	d00e      	beq.n	801c978 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c95a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c95c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c95e:	4413      	add	r3, r2
 801c960:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c962:	8b7a      	ldrh	r2, [r7, #26]
 801c964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c966:	429a      	cmp	r2, r3
 801c968:	f0c0 80a0 	bcc.w	801caac <ip4_reass+0x2ac>
 801c96c:	8b7b      	ldrh	r3, [r7, #26]
 801c96e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801c972:	4293      	cmp	r3, r2
 801c974:	f200 809a 	bhi.w	801caac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c978:	69fa      	ldr	r2, [r7, #28]
 801c97a:	6879      	ldr	r1, [r7, #4]
 801c97c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c97e:	f7ff fdd5 	bl	801c52c <ip_reass_chain_frag_into_datagram_and_validate>
 801c982:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c984:	697b      	ldr	r3, [r7, #20]
 801c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c98a:	f000 8091 	beq.w	801cab0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c98e:	4b5b      	ldr	r3, [pc, #364]	; (801cafc <ip4_reass+0x2fc>)
 801c990:	881a      	ldrh	r2, [r3, #0]
 801c992:	8c3b      	ldrh	r3, [r7, #32]
 801c994:	4413      	add	r3, r2
 801c996:	b29a      	uxth	r2, r3
 801c998:	4b58      	ldr	r3, [pc, #352]	; (801cafc <ip4_reass+0x2fc>)
 801c99a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c99c:	69fb      	ldr	r3, [r7, #28]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d00d      	beq.n	801c9be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c9a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c9a6:	4413      	add	r3, r2
 801c9a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9ac:	8a7a      	ldrh	r2, [r7, #18]
 801c9ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9b2:	7f9b      	ldrb	r3, [r3, #30]
 801c9b4:	f043 0301 	orr.w	r3, r3, #1
 801c9b8:	b2da      	uxtb	r2, r3
 801c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c9be:	697b      	ldr	r3, [r7, #20]
 801c9c0:	2b01      	cmp	r3, #1
 801c9c2:	d171      	bne.n	801caa8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9c6:	8b9b      	ldrh	r3, [r3, #28]
 801c9c8:	3314      	adds	r3, #20
 801c9ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9ce:	685b      	ldr	r3, [r3, #4]
 801c9d0:	685b      	ldr	r3, [r3, #4]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9d8:	685b      	ldr	r3, [r3, #4]
 801c9da:	685b      	ldr	r3, [r3, #4]
 801c9dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9e0:	3308      	adds	r3, #8
 801c9e2:	2214      	movs	r2, #20
 801c9e4:	4619      	mov	r1, r3
 801c9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c9e8:	f000 fd3a 	bl	801d460 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c9ec:	8a3b      	ldrh	r3, [r7, #16]
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f7f6 fc40 	bl	8013274 <lwip_htons>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	461a      	mov	r2, r3
 801c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9fe:	2200      	movs	r2, #0
 801ca00:	719a      	strb	r2, [r3, #6]
 801ca02:	2200      	movs	r2, #0
 801ca04:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca08:	2200      	movs	r2, #0
 801ca0a:	729a      	strb	r2, [r3, #10]
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca12:	685b      	ldr	r3, [r3, #4]
 801ca14:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801ca16:	e00d      	b.n	801ca34 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801ca18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca1a:	685b      	ldr	r3, [r3, #4]
 801ca1c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ca1e:	2114      	movs	r1, #20
 801ca20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ca22:	f7f8 f85f 	bl	8014ae4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801ca26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ca28:	6878      	ldr	r0, [r7, #4]
 801ca2a:	f7f8 f9af 	bl	8014d8c <pbuf_cat>
      r = iprh->next_pbuf;
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d1ee      	bne.n	801ca18 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ca3a:	4b31      	ldr	r3, [pc, #196]	; (801cb00 <ip4_reass+0x300>)
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca40:	429a      	cmp	r2, r3
 801ca42:	d102      	bne.n	801ca4a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ca44:	2300      	movs	r3, #0
 801ca46:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca48:	e010      	b.n	801ca6c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ca4a:	4b2d      	ldr	r3, [pc, #180]	; (801cb00 <ip4_reass+0x300>)
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca50:	e007      	b.n	801ca62 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	d006      	beq.n	801ca6a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d1f4      	bne.n	801ca52 <ip4_reass+0x252>
 801ca68:	e000      	b.n	801ca6c <ip4_reass+0x26c>
          break;
 801ca6a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ca6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ca6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ca70:	f7ff fd2e 	bl	801c4d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ca74:	6878      	ldr	r0, [r7, #4]
 801ca76:	f7f8 f949 	bl	8014d0c <pbuf_clen>
 801ca7a:	4603      	mov	r3, r0
 801ca7c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ca7e:	4b1f      	ldr	r3, [pc, #124]	; (801cafc <ip4_reass+0x2fc>)
 801ca80:	881b      	ldrh	r3, [r3, #0]
 801ca82:	8c3a      	ldrh	r2, [r7, #32]
 801ca84:	429a      	cmp	r2, r3
 801ca86:	d906      	bls.n	801ca96 <ip4_reass+0x296>
 801ca88:	4b1e      	ldr	r3, [pc, #120]	; (801cb04 <ip4_reass+0x304>)
 801ca8a:	f240 229b 	movw	r2, #667	; 0x29b
 801ca8e:	491e      	ldr	r1, [pc, #120]	; (801cb08 <ip4_reass+0x308>)
 801ca90:	481e      	ldr	r0, [pc, #120]	; (801cb0c <ip4_reass+0x30c>)
 801ca92:	f000 fdbf 	bl	801d614 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ca96:	4b19      	ldr	r3, [pc, #100]	; (801cafc <ip4_reass+0x2fc>)
 801ca98:	881a      	ldrh	r2, [r3, #0]
 801ca9a:	8c3b      	ldrh	r3, [r7, #32]
 801ca9c:	1ad3      	subs	r3, r2, r3
 801ca9e:	b29a      	uxth	r2, r3
 801caa0:	4b16      	ldr	r3, [pc, #88]	; (801cafc <ip4_reass+0x2fc>)
 801caa2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	e03c      	b.n	801cb22 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801caa8:	2300      	movs	r3, #0
 801caaa:	e03a      	b.n	801cb22 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801caac:	bf00      	nop
 801caae:	e000      	b.n	801cab2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801cab0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d106      	bne.n	801cac6 <ip4_reass+0x2c6>
 801cab8:	4b12      	ldr	r3, [pc, #72]	; (801cb04 <ip4_reass+0x304>)
 801caba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801cabe:	4914      	ldr	r1, [pc, #80]	; (801cb10 <ip4_reass+0x310>)
 801cac0:	4812      	ldr	r0, [pc, #72]	; (801cb0c <ip4_reass+0x30c>)
 801cac2:	f000 fda7 	bl	801d614 <iprintf>
  if (ipr->p == NULL) {
 801cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cac8:	685b      	ldr	r3, [r3, #4]
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d124      	bne.n	801cb18 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801cace:	4b0c      	ldr	r3, [pc, #48]	; (801cb00 <ip4_reass+0x300>)
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cad4:	429a      	cmp	r2, r3
 801cad6:	d006      	beq.n	801cae6 <ip4_reass+0x2e6>
 801cad8:	4b0a      	ldr	r3, [pc, #40]	; (801cb04 <ip4_reass+0x304>)
 801cada:	f240 22ab 	movw	r2, #683	; 0x2ab
 801cade:	490d      	ldr	r1, [pc, #52]	; (801cb14 <ip4_reass+0x314>)
 801cae0:	480a      	ldr	r0, [pc, #40]	; (801cb0c <ip4_reass+0x30c>)
 801cae2:	f000 fd97 	bl	801d614 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801cae6:	2100      	movs	r1, #0
 801cae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801caea:	f7ff fcf1 	bl	801c4d0 <ip_reass_dequeue_datagram>
 801caee:	e014      	b.n	801cb1a <ip4_reass+0x31a>
    goto nullreturn;
 801caf0:	bf00      	nop
 801caf2:	e012      	b.n	801cb1a <ip4_reass+0x31a>
    goto nullreturn;
 801caf4:	bf00      	nop
 801caf6:	e010      	b.n	801cb1a <ip4_reass+0x31a>
      goto nullreturn;
 801caf8:	bf00      	nop
 801cafa:	e00e      	b.n	801cb1a <ip4_reass+0x31a>
 801cafc:	2401afd4 	.word	0x2401afd4
 801cb00:	2401afd0 	.word	0x2401afd0
 801cb04:	080211dc 	.word	0x080211dc
 801cb08:	0802134c 	.word	0x0802134c
 801cb0c:	08021224 	.word	0x08021224
 801cb10:	08021368 	.word	0x08021368
 801cb14:	08021374 	.word	0x08021374
  }

nullreturn:
 801cb18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	f7f8 f868 	bl	8014bf0 <pbuf_free>
  return NULL;
 801cb20:	2300      	movs	r3, #0
}
 801cb22:	4618      	mov	r0, r3
 801cb24:	3738      	adds	r7, #56	; 0x38
 801cb26:	46bd      	mov	sp, r7
 801cb28:	bd80      	pop	{r7, pc}
 801cb2a:	bf00      	nop

0801cb2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801cb30:	2005      	movs	r0, #5
 801cb32:	f7f7 f93f 	bl	8013db4 <memp_malloc>
 801cb36:	4603      	mov	r3, r0
}
 801cb38:	4618      	mov	r0, r3
 801cb3a:	bd80      	pop	{r7, pc}

0801cb3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801cb3c:	b580      	push	{r7, lr}
 801cb3e:	b082      	sub	sp, #8
 801cb40:	af00      	add	r7, sp, #0
 801cb42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d106      	bne.n	801cb58 <ip_frag_free_pbuf_custom_ref+0x1c>
 801cb4a:	4b07      	ldr	r3, [pc, #28]	; (801cb68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801cb4c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801cb50:	4906      	ldr	r1, [pc, #24]	; (801cb6c <ip_frag_free_pbuf_custom_ref+0x30>)
 801cb52:	4807      	ldr	r0, [pc, #28]	; (801cb70 <ip_frag_free_pbuf_custom_ref+0x34>)
 801cb54:	f000 fd5e 	bl	801d614 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801cb58:	6879      	ldr	r1, [r7, #4]
 801cb5a:	2005      	movs	r0, #5
 801cb5c:	f7f7 f9a0 	bl	8013ea0 <memp_free>
}
 801cb60:	bf00      	nop
 801cb62:	3708      	adds	r7, #8
 801cb64:	46bd      	mov	sp, r7
 801cb66:	bd80      	pop	{r7, pc}
 801cb68:	080211dc 	.word	0x080211dc
 801cb6c:	08021394 	.word	0x08021394
 801cb70:	08021224 	.word	0x08021224

0801cb74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801cb74:	b580      	push	{r7, lr}
 801cb76:	b084      	sub	sp, #16
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d106      	bne.n	801cb94 <ipfrag_free_pbuf_custom+0x20>
 801cb86:	4b11      	ldr	r3, [pc, #68]	; (801cbcc <ipfrag_free_pbuf_custom+0x58>)
 801cb88:	f240 22ce 	movw	r2, #718	; 0x2ce
 801cb8c:	4910      	ldr	r1, [pc, #64]	; (801cbd0 <ipfrag_free_pbuf_custom+0x5c>)
 801cb8e:	4811      	ldr	r0, [pc, #68]	; (801cbd4 <ipfrag_free_pbuf_custom+0x60>)
 801cb90:	f000 fd40 	bl	801d614 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801cb94:	68fa      	ldr	r2, [r7, #12]
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	429a      	cmp	r2, r3
 801cb9a:	d006      	beq.n	801cbaa <ipfrag_free_pbuf_custom+0x36>
 801cb9c:	4b0b      	ldr	r3, [pc, #44]	; (801cbcc <ipfrag_free_pbuf_custom+0x58>)
 801cb9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801cba2:	490d      	ldr	r1, [pc, #52]	; (801cbd8 <ipfrag_free_pbuf_custom+0x64>)
 801cba4:	480b      	ldr	r0, [pc, #44]	; (801cbd4 <ipfrag_free_pbuf_custom+0x60>)
 801cba6:	f000 fd35 	bl	801d614 <iprintf>
  if (pcr->original != NULL) {
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	695b      	ldr	r3, [r3, #20]
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d004      	beq.n	801cbbc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	695b      	ldr	r3, [r3, #20]
 801cbb6:	4618      	mov	r0, r3
 801cbb8:	f7f8 f81a 	bl	8014bf0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801cbbc:	68f8      	ldr	r0, [r7, #12]
 801cbbe:	f7ff ffbd 	bl	801cb3c <ip_frag_free_pbuf_custom_ref>
}
 801cbc2:	bf00      	nop
 801cbc4:	3710      	adds	r7, #16
 801cbc6:	46bd      	mov	sp, r7
 801cbc8:	bd80      	pop	{r7, pc}
 801cbca:	bf00      	nop
 801cbcc:	080211dc 	.word	0x080211dc
 801cbd0:	080213a0 	.word	0x080213a0
 801cbd4:	08021224 	.word	0x08021224
 801cbd8:	080213ac 	.word	0x080213ac

0801cbdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801cbdc:	b580      	push	{r7, lr}
 801cbde:	b094      	sub	sp, #80	; 0x50
 801cbe0:	af02      	add	r7, sp, #8
 801cbe2:	60f8      	str	r0, [r7, #12]
 801cbe4:	60b9      	str	r1, [r7, #8]
 801cbe6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801cbe8:	2300      	movs	r3, #0
 801cbea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801cbee:	68bb      	ldr	r3, [r7, #8]
 801cbf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cbf2:	3b14      	subs	r3, #20
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	da00      	bge.n	801cbfa <ip4_frag+0x1e>
 801cbf8:	3307      	adds	r3, #7
 801cbfa:	10db      	asrs	r3, r3, #3
 801cbfc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801cbfe:	2314      	movs	r3, #20
 801cc00:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	685b      	ldr	r3, [r3, #4]
 801cc06:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801cc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc0e:	781b      	ldrb	r3, [r3, #0]
 801cc10:	f003 030f 	and.w	r3, r3, #15
 801cc14:	b2db      	uxtb	r3, r3
 801cc16:	009b      	lsls	r3, r3, #2
 801cc18:	b2db      	uxtb	r3, r3
 801cc1a:	2b14      	cmp	r3, #20
 801cc1c:	d002      	beq.n	801cc24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801cc1e:	f06f 0305 	mvn.w	r3, #5
 801cc22:	e110      	b.n	801ce46 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	895b      	ldrh	r3, [r3, #10]
 801cc28:	2b13      	cmp	r3, #19
 801cc2a:	d809      	bhi.n	801cc40 <ip4_frag+0x64>
 801cc2c:	4b88      	ldr	r3, [pc, #544]	; (801ce50 <ip4_frag+0x274>)
 801cc2e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801cc32:	4988      	ldr	r1, [pc, #544]	; (801ce54 <ip4_frag+0x278>)
 801cc34:	4888      	ldr	r0, [pc, #544]	; (801ce58 <ip4_frag+0x27c>)
 801cc36:	f000 fced 	bl	801d614 <iprintf>
 801cc3a:	f06f 0305 	mvn.w	r3, #5
 801cc3e:	e102      	b.n	801ce46 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801cc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc42:	88db      	ldrh	r3, [r3, #6]
 801cc44:	b29b      	uxth	r3, r3
 801cc46:	4618      	mov	r0, r3
 801cc48:	f7f6 fb14 	bl	8013274 <lwip_htons>
 801cc4c:	4603      	mov	r3, r0
 801cc4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801cc50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cc52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801cc5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cc5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cc60:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	891b      	ldrh	r3, [r3, #8]
 801cc66:	3b14      	subs	r3, #20
 801cc68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801cc6c:	e0e1      	b.n	801ce32 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801cc6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cc70:	00db      	lsls	r3, r3, #3
 801cc72:	b29b      	uxth	r3, r3
 801cc74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cc78:	4293      	cmp	r3, r2
 801cc7a:	bf28      	it	cs
 801cc7c:	4613      	movcs	r3, r2
 801cc7e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801cc80:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cc84:	2114      	movs	r1, #20
 801cc86:	200e      	movs	r0, #14
 801cc88:	f7f7 fcca 	bl	8014620 <pbuf_alloc>
 801cc8c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	f000 80d5 	beq.w	801ce40 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc98:	895b      	ldrh	r3, [r3, #10]
 801cc9a:	2b13      	cmp	r3, #19
 801cc9c:	d806      	bhi.n	801ccac <ip4_frag+0xd0>
 801cc9e:	4b6c      	ldr	r3, [pc, #432]	; (801ce50 <ip4_frag+0x274>)
 801cca0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801cca4:	496d      	ldr	r1, [pc, #436]	; (801ce5c <ip4_frag+0x280>)
 801cca6:	486c      	ldr	r0, [pc, #432]	; (801ce58 <ip4_frag+0x27c>)
 801cca8:	f000 fcb4 	bl	801d614 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccae:	685b      	ldr	r3, [r3, #4]
 801ccb0:	2214      	movs	r2, #20
 801ccb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f000 fbd3 	bl	801d460 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccbc:	685b      	ldr	r3, [r3, #4]
 801ccbe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ccc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ccc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ccc6:	e064      	b.n	801cd92 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	895a      	ldrh	r2, [r3, #10]
 801cccc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ccce:	1ad3      	subs	r3, r2, r3
 801ccd0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	895b      	ldrh	r3, [r3, #10]
 801ccd6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ccd8:	429a      	cmp	r2, r3
 801ccda:	d906      	bls.n	801ccea <ip4_frag+0x10e>
 801ccdc:	4b5c      	ldr	r3, [pc, #368]	; (801ce50 <ip4_frag+0x274>)
 801ccde:	f240 322d 	movw	r2, #813	; 0x32d
 801cce2:	495f      	ldr	r1, [pc, #380]	; (801ce60 <ip4_frag+0x284>)
 801cce4:	485c      	ldr	r0, [pc, #368]	; (801ce58 <ip4_frag+0x27c>)
 801cce6:	f000 fc95 	bl	801d614 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ccea:	8bfa      	ldrh	r2, [r7, #30]
 801ccec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ccf0:	4293      	cmp	r3, r2
 801ccf2:	bf28      	it	cs
 801ccf4:	4613      	movcs	r3, r2
 801ccf6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ccfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d105      	bne.n	801cd0e <ip4_frag+0x132>
        poff = 0;
 801cd02:	2300      	movs	r3, #0
 801cd04:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	60fb      	str	r3, [r7, #12]
        continue;
 801cd0c:	e041      	b.n	801cd92 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cd0e:	f7ff ff0d 	bl	801cb2c <ip_frag_alloc_pbuf_custom_ref>
 801cd12:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cd14:	69bb      	ldr	r3, [r7, #24]
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d103      	bne.n	801cd22 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cd1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cd1c:	f7f7 ff68 	bl	8014bf0 <pbuf_free>
        goto memerr;
 801cd20:	e08f      	b.n	801ce42 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cd22:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cd28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cd2a:	4413      	add	r3, r2
 801cd2c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801cd30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801cd34:	9201      	str	r2, [sp, #4]
 801cd36:	9300      	str	r3, [sp, #0]
 801cd38:	4603      	mov	r3, r0
 801cd3a:	2241      	movs	r2, #65	; 0x41
 801cd3c:	2000      	movs	r0, #0
 801cd3e:	f7f7 fd9d 	bl	801487c <pbuf_alloced_custom>
 801cd42:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cd44:	697b      	ldr	r3, [r7, #20]
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d106      	bne.n	801cd58 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cd4a:	69b8      	ldr	r0, [r7, #24]
 801cd4c:	f7ff fef6 	bl	801cb3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cd50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cd52:	f7f7 ff4d 	bl	8014bf0 <pbuf_free>
        goto memerr;
 801cd56:	e074      	b.n	801ce42 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cd58:	68f8      	ldr	r0, [r7, #12]
 801cd5a:	f7f7 ffef 	bl	8014d3c <pbuf_ref>
      pcr->original = p;
 801cd5e:	69bb      	ldr	r3, [r7, #24]
 801cd60:	68fa      	ldr	r2, [r7, #12]
 801cd62:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cd64:	69bb      	ldr	r3, [r7, #24]
 801cd66:	4a3f      	ldr	r2, [pc, #252]	; (801ce64 <ip4_frag+0x288>)
 801cd68:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cd6a:	6979      	ldr	r1, [r7, #20]
 801cd6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cd6e:	f7f8 f80d 	bl	8014d8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cd72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801cd76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801cd7a:	1ad3      	subs	r3, r2, r3
 801cd7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801cd80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d004      	beq.n	801cd92 <ip4_frag+0x1b6>
        poff = 0;
 801cd88:	2300      	movs	r3, #0
 801cd8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cd92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d196      	bne.n	801ccc8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cd9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801cd9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801cda0:	4413      	add	r3, r2
 801cda2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cda4:	68bb      	ldr	r3, [r7, #8]
 801cda6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cda8:	f1a3 0213 	sub.w	r2, r3, #19
 801cdac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cdb0:	429a      	cmp	r2, r3
 801cdb2:	bfcc      	ite	gt
 801cdb4:	2301      	movgt	r3, #1
 801cdb6:	2300      	movle	r3, #0
 801cdb8:	b2db      	uxtb	r3, r3
 801cdba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cdbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cdc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cdc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801cdc6:	6a3b      	ldr	r3, [r7, #32]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d002      	beq.n	801cdd2 <ip4_frag+0x1f6>
 801cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d003      	beq.n	801cdda <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cdd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cdd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801cdd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cdda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cddc:	4618      	mov	r0, r3
 801cdde:	f7f6 fa49 	bl	8013274 <lwip_htons>
 801cde2:	4603      	mov	r3, r0
 801cde4:	461a      	mov	r2, r3
 801cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cde8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cdea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801cdec:	3314      	adds	r3, #20
 801cdee:	b29b      	uxth	r3, r3
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f7f6 fa3f 	bl	8013274 <lwip_htons>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	461a      	mov	r2, r3
 801cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdfc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce00:	2200      	movs	r2, #0
 801ce02:	729a      	strb	r2, [r3, #10]
 801ce04:	2200      	movs	r2, #0
 801ce06:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ce08:	68bb      	ldr	r3, [r7, #8]
 801ce0a:	695b      	ldr	r3, [r3, #20]
 801ce0c:	687a      	ldr	r2, [r7, #4]
 801ce0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ce10:	68b8      	ldr	r0, [r7, #8]
 801ce12:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ce14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ce16:	f7f7 feeb 	bl	8014bf0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ce1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ce1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ce20:	1ad3      	subs	r3, r2, r3
 801ce22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ce26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ce2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ce2c:	4413      	add	r3, r2
 801ce2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ce32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	f47f af19 	bne.w	801cc6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	e002      	b.n	801ce46 <ip4_frag+0x26a>
      goto memerr;
 801ce40:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ce42:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ce46:	4618      	mov	r0, r3
 801ce48:	3748      	adds	r7, #72	; 0x48
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	bd80      	pop	{r7, pc}
 801ce4e:	bf00      	nop
 801ce50:	080211dc 	.word	0x080211dc
 801ce54:	080213b8 	.word	0x080213b8
 801ce58:	08021224 	.word	0x08021224
 801ce5c:	080213d4 	.word	0x080213d4
 801ce60:	080213f4 	.word	0x080213f4
 801ce64:	0801cb75 	.word	0x0801cb75

0801ce68 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ce68:	b580      	push	{r7, lr}
 801ce6a:	b086      	sub	sp, #24
 801ce6c:	af00      	add	r7, sp, #0
 801ce6e:	6078      	str	r0, [r7, #4]
 801ce70:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ce72:	230e      	movs	r3, #14
 801ce74:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	895b      	ldrh	r3, [r3, #10]
 801ce7a:	2b0e      	cmp	r3, #14
 801ce7c:	d96e      	bls.n	801cf5c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	7bdb      	ldrb	r3, [r3, #15]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d106      	bne.n	801ce94 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ce86:	683b      	ldr	r3, [r7, #0]
 801ce88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ce8c:	3301      	adds	r3, #1
 801ce8e:	b2da      	uxtb	r2, r3
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	685b      	ldr	r3, [r3, #4]
 801ce98:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ce9a:	693b      	ldr	r3, [r7, #16]
 801ce9c:	7b1a      	ldrb	r2, [r3, #12]
 801ce9e:	7b5b      	ldrb	r3, [r3, #13]
 801cea0:	021b      	lsls	r3, r3, #8
 801cea2:	4313      	orrs	r3, r2
 801cea4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801cea6:	693b      	ldr	r3, [r7, #16]
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	f003 0301 	and.w	r3, r3, #1
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d023      	beq.n	801cefa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ceb2:	693b      	ldr	r3, [r7, #16]
 801ceb4:	781b      	ldrb	r3, [r3, #0]
 801ceb6:	2b01      	cmp	r3, #1
 801ceb8:	d10f      	bne.n	801ceda <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ceba:	693b      	ldr	r3, [r7, #16]
 801cebc:	785b      	ldrb	r3, [r3, #1]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d11b      	bne.n	801cefa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801cec2:	693b      	ldr	r3, [r7, #16]
 801cec4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cec6:	2b5e      	cmp	r3, #94	; 0x5e
 801cec8:	d117      	bne.n	801cefa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	7b5b      	ldrb	r3, [r3, #13]
 801cece:	f043 0310 	orr.w	r3, r3, #16
 801ced2:	b2da      	uxtb	r2, r3
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	735a      	strb	r2, [r3, #13]
 801ced8:	e00f      	b.n	801cefa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ceda:	693b      	ldr	r3, [r7, #16]
 801cedc:	2206      	movs	r2, #6
 801cede:	4928      	ldr	r1, [pc, #160]	; (801cf80 <ethernet_input+0x118>)
 801cee0:	4618      	mov	r0, r3
 801cee2:	f000 faaf 	bl	801d444 <memcmp>
 801cee6:	4603      	mov	r3, r0
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d106      	bne.n	801cefa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	7b5b      	ldrb	r3, [r3, #13]
 801cef0:	f043 0308 	orr.w	r3, r3, #8
 801cef4:	b2da      	uxtb	r2, r3
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cefa:	89fb      	ldrh	r3, [r7, #14]
 801cefc:	2b08      	cmp	r3, #8
 801cefe:	d003      	beq.n	801cf08 <ethernet_input+0xa0>
 801cf00:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801cf04:	d014      	beq.n	801cf30 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cf06:	e032      	b.n	801cf6e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cf08:	683b      	ldr	r3, [r7, #0]
 801cf0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cf0e:	f003 0308 	and.w	r3, r3, #8
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d024      	beq.n	801cf60 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cf16:	8afb      	ldrh	r3, [r7, #22]
 801cf18:	4619      	mov	r1, r3
 801cf1a:	6878      	ldr	r0, [r7, #4]
 801cf1c:	f7f7 fde2 	bl	8014ae4 <pbuf_remove_header>
 801cf20:	4603      	mov	r3, r0
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d11e      	bne.n	801cf64 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cf26:	6839      	ldr	r1, [r7, #0]
 801cf28:	6878      	ldr	r0, [r7, #4]
 801cf2a:	f7fe ff27 	bl	801bd7c <ip4_input>
      break;
 801cf2e:	e013      	b.n	801cf58 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cf30:	683b      	ldr	r3, [r7, #0]
 801cf32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cf36:	f003 0308 	and.w	r3, r3, #8
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d014      	beq.n	801cf68 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cf3e:	8afb      	ldrh	r3, [r7, #22]
 801cf40:	4619      	mov	r1, r3
 801cf42:	6878      	ldr	r0, [r7, #4]
 801cf44:	f7f7 fdce 	bl	8014ae4 <pbuf_remove_header>
 801cf48:	4603      	mov	r3, r0
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d10e      	bne.n	801cf6c <ethernet_input+0x104>
        etharp_input(p, netif);
 801cf4e:	6839      	ldr	r1, [r7, #0]
 801cf50:	6878      	ldr	r0, [r7, #4]
 801cf52:	f7fe f8a1 	bl	801b098 <etharp_input>
      break;
 801cf56:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cf58:	2300      	movs	r3, #0
 801cf5a:	e00c      	b.n	801cf76 <ethernet_input+0x10e>
    goto free_and_return;
 801cf5c:	bf00      	nop
 801cf5e:	e006      	b.n	801cf6e <ethernet_input+0x106>
        goto free_and_return;
 801cf60:	bf00      	nop
 801cf62:	e004      	b.n	801cf6e <ethernet_input+0x106>
        goto free_and_return;
 801cf64:	bf00      	nop
 801cf66:	e002      	b.n	801cf6e <ethernet_input+0x106>
        goto free_and_return;
 801cf68:	bf00      	nop
 801cf6a:	e000      	b.n	801cf6e <ethernet_input+0x106>
        goto free_and_return;
 801cf6c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cf6e:	6878      	ldr	r0, [r7, #4]
 801cf70:	f7f7 fe3e 	bl	8014bf0 <pbuf_free>
  return ERR_OK;
 801cf74:	2300      	movs	r3, #0
}
 801cf76:	4618      	mov	r0, r3
 801cf78:	3718      	adds	r7, #24
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	bd80      	pop	{r7, pc}
 801cf7e:	bf00      	nop
 801cf80:	08021624 	.word	0x08021624

0801cf84 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b086      	sub	sp, #24
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	60f8      	str	r0, [r7, #12]
 801cf8c:	60b9      	str	r1, [r7, #8]
 801cf8e:	607a      	str	r2, [r7, #4]
 801cf90:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cf92:	8c3b      	ldrh	r3, [r7, #32]
 801cf94:	4618      	mov	r0, r3
 801cf96:	f7f6 f96d 	bl	8013274 <lwip_htons>
 801cf9a:	4603      	mov	r3, r0
 801cf9c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cf9e:	210e      	movs	r1, #14
 801cfa0:	68b8      	ldr	r0, [r7, #8]
 801cfa2:	f7f7 fd8f 	bl	8014ac4 <pbuf_add_header>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d125      	bne.n	801cff8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cfac:	68bb      	ldr	r3, [r7, #8]
 801cfae:	685b      	ldr	r3, [r3, #4]
 801cfb0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cfb2:	693b      	ldr	r3, [r7, #16]
 801cfb4:	8afa      	ldrh	r2, [r7, #22]
 801cfb6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cfb8:	693b      	ldr	r3, [r7, #16]
 801cfba:	2206      	movs	r2, #6
 801cfbc:	6839      	ldr	r1, [r7, #0]
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	f000 fa4e 	bl	801d460 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cfc4:	693b      	ldr	r3, [r7, #16]
 801cfc6:	3306      	adds	r3, #6
 801cfc8:	2206      	movs	r2, #6
 801cfca:	6879      	ldr	r1, [r7, #4]
 801cfcc:	4618      	mov	r0, r3
 801cfce:	f000 fa47 	bl	801d460 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cfd8:	2b06      	cmp	r3, #6
 801cfda:	d006      	beq.n	801cfea <ethernet_output+0x66>
 801cfdc:	4b0a      	ldr	r3, [pc, #40]	; (801d008 <ethernet_output+0x84>)
 801cfde:	f44f 7299 	mov.w	r2, #306	; 0x132
 801cfe2:	490a      	ldr	r1, [pc, #40]	; (801d00c <ethernet_output+0x88>)
 801cfe4:	480a      	ldr	r0, [pc, #40]	; (801d010 <ethernet_output+0x8c>)
 801cfe6:	f000 fb15 	bl	801d614 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	699b      	ldr	r3, [r3, #24]
 801cfee:	68b9      	ldr	r1, [r7, #8]
 801cff0:	68f8      	ldr	r0, [r7, #12]
 801cff2:	4798      	blx	r3
 801cff4:	4603      	mov	r3, r0
 801cff6:	e002      	b.n	801cffe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801cff8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801cffa:	f06f 0301 	mvn.w	r3, #1
}
 801cffe:	4618      	mov	r0, r3
 801d000:	3718      	adds	r7, #24
 801d002:	46bd      	mov	sp, r7
 801d004:	bd80      	pop	{r7, pc}
 801d006:	bf00      	nop
 801d008:	08021404 	.word	0x08021404
 801d00c:	0802143c 	.word	0x0802143c
 801d010:	08021470 	.word	0x08021470

0801d014 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d014:	b580      	push	{r7, lr}
 801d016:	b082      	sub	sp, #8
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
 801d01c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801d01e:	683b      	ldr	r3, [r7, #0]
 801d020:	2200      	movs	r2, #0
 801d022:	2104      	movs	r1, #4
 801d024:	4618      	mov	r0, r3
 801d026:	f7f2 fa4d 	bl	800f4c4 <osMessageQueueNew>
 801d02a:	4602      	mov	r2, r0
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d102      	bne.n	801d03e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801d038:	f04f 33ff 	mov.w	r3, #4294967295
 801d03c:	e000      	b.n	801d040 <sys_mbox_new+0x2c>

  return ERR_OK;
 801d03e:	2300      	movs	r3, #0
}
 801d040:	4618      	mov	r0, r3
 801d042:	3708      	adds	r7, #8
 801d044:	46bd      	mov	sp, r7
 801d046:	bd80      	pop	{r7, pc}

0801d048 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	b084      	sub	sp, #16
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
 801d050:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	6818      	ldr	r0, [r3, #0]
 801d056:	4639      	mov	r1, r7
 801d058:	2300      	movs	r3, #0
 801d05a:	2200      	movs	r2, #0
 801d05c:	f7f2 faa6 	bl	800f5ac <osMessageQueuePut>
 801d060:	4603      	mov	r3, r0
 801d062:	2b00      	cmp	r3, #0
 801d064:	d102      	bne.n	801d06c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801d066:	2300      	movs	r3, #0
 801d068:	73fb      	strb	r3, [r7, #15]
 801d06a:	e001      	b.n	801d070 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d06c:	23ff      	movs	r3, #255	; 0xff
 801d06e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d074:	4618      	mov	r0, r3
 801d076:	3710      	adds	r7, #16
 801d078:	46bd      	mov	sp, r7
 801d07a:	bd80      	pop	{r7, pc}

0801d07c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d07c:	b580      	push	{r7, lr}
 801d07e:	b086      	sub	sp, #24
 801d080:	af00      	add	r7, sp, #0
 801d082:	60f8      	str	r0, [r7, #12]
 801d084:	60b9      	str	r1, [r7, #8]
 801d086:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801d088:	f7f1 ff2c 	bl	800eee4 <osKernelGetTickCount>
 801d08c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d013      	beq.n	801d0bc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	6818      	ldr	r0, [r3, #0]
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2200      	movs	r2, #0
 801d09c:	68b9      	ldr	r1, [r7, #8]
 801d09e:	f7f2 fae5 	bl	800f66c <osMessageQueueGet>
 801d0a2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801d0a4:	693b      	ldr	r3, [r7, #16]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d105      	bne.n	801d0b6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801d0aa:	f7f1 ff1b 	bl	800eee4 <osKernelGetTickCount>
 801d0ae:	4602      	mov	r2, r0
 801d0b0:	697b      	ldr	r3, [r7, #20]
 801d0b2:	1ad3      	subs	r3, r2, r3
 801d0b4:	e00f      	b.n	801d0d6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d0b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d0ba:	e00c      	b.n	801d0d6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801d0bc:	68fb      	ldr	r3, [r7, #12]
 801d0be:	6818      	ldr	r0, [r3, #0]
 801d0c0:	f04f 33ff 	mov.w	r3, #4294967295
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	68b9      	ldr	r1, [r7, #8]
 801d0c8:	f7f2 fad0 	bl	800f66c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801d0cc:	f7f1 ff0a 	bl	800eee4 <osKernelGetTickCount>
 801d0d0:	4602      	mov	r2, r0
 801d0d2:	697b      	ldr	r3, [r7, #20]
 801d0d4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	3718      	adds	r7, #24
 801d0da:	46bd      	mov	sp, r7
 801d0dc:	bd80      	pop	{r7, pc}

0801d0de <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d0de:	b480      	push	{r7}
 801d0e0:	b083      	sub	sp, #12
 801d0e2:	af00      	add	r7, sp, #0
 801d0e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d101      	bne.n	801d0f2 <sys_mbox_valid+0x14>
    return 0;
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	e000      	b.n	801d0f4 <sys_mbox_valid+0x16>
  else
    return 1;
 801d0f2:	2301      	movs	r3, #1
}
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	370c      	adds	r7, #12
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0fe:	4770      	bx	lr

0801d100 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d104:	2000      	movs	r0, #0
 801d106:	f7f1 ffaf 	bl	800f068 <osMutexNew>
 801d10a:	4603      	mov	r3, r0
 801d10c:	4a01      	ldr	r2, [pc, #4]	; (801d114 <sys_init+0x14>)
 801d10e:	6013      	str	r3, [r2, #0]
#endif
}
 801d110:	bf00      	nop
 801d112:	bd80      	pop	{r7, pc}
 801d114:	24022250 	.word	0x24022250

0801d118 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d118:	b580      	push	{r7, lr}
 801d11a:	b082      	sub	sp, #8
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d120:	2000      	movs	r0, #0
 801d122:	f7f1 ffa1 	bl	800f068 <osMutexNew>
 801d126:	4602      	mov	r2, r0
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d102      	bne.n	801d13a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d134:	f04f 33ff 	mov.w	r3, #4294967295
 801d138:	e000      	b.n	801d13c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d13a:	2300      	movs	r3, #0
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	3708      	adds	r7, #8
 801d140:	46bd      	mov	sp, r7
 801d142:	bd80      	pop	{r7, pc}

0801d144 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b082      	sub	sp, #8
 801d148:	af00      	add	r7, sp, #0
 801d14a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	f04f 31ff 	mov.w	r1, #4294967295
 801d154:	4618      	mov	r0, r3
 801d156:	f7f2 f80d 	bl	800f174 <osMutexAcquire>
#endif
}
 801d15a:	bf00      	nop
 801d15c:	3708      	adds	r7, #8
 801d15e:	46bd      	mov	sp, r7
 801d160:	bd80      	pop	{r7, pc}

0801d162 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d162:	b580      	push	{r7, lr}
 801d164:	b082      	sub	sp, #8
 801d166:	af00      	add	r7, sp, #0
 801d168:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	4618      	mov	r0, r3
 801d170:	f7f2 f84b 	bl	800f20a <osMutexRelease>
}
 801d174:	bf00      	nop
 801d176:	3708      	adds	r7, #8
 801d178:	46bd      	mov	sp, r7
 801d17a:	bd80      	pop	{r7, pc}

0801d17c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	b08e      	sub	sp, #56	; 0x38
 801d180:	af00      	add	r7, sp, #0
 801d182:	60f8      	str	r0, [r7, #12]
 801d184:	60b9      	str	r1, [r7, #8]
 801d186:	607a      	str	r2, [r7, #4]
 801d188:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d18a:	f107 0314 	add.w	r3, r7, #20
 801d18e:	2224      	movs	r2, #36	; 0x24
 801d190:	2100      	movs	r1, #0
 801d192:	4618      	mov	r0, r3
 801d194:	f000 f98c 	bl	801d4b0 <memset>
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	617b      	str	r3, [r7, #20]
 801d19c:	683b      	ldr	r3, [r7, #0]
 801d19e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d1a4:	f107 0314 	add.w	r3, r7, #20
 801d1a8:	461a      	mov	r2, r3
 801d1aa:	6879      	ldr	r1, [r7, #4]
 801d1ac:	68b8      	ldr	r0, [r7, #8]
 801d1ae:	f7f1 feae 	bl	800ef0e <osThreadNew>
 801d1b2:	4603      	mov	r3, r0
#endif
}
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	3738      	adds	r7, #56	; 0x38
 801d1b8:	46bd      	mov	sp, r7
 801d1ba:	bd80      	pop	{r7, pc}

0801d1bc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d1bc:	b580      	push	{r7, lr}
 801d1be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d1c0:	4b04      	ldr	r3, [pc, #16]	; (801d1d4 <sys_arch_protect+0x18>)
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	f04f 31ff 	mov.w	r1, #4294967295
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f7f1 ffd3 	bl	800f174 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d1ce:	2301      	movs	r3, #1
}
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	bd80      	pop	{r7, pc}
 801d1d4:	24022250 	.word	0x24022250

0801d1d8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b082      	sub	sp, #8
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d1e0:	4b04      	ldr	r3, [pc, #16]	; (801d1f4 <sys_arch_unprotect+0x1c>)
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	f7f2 f810 	bl	800f20a <osMutexRelease>
}
 801d1ea:	bf00      	nop
 801d1ec:	3708      	adds	r7, #8
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	bd80      	pop	{r7, pc}
 801d1f2:	bf00      	nop
 801d1f4:	24022250 	.word	0x24022250

0801d1f8 <std>:
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	b510      	push	{r4, lr}
 801d1fc:	4604      	mov	r4, r0
 801d1fe:	e9c0 3300 	strd	r3, r3, [r0]
 801d202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d206:	6083      	str	r3, [r0, #8]
 801d208:	8181      	strh	r1, [r0, #12]
 801d20a:	6643      	str	r3, [r0, #100]	; 0x64
 801d20c:	81c2      	strh	r2, [r0, #14]
 801d20e:	6183      	str	r3, [r0, #24]
 801d210:	4619      	mov	r1, r3
 801d212:	2208      	movs	r2, #8
 801d214:	305c      	adds	r0, #92	; 0x5c
 801d216:	f000 f94b 	bl	801d4b0 <memset>
 801d21a:	4b05      	ldr	r3, [pc, #20]	; (801d230 <std+0x38>)
 801d21c:	6263      	str	r3, [r4, #36]	; 0x24
 801d21e:	4b05      	ldr	r3, [pc, #20]	; (801d234 <std+0x3c>)
 801d220:	62a3      	str	r3, [r4, #40]	; 0x28
 801d222:	4b05      	ldr	r3, [pc, #20]	; (801d238 <std+0x40>)
 801d224:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d226:	4b05      	ldr	r3, [pc, #20]	; (801d23c <std+0x44>)
 801d228:	6224      	str	r4, [r4, #32]
 801d22a:	6323      	str	r3, [r4, #48]	; 0x30
 801d22c:	bd10      	pop	{r4, pc}
 801d22e:	bf00      	nop
 801d230:	0801d7f9 	.word	0x0801d7f9
 801d234:	0801d81b 	.word	0x0801d81b
 801d238:	0801d853 	.word	0x0801d853
 801d23c:	0801d877 	.word	0x0801d877

0801d240 <_cleanup_r>:
 801d240:	4901      	ldr	r1, [pc, #4]	; (801d248 <_cleanup_r+0x8>)
 801d242:	f000 b8af 	b.w	801d3a4 <_fwalk_reent>
 801d246:	bf00      	nop
 801d248:	0801da75 	.word	0x0801da75

0801d24c <__sfmoreglue>:
 801d24c:	b570      	push	{r4, r5, r6, lr}
 801d24e:	1e4a      	subs	r2, r1, #1
 801d250:	2568      	movs	r5, #104	; 0x68
 801d252:	4355      	muls	r5, r2
 801d254:	460e      	mov	r6, r1
 801d256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d25a:	f000 f981 	bl	801d560 <_malloc_r>
 801d25e:	4604      	mov	r4, r0
 801d260:	b140      	cbz	r0, 801d274 <__sfmoreglue+0x28>
 801d262:	2100      	movs	r1, #0
 801d264:	e9c0 1600 	strd	r1, r6, [r0]
 801d268:	300c      	adds	r0, #12
 801d26a:	60a0      	str	r0, [r4, #8]
 801d26c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d270:	f000 f91e 	bl	801d4b0 <memset>
 801d274:	4620      	mov	r0, r4
 801d276:	bd70      	pop	{r4, r5, r6, pc}

0801d278 <__sfp_lock_acquire>:
 801d278:	4801      	ldr	r0, [pc, #4]	; (801d280 <__sfp_lock_acquire+0x8>)
 801d27a:	f000 b8d8 	b.w	801d42e <__retarget_lock_acquire_recursive>
 801d27e:	bf00      	nop
 801d280:	2402225c 	.word	0x2402225c

0801d284 <__sfp_lock_release>:
 801d284:	4801      	ldr	r0, [pc, #4]	; (801d28c <__sfp_lock_release+0x8>)
 801d286:	f000 b8d3 	b.w	801d430 <__retarget_lock_release_recursive>
 801d28a:	bf00      	nop
 801d28c:	2402225c 	.word	0x2402225c

0801d290 <__sinit_lock_acquire>:
 801d290:	4801      	ldr	r0, [pc, #4]	; (801d298 <__sinit_lock_acquire+0x8>)
 801d292:	f000 b8cc 	b.w	801d42e <__retarget_lock_acquire_recursive>
 801d296:	bf00      	nop
 801d298:	24022257 	.word	0x24022257

0801d29c <__sinit_lock_release>:
 801d29c:	4801      	ldr	r0, [pc, #4]	; (801d2a4 <__sinit_lock_release+0x8>)
 801d29e:	f000 b8c7 	b.w	801d430 <__retarget_lock_release_recursive>
 801d2a2:	bf00      	nop
 801d2a4:	24022257 	.word	0x24022257

0801d2a8 <__sinit>:
 801d2a8:	b510      	push	{r4, lr}
 801d2aa:	4604      	mov	r4, r0
 801d2ac:	f7ff fff0 	bl	801d290 <__sinit_lock_acquire>
 801d2b0:	69a3      	ldr	r3, [r4, #24]
 801d2b2:	b11b      	cbz	r3, 801d2bc <__sinit+0x14>
 801d2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2b8:	f7ff bff0 	b.w	801d29c <__sinit_lock_release>
 801d2bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d2c0:	6523      	str	r3, [r4, #80]	; 0x50
 801d2c2:	4b13      	ldr	r3, [pc, #76]	; (801d310 <__sinit+0x68>)
 801d2c4:	4a13      	ldr	r2, [pc, #76]	; (801d314 <__sinit+0x6c>)
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	62a2      	str	r2, [r4, #40]	; 0x28
 801d2ca:	42a3      	cmp	r3, r4
 801d2cc:	bf04      	itt	eq
 801d2ce:	2301      	moveq	r3, #1
 801d2d0:	61a3      	streq	r3, [r4, #24]
 801d2d2:	4620      	mov	r0, r4
 801d2d4:	f000 f820 	bl	801d318 <__sfp>
 801d2d8:	6060      	str	r0, [r4, #4]
 801d2da:	4620      	mov	r0, r4
 801d2dc:	f000 f81c 	bl	801d318 <__sfp>
 801d2e0:	60a0      	str	r0, [r4, #8]
 801d2e2:	4620      	mov	r0, r4
 801d2e4:	f000 f818 	bl	801d318 <__sfp>
 801d2e8:	2200      	movs	r2, #0
 801d2ea:	60e0      	str	r0, [r4, #12]
 801d2ec:	2104      	movs	r1, #4
 801d2ee:	6860      	ldr	r0, [r4, #4]
 801d2f0:	f7ff ff82 	bl	801d1f8 <std>
 801d2f4:	68a0      	ldr	r0, [r4, #8]
 801d2f6:	2201      	movs	r2, #1
 801d2f8:	2109      	movs	r1, #9
 801d2fa:	f7ff ff7d 	bl	801d1f8 <std>
 801d2fe:	68e0      	ldr	r0, [r4, #12]
 801d300:	2202      	movs	r2, #2
 801d302:	2112      	movs	r1, #18
 801d304:	f7ff ff78 	bl	801d1f8 <std>
 801d308:	2301      	movs	r3, #1
 801d30a:	61a3      	str	r3, [r4, #24]
 801d30c:	e7d2      	b.n	801d2b4 <__sinit+0xc>
 801d30e:	bf00      	nop
 801d310:	08021694 	.word	0x08021694
 801d314:	0801d241 	.word	0x0801d241

0801d318 <__sfp>:
 801d318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d31a:	4607      	mov	r7, r0
 801d31c:	f7ff ffac 	bl	801d278 <__sfp_lock_acquire>
 801d320:	4b1e      	ldr	r3, [pc, #120]	; (801d39c <__sfp+0x84>)
 801d322:	681e      	ldr	r6, [r3, #0]
 801d324:	69b3      	ldr	r3, [r6, #24]
 801d326:	b913      	cbnz	r3, 801d32e <__sfp+0x16>
 801d328:	4630      	mov	r0, r6
 801d32a:	f7ff ffbd 	bl	801d2a8 <__sinit>
 801d32e:	3648      	adds	r6, #72	; 0x48
 801d330:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d334:	3b01      	subs	r3, #1
 801d336:	d503      	bpl.n	801d340 <__sfp+0x28>
 801d338:	6833      	ldr	r3, [r6, #0]
 801d33a:	b30b      	cbz	r3, 801d380 <__sfp+0x68>
 801d33c:	6836      	ldr	r6, [r6, #0]
 801d33e:	e7f7      	b.n	801d330 <__sfp+0x18>
 801d340:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d344:	b9d5      	cbnz	r5, 801d37c <__sfp+0x64>
 801d346:	4b16      	ldr	r3, [pc, #88]	; (801d3a0 <__sfp+0x88>)
 801d348:	60e3      	str	r3, [r4, #12]
 801d34a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d34e:	6665      	str	r5, [r4, #100]	; 0x64
 801d350:	f000 f86c 	bl	801d42c <__retarget_lock_init_recursive>
 801d354:	f7ff ff96 	bl	801d284 <__sfp_lock_release>
 801d358:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d35c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d360:	6025      	str	r5, [r4, #0]
 801d362:	61a5      	str	r5, [r4, #24]
 801d364:	2208      	movs	r2, #8
 801d366:	4629      	mov	r1, r5
 801d368:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d36c:	f000 f8a0 	bl	801d4b0 <memset>
 801d370:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d374:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d378:	4620      	mov	r0, r4
 801d37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d37c:	3468      	adds	r4, #104	; 0x68
 801d37e:	e7d9      	b.n	801d334 <__sfp+0x1c>
 801d380:	2104      	movs	r1, #4
 801d382:	4638      	mov	r0, r7
 801d384:	f7ff ff62 	bl	801d24c <__sfmoreglue>
 801d388:	4604      	mov	r4, r0
 801d38a:	6030      	str	r0, [r6, #0]
 801d38c:	2800      	cmp	r0, #0
 801d38e:	d1d5      	bne.n	801d33c <__sfp+0x24>
 801d390:	f7ff ff78 	bl	801d284 <__sfp_lock_release>
 801d394:	230c      	movs	r3, #12
 801d396:	603b      	str	r3, [r7, #0]
 801d398:	e7ee      	b.n	801d378 <__sfp+0x60>
 801d39a:	bf00      	nop
 801d39c:	08021694 	.word	0x08021694
 801d3a0:	ffff0001 	.word	0xffff0001

0801d3a4 <_fwalk_reent>:
 801d3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3a8:	4606      	mov	r6, r0
 801d3aa:	4688      	mov	r8, r1
 801d3ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d3b0:	2700      	movs	r7, #0
 801d3b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d3b6:	f1b9 0901 	subs.w	r9, r9, #1
 801d3ba:	d505      	bpl.n	801d3c8 <_fwalk_reent+0x24>
 801d3bc:	6824      	ldr	r4, [r4, #0]
 801d3be:	2c00      	cmp	r4, #0
 801d3c0:	d1f7      	bne.n	801d3b2 <_fwalk_reent+0xe>
 801d3c2:	4638      	mov	r0, r7
 801d3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3c8:	89ab      	ldrh	r3, [r5, #12]
 801d3ca:	2b01      	cmp	r3, #1
 801d3cc:	d907      	bls.n	801d3de <_fwalk_reent+0x3a>
 801d3ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d3d2:	3301      	adds	r3, #1
 801d3d4:	d003      	beq.n	801d3de <_fwalk_reent+0x3a>
 801d3d6:	4629      	mov	r1, r5
 801d3d8:	4630      	mov	r0, r6
 801d3da:	47c0      	blx	r8
 801d3dc:	4307      	orrs	r7, r0
 801d3de:	3568      	adds	r5, #104	; 0x68
 801d3e0:	e7e9      	b.n	801d3b6 <_fwalk_reent+0x12>
	...

0801d3e4 <__libc_init_array>:
 801d3e4:	b570      	push	{r4, r5, r6, lr}
 801d3e6:	4d0d      	ldr	r5, [pc, #52]	; (801d41c <__libc_init_array+0x38>)
 801d3e8:	4c0d      	ldr	r4, [pc, #52]	; (801d420 <__libc_init_array+0x3c>)
 801d3ea:	1b64      	subs	r4, r4, r5
 801d3ec:	10a4      	asrs	r4, r4, #2
 801d3ee:	2600      	movs	r6, #0
 801d3f0:	42a6      	cmp	r6, r4
 801d3f2:	d109      	bne.n	801d408 <__libc_init_array+0x24>
 801d3f4:	4d0b      	ldr	r5, [pc, #44]	; (801d424 <__libc_init_array+0x40>)
 801d3f6:	4c0c      	ldr	r4, [pc, #48]	; (801d428 <__libc_init_array+0x44>)
 801d3f8:	f001 f9c4 	bl	801e784 <_init>
 801d3fc:	1b64      	subs	r4, r4, r5
 801d3fe:	10a4      	asrs	r4, r4, #2
 801d400:	2600      	movs	r6, #0
 801d402:	42a6      	cmp	r6, r4
 801d404:	d105      	bne.n	801d412 <__libc_init_array+0x2e>
 801d406:	bd70      	pop	{r4, r5, r6, pc}
 801d408:	f855 3b04 	ldr.w	r3, [r5], #4
 801d40c:	4798      	blx	r3
 801d40e:	3601      	adds	r6, #1
 801d410:	e7ee      	b.n	801d3f0 <__libc_init_array+0xc>
 801d412:	f855 3b04 	ldr.w	r3, [r5], #4
 801d416:	4798      	blx	r3
 801d418:	3601      	adds	r6, #1
 801d41a:	e7f2      	b.n	801d402 <__libc_init_array+0x1e>
 801d41c:	08021788 	.word	0x08021788
 801d420:	08021788 	.word	0x08021788
 801d424:	08021788 	.word	0x08021788
 801d428:	0802178c 	.word	0x0802178c

0801d42c <__retarget_lock_init_recursive>:
 801d42c:	4770      	bx	lr

0801d42e <__retarget_lock_acquire_recursive>:
 801d42e:	4770      	bx	lr

0801d430 <__retarget_lock_release_recursive>:
 801d430:	4770      	bx	lr
	...

0801d434 <malloc>:
 801d434:	4b02      	ldr	r3, [pc, #8]	; (801d440 <malloc+0xc>)
 801d436:	4601      	mov	r1, r0
 801d438:	6818      	ldr	r0, [r3, #0]
 801d43a:	f000 b891 	b.w	801d560 <_malloc_r>
 801d43e:	bf00      	nop
 801d440:	24000074 	.word	0x24000074

0801d444 <memcmp>:
 801d444:	b530      	push	{r4, r5, lr}
 801d446:	3901      	subs	r1, #1
 801d448:	2400      	movs	r4, #0
 801d44a:	42a2      	cmp	r2, r4
 801d44c:	d101      	bne.n	801d452 <memcmp+0xe>
 801d44e:	2000      	movs	r0, #0
 801d450:	e005      	b.n	801d45e <memcmp+0x1a>
 801d452:	5d03      	ldrb	r3, [r0, r4]
 801d454:	3401      	adds	r4, #1
 801d456:	5d0d      	ldrb	r5, [r1, r4]
 801d458:	42ab      	cmp	r3, r5
 801d45a:	d0f6      	beq.n	801d44a <memcmp+0x6>
 801d45c:	1b58      	subs	r0, r3, r5
 801d45e:	bd30      	pop	{r4, r5, pc}

0801d460 <memcpy>:
 801d460:	440a      	add	r2, r1
 801d462:	4291      	cmp	r1, r2
 801d464:	f100 33ff 	add.w	r3, r0, #4294967295
 801d468:	d100      	bne.n	801d46c <memcpy+0xc>
 801d46a:	4770      	bx	lr
 801d46c:	b510      	push	{r4, lr}
 801d46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d472:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d476:	4291      	cmp	r1, r2
 801d478:	d1f9      	bne.n	801d46e <memcpy+0xe>
 801d47a:	bd10      	pop	{r4, pc}

0801d47c <memmove>:
 801d47c:	4288      	cmp	r0, r1
 801d47e:	b510      	push	{r4, lr}
 801d480:	eb01 0402 	add.w	r4, r1, r2
 801d484:	d902      	bls.n	801d48c <memmove+0x10>
 801d486:	4284      	cmp	r4, r0
 801d488:	4623      	mov	r3, r4
 801d48a:	d807      	bhi.n	801d49c <memmove+0x20>
 801d48c:	1e43      	subs	r3, r0, #1
 801d48e:	42a1      	cmp	r1, r4
 801d490:	d008      	beq.n	801d4a4 <memmove+0x28>
 801d492:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d496:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d49a:	e7f8      	b.n	801d48e <memmove+0x12>
 801d49c:	4402      	add	r2, r0
 801d49e:	4601      	mov	r1, r0
 801d4a0:	428a      	cmp	r2, r1
 801d4a2:	d100      	bne.n	801d4a6 <memmove+0x2a>
 801d4a4:	bd10      	pop	{r4, pc}
 801d4a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d4aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d4ae:	e7f7      	b.n	801d4a0 <memmove+0x24>

0801d4b0 <memset>:
 801d4b0:	4402      	add	r2, r0
 801d4b2:	4603      	mov	r3, r0
 801d4b4:	4293      	cmp	r3, r2
 801d4b6:	d100      	bne.n	801d4ba <memset+0xa>
 801d4b8:	4770      	bx	lr
 801d4ba:	f803 1b01 	strb.w	r1, [r3], #1
 801d4be:	e7f9      	b.n	801d4b4 <memset+0x4>

0801d4c0 <_free_r>:
 801d4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d4c2:	2900      	cmp	r1, #0
 801d4c4:	d048      	beq.n	801d558 <_free_r+0x98>
 801d4c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d4ca:	9001      	str	r0, [sp, #4]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	f1a1 0404 	sub.w	r4, r1, #4
 801d4d2:	bfb8      	it	lt
 801d4d4:	18e4      	addlt	r4, r4, r3
 801d4d6:	f000 fb2d 	bl	801db34 <__malloc_lock>
 801d4da:	4a20      	ldr	r2, [pc, #128]	; (801d55c <_free_r+0x9c>)
 801d4dc:	9801      	ldr	r0, [sp, #4]
 801d4de:	6813      	ldr	r3, [r2, #0]
 801d4e0:	4615      	mov	r5, r2
 801d4e2:	b933      	cbnz	r3, 801d4f2 <_free_r+0x32>
 801d4e4:	6063      	str	r3, [r4, #4]
 801d4e6:	6014      	str	r4, [r2, #0]
 801d4e8:	b003      	add	sp, #12
 801d4ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d4ee:	f000 bb27 	b.w	801db40 <__malloc_unlock>
 801d4f2:	42a3      	cmp	r3, r4
 801d4f4:	d90b      	bls.n	801d50e <_free_r+0x4e>
 801d4f6:	6821      	ldr	r1, [r4, #0]
 801d4f8:	1862      	adds	r2, r4, r1
 801d4fa:	4293      	cmp	r3, r2
 801d4fc:	bf04      	itt	eq
 801d4fe:	681a      	ldreq	r2, [r3, #0]
 801d500:	685b      	ldreq	r3, [r3, #4]
 801d502:	6063      	str	r3, [r4, #4]
 801d504:	bf04      	itt	eq
 801d506:	1852      	addeq	r2, r2, r1
 801d508:	6022      	streq	r2, [r4, #0]
 801d50a:	602c      	str	r4, [r5, #0]
 801d50c:	e7ec      	b.n	801d4e8 <_free_r+0x28>
 801d50e:	461a      	mov	r2, r3
 801d510:	685b      	ldr	r3, [r3, #4]
 801d512:	b10b      	cbz	r3, 801d518 <_free_r+0x58>
 801d514:	42a3      	cmp	r3, r4
 801d516:	d9fa      	bls.n	801d50e <_free_r+0x4e>
 801d518:	6811      	ldr	r1, [r2, #0]
 801d51a:	1855      	adds	r5, r2, r1
 801d51c:	42a5      	cmp	r5, r4
 801d51e:	d10b      	bne.n	801d538 <_free_r+0x78>
 801d520:	6824      	ldr	r4, [r4, #0]
 801d522:	4421      	add	r1, r4
 801d524:	1854      	adds	r4, r2, r1
 801d526:	42a3      	cmp	r3, r4
 801d528:	6011      	str	r1, [r2, #0]
 801d52a:	d1dd      	bne.n	801d4e8 <_free_r+0x28>
 801d52c:	681c      	ldr	r4, [r3, #0]
 801d52e:	685b      	ldr	r3, [r3, #4]
 801d530:	6053      	str	r3, [r2, #4]
 801d532:	4421      	add	r1, r4
 801d534:	6011      	str	r1, [r2, #0]
 801d536:	e7d7      	b.n	801d4e8 <_free_r+0x28>
 801d538:	d902      	bls.n	801d540 <_free_r+0x80>
 801d53a:	230c      	movs	r3, #12
 801d53c:	6003      	str	r3, [r0, #0]
 801d53e:	e7d3      	b.n	801d4e8 <_free_r+0x28>
 801d540:	6825      	ldr	r5, [r4, #0]
 801d542:	1961      	adds	r1, r4, r5
 801d544:	428b      	cmp	r3, r1
 801d546:	bf04      	itt	eq
 801d548:	6819      	ldreq	r1, [r3, #0]
 801d54a:	685b      	ldreq	r3, [r3, #4]
 801d54c:	6063      	str	r3, [r4, #4]
 801d54e:	bf04      	itt	eq
 801d550:	1949      	addeq	r1, r1, r5
 801d552:	6021      	streq	r1, [r4, #0]
 801d554:	6054      	str	r4, [r2, #4]
 801d556:	e7c7      	b.n	801d4e8 <_free_r+0x28>
 801d558:	b003      	add	sp, #12
 801d55a:	bd30      	pop	{r4, r5, pc}
 801d55c:	2401afd8 	.word	0x2401afd8

0801d560 <_malloc_r>:
 801d560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d562:	1ccd      	adds	r5, r1, #3
 801d564:	f025 0503 	bic.w	r5, r5, #3
 801d568:	3508      	adds	r5, #8
 801d56a:	2d0c      	cmp	r5, #12
 801d56c:	bf38      	it	cc
 801d56e:	250c      	movcc	r5, #12
 801d570:	2d00      	cmp	r5, #0
 801d572:	4606      	mov	r6, r0
 801d574:	db01      	blt.n	801d57a <_malloc_r+0x1a>
 801d576:	42a9      	cmp	r1, r5
 801d578:	d903      	bls.n	801d582 <_malloc_r+0x22>
 801d57a:	230c      	movs	r3, #12
 801d57c:	6033      	str	r3, [r6, #0]
 801d57e:	2000      	movs	r0, #0
 801d580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d582:	f000 fad7 	bl	801db34 <__malloc_lock>
 801d586:	4921      	ldr	r1, [pc, #132]	; (801d60c <_malloc_r+0xac>)
 801d588:	680a      	ldr	r2, [r1, #0]
 801d58a:	4614      	mov	r4, r2
 801d58c:	b99c      	cbnz	r4, 801d5b6 <_malloc_r+0x56>
 801d58e:	4f20      	ldr	r7, [pc, #128]	; (801d610 <_malloc_r+0xb0>)
 801d590:	683b      	ldr	r3, [r7, #0]
 801d592:	b923      	cbnz	r3, 801d59e <_malloc_r+0x3e>
 801d594:	4621      	mov	r1, r4
 801d596:	4630      	mov	r0, r6
 801d598:	f000 f8fe 	bl	801d798 <_sbrk_r>
 801d59c:	6038      	str	r0, [r7, #0]
 801d59e:	4629      	mov	r1, r5
 801d5a0:	4630      	mov	r0, r6
 801d5a2:	f000 f8f9 	bl	801d798 <_sbrk_r>
 801d5a6:	1c43      	adds	r3, r0, #1
 801d5a8:	d123      	bne.n	801d5f2 <_malloc_r+0x92>
 801d5aa:	230c      	movs	r3, #12
 801d5ac:	6033      	str	r3, [r6, #0]
 801d5ae:	4630      	mov	r0, r6
 801d5b0:	f000 fac6 	bl	801db40 <__malloc_unlock>
 801d5b4:	e7e3      	b.n	801d57e <_malloc_r+0x1e>
 801d5b6:	6823      	ldr	r3, [r4, #0]
 801d5b8:	1b5b      	subs	r3, r3, r5
 801d5ba:	d417      	bmi.n	801d5ec <_malloc_r+0x8c>
 801d5bc:	2b0b      	cmp	r3, #11
 801d5be:	d903      	bls.n	801d5c8 <_malloc_r+0x68>
 801d5c0:	6023      	str	r3, [r4, #0]
 801d5c2:	441c      	add	r4, r3
 801d5c4:	6025      	str	r5, [r4, #0]
 801d5c6:	e004      	b.n	801d5d2 <_malloc_r+0x72>
 801d5c8:	6863      	ldr	r3, [r4, #4]
 801d5ca:	42a2      	cmp	r2, r4
 801d5cc:	bf0c      	ite	eq
 801d5ce:	600b      	streq	r3, [r1, #0]
 801d5d0:	6053      	strne	r3, [r2, #4]
 801d5d2:	4630      	mov	r0, r6
 801d5d4:	f000 fab4 	bl	801db40 <__malloc_unlock>
 801d5d8:	f104 000b 	add.w	r0, r4, #11
 801d5dc:	1d23      	adds	r3, r4, #4
 801d5de:	f020 0007 	bic.w	r0, r0, #7
 801d5e2:	1ac2      	subs	r2, r0, r3
 801d5e4:	d0cc      	beq.n	801d580 <_malloc_r+0x20>
 801d5e6:	1a1b      	subs	r3, r3, r0
 801d5e8:	50a3      	str	r3, [r4, r2]
 801d5ea:	e7c9      	b.n	801d580 <_malloc_r+0x20>
 801d5ec:	4622      	mov	r2, r4
 801d5ee:	6864      	ldr	r4, [r4, #4]
 801d5f0:	e7cc      	b.n	801d58c <_malloc_r+0x2c>
 801d5f2:	1cc4      	adds	r4, r0, #3
 801d5f4:	f024 0403 	bic.w	r4, r4, #3
 801d5f8:	42a0      	cmp	r0, r4
 801d5fa:	d0e3      	beq.n	801d5c4 <_malloc_r+0x64>
 801d5fc:	1a21      	subs	r1, r4, r0
 801d5fe:	4630      	mov	r0, r6
 801d600:	f000 f8ca 	bl	801d798 <_sbrk_r>
 801d604:	3001      	adds	r0, #1
 801d606:	d1dd      	bne.n	801d5c4 <_malloc_r+0x64>
 801d608:	e7cf      	b.n	801d5aa <_malloc_r+0x4a>
 801d60a:	bf00      	nop
 801d60c:	2401afd8 	.word	0x2401afd8
 801d610:	2401afdc 	.word	0x2401afdc

0801d614 <iprintf>:
 801d614:	b40f      	push	{r0, r1, r2, r3}
 801d616:	4b0a      	ldr	r3, [pc, #40]	; (801d640 <iprintf+0x2c>)
 801d618:	b513      	push	{r0, r1, r4, lr}
 801d61a:	681c      	ldr	r4, [r3, #0]
 801d61c:	b124      	cbz	r4, 801d628 <iprintf+0x14>
 801d61e:	69a3      	ldr	r3, [r4, #24]
 801d620:	b913      	cbnz	r3, 801d628 <iprintf+0x14>
 801d622:	4620      	mov	r0, r4
 801d624:	f7ff fe40 	bl	801d2a8 <__sinit>
 801d628:	ab05      	add	r3, sp, #20
 801d62a:	9a04      	ldr	r2, [sp, #16]
 801d62c:	68a1      	ldr	r1, [r4, #8]
 801d62e:	9301      	str	r3, [sp, #4]
 801d630:	4620      	mov	r0, r4
 801d632:	f000 fc11 	bl	801de58 <_vfiprintf_r>
 801d636:	b002      	add	sp, #8
 801d638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d63c:	b004      	add	sp, #16
 801d63e:	4770      	bx	lr
 801d640:	24000074 	.word	0x24000074

0801d644 <rand>:
 801d644:	4b17      	ldr	r3, [pc, #92]	; (801d6a4 <rand+0x60>)
 801d646:	b510      	push	{r4, lr}
 801d648:	681c      	ldr	r4, [r3, #0]
 801d64a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d64c:	b9b3      	cbnz	r3, 801d67c <rand+0x38>
 801d64e:	2018      	movs	r0, #24
 801d650:	f7ff fef0 	bl	801d434 <malloc>
 801d654:	63a0      	str	r0, [r4, #56]	; 0x38
 801d656:	b928      	cbnz	r0, 801d664 <rand+0x20>
 801d658:	4602      	mov	r2, r0
 801d65a:	4b13      	ldr	r3, [pc, #76]	; (801d6a8 <rand+0x64>)
 801d65c:	4813      	ldr	r0, [pc, #76]	; (801d6ac <rand+0x68>)
 801d65e:	214e      	movs	r1, #78	; 0x4e
 801d660:	f000 f954 	bl	801d90c <__assert_func>
 801d664:	4a12      	ldr	r2, [pc, #72]	; (801d6b0 <rand+0x6c>)
 801d666:	4b13      	ldr	r3, [pc, #76]	; (801d6b4 <rand+0x70>)
 801d668:	e9c0 2300 	strd	r2, r3, [r0]
 801d66c:	4b12      	ldr	r3, [pc, #72]	; (801d6b8 <rand+0x74>)
 801d66e:	6083      	str	r3, [r0, #8]
 801d670:	230b      	movs	r3, #11
 801d672:	8183      	strh	r3, [r0, #12]
 801d674:	2201      	movs	r2, #1
 801d676:	2300      	movs	r3, #0
 801d678:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d67c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d67e:	480f      	ldr	r0, [pc, #60]	; (801d6bc <rand+0x78>)
 801d680:	690a      	ldr	r2, [r1, #16]
 801d682:	694b      	ldr	r3, [r1, #20]
 801d684:	4c0e      	ldr	r4, [pc, #56]	; (801d6c0 <rand+0x7c>)
 801d686:	4350      	muls	r0, r2
 801d688:	fb04 0003 	mla	r0, r4, r3, r0
 801d68c:	fba2 3404 	umull	r3, r4, r2, r4
 801d690:	1c5a      	adds	r2, r3, #1
 801d692:	4404      	add	r4, r0
 801d694:	f144 0000 	adc.w	r0, r4, #0
 801d698:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801d69c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d6a0:	bd10      	pop	{r4, pc}
 801d6a2:	bf00      	nop
 801d6a4:	24000074 	.word	0x24000074
 801d6a8:	08021698 	.word	0x08021698
 801d6ac:	080216af 	.word	0x080216af
 801d6b0:	abcd330e 	.word	0xabcd330e
 801d6b4:	e66d1234 	.word	0xe66d1234
 801d6b8:	0005deec 	.word	0x0005deec
 801d6bc:	5851f42d 	.word	0x5851f42d
 801d6c0:	4c957f2d 	.word	0x4c957f2d

0801d6c4 <cleanup_glue>:
 801d6c4:	b538      	push	{r3, r4, r5, lr}
 801d6c6:	460c      	mov	r4, r1
 801d6c8:	6809      	ldr	r1, [r1, #0]
 801d6ca:	4605      	mov	r5, r0
 801d6cc:	b109      	cbz	r1, 801d6d2 <cleanup_glue+0xe>
 801d6ce:	f7ff fff9 	bl	801d6c4 <cleanup_glue>
 801d6d2:	4621      	mov	r1, r4
 801d6d4:	4628      	mov	r0, r5
 801d6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d6da:	f7ff bef1 	b.w	801d4c0 <_free_r>
	...

0801d6e0 <_reclaim_reent>:
 801d6e0:	4b2c      	ldr	r3, [pc, #176]	; (801d794 <_reclaim_reent+0xb4>)
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	4283      	cmp	r3, r0
 801d6e6:	b570      	push	{r4, r5, r6, lr}
 801d6e8:	4604      	mov	r4, r0
 801d6ea:	d051      	beq.n	801d790 <_reclaim_reent+0xb0>
 801d6ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d6ee:	b143      	cbz	r3, 801d702 <_reclaim_reent+0x22>
 801d6f0:	68db      	ldr	r3, [r3, #12]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d14a      	bne.n	801d78c <_reclaim_reent+0xac>
 801d6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d6f8:	6819      	ldr	r1, [r3, #0]
 801d6fa:	b111      	cbz	r1, 801d702 <_reclaim_reent+0x22>
 801d6fc:	4620      	mov	r0, r4
 801d6fe:	f7ff fedf 	bl	801d4c0 <_free_r>
 801d702:	6961      	ldr	r1, [r4, #20]
 801d704:	b111      	cbz	r1, 801d70c <_reclaim_reent+0x2c>
 801d706:	4620      	mov	r0, r4
 801d708:	f7ff feda 	bl	801d4c0 <_free_r>
 801d70c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d70e:	b111      	cbz	r1, 801d716 <_reclaim_reent+0x36>
 801d710:	4620      	mov	r0, r4
 801d712:	f7ff fed5 	bl	801d4c0 <_free_r>
 801d716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d718:	b111      	cbz	r1, 801d720 <_reclaim_reent+0x40>
 801d71a:	4620      	mov	r0, r4
 801d71c:	f7ff fed0 	bl	801d4c0 <_free_r>
 801d720:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801d722:	b111      	cbz	r1, 801d72a <_reclaim_reent+0x4a>
 801d724:	4620      	mov	r0, r4
 801d726:	f7ff fecb 	bl	801d4c0 <_free_r>
 801d72a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d72c:	b111      	cbz	r1, 801d734 <_reclaim_reent+0x54>
 801d72e:	4620      	mov	r0, r4
 801d730:	f7ff fec6 	bl	801d4c0 <_free_r>
 801d734:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d736:	b111      	cbz	r1, 801d73e <_reclaim_reent+0x5e>
 801d738:	4620      	mov	r0, r4
 801d73a:	f7ff fec1 	bl	801d4c0 <_free_r>
 801d73e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801d740:	b111      	cbz	r1, 801d748 <_reclaim_reent+0x68>
 801d742:	4620      	mov	r0, r4
 801d744:	f7ff febc 	bl	801d4c0 <_free_r>
 801d748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d74a:	b111      	cbz	r1, 801d752 <_reclaim_reent+0x72>
 801d74c:	4620      	mov	r0, r4
 801d74e:	f7ff feb7 	bl	801d4c0 <_free_r>
 801d752:	69a3      	ldr	r3, [r4, #24]
 801d754:	b1e3      	cbz	r3, 801d790 <_reclaim_reent+0xb0>
 801d756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d758:	4620      	mov	r0, r4
 801d75a:	4798      	blx	r3
 801d75c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d75e:	b1b9      	cbz	r1, 801d790 <_reclaim_reent+0xb0>
 801d760:	4620      	mov	r0, r4
 801d762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d766:	f7ff bfad 	b.w	801d6c4 <cleanup_glue>
 801d76a:	5949      	ldr	r1, [r1, r5]
 801d76c:	b941      	cbnz	r1, 801d780 <_reclaim_reent+0xa0>
 801d76e:	3504      	adds	r5, #4
 801d770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d772:	2d80      	cmp	r5, #128	; 0x80
 801d774:	68d9      	ldr	r1, [r3, #12]
 801d776:	d1f8      	bne.n	801d76a <_reclaim_reent+0x8a>
 801d778:	4620      	mov	r0, r4
 801d77a:	f7ff fea1 	bl	801d4c0 <_free_r>
 801d77e:	e7ba      	b.n	801d6f6 <_reclaim_reent+0x16>
 801d780:	680e      	ldr	r6, [r1, #0]
 801d782:	4620      	mov	r0, r4
 801d784:	f7ff fe9c 	bl	801d4c0 <_free_r>
 801d788:	4631      	mov	r1, r6
 801d78a:	e7ef      	b.n	801d76c <_reclaim_reent+0x8c>
 801d78c:	2500      	movs	r5, #0
 801d78e:	e7ef      	b.n	801d770 <_reclaim_reent+0x90>
 801d790:	bd70      	pop	{r4, r5, r6, pc}
 801d792:	bf00      	nop
 801d794:	24000074 	.word	0x24000074

0801d798 <_sbrk_r>:
 801d798:	b538      	push	{r3, r4, r5, lr}
 801d79a:	4d06      	ldr	r5, [pc, #24]	; (801d7b4 <_sbrk_r+0x1c>)
 801d79c:	2300      	movs	r3, #0
 801d79e:	4604      	mov	r4, r0
 801d7a0:	4608      	mov	r0, r1
 801d7a2:	602b      	str	r3, [r5, #0]
 801d7a4:	f7e4 fdfc 	bl	80023a0 <_sbrk>
 801d7a8:	1c43      	adds	r3, r0, #1
 801d7aa:	d102      	bne.n	801d7b2 <_sbrk_r+0x1a>
 801d7ac:	682b      	ldr	r3, [r5, #0]
 801d7ae:	b103      	cbz	r3, 801d7b2 <_sbrk_r+0x1a>
 801d7b0:	6023      	str	r3, [r4, #0]
 801d7b2:	bd38      	pop	{r3, r4, r5, pc}
 801d7b4:	2402224c 	.word	0x2402224c

0801d7b8 <siprintf>:
 801d7b8:	b40e      	push	{r1, r2, r3}
 801d7ba:	b500      	push	{lr}
 801d7bc:	b09c      	sub	sp, #112	; 0x70
 801d7be:	ab1d      	add	r3, sp, #116	; 0x74
 801d7c0:	9002      	str	r0, [sp, #8]
 801d7c2:	9006      	str	r0, [sp, #24]
 801d7c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d7c8:	4809      	ldr	r0, [pc, #36]	; (801d7f0 <siprintf+0x38>)
 801d7ca:	9107      	str	r1, [sp, #28]
 801d7cc:	9104      	str	r1, [sp, #16]
 801d7ce:	4909      	ldr	r1, [pc, #36]	; (801d7f4 <siprintf+0x3c>)
 801d7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7d4:	9105      	str	r1, [sp, #20]
 801d7d6:	6800      	ldr	r0, [r0, #0]
 801d7d8:	9301      	str	r3, [sp, #4]
 801d7da:	a902      	add	r1, sp, #8
 801d7dc:	f000 fa12 	bl	801dc04 <_svfiprintf_r>
 801d7e0:	9b02      	ldr	r3, [sp, #8]
 801d7e2:	2200      	movs	r2, #0
 801d7e4:	701a      	strb	r2, [r3, #0]
 801d7e6:	b01c      	add	sp, #112	; 0x70
 801d7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d7ec:	b003      	add	sp, #12
 801d7ee:	4770      	bx	lr
 801d7f0:	24000074 	.word	0x24000074
 801d7f4:	ffff0208 	.word	0xffff0208

0801d7f8 <__sread>:
 801d7f8:	b510      	push	{r4, lr}
 801d7fa:	460c      	mov	r4, r1
 801d7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d800:	f000 fdee 	bl	801e3e0 <_read_r>
 801d804:	2800      	cmp	r0, #0
 801d806:	bfab      	itete	ge
 801d808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d80a:	89a3      	ldrhlt	r3, [r4, #12]
 801d80c:	181b      	addge	r3, r3, r0
 801d80e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d812:	bfac      	ite	ge
 801d814:	6563      	strge	r3, [r4, #84]	; 0x54
 801d816:	81a3      	strhlt	r3, [r4, #12]
 801d818:	bd10      	pop	{r4, pc}

0801d81a <__swrite>:
 801d81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d81e:	461f      	mov	r7, r3
 801d820:	898b      	ldrh	r3, [r1, #12]
 801d822:	05db      	lsls	r3, r3, #23
 801d824:	4605      	mov	r5, r0
 801d826:	460c      	mov	r4, r1
 801d828:	4616      	mov	r6, r2
 801d82a:	d505      	bpl.n	801d838 <__swrite+0x1e>
 801d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d830:	2302      	movs	r3, #2
 801d832:	2200      	movs	r2, #0
 801d834:	f000 f96c 	bl	801db10 <_lseek_r>
 801d838:	89a3      	ldrh	r3, [r4, #12]
 801d83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d842:	81a3      	strh	r3, [r4, #12]
 801d844:	4632      	mov	r2, r6
 801d846:	463b      	mov	r3, r7
 801d848:	4628      	mov	r0, r5
 801d84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d84e:	f000 b84b 	b.w	801d8e8 <_write_r>

0801d852 <__sseek>:
 801d852:	b510      	push	{r4, lr}
 801d854:	460c      	mov	r4, r1
 801d856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d85a:	f000 f959 	bl	801db10 <_lseek_r>
 801d85e:	1c43      	adds	r3, r0, #1
 801d860:	89a3      	ldrh	r3, [r4, #12]
 801d862:	bf15      	itete	ne
 801d864:	6560      	strne	r0, [r4, #84]	; 0x54
 801d866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d86e:	81a3      	strheq	r3, [r4, #12]
 801d870:	bf18      	it	ne
 801d872:	81a3      	strhne	r3, [r4, #12]
 801d874:	bd10      	pop	{r4, pc}

0801d876 <__sclose>:
 801d876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d87a:	f000 b865 	b.w	801d948 <_close_r>

0801d87e <strchr>:
 801d87e:	b2c9      	uxtb	r1, r1
 801d880:	4603      	mov	r3, r0
 801d882:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d886:	b11a      	cbz	r2, 801d890 <strchr+0x12>
 801d888:	428a      	cmp	r2, r1
 801d88a:	d1f9      	bne.n	801d880 <strchr+0x2>
 801d88c:	4618      	mov	r0, r3
 801d88e:	4770      	bx	lr
 801d890:	2900      	cmp	r1, #0
 801d892:	bf18      	it	ne
 801d894:	2300      	movne	r3, #0
 801d896:	e7f9      	b.n	801d88c <strchr+0xe>

0801d898 <strcpy>:
 801d898:	4603      	mov	r3, r0
 801d89a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d89e:	f803 2b01 	strb.w	r2, [r3], #1
 801d8a2:	2a00      	cmp	r2, #0
 801d8a4:	d1f9      	bne.n	801d89a <strcpy+0x2>
 801d8a6:	4770      	bx	lr

0801d8a8 <_vsiprintf_r>:
 801d8a8:	b500      	push	{lr}
 801d8aa:	b09b      	sub	sp, #108	; 0x6c
 801d8ac:	9100      	str	r1, [sp, #0]
 801d8ae:	9104      	str	r1, [sp, #16]
 801d8b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d8b4:	9105      	str	r1, [sp, #20]
 801d8b6:	9102      	str	r1, [sp, #8]
 801d8b8:	4905      	ldr	r1, [pc, #20]	; (801d8d0 <_vsiprintf_r+0x28>)
 801d8ba:	9103      	str	r1, [sp, #12]
 801d8bc:	4669      	mov	r1, sp
 801d8be:	f000 f9a1 	bl	801dc04 <_svfiprintf_r>
 801d8c2:	9b00      	ldr	r3, [sp, #0]
 801d8c4:	2200      	movs	r2, #0
 801d8c6:	701a      	strb	r2, [r3, #0]
 801d8c8:	b01b      	add	sp, #108	; 0x6c
 801d8ca:	f85d fb04 	ldr.w	pc, [sp], #4
 801d8ce:	bf00      	nop
 801d8d0:	ffff0208 	.word	0xffff0208

0801d8d4 <vsiprintf>:
 801d8d4:	4613      	mov	r3, r2
 801d8d6:	460a      	mov	r2, r1
 801d8d8:	4601      	mov	r1, r0
 801d8da:	4802      	ldr	r0, [pc, #8]	; (801d8e4 <vsiprintf+0x10>)
 801d8dc:	6800      	ldr	r0, [r0, #0]
 801d8de:	f7ff bfe3 	b.w	801d8a8 <_vsiprintf_r>
 801d8e2:	bf00      	nop
 801d8e4:	24000074 	.word	0x24000074

0801d8e8 <_write_r>:
 801d8e8:	b538      	push	{r3, r4, r5, lr}
 801d8ea:	4d07      	ldr	r5, [pc, #28]	; (801d908 <_write_r+0x20>)
 801d8ec:	4604      	mov	r4, r0
 801d8ee:	4608      	mov	r0, r1
 801d8f0:	4611      	mov	r1, r2
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	602a      	str	r2, [r5, #0]
 801d8f6:	461a      	mov	r2, r3
 801d8f8:	f7e4 fd01 	bl	80022fe <_write>
 801d8fc:	1c43      	adds	r3, r0, #1
 801d8fe:	d102      	bne.n	801d906 <_write_r+0x1e>
 801d900:	682b      	ldr	r3, [r5, #0]
 801d902:	b103      	cbz	r3, 801d906 <_write_r+0x1e>
 801d904:	6023      	str	r3, [r4, #0]
 801d906:	bd38      	pop	{r3, r4, r5, pc}
 801d908:	2402224c 	.word	0x2402224c

0801d90c <__assert_func>:
 801d90c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d90e:	4614      	mov	r4, r2
 801d910:	461a      	mov	r2, r3
 801d912:	4b09      	ldr	r3, [pc, #36]	; (801d938 <__assert_func+0x2c>)
 801d914:	681b      	ldr	r3, [r3, #0]
 801d916:	4605      	mov	r5, r0
 801d918:	68d8      	ldr	r0, [r3, #12]
 801d91a:	b14c      	cbz	r4, 801d930 <__assert_func+0x24>
 801d91c:	4b07      	ldr	r3, [pc, #28]	; (801d93c <__assert_func+0x30>)
 801d91e:	9100      	str	r1, [sp, #0]
 801d920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d924:	4906      	ldr	r1, [pc, #24]	; (801d940 <__assert_func+0x34>)
 801d926:	462b      	mov	r3, r5
 801d928:	f000 f8e0 	bl	801daec <fiprintf>
 801d92c:	f000 fe2a 	bl	801e584 <abort>
 801d930:	4b04      	ldr	r3, [pc, #16]	; (801d944 <__assert_func+0x38>)
 801d932:	461c      	mov	r4, r3
 801d934:	e7f3      	b.n	801d91e <__assert_func+0x12>
 801d936:	bf00      	nop
 801d938:	24000074 	.word	0x24000074
 801d93c:	0802170e 	.word	0x0802170e
 801d940:	0802171b 	.word	0x0802171b
 801d944:	08021749 	.word	0x08021749

0801d948 <_close_r>:
 801d948:	b538      	push	{r3, r4, r5, lr}
 801d94a:	4d06      	ldr	r5, [pc, #24]	; (801d964 <_close_r+0x1c>)
 801d94c:	2300      	movs	r3, #0
 801d94e:	4604      	mov	r4, r0
 801d950:	4608      	mov	r0, r1
 801d952:	602b      	str	r3, [r5, #0]
 801d954:	f7e4 fcef 	bl	8002336 <_close>
 801d958:	1c43      	adds	r3, r0, #1
 801d95a:	d102      	bne.n	801d962 <_close_r+0x1a>
 801d95c:	682b      	ldr	r3, [r5, #0]
 801d95e:	b103      	cbz	r3, 801d962 <_close_r+0x1a>
 801d960:	6023      	str	r3, [r4, #0]
 801d962:	bd38      	pop	{r3, r4, r5, pc}
 801d964:	2402224c 	.word	0x2402224c

0801d968 <__sflush_r>:
 801d968:	898a      	ldrh	r2, [r1, #12]
 801d96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d96e:	4605      	mov	r5, r0
 801d970:	0710      	lsls	r0, r2, #28
 801d972:	460c      	mov	r4, r1
 801d974:	d458      	bmi.n	801da28 <__sflush_r+0xc0>
 801d976:	684b      	ldr	r3, [r1, #4]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	dc05      	bgt.n	801d988 <__sflush_r+0x20>
 801d97c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d97e:	2b00      	cmp	r3, #0
 801d980:	dc02      	bgt.n	801d988 <__sflush_r+0x20>
 801d982:	2000      	movs	r0, #0
 801d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d98a:	2e00      	cmp	r6, #0
 801d98c:	d0f9      	beq.n	801d982 <__sflush_r+0x1a>
 801d98e:	2300      	movs	r3, #0
 801d990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d994:	682f      	ldr	r7, [r5, #0]
 801d996:	602b      	str	r3, [r5, #0]
 801d998:	d032      	beq.n	801da00 <__sflush_r+0x98>
 801d99a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d99c:	89a3      	ldrh	r3, [r4, #12]
 801d99e:	075a      	lsls	r2, r3, #29
 801d9a0:	d505      	bpl.n	801d9ae <__sflush_r+0x46>
 801d9a2:	6863      	ldr	r3, [r4, #4]
 801d9a4:	1ac0      	subs	r0, r0, r3
 801d9a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d9a8:	b10b      	cbz	r3, 801d9ae <__sflush_r+0x46>
 801d9aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d9ac:	1ac0      	subs	r0, r0, r3
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9b4:	6a21      	ldr	r1, [r4, #32]
 801d9b6:	4628      	mov	r0, r5
 801d9b8:	47b0      	blx	r6
 801d9ba:	1c43      	adds	r3, r0, #1
 801d9bc:	89a3      	ldrh	r3, [r4, #12]
 801d9be:	d106      	bne.n	801d9ce <__sflush_r+0x66>
 801d9c0:	6829      	ldr	r1, [r5, #0]
 801d9c2:	291d      	cmp	r1, #29
 801d9c4:	d82c      	bhi.n	801da20 <__sflush_r+0xb8>
 801d9c6:	4a2a      	ldr	r2, [pc, #168]	; (801da70 <__sflush_r+0x108>)
 801d9c8:	40ca      	lsrs	r2, r1
 801d9ca:	07d6      	lsls	r6, r2, #31
 801d9cc:	d528      	bpl.n	801da20 <__sflush_r+0xb8>
 801d9ce:	2200      	movs	r2, #0
 801d9d0:	6062      	str	r2, [r4, #4]
 801d9d2:	04d9      	lsls	r1, r3, #19
 801d9d4:	6922      	ldr	r2, [r4, #16]
 801d9d6:	6022      	str	r2, [r4, #0]
 801d9d8:	d504      	bpl.n	801d9e4 <__sflush_r+0x7c>
 801d9da:	1c42      	adds	r2, r0, #1
 801d9dc:	d101      	bne.n	801d9e2 <__sflush_r+0x7a>
 801d9de:	682b      	ldr	r3, [r5, #0]
 801d9e0:	b903      	cbnz	r3, 801d9e4 <__sflush_r+0x7c>
 801d9e2:	6560      	str	r0, [r4, #84]	; 0x54
 801d9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d9e6:	602f      	str	r7, [r5, #0]
 801d9e8:	2900      	cmp	r1, #0
 801d9ea:	d0ca      	beq.n	801d982 <__sflush_r+0x1a>
 801d9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d9f0:	4299      	cmp	r1, r3
 801d9f2:	d002      	beq.n	801d9fa <__sflush_r+0x92>
 801d9f4:	4628      	mov	r0, r5
 801d9f6:	f7ff fd63 	bl	801d4c0 <_free_r>
 801d9fa:	2000      	movs	r0, #0
 801d9fc:	6360      	str	r0, [r4, #52]	; 0x34
 801d9fe:	e7c1      	b.n	801d984 <__sflush_r+0x1c>
 801da00:	6a21      	ldr	r1, [r4, #32]
 801da02:	2301      	movs	r3, #1
 801da04:	4628      	mov	r0, r5
 801da06:	47b0      	blx	r6
 801da08:	1c41      	adds	r1, r0, #1
 801da0a:	d1c7      	bne.n	801d99c <__sflush_r+0x34>
 801da0c:	682b      	ldr	r3, [r5, #0]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d0c4      	beq.n	801d99c <__sflush_r+0x34>
 801da12:	2b1d      	cmp	r3, #29
 801da14:	d001      	beq.n	801da1a <__sflush_r+0xb2>
 801da16:	2b16      	cmp	r3, #22
 801da18:	d101      	bne.n	801da1e <__sflush_r+0xb6>
 801da1a:	602f      	str	r7, [r5, #0]
 801da1c:	e7b1      	b.n	801d982 <__sflush_r+0x1a>
 801da1e:	89a3      	ldrh	r3, [r4, #12]
 801da20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da24:	81a3      	strh	r3, [r4, #12]
 801da26:	e7ad      	b.n	801d984 <__sflush_r+0x1c>
 801da28:	690f      	ldr	r7, [r1, #16]
 801da2a:	2f00      	cmp	r7, #0
 801da2c:	d0a9      	beq.n	801d982 <__sflush_r+0x1a>
 801da2e:	0793      	lsls	r3, r2, #30
 801da30:	680e      	ldr	r6, [r1, #0]
 801da32:	bf08      	it	eq
 801da34:	694b      	ldreq	r3, [r1, #20]
 801da36:	600f      	str	r7, [r1, #0]
 801da38:	bf18      	it	ne
 801da3a:	2300      	movne	r3, #0
 801da3c:	eba6 0807 	sub.w	r8, r6, r7
 801da40:	608b      	str	r3, [r1, #8]
 801da42:	f1b8 0f00 	cmp.w	r8, #0
 801da46:	dd9c      	ble.n	801d982 <__sflush_r+0x1a>
 801da48:	6a21      	ldr	r1, [r4, #32]
 801da4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801da4c:	4643      	mov	r3, r8
 801da4e:	463a      	mov	r2, r7
 801da50:	4628      	mov	r0, r5
 801da52:	47b0      	blx	r6
 801da54:	2800      	cmp	r0, #0
 801da56:	dc06      	bgt.n	801da66 <__sflush_r+0xfe>
 801da58:	89a3      	ldrh	r3, [r4, #12]
 801da5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da5e:	81a3      	strh	r3, [r4, #12]
 801da60:	f04f 30ff 	mov.w	r0, #4294967295
 801da64:	e78e      	b.n	801d984 <__sflush_r+0x1c>
 801da66:	4407      	add	r7, r0
 801da68:	eba8 0800 	sub.w	r8, r8, r0
 801da6c:	e7e9      	b.n	801da42 <__sflush_r+0xda>
 801da6e:	bf00      	nop
 801da70:	20400001 	.word	0x20400001

0801da74 <_fflush_r>:
 801da74:	b538      	push	{r3, r4, r5, lr}
 801da76:	690b      	ldr	r3, [r1, #16]
 801da78:	4605      	mov	r5, r0
 801da7a:	460c      	mov	r4, r1
 801da7c:	b913      	cbnz	r3, 801da84 <_fflush_r+0x10>
 801da7e:	2500      	movs	r5, #0
 801da80:	4628      	mov	r0, r5
 801da82:	bd38      	pop	{r3, r4, r5, pc}
 801da84:	b118      	cbz	r0, 801da8e <_fflush_r+0x1a>
 801da86:	6983      	ldr	r3, [r0, #24]
 801da88:	b90b      	cbnz	r3, 801da8e <_fflush_r+0x1a>
 801da8a:	f7ff fc0d 	bl	801d2a8 <__sinit>
 801da8e:	4b14      	ldr	r3, [pc, #80]	; (801dae0 <_fflush_r+0x6c>)
 801da90:	429c      	cmp	r4, r3
 801da92:	d11b      	bne.n	801dacc <_fflush_r+0x58>
 801da94:	686c      	ldr	r4, [r5, #4]
 801da96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d0ef      	beq.n	801da7e <_fflush_r+0xa>
 801da9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801daa0:	07d0      	lsls	r0, r2, #31
 801daa2:	d404      	bmi.n	801daae <_fflush_r+0x3a>
 801daa4:	0599      	lsls	r1, r3, #22
 801daa6:	d402      	bmi.n	801daae <_fflush_r+0x3a>
 801daa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801daaa:	f7ff fcc0 	bl	801d42e <__retarget_lock_acquire_recursive>
 801daae:	4628      	mov	r0, r5
 801dab0:	4621      	mov	r1, r4
 801dab2:	f7ff ff59 	bl	801d968 <__sflush_r>
 801dab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dab8:	07da      	lsls	r2, r3, #31
 801daba:	4605      	mov	r5, r0
 801dabc:	d4e0      	bmi.n	801da80 <_fflush_r+0xc>
 801dabe:	89a3      	ldrh	r3, [r4, #12]
 801dac0:	059b      	lsls	r3, r3, #22
 801dac2:	d4dd      	bmi.n	801da80 <_fflush_r+0xc>
 801dac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dac6:	f7ff fcb3 	bl	801d430 <__retarget_lock_release_recursive>
 801daca:	e7d9      	b.n	801da80 <_fflush_r+0xc>
 801dacc:	4b05      	ldr	r3, [pc, #20]	; (801dae4 <_fflush_r+0x70>)
 801dace:	429c      	cmp	r4, r3
 801dad0:	d101      	bne.n	801dad6 <_fflush_r+0x62>
 801dad2:	68ac      	ldr	r4, [r5, #8]
 801dad4:	e7df      	b.n	801da96 <_fflush_r+0x22>
 801dad6:	4b04      	ldr	r3, [pc, #16]	; (801dae8 <_fflush_r+0x74>)
 801dad8:	429c      	cmp	r4, r3
 801dada:	bf08      	it	eq
 801dadc:	68ec      	ldreq	r4, [r5, #12]
 801dade:	e7da      	b.n	801da96 <_fflush_r+0x22>
 801dae0:	08021654 	.word	0x08021654
 801dae4:	08021674 	.word	0x08021674
 801dae8:	08021634 	.word	0x08021634

0801daec <fiprintf>:
 801daec:	b40e      	push	{r1, r2, r3}
 801daee:	b503      	push	{r0, r1, lr}
 801daf0:	4601      	mov	r1, r0
 801daf2:	ab03      	add	r3, sp, #12
 801daf4:	4805      	ldr	r0, [pc, #20]	; (801db0c <fiprintf+0x20>)
 801daf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dafa:	6800      	ldr	r0, [r0, #0]
 801dafc:	9301      	str	r3, [sp, #4]
 801dafe:	f000 f9ab 	bl	801de58 <_vfiprintf_r>
 801db02:	b002      	add	sp, #8
 801db04:	f85d eb04 	ldr.w	lr, [sp], #4
 801db08:	b003      	add	sp, #12
 801db0a:	4770      	bx	lr
 801db0c:	24000074 	.word	0x24000074

0801db10 <_lseek_r>:
 801db10:	b538      	push	{r3, r4, r5, lr}
 801db12:	4d07      	ldr	r5, [pc, #28]	; (801db30 <_lseek_r+0x20>)
 801db14:	4604      	mov	r4, r0
 801db16:	4608      	mov	r0, r1
 801db18:	4611      	mov	r1, r2
 801db1a:	2200      	movs	r2, #0
 801db1c:	602a      	str	r2, [r5, #0]
 801db1e:	461a      	mov	r2, r3
 801db20:	f7e4 fc30 	bl	8002384 <_lseek>
 801db24:	1c43      	adds	r3, r0, #1
 801db26:	d102      	bne.n	801db2e <_lseek_r+0x1e>
 801db28:	682b      	ldr	r3, [r5, #0]
 801db2a:	b103      	cbz	r3, 801db2e <_lseek_r+0x1e>
 801db2c:	6023      	str	r3, [r4, #0]
 801db2e:	bd38      	pop	{r3, r4, r5, pc}
 801db30:	2402224c 	.word	0x2402224c

0801db34 <__malloc_lock>:
 801db34:	4801      	ldr	r0, [pc, #4]	; (801db3c <__malloc_lock+0x8>)
 801db36:	f7ff bc7a 	b.w	801d42e <__retarget_lock_acquire_recursive>
 801db3a:	bf00      	nop
 801db3c:	24022258 	.word	0x24022258

0801db40 <__malloc_unlock>:
 801db40:	4801      	ldr	r0, [pc, #4]	; (801db48 <__malloc_unlock+0x8>)
 801db42:	f7ff bc75 	b.w	801d430 <__retarget_lock_release_recursive>
 801db46:	bf00      	nop
 801db48:	24022258 	.word	0x24022258

0801db4c <__ssputs_r>:
 801db4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db50:	688e      	ldr	r6, [r1, #8]
 801db52:	429e      	cmp	r6, r3
 801db54:	4682      	mov	sl, r0
 801db56:	460c      	mov	r4, r1
 801db58:	4690      	mov	r8, r2
 801db5a:	461f      	mov	r7, r3
 801db5c:	d838      	bhi.n	801dbd0 <__ssputs_r+0x84>
 801db5e:	898a      	ldrh	r2, [r1, #12]
 801db60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801db64:	d032      	beq.n	801dbcc <__ssputs_r+0x80>
 801db66:	6825      	ldr	r5, [r4, #0]
 801db68:	6909      	ldr	r1, [r1, #16]
 801db6a:	eba5 0901 	sub.w	r9, r5, r1
 801db6e:	6965      	ldr	r5, [r4, #20]
 801db70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801db74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801db78:	3301      	adds	r3, #1
 801db7a:	444b      	add	r3, r9
 801db7c:	106d      	asrs	r5, r5, #1
 801db7e:	429d      	cmp	r5, r3
 801db80:	bf38      	it	cc
 801db82:	461d      	movcc	r5, r3
 801db84:	0553      	lsls	r3, r2, #21
 801db86:	d531      	bpl.n	801dbec <__ssputs_r+0xa0>
 801db88:	4629      	mov	r1, r5
 801db8a:	f7ff fce9 	bl	801d560 <_malloc_r>
 801db8e:	4606      	mov	r6, r0
 801db90:	b950      	cbnz	r0, 801dba8 <__ssputs_r+0x5c>
 801db92:	230c      	movs	r3, #12
 801db94:	f8ca 3000 	str.w	r3, [sl]
 801db98:	89a3      	ldrh	r3, [r4, #12]
 801db9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db9e:	81a3      	strh	r3, [r4, #12]
 801dba0:	f04f 30ff 	mov.w	r0, #4294967295
 801dba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dba8:	6921      	ldr	r1, [r4, #16]
 801dbaa:	464a      	mov	r2, r9
 801dbac:	f7ff fc58 	bl	801d460 <memcpy>
 801dbb0:	89a3      	ldrh	r3, [r4, #12]
 801dbb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dbb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dbba:	81a3      	strh	r3, [r4, #12]
 801dbbc:	6126      	str	r6, [r4, #16]
 801dbbe:	6165      	str	r5, [r4, #20]
 801dbc0:	444e      	add	r6, r9
 801dbc2:	eba5 0509 	sub.w	r5, r5, r9
 801dbc6:	6026      	str	r6, [r4, #0]
 801dbc8:	60a5      	str	r5, [r4, #8]
 801dbca:	463e      	mov	r6, r7
 801dbcc:	42be      	cmp	r6, r7
 801dbce:	d900      	bls.n	801dbd2 <__ssputs_r+0x86>
 801dbd0:	463e      	mov	r6, r7
 801dbd2:	4632      	mov	r2, r6
 801dbd4:	6820      	ldr	r0, [r4, #0]
 801dbd6:	4641      	mov	r1, r8
 801dbd8:	f7ff fc50 	bl	801d47c <memmove>
 801dbdc:	68a3      	ldr	r3, [r4, #8]
 801dbde:	6822      	ldr	r2, [r4, #0]
 801dbe0:	1b9b      	subs	r3, r3, r6
 801dbe2:	4432      	add	r2, r6
 801dbe4:	60a3      	str	r3, [r4, #8]
 801dbe6:	6022      	str	r2, [r4, #0]
 801dbe8:	2000      	movs	r0, #0
 801dbea:	e7db      	b.n	801dba4 <__ssputs_r+0x58>
 801dbec:	462a      	mov	r2, r5
 801dbee:	f000 fd35 	bl	801e65c <_realloc_r>
 801dbf2:	4606      	mov	r6, r0
 801dbf4:	2800      	cmp	r0, #0
 801dbf6:	d1e1      	bne.n	801dbbc <__ssputs_r+0x70>
 801dbf8:	6921      	ldr	r1, [r4, #16]
 801dbfa:	4650      	mov	r0, sl
 801dbfc:	f7ff fc60 	bl	801d4c0 <_free_r>
 801dc00:	e7c7      	b.n	801db92 <__ssputs_r+0x46>
	...

0801dc04 <_svfiprintf_r>:
 801dc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc08:	4698      	mov	r8, r3
 801dc0a:	898b      	ldrh	r3, [r1, #12]
 801dc0c:	061b      	lsls	r3, r3, #24
 801dc0e:	b09d      	sub	sp, #116	; 0x74
 801dc10:	4607      	mov	r7, r0
 801dc12:	460d      	mov	r5, r1
 801dc14:	4614      	mov	r4, r2
 801dc16:	d50e      	bpl.n	801dc36 <_svfiprintf_r+0x32>
 801dc18:	690b      	ldr	r3, [r1, #16]
 801dc1a:	b963      	cbnz	r3, 801dc36 <_svfiprintf_r+0x32>
 801dc1c:	2140      	movs	r1, #64	; 0x40
 801dc1e:	f7ff fc9f 	bl	801d560 <_malloc_r>
 801dc22:	6028      	str	r0, [r5, #0]
 801dc24:	6128      	str	r0, [r5, #16]
 801dc26:	b920      	cbnz	r0, 801dc32 <_svfiprintf_r+0x2e>
 801dc28:	230c      	movs	r3, #12
 801dc2a:	603b      	str	r3, [r7, #0]
 801dc2c:	f04f 30ff 	mov.w	r0, #4294967295
 801dc30:	e0d1      	b.n	801ddd6 <_svfiprintf_r+0x1d2>
 801dc32:	2340      	movs	r3, #64	; 0x40
 801dc34:	616b      	str	r3, [r5, #20]
 801dc36:	2300      	movs	r3, #0
 801dc38:	9309      	str	r3, [sp, #36]	; 0x24
 801dc3a:	2320      	movs	r3, #32
 801dc3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dc40:	f8cd 800c 	str.w	r8, [sp, #12]
 801dc44:	2330      	movs	r3, #48	; 0x30
 801dc46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ddf0 <_svfiprintf_r+0x1ec>
 801dc4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dc4e:	f04f 0901 	mov.w	r9, #1
 801dc52:	4623      	mov	r3, r4
 801dc54:	469a      	mov	sl, r3
 801dc56:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dc5a:	b10a      	cbz	r2, 801dc60 <_svfiprintf_r+0x5c>
 801dc5c:	2a25      	cmp	r2, #37	; 0x25
 801dc5e:	d1f9      	bne.n	801dc54 <_svfiprintf_r+0x50>
 801dc60:	ebba 0b04 	subs.w	fp, sl, r4
 801dc64:	d00b      	beq.n	801dc7e <_svfiprintf_r+0x7a>
 801dc66:	465b      	mov	r3, fp
 801dc68:	4622      	mov	r2, r4
 801dc6a:	4629      	mov	r1, r5
 801dc6c:	4638      	mov	r0, r7
 801dc6e:	f7ff ff6d 	bl	801db4c <__ssputs_r>
 801dc72:	3001      	adds	r0, #1
 801dc74:	f000 80aa 	beq.w	801ddcc <_svfiprintf_r+0x1c8>
 801dc78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc7a:	445a      	add	r2, fp
 801dc7c:	9209      	str	r2, [sp, #36]	; 0x24
 801dc7e:	f89a 3000 	ldrb.w	r3, [sl]
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	f000 80a2 	beq.w	801ddcc <_svfiprintf_r+0x1c8>
 801dc88:	2300      	movs	r3, #0
 801dc8a:	f04f 32ff 	mov.w	r2, #4294967295
 801dc8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc92:	f10a 0a01 	add.w	sl, sl, #1
 801dc96:	9304      	str	r3, [sp, #16]
 801dc98:	9307      	str	r3, [sp, #28]
 801dc9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dc9e:	931a      	str	r3, [sp, #104]	; 0x68
 801dca0:	4654      	mov	r4, sl
 801dca2:	2205      	movs	r2, #5
 801dca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dca8:	4851      	ldr	r0, [pc, #324]	; (801ddf0 <_svfiprintf_r+0x1ec>)
 801dcaa:	f7e2 fb49 	bl	8000340 <memchr>
 801dcae:	9a04      	ldr	r2, [sp, #16]
 801dcb0:	b9d8      	cbnz	r0, 801dcea <_svfiprintf_r+0xe6>
 801dcb2:	06d0      	lsls	r0, r2, #27
 801dcb4:	bf44      	itt	mi
 801dcb6:	2320      	movmi	r3, #32
 801dcb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dcbc:	0711      	lsls	r1, r2, #28
 801dcbe:	bf44      	itt	mi
 801dcc0:	232b      	movmi	r3, #43	; 0x2b
 801dcc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dcc6:	f89a 3000 	ldrb.w	r3, [sl]
 801dcca:	2b2a      	cmp	r3, #42	; 0x2a
 801dccc:	d015      	beq.n	801dcfa <_svfiprintf_r+0xf6>
 801dcce:	9a07      	ldr	r2, [sp, #28]
 801dcd0:	4654      	mov	r4, sl
 801dcd2:	2000      	movs	r0, #0
 801dcd4:	f04f 0c0a 	mov.w	ip, #10
 801dcd8:	4621      	mov	r1, r4
 801dcda:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dcde:	3b30      	subs	r3, #48	; 0x30
 801dce0:	2b09      	cmp	r3, #9
 801dce2:	d94e      	bls.n	801dd82 <_svfiprintf_r+0x17e>
 801dce4:	b1b0      	cbz	r0, 801dd14 <_svfiprintf_r+0x110>
 801dce6:	9207      	str	r2, [sp, #28]
 801dce8:	e014      	b.n	801dd14 <_svfiprintf_r+0x110>
 801dcea:	eba0 0308 	sub.w	r3, r0, r8
 801dcee:	fa09 f303 	lsl.w	r3, r9, r3
 801dcf2:	4313      	orrs	r3, r2
 801dcf4:	9304      	str	r3, [sp, #16]
 801dcf6:	46a2      	mov	sl, r4
 801dcf8:	e7d2      	b.n	801dca0 <_svfiprintf_r+0x9c>
 801dcfa:	9b03      	ldr	r3, [sp, #12]
 801dcfc:	1d19      	adds	r1, r3, #4
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	9103      	str	r1, [sp, #12]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	bfbb      	ittet	lt
 801dd06:	425b      	neglt	r3, r3
 801dd08:	f042 0202 	orrlt.w	r2, r2, #2
 801dd0c:	9307      	strge	r3, [sp, #28]
 801dd0e:	9307      	strlt	r3, [sp, #28]
 801dd10:	bfb8      	it	lt
 801dd12:	9204      	strlt	r2, [sp, #16]
 801dd14:	7823      	ldrb	r3, [r4, #0]
 801dd16:	2b2e      	cmp	r3, #46	; 0x2e
 801dd18:	d10c      	bne.n	801dd34 <_svfiprintf_r+0x130>
 801dd1a:	7863      	ldrb	r3, [r4, #1]
 801dd1c:	2b2a      	cmp	r3, #42	; 0x2a
 801dd1e:	d135      	bne.n	801dd8c <_svfiprintf_r+0x188>
 801dd20:	9b03      	ldr	r3, [sp, #12]
 801dd22:	1d1a      	adds	r2, r3, #4
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	9203      	str	r2, [sp, #12]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	bfb8      	it	lt
 801dd2c:	f04f 33ff 	movlt.w	r3, #4294967295
 801dd30:	3402      	adds	r4, #2
 801dd32:	9305      	str	r3, [sp, #20]
 801dd34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801de00 <_svfiprintf_r+0x1fc>
 801dd38:	7821      	ldrb	r1, [r4, #0]
 801dd3a:	2203      	movs	r2, #3
 801dd3c:	4650      	mov	r0, sl
 801dd3e:	f7e2 faff 	bl	8000340 <memchr>
 801dd42:	b140      	cbz	r0, 801dd56 <_svfiprintf_r+0x152>
 801dd44:	2340      	movs	r3, #64	; 0x40
 801dd46:	eba0 000a 	sub.w	r0, r0, sl
 801dd4a:	fa03 f000 	lsl.w	r0, r3, r0
 801dd4e:	9b04      	ldr	r3, [sp, #16]
 801dd50:	4303      	orrs	r3, r0
 801dd52:	3401      	adds	r4, #1
 801dd54:	9304      	str	r3, [sp, #16]
 801dd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd5a:	4826      	ldr	r0, [pc, #152]	; (801ddf4 <_svfiprintf_r+0x1f0>)
 801dd5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dd60:	2206      	movs	r2, #6
 801dd62:	f7e2 faed 	bl	8000340 <memchr>
 801dd66:	2800      	cmp	r0, #0
 801dd68:	d038      	beq.n	801dddc <_svfiprintf_r+0x1d8>
 801dd6a:	4b23      	ldr	r3, [pc, #140]	; (801ddf8 <_svfiprintf_r+0x1f4>)
 801dd6c:	bb1b      	cbnz	r3, 801ddb6 <_svfiprintf_r+0x1b2>
 801dd6e:	9b03      	ldr	r3, [sp, #12]
 801dd70:	3307      	adds	r3, #7
 801dd72:	f023 0307 	bic.w	r3, r3, #7
 801dd76:	3308      	adds	r3, #8
 801dd78:	9303      	str	r3, [sp, #12]
 801dd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd7c:	4433      	add	r3, r6
 801dd7e:	9309      	str	r3, [sp, #36]	; 0x24
 801dd80:	e767      	b.n	801dc52 <_svfiprintf_r+0x4e>
 801dd82:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd86:	460c      	mov	r4, r1
 801dd88:	2001      	movs	r0, #1
 801dd8a:	e7a5      	b.n	801dcd8 <_svfiprintf_r+0xd4>
 801dd8c:	2300      	movs	r3, #0
 801dd8e:	3401      	adds	r4, #1
 801dd90:	9305      	str	r3, [sp, #20]
 801dd92:	4619      	mov	r1, r3
 801dd94:	f04f 0c0a 	mov.w	ip, #10
 801dd98:	4620      	mov	r0, r4
 801dd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd9e:	3a30      	subs	r2, #48	; 0x30
 801dda0:	2a09      	cmp	r2, #9
 801dda2:	d903      	bls.n	801ddac <_svfiprintf_r+0x1a8>
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d0c5      	beq.n	801dd34 <_svfiprintf_r+0x130>
 801dda8:	9105      	str	r1, [sp, #20]
 801ddaa:	e7c3      	b.n	801dd34 <_svfiprintf_r+0x130>
 801ddac:	fb0c 2101 	mla	r1, ip, r1, r2
 801ddb0:	4604      	mov	r4, r0
 801ddb2:	2301      	movs	r3, #1
 801ddb4:	e7f0      	b.n	801dd98 <_svfiprintf_r+0x194>
 801ddb6:	ab03      	add	r3, sp, #12
 801ddb8:	9300      	str	r3, [sp, #0]
 801ddba:	462a      	mov	r2, r5
 801ddbc:	4b0f      	ldr	r3, [pc, #60]	; (801ddfc <_svfiprintf_r+0x1f8>)
 801ddbe:	a904      	add	r1, sp, #16
 801ddc0:	4638      	mov	r0, r7
 801ddc2:	f3af 8000 	nop.w
 801ddc6:	1c42      	adds	r2, r0, #1
 801ddc8:	4606      	mov	r6, r0
 801ddca:	d1d6      	bne.n	801dd7a <_svfiprintf_r+0x176>
 801ddcc:	89ab      	ldrh	r3, [r5, #12]
 801ddce:	065b      	lsls	r3, r3, #25
 801ddd0:	f53f af2c 	bmi.w	801dc2c <_svfiprintf_r+0x28>
 801ddd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ddd6:	b01d      	add	sp, #116	; 0x74
 801ddd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dddc:	ab03      	add	r3, sp, #12
 801ddde:	9300      	str	r3, [sp, #0]
 801dde0:	462a      	mov	r2, r5
 801dde2:	4b06      	ldr	r3, [pc, #24]	; (801ddfc <_svfiprintf_r+0x1f8>)
 801dde4:	a904      	add	r1, sp, #16
 801dde6:	4638      	mov	r0, r7
 801dde8:	f000 f9d4 	bl	801e194 <_printf_i>
 801ddec:	e7eb      	b.n	801ddc6 <_svfiprintf_r+0x1c2>
 801ddee:	bf00      	nop
 801ddf0:	0802174a 	.word	0x0802174a
 801ddf4:	08021754 	.word	0x08021754
 801ddf8:	00000000 	.word	0x00000000
 801ddfc:	0801db4d 	.word	0x0801db4d
 801de00:	08021750 	.word	0x08021750

0801de04 <__sfputc_r>:
 801de04:	6893      	ldr	r3, [r2, #8]
 801de06:	3b01      	subs	r3, #1
 801de08:	2b00      	cmp	r3, #0
 801de0a:	b410      	push	{r4}
 801de0c:	6093      	str	r3, [r2, #8]
 801de0e:	da08      	bge.n	801de22 <__sfputc_r+0x1e>
 801de10:	6994      	ldr	r4, [r2, #24]
 801de12:	42a3      	cmp	r3, r4
 801de14:	db01      	blt.n	801de1a <__sfputc_r+0x16>
 801de16:	290a      	cmp	r1, #10
 801de18:	d103      	bne.n	801de22 <__sfputc_r+0x1e>
 801de1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de1e:	f000 baf1 	b.w	801e404 <__swbuf_r>
 801de22:	6813      	ldr	r3, [r2, #0]
 801de24:	1c58      	adds	r0, r3, #1
 801de26:	6010      	str	r0, [r2, #0]
 801de28:	7019      	strb	r1, [r3, #0]
 801de2a:	4608      	mov	r0, r1
 801de2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de30:	4770      	bx	lr

0801de32 <__sfputs_r>:
 801de32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de34:	4606      	mov	r6, r0
 801de36:	460f      	mov	r7, r1
 801de38:	4614      	mov	r4, r2
 801de3a:	18d5      	adds	r5, r2, r3
 801de3c:	42ac      	cmp	r4, r5
 801de3e:	d101      	bne.n	801de44 <__sfputs_r+0x12>
 801de40:	2000      	movs	r0, #0
 801de42:	e007      	b.n	801de54 <__sfputs_r+0x22>
 801de44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de48:	463a      	mov	r2, r7
 801de4a:	4630      	mov	r0, r6
 801de4c:	f7ff ffda 	bl	801de04 <__sfputc_r>
 801de50:	1c43      	adds	r3, r0, #1
 801de52:	d1f3      	bne.n	801de3c <__sfputs_r+0xa>
 801de54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801de58 <_vfiprintf_r>:
 801de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de5c:	460d      	mov	r5, r1
 801de5e:	b09d      	sub	sp, #116	; 0x74
 801de60:	4614      	mov	r4, r2
 801de62:	4698      	mov	r8, r3
 801de64:	4606      	mov	r6, r0
 801de66:	b118      	cbz	r0, 801de70 <_vfiprintf_r+0x18>
 801de68:	6983      	ldr	r3, [r0, #24]
 801de6a:	b90b      	cbnz	r3, 801de70 <_vfiprintf_r+0x18>
 801de6c:	f7ff fa1c 	bl	801d2a8 <__sinit>
 801de70:	4b89      	ldr	r3, [pc, #548]	; (801e098 <_vfiprintf_r+0x240>)
 801de72:	429d      	cmp	r5, r3
 801de74:	d11b      	bne.n	801deae <_vfiprintf_r+0x56>
 801de76:	6875      	ldr	r5, [r6, #4]
 801de78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801de7a:	07d9      	lsls	r1, r3, #31
 801de7c:	d405      	bmi.n	801de8a <_vfiprintf_r+0x32>
 801de7e:	89ab      	ldrh	r3, [r5, #12]
 801de80:	059a      	lsls	r2, r3, #22
 801de82:	d402      	bmi.n	801de8a <_vfiprintf_r+0x32>
 801de84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801de86:	f7ff fad2 	bl	801d42e <__retarget_lock_acquire_recursive>
 801de8a:	89ab      	ldrh	r3, [r5, #12]
 801de8c:	071b      	lsls	r3, r3, #28
 801de8e:	d501      	bpl.n	801de94 <_vfiprintf_r+0x3c>
 801de90:	692b      	ldr	r3, [r5, #16]
 801de92:	b9eb      	cbnz	r3, 801ded0 <_vfiprintf_r+0x78>
 801de94:	4629      	mov	r1, r5
 801de96:	4630      	mov	r0, r6
 801de98:	f000 fb06 	bl	801e4a8 <__swsetup_r>
 801de9c:	b1c0      	cbz	r0, 801ded0 <_vfiprintf_r+0x78>
 801de9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dea0:	07dc      	lsls	r4, r3, #31
 801dea2:	d50e      	bpl.n	801dec2 <_vfiprintf_r+0x6a>
 801dea4:	f04f 30ff 	mov.w	r0, #4294967295
 801dea8:	b01d      	add	sp, #116	; 0x74
 801deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deae:	4b7b      	ldr	r3, [pc, #492]	; (801e09c <_vfiprintf_r+0x244>)
 801deb0:	429d      	cmp	r5, r3
 801deb2:	d101      	bne.n	801deb8 <_vfiprintf_r+0x60>
 801deb4:	68b5      	ldr	r5, [r6, #8]
 801deb6:	e7df      	b.n	801de78 <_vfiprintf_r+0x20>
 801deb8:	4b79      	ldr	r3, [pc, #484]	; (801e0a0 <_vfiprintf_r+0x248>)
 801deba:	429d      	cmp	r5, r3
 801debc:	bf08      	it	eq
 801debe:	68f5      	ldreq	r5, [r6, #12]
 801dec0:	e7da      	b.n	801de78 <_vfiprintf_r+0x20>
 801dec2:	89ab      	ldrh	r3, [r5, #12]
 801dec4:	0598      	lsls	r0, r3, #22
 801dec6:	d4ed      	bmi.n	801dea4 <_vfiprintf_r+0x4c>
 801dec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801deca:	f7ff fab1 	bl	801d430 <__retarget_lock_release_recursive>
 801dece:	e7e9      	b.n	801dea4 <_vfiprintf_r+0x4c>
 801ded0:	2300      	movs	r3, #0
 801ded2:	9309      	str	r3, [sp, #36]	; 0x24
 801ded4:	2320      	movs	r3, #32
 801ded6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801deda:	f8cd 800c 	str.w	r8, [sp, #12]
 801dede:	2330      	movs	r3, #48	; 0x30
 801dee0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e0a4 <_vfiprintf_r+0x24c>
 801dee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dee8:	f04f 0901 	mov.w	r9, #1
 801deec:	4623      	mov	r3, r4
 801deee:	469a      	mov	sl, r3
 801def0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801def4:	b10a      	cbz	r2, 801defa <_vfiprintf_r+0xa2>
 801def6:	2a25      	cmp	r2, #37	; 0x25
 801def8:	d1f9      	bne.n	801deee <_vfiprintf_r+0x96>
 801defa:	ebba 0b04 	subs.w	fp, sl, r4
 801defe:	d00b      	beq.n	801df18 <_vfiprintf_r+0xc0>
 801df00:	465b      	mov	r3, fp
 801df02:	4622      	mov	r2, r4
 801df04:	4629      	mov	r1, r5
 801df06:	4630      	mov	r0, r6
 801df08:	f7ff ff93 	bl	801de32 <__sfputs_r>
 801df0c:	3001      	adds	r0, #1
 801df0e:	f000 80aa 	beq.w	801e066 <_vfiprintf_r+0x20e>
 801df12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df14:	445a      	add	r2, fp
 801df16:	9209      	str	r2, [sp, #36]	; 0x24
 801df18:	f89a 3000 	ldrb.w	r3, [sl]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	f000 80a2 	beq.w	801e066 <_vfiprintf_r+0x20e>
 801df22:	2300      	movs	r3, #0
 801df24:	f04f 32ff 	mov.w	r2, #4294967295
 801df28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df2c:	f10a 0a01 	add.w	sl, sl, #1
 801df30:	9304      	str	r3, [sp, #16]
 801df32:	9307      	str	r3, [sp, #28]
 801df34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801df38:	931a      	str	r3, [sp, #104]	; 0x68
 801df3a:	4654      	mov	r4, sl
 801df3c:	2205      	movs	r2, #5
 801df3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df42:	4858      	ldr	r0, [pc, #352]	; (801e0a4 <_vfiprintf_r+0x24c>)
 801df44:	f7e2 f9fc 	bl	8000340 <memchr>
 801df48:	9a04      	ldr	r2, [sp, #16]
 801df4a:	b9d8      	cbnz	r0, 801df84 <_vfiprintf_r+0x12c>
 801df4c:	06d1      	lsls	r1, r2, #27
 801df4e:	bf44      	itt	mi
 801df50:	2320      	movmi	r3, #32
 801df52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df56:	0713      	lsls	r3, r2, #28
 801df58:	bf44      	itt	mi
 801df5a:	232b      	movmi	r3, #43	; 0x2b
 801df5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df60:	f89a 3000 	ldrb.w	r3, [sl]
 801df64:	2b2a      	cmp	r3, #42	; 0x2a
 801df66:	d015      	beq.n	801df94 <_vfiprintf_r+0x13c>
 801df68:	9a07      	ldr	r2, [sp, #28]
 801df6a:	4654      	mov	r4, sl
 801df6c:	2000      	movs	r0, #0
 801df6e:	f04f 0c0a 	mov.w	ip, #10
 801df72:	4621      	mov	r1, r4
 801df74:	f811 3b01 	ldrb.w	r3, [r1], #1
 801df78:	3b30      	subs	r3, #48	; 0x30
 801df7a:	2b09      	cmp	r3, #9
 801df7c:	d94e      	bls.n	801e01c <_vfiprintf_r+0x1c4>
 801df7e:	b1b0      	cbz	r0, 801dfae <_vfiprintf_r+0x156>
 801df80:	9207      	str	r2, [sp, #28]
 801df82:	e014      	b.n	801dfae <_vfiprintf_r+0x156>
 801df84:	eba0 0308 	sub.w	r3, r0, r8
 801df88:	fa09 f303 	lsl.w	r3, r9, r3
 801df8c:	4313      	orrs	r3, r2
 801df8e:	9304      	str	r3, [sp, #16]
 801df90:	46a2      	mov	sl, r4
 801df92:	e7d2      	b.n	801df3a <_vfiprintf_r+0xe2>
 801df94:	9b03      	ldr	r3, [sp, #12]
 801df96:	1d19      	adds	r1, r3, #4
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	9103      	str	r1, [sp, #12]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	bfbb      	ittet	lt
 801dfa0:	425b      	neglt	r3, r3
 801dfa2:	f042 0202 	orrlt.w	r2, r2, #2
 801dfa6:	9307      	strge	r3, [sp, #28]
 801dfa8:	9307      	strlt	r3, [sp, #28]
 801dfaa:	bfb8      	it	lt
 801dfac:	9204      	strlt	r2, [sp, #16]
 801dfae:	7823      	ldrb	r3, [r4, #0]
 801dfb0:	2b2e      	cmp	r3, #46	; 0x2e
 801dfb2:	d10c      	bne.n	801dfce <_vfiprintf_r+0x176>
 801dfb4:	7863      	ldrb	r3, [r4, #1]
 801dfb6:	2b2a      	cmp	r3, #42	; 0x2a
 801dfb8:	d135      	bne.n	801e026 <_vfiprintf_r+0x1ce>
 801dfba:	9b03      	ldr	r3, [sp, #12]
 801dfbc:	1d1a      	adds	r2, r3, #4
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	9203      	str	r2, [sp, #12]
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	bfb8      	it	lt
 801dfc6:	f04f 33ff 	movlt.w	r3, #4294967295
 801dfca:	3402      	adds	r4, #2
 801dfcc:	9305      	str	r3, [sp, #20]
 801dfce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e0b4 <_vfiprintf_r+0x25c>
 801dfd2:	7821      	ldrb	r1, [r4, #0]
 801dfd4:	2203      	movs	r2, #3
 801dfd6:	4650      	mov	r0, sl
 801dfd8:	f7e2 f9b2 	bl	8000340 <memchr>
 801dfdc:	b140      	cbz	r0, 801dff0 <_vfiprintf_r+0x198>
 801dfde:	2340      	movs	r3, #64	; 0x40
 801dfe0:	eba0 000a 	sub.w	r0, r0, sl
 801dfe4:	fa03 f000 	lsl.w	r0, r3, r0
 801dfe8:	9b04      	ldr	r3, [sp, #16]
 801dfea:	4303      	orrs	r3, r0
 801dfec:	3401      	adds	r4, #1
 801dfee:	9304      	str	r3, [sp, #16]
 801dff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dff4:	482c      	ldr	r0, [pc, #176]	; (801e0a8 <_vfiprintf_r+0x250>)
 801dff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dffa:	2206      	movs	r2, #6
 801dffc:	f7e2 f9a0 	bl	8000340 <memchr>
 801e000:	2800      	cmp	r0, #0
 801e002:	d03f      	beq.n	801e084 <_vfiprintf_r+0x22c>
 801e004:	4b29      	ldr	r3, [pc, #164]	; (801e0ac <_vfiprintf_r+0x254>)
 801e006:	bb1b      	cbnz	r3, 801e050 <_vfiprintf_r+0x1f8>
 801e008:	9b03      	ldr	r3, [sp, #12]
 801e00a:	3307      	adds	r3, #7
 801e00c:	f023 0307 	bic.w	r3, r3, #7
 801e010:	3308      	adds	r3, #8
 801e012:	9303      	str	r3, [sp, #12]
 801e014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e016:	443b      	add	r3, r7
 801e018:	9309      	str	r3, [sp, #36]	; 0x24
 801e01a:	e767      	b.n	801deec <_vfiprintf_r+0x94>
 801e01c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e020:	460c      	mov	r4, r1
 801e022:	2001      	movs	r0, #1
 801e024:	e7a5      	b.n	801df72 <_vfiprintf_r+0x11a>
 801e026:	2300      	movs	r3, #0
 801e028:	3401      	adds	r4, #1
 801e02a:	9305      	str	r3, [sp, #20]
 801e02c:	4619      	mov	r1, r3
 801e02e:	f04f 0c0a 	mov.w	ip, #10
 801e032:	4620      	mov	r0, r4
 801e034:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e038:	3a30      	subs	r2, #48	; 0x30
 801e03a:	2a09      	cmp	r2, #9
 801e03c:	d903      	bls.n	801e046 <_vfiprintf_r+0x1ee>
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d0c5      	beq.n	801dfce <_vfiprintf_r+0x176>
 801e042:	9105      	str	r1, [sp, #20]
 801e044:	e7c3      	b.n	801dfce <_vfiprintf_r+0x176>
 801e046:	fb0c 2101 	mla	r1, ip, r1, r2
 801e04a:	4604      	mov	r4, r0
 801e04c:	2301      	movs	r3, #1
 801e04e:	e7f0      	b.n	801e032 <_vfiprintf_r+0x1da>
 801e050:	ab03      	add	r3, sp, #12
 801e052:	9300      	str	r3, [sp, #0]
 801e054:	462a      	mov	r2, r5
 801e056:	4b16      	ldr	r3, [pc, #88]	; (801e0b0 <_vfiprintf_r+0x258>)
 801e058:	a904      	add	r1, sp, #16
 801e05a:	4630      	mov	r0, r6
 801e05c:	f3af 8000 	nop.w
 801e060:	4607      	mov	r7, r0
 801e062:	1c78      	adds	r0, r7, #1
 801e064:	d1d6      	bne.n	801e014 <_vfiprintf_r+0x1bc>
 801e066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e068:	07d9      	lsls	r1, r3, #31
 801e06a:	d405      	bmi.n	801e078 <_vfiprintf_r+0x220>
 801e06c:	89ab      	ldrh	r3, [r5, #12]
 801e06e:	059a      	lsls	r2, r3, #22
 801e070:	d402      	bmi.n	801e078 <_vfiprintf_r+0x220>
 801e072:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e074:	f7ff f9dc 	bl	801d430 <__retarget_lock_release_recursive>
 801e078:	89ab      	ldrh	r3, [r5, #12]
 801e07a:	065b      	lsls	r3, r3, #25
 801e07c:	f53f af12 	bmi.w	801dea4 <_vfiprintf_r+0x4c>
 801e080:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e082:	e711      	b.n	801dea8 <_vfiprintf_r+0x50>
 801e084:	ab03      	add	r3, sp, #12
 801e086:	9300      	str	r3, [sp, #0]
 801e088:	462a      	mov	r2, r5
 801e08a:	4b09      	ldr	r3, [pc, #36]	; (801e0b0 <_vfiprintf_r+0x258>)
 801e08c:	a904      	add	r1, sp, #16
 801e08e:	4630      	mov	r0, r6
 801e090:	f000 f880 	bl	801e194 <_printf_i>
 801e094:	e7e4      	b.n	801e060 <_vfiprintf_r+0x208>
 801e096:	bf00      	nop
 801e098:	08021654 	.word	0x08021654
 801e09c:	08021674 	.word	0x08021674
 801e0a0:	08021634 	.word	0x08021634
 801e0a4:	0802174a 	.word	0x0802174a
 801e0a8:	08021754 	.word	0x08021754
 801e0ac:	00000000 	.word	0x00000000
 801e0b0:	0801de33 	.word	0x0801de33
 801e0b4:	08021750 	.word	0x08021750

0801e0b8 <_printf_common>:
 801e0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0bc:	4616      	mov	r6, r2
 801e0be:	4699      	mov	r9, r3
 801e0c0:	688a      	ldr	r2, [r1, #8]
 801e0c2:	690b      	ldr	r3, [r1, #16]
 801e0c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	bfb8      	it	lt
 801e0cc:	4613      	movlt	r3, r2
 801e0ce:	6033      	str	r3, [r6, #0]
 801e0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e0d4:	4607      	mov	r7, r0
 801e0d6:	460c      	mov	r4, r1
 801e0d8:	b10a      	cbz	r2, 801e0de <_printf_common+0x26>
 801e0da:	3301      	adds	r3, #1
 801e0dc:	6033      	str	r3, [r6, #0]
 801e0de:	6823      	ldr	r3, [r4, #0]
 801e0e0:	0699      	lsls	r1, r3, #26
 801e0e2:	bf42      	ittt	mi
 801e0e4:	6833      	ldrmi	r3, [r6, #0]
 801e0e6:	3302      	addmi	r3, #2
 801e0e8:	6033      	strmi	r3, [r6, #0]
 801e0ea:	6825      	ldr	r5, [r4, #0]
 801e0ec:	f015 0506 	ands.w	r5, r5, #6
 801e0f0:	d106      	bne.n	801e100 <_printf_common+0x48>
 801e0f2:	f104 0a19 	add.w	sl, r4, #25
 801e0f6:	68e3      	ldr	r3, [r4, #12]
 801e0f8:	6832      	ldr	r2, [r6, #0]
 801e0fa:	1a9b      	subs	r3, r3, r2
 801e0fc:	42ab      	cmp	r3, r5
 801e0fe:	dc26      	bgt.n	801e14e <_printf_common+0x96>
 801e100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e104:	1e13      	subs	r3, r2, #0
 801e106:	6822      	ldr	r2, [r4, #0]
 801e108:	bf18      	it	ne
 801e10a:	2301      	movne	r3, #1
 801e10c:	0692      	lsls	r2, r2, #26
 801e10e:	d42b      	bmi.n	801e168 <_printf_common+0xb0>
 801e110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e114:	4649      	mov	r1, r9
 801e116:	4638      	mov	r0, r7
 801e118:	47c0      	blx	r8
 801e11a:	3001      	adds	r0, #1
 801e11c:	d01e      	beq.n	801e15c <_printf_common+0xa4>
 801e11e:	6823      	ldr	r3, [r4, #0]
 801e120:	68e5      	ldr	r5, [r4, #12]
 801e122:	6832      	ldr	r2, [r6, #0]
 801e124:	f003 0306 	and.w	r3, r3, #6
 801e128:	2b04      	cmp	r3, #4
 801e12a:	bf08      	it	eq
 801e12c:	1aad      	subeq	r5, r5, r2
 801e12e:	68a3      	ldr	r3, [r4, #8]
 801e130:	6922      	ldr	r2, [r4, #16]
 801e132:	bf0c      	ite	eq
 801e134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e138:	2500      	movne	r5, #0
 801e13a:	4293      	cmp	r3, r2
 801e13c:	bfc4      	itt	gt
 801e13e:	1a9b      	subgt	r3, r3, r2
 801e140:	18ed      	addgt	r5, r5, r3
 801e142:	2600      	movs	r6, #0
 801e144:	341a      	adds	r4, #26
 801e146:	42b5      	cmp	r5, r6
 801e148:	d11a      	bne.n	801e180 <_printf_common+0xc8>
 801e14a:	2000      	movs	r0, #0
 801e14c:	e008      	b.n	801e160 <_printf_common+0xa8>
 801e14e:	2301      	movs	r3, #1
 801e150:	4652      	mov	r2, sl
 801e152:	4649      	mov	r1, r9
 801e154:	4638      	mov	r0, r7
 801e156:	47c0      	blx	r8
 801e158:	3001      	adds	r0, #1
 801e15a:	d103      	bne.n	801e164 <_printf_common+0xac>
 801e15c:	f04f 30ff 	mov.w	r0, #4294967295
 801e160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e164:	3501      	adds	r5, #1
 801e166:	e7c6      	b.n	801e0f6 <_printf_common+0x3e>
 801e168:	18e1      	adds	r1, r4, r3
 801e16a:	1c5a      	adds	r2, r3, #1
 801e16c:	2030      	movs	r0, #48	; 0x30
 801e16e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e172:	4422      	add	r2, r4
 801e174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e17c:	3302      	adds	r3, #2
 801e17e:	e7c7      	b.n	801e110 <_printf_common+0x58>
 801e180:	2301      	movs	r3, #1
 801e182:	4622      	mov	r2, r4
 801e184:	4649      	mov	r1, r9
 801e186:	4638      	mov	r0, r7
 801e188:	47c0      	blx	r8
 801e18a:	3001      	adds	r0, #1
 801e18c:	d0e6      	beq.n	801e15c <_printf_common+0xa4>
 801e18e:	3601      	adds	r6, #1
 801e190:	e7d9      	b.n	801e146 <_printf_common+0x8e>
	...

0801e194 <_printf_i>:
 801e194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e198:	460c      	mov	r4, r1
 801e19a:	4691      	mov	r9, r2
 801e19c:	7e27      	ldrb	r7, [r4, #24]
 801e19e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e1a0:	2f78      	cmp	r7, #120	; 0x78
 801e1a2:	4680      	mov	r8, r0
 801e1a4:	469a      	mov	sl, r3
 801e1a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e1aa:	d807      	bhi.n	801e1bc <_printf_i+0x28>
 801e1ac:	2f62      	cmp	r7, #98	; 0x62
 801e1ae:	d80a      	bhi.n	801e1c6 <_printf_i+0x32>
 801e1b0:	2f00      	cmp	r7, #0
 801e1b2:	f000 80d8 	beq.w	801e366 <_printf_i+0x1d2>
 801e1b6:	2f58      	cmp	r7, #88	; 0x58
 801e1b8:	f000 80a3 	beq.w	801e302 <_printf_i+0x16e>
 801e1bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e1c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e1c4:	e03a      	b.n	801e23c <_printf_i+0xa8>
 801e1c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e1ca:	2b15      	cmp	r3, #21
 801e1cc:	d8f6      	bhi.n	801e1bc <_printf_i+0x28>
 801e1ce:	a001      	add	r0, pc, #4	; (adr r0, 801e1d4 <_printf_i+0x40>)
 801e1d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e1d4:	0801e22d 	.word	0x0801e22d
 801e1d8:	0801e241 	.word	0x0801e241
 801e1dc:	0801e1bd 	.word	0x0801e1bd
 801e1e0:	0801e1bd 	.word	0x0801e1bd
 801e1e4:	0801e1bd 	.word	0x0801e1bd
 801e1e8:	0801e1bd 	.word	0x0801e1bd
 801e1ec:	0801e241 	.word	0x0801e241
 801e1f0:	0801e1bd 	.word	0x0801e1bd
 801e1f4:	0801e1bd 	.word	0x0801e1bd
 801e1f8:	0801e1bd 	.word	0x0801e1bd
 801e1fc:	0801e1bd 	.word	0x0801e1bd
 801e200:	0801e34d 	.word	0x0801e34d
 801e204:	0801e271 	.word	0x0801e271
 801e208:	0801e32f 	.word	0x0801e32f
 801e20c:	0801e1bd 	.word	0x0801e1bd
 801e210:	0801e1bd 	.word	0x0801e1bd
 801e214:	0801e36f 	.word	0x0801e36f
 801e218:	0801e1bd 	.word	0x0801e1bd
 801e21c:	0801e271 	.word	0x0801e271
 801e220:	0801e1bd 	.word	0x0801e1bd
 801e224:	0801e1bd 	.word	0x0801e1bd
 801e228:	0801e337 	.word	0x0801e337
 801e22c:	680b      	ldr	r3, [r1, #0]
 801e22e:	1d1a      	adds	r2, r3, #4
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	600a      	str	r2, [r1, #0]
 801e234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e23c:	2301      	movs	r3, #1
 801e23e:	e0a3      	b.n	801e388 <_printf_i+0x1f4>
 801e240:	6825      	ldr	r5, [r4, #0]
 801e242:	6808      	ldr	r0, [r1, #0]
 801e244:	062e      	lsls	r6, r5, #24
 801e246:	f100 0304 	add.w	r3, r0, #4
 801e24a:	d50a      	bpl.n	801e262 <_printf_i+0xce>
 801e24c:	6805      	ldr	r5, [r0, #0]
 801e24e:	600b      	str	r3, [r1, #0]
 801e250:	2d00      	cmp	r5, #0
 801e252:	da03      	bge.n	801e25c <_printf_i+0xc8>
 801e254:	232d      	movs	r3, #45	; 0x2d
 801e256:	426d      	negs	r5, r5
 801e258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e25c:	485e      	ldr	r0, [pc, #376]	; (801e3d8 <_printf_i+0x244>)
 801e25e:	230a      	movs	r3, #10
 801e260:	e019      	b.n	801e296 <_printf_i+0x102>
 801e262:	f015 0f40 	tst.w	r5, #64	; 0x40
 801e266:	6805      	ldr	r5, [r0, #0]
 801e268:	600b      	str	r3, [r1, #0]
 801e26a:	bf18      	it	ne
 801e26c:	b22d      	sxthne	r5, r5
 801e26e:	e7ef      	b.n	801e250 <_printf_i+0xbc>
 801e270:	680b      	ldr	r3, [r1, #0]
 801e272:	6825      	ldr	r5, [r4, #0]
 801e274:	1d18      	adds	r0, r3, #4
 801e276:	6008      	str	r0, [r1, #0]
 801e278:	0628      	lsls	r0, r5, #24
 801e27a:	d501      	bpl.n	801e280 <_printf_i+0xec>
 801e27c:	681d      	ldr	r5, [r3, #0]
 801e27e:	e002      	b.n	801e286 <_printf_i+0xf2>
 801e280:	0669      	lsls	r1, r5, #25
 801e282:	d5fb      	bpl.n	801e27c <_printf_i+0xe8>
 801e284:	881d      	ldrh	r5, [r3, #0]
 801e286:	4854      	ldr	r0, [pc, #336]	; (801e3d8 <_printf_i+0x244>)
 801e288:	2f6f      	cmp	r7, #111	; 0x6f
 801e28a:	bf0c      	ite	eq
 801e28c:	2308      	moveq	r3, #8
 801e28e:	230a      	movne	r3, #10
 801e290:	2100      	movs	r1, #0
 801e292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e296:	6866      	ldr	r6, [r4, #4]
 801e298:	60a6      	str	r6, [r4, #8]
 801e29a:	2e00      	cmp	r6, #0
 801e29c:	bfa2      	ittt	ge
 801e29e:	6821      	ldrge	r1, [r4, #0]
 801e2a0:	f021 0104 	bicge.w	r1, r1, #4
 801e2a4:	6021      	strge	r1, [r4, #0]
 801e2a6:	b90d      	cbnz	r5, 801e2ac <_printf_i+0x118>
 801e2a8:	2e00      	cmp	r6, #0
 801e2aa:	d04d      	beq.n	801e348 <_printf_i+0x1b4>
 801e2ac:	4616      	mov	r6, r2
 801e2ae:	fbb5 f1f3 	udiv	r1, r5, r3
 801e2b2:	fb03 5711 	mls	r7, r3, r1, r5
 801e2b6:	5dc7      	ldrb	r7, [r0, r7]
 801e2b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e2bc:	462f      	mov	r7, r5
 801e2be:	42bb      	cmp	r3, r7
 801e2c0:	460d      	mov	r5, r1
 801e2c2:	d9f4      	bls.n	801e2ae <_printf_i+0x11a>
 801e2c4:	2b08      	cmp	r3, #8
 801e2c6:	d10b      	bne.n	801e2e0 <_printf_i+0x14c>
 801e2c8:	6823      	ldr	r3, [r4, #0]
 801e2ca:	07df      	lsls	r7, r3, #31
 801e2cc:	d508      	bpl.n	801e2e0 <_printf_i+0x14c>
 801e2ce:	6923      	ldr	r3, [r4, #16]
 801e2d0:	6861      	ldr	r1, [r4, #4]
 801e2d2:	4299      	cmp	r1, r3
 801e2d4:	bfde      	ittt	le
 801e2d6:	2330      	movle	r3, #48	; 0x30
 801e2d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e2dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e2e0:	1b92      	subs	r2, r2, r6
 801e2e2:	6122      	str	r2, [r4, #16]
 801e2e4:	f8cd a000 	str.w	sl, [sp]
 801e2e8:	464b      	mov	r3, r9
 801e2ea:	aa03      	add	r2, sp, #12
 801e2ec:	4621      	mov	r1, r4
 801e2ee:	4640      	mov	r0, r8
 801e2f0:	f7ff fee2 	bl	801e0b8 <_printf_common>
 801e2f4:	3001      	adds	r0, #1
 801e2f6:	d14c      	bne.n	801e392 <_printf_i+0x1fe>
 801e2f8:	f04f 30ff 	mov.w	r0, #4294967295
 801e2fc:	b004      	add	sp, #16
 801e2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e302:	4835      	ldr	r0, [pc, #212]	; (801e3d8 <_printf_i+0x244>)
 801e304:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e308:	6823      	ldr	r3, [r4, #0]
 801e30a:	680e      	ldr	r6, [r1, #0]
 801e30c:	061f      	lsls	r7, r3, #24
 801e30e:	f856 5b04 	ldr.w	r5, [r6], #4
 801e312:	600e      	str	r6, [r1, #0]
 801e314:	d514      	bpl.n	801e340 <_printf_i+0x1ac>
 801e316:	07d9      	lsls	r1, r3, #31
 801e318:	bf44      	itt	mi
 801e31a:	f043 0320 	orrmi.w	r3, r3, #32
 801e31e:	6023      	strmi	r3, [r4, #0]
 801e320:	b91d      	cbnz	r5, 801e32a <_printf_i+0x196>
 801e322:	6823      	ldr	r3, [r4, #0]
 801e324:	f023 0320 	bic.w	r3, r3, #32
 801e328:	6023      	str	r3, [r4, #0]
 801e32a:	2310      	movs	r3, #16
 801e32c:	e7b0      	b.n	801e290 <_printf_i+0xfc>
 801e32e:	6823      	ldr	r3, [r4, #0]
 801e330:	f043 0320 	orr.w	r3, r3, #32
 801e334:	6023      	str	r3, [r4, #0]
 801e336:	2378      	movs	r3, #120	; 0x78
 801e338:	4828      	ldr	r0, [pc, #160]	; (801e3dc <_printf_i+0x248>)
 801e33a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e33e:	e7e3      	b.n	801e308 <_printf_i+0x174>
 801e340:	065e      	lsls	r6, r3, #25
 801e342:	bf48      	it	mi
 801e344:	b2ad      	uxthmi	r5, r5
 801e346:	e7e6      	b.n	801e316 <_printf_i+0x182>
 801e348:	4616      	mov	r6, r2
 801e34a:	e7bb      	b.n	801e2c4 <_printf_i+0x130>
 801e34c:	680b      	ldr	r3, [r1, #0]
 801e34e:	6826      	ldr	r6, [r4, #0]
 801e350:	6960      	ldr	r0, [r4, #20]
 801e352:	1d1d      	adds	r5, r3, #4
 801e354:	600d      	str	r5, [r1, #0]
 801e356:	0635      	lsls	r5, r6, #24
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	d501      	bpl.n	801e360 <_printf_i+0x1cc>
 801e35c:	6018      	str	r0, [r3, #0]
 801e35e:	e002      	b.n	801e366 <_printf_i+0x1d2>
 801e360:	0671      	lsls	r1, r6, #25
 801e362:	d5fb      	bpl.n	801e35c <_printf_i+0x1c8>
 801e364:	8018      	strh	r0, [r3, #0]
 801e366:	2300      	movs	r3, #0
 801e368:	6123      	str	r3, [r4, #16]
 801e36a:	4616      	mov	r6, r2
 801e36c:	e7ba      	b.n	801e2e4 <_printf_i+0x150>
 801e36e:	680b      	ldr	r3, [r1, #0]
 801e370:	1d1a      	adds	r2, r3, #4
 801e372:	600a      	str	r2, [r1, #0]
 801e374:	681e      	ldr	r6, [r3, #0]
 801e376:	6862      	ldr	r2, [r4, #4]
 801e378:	2100      	movs	r1, #0
 801e37a:	4630      	mov	r0, r6
 801e37c:	f7e1 ffe0 	bl	8000340 <memchr>
 801e380:	b108      	cbz	r0, 801e386 <_printf_i+0x1f2>
 801e382:	1b80      	subs	r0, r0, r6
 801e384:	6060      	str	r0, [r4, #4]
 801e386:	6863      	ldr	r3, [r4, #4]
 801e388:	6123      	str	r3, [r4, #16]
 801e38a:	2300      	movs	r3, #0
 801e38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e390:	e7a8      	b.n	801e2e4 <_printf_i+0x150>
 801e392:	6923      	ldr	r3, [r4, #16]
 801e394:	4632      	mov	r2, r6
 801e396:	4649      	mov	r1, r9
 801e398:	4640      	mov	r0, r8
 801e39a:	47d0      	blx	sl
 801e39c:	3001      	adds	r0, #1
 801e39e:	d0ab      	beq.n	801e2f8 <_printf_i+0x164>
 801e3a0:	6823      	ldr	r3, [r4, #0]
 801e3a2:	079b      	lsls	r3, r3, #30
 801e3a4:	d413      	bmi.n	801e3ce <_printf_i+0x23a>
 801e3a6:	68e0      	ldr	r0, [r4, #12]
 801e3a8:	9b03      	ldr	r3, [sp, #12]
 801e3aa:	4298      	cmp	r0, r3
 801e3ac:	bfb8      	it	lt
 801e3ae:	4618      	movlt	r0, r3
 801e3b0:	e7a4      	b.n	801e2fc <_printf_i+0x168>
 801e3b2:	2301      	movs	r3, #1
 801e3b4:	4632      	mov	r2, r6
 801e3b6:	4649      	mov	r1, r9
 801e3b8:	4640      	mov	r0, r8
 801e3ba:	47d0      	blx	sl
 801e3bc:	3001      	adds	r0, #1
 801e3be:	d09b      	beq.n	801e2f8 <_printf_i+0x164>
 801e3c0:	3501      	adds	r5, #1
 801e3c2:	68e3      	ldr	r3, [r4, #12]
 801e3c4:	9903      	ldr	r1, [sp, #12]
 801e3c6:	1a5b      	subs	r3, r3, r1
 801e3c8:	42ab      	cmp	r3, r5
 801e3ca:	dcf2      	bgt.n	801e3b2 <_printf_i+0x21e>
 801e3cc:	e7eb      	b.n	801e3a6 <_printf_i+0x212>
 801e3ce:	2500      	movs	r5, #0
 801e3d0:	f104 0619 	add.w	r6, r4, #25
 801e3d4:	e7f5      	b.n	801e3c2 <_printf_i+0x22e>
 801e3d6:	bf00      	nop
 801e3d8:	0802175b 	.word	0x0802175b
 801e3dc:	0802176c 	.word	0x0802176c

0801e3e0 <_read_r>:
 801e3e0:	b538      	push	{r3, r4, r5, lr}
 801e3e2:	4d07      	ldr	r5, [pc, #28]	; (801e400 <_read_r+0x20>)
 801e3e4:	4604      	mov	r4, r0
 801e3e6:	4608      	mov	r0, r1
 801e3e8:	4611      	mov	r1, r2
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	602a      	str	r2, [r5, #0]
 801e3ee:	461a      	mov	r2, r3
 801e3f0:	f7e3 ff68 	bl	80022c4 <_read>
 801e3f4:	1c43      	adds	r3, r0, #1
 801e3f6:	d102      	bne.n	801e3fe <_read_r+0x1e>
 801e3f8:	682b      	ldr	r3, [r5, #0]
 801e3fa:	b103      	cbz	r3, 801e3fe <_read_r+0x1e>
 801e3fc:	6023      	str	r3, [r4, #0]
 801e3fe:	bd38      	pop	{r3, r4, r5, pc}
 801e400:	2402224c 	.word	0x2402224c

0801e404 <__swbuf_r>:
 801e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e406:	460e      	mov	r6, r1
 801e408:	4614      	mov	r4, r2
 801e40a:	4605      	mov	r5, r0
 801e40c:	b118      	cbz	r0, 801e416 <__swbuf_r+0x12>
 801e40e:	6983      	ldr	r3, [r0, #24]
 801e410:	b90b      	cbnz	r3, 801e416 <__swbuf_r+0x12>
 801e412:	f7fe ff49 	bl	801d2a8 <__sinit>
 801e416:	4b21      	ldr	r3, [pc, #132]	; (801e49c <__swbuf_r+0x98>)
 801e418:	429c      	cmp	r4, r3
 801e41a:	d12b      	bne.n	801e474 <__swbuf_r+0x70>
 801e41c:	686c      	ldr	r4, [r5, #4]
 801e41e:	69a3      	ldr	r3, [r4, #24]
 801e420:	60a3      	str	r3, [r4, #8]
 801e422:	89a3      	ldrh	r3, [r4, #12]
 801e424:	071a      	lsls	r2, r3, #28
 801e426:	d52f      	bpl.n	801e488 <__swbuf_r+0x84>
 801e428:	6923      	ldr	r3, [r4, #16]
 801e42a:	b36b      	cbz	r3, 801e488 <__swbuf_r+0x84>
 801e42c:	6923      	ldr	r3, [r4, #16]
 801e42e:	6820      	ldr	r0, [r4, #0]
 801e430:	1ac0      	subs	r0, r0, r3
 801e432:	6963      	ldr	r3, [r4, #20]
 801e434:	b2f6      	uxtb	r6, r6
 801e436:	4283      	cmp	r3, r0
 801e438:	4637      	mov	r7, r6
 801e43a:	dc04      	bgt.n	801e446 <__swbuf_r+0x42>
 801e43c:	4621      	mov	r1, r4
 801e43e:	4628      	mov	r0, r5
 801e440:	f7ff fb18 	bl	801da74 <_fflush_r>
 801e444:	bb30      	cbnz	r0, 801e494 <__swbuf_r+0x90>
 801e446:	68a3      	ldr	r3, [r4, #8]
 801e448:	3b01      	subs	r3, #1
 801e44a:	60a3      	str	r3, [r4, #8]
 801e44c:	6823      	ldr	r3, [r4, #0]
 801e44e:	1c5a      	adds	r2, r3, #1
 801e450:	6022      	str	r2, [r4, #0]
 801e452:	701e      	strb	r6, [r3, #0]
 801e454:	6963      	ldr	r3, [r4, #20]
 801e456:	3001      	adds	r0, #1
 801e458:	4283      	cmp	r3, r0
 801e45a:	d004      	beq.n	801e466 <__swbuf_r+0x62>
 801e45c:	89a3      	ldrh	r3, [r4, #12]
 801e45e:	07db      	lsls	r3, r3, #31
 801e460:	d506      	bpl.n	801e470 <__swbuf_r+0x6c>
 801e462:	2e0a      	cmp	r6, #10
 801e464:	d104      	bne.n	801e470 <__swbuf_r+0x6c>
 801e466:	4621      	mov	r1, r4
 801e468:	4628      	mov	r0, r5
 801e46a:	f7ff fb03 	bl	801da74 <_fflush_r>
 801e46e:	b988      	cbnz	r0, 801e494 <__swbuf_r+0x90>
 801e470:	4638      	mov	r0, r7
 801e472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e474:	4b0a      	ldr	r3, [pc, #40]	; (801e4a0 <__swbuf_r+0x9c>)
 801e476:	429c      	cmp	r4, r3
 801e478:	d101      	bne.n	801e47e <__swbuf_r+0x7a>
 801e47a:	68ac      	ldr	r4, [r5, #8]
 801e47c:	e7cf      	b.n	801e41e <__swbuf_r+0x1a>
 801e47e:	4b09      	ldr	r3, [pc, #36]	; (801e4a4 <__swbuf_r+0xa0>)
 801e480:	429c      	cmp	r4, r3
 801e482:	bf08      	it	eq
 801e484:	68ec      	ldreq	r4, [r5, #12]
 801e486:	e7ca      	b.n	801e41e <__swbuf_r+0x1a>
 801e488:	4621      	mov	r1, r4
 801e48a:	4628      	mov	r0, r5
 801e48c:	f000 f80c 	bl	801e4a8 <__swsetup_r>
 801e490:	2800      	cmp	r0, #0
 801e492:	d0cb      	beq.n	801e42c <__swbuf_r+0x28>
 801e494:	f04f 37ff 	mov.w	r7, #4294967295
 801e498:	e7ea      	b.n	801e470 <__swbuf_r+0x6c>
 801e49a:	bf00      	nop
 801e49c:	08021654 	.word	0x08021654
 801e4a0:	08021674 	.word	0x08021674
 801e4a4:	08021634 	.word	0x08021634

0801e4a8 <__swsetup_r>:
 801e4a8:	4b32      	ldr	r3, [pc, #200]	; (801e574 <__swsetup_r+0xcc>)
 801e4aa:	b570      	push	{r4, r5, r6, lr}
 801e4ac:	681d      	ldr	r5, [r3, #0]
 801e4ae:	4606      	mov	r6, r0
 801e4b0:	460c      	mov	r4, r1
 801e4b2:	b125      	cbz	r5, 801e4be <__swsetup_r+0x16>
 801e4b4:	69ab      	ldr	r3, [r5, #24]
 801e4b6:	b913      	cbnz	r3, 801e4be <__swsetup_r+0x16>
 801e4b8:	4628      	mov	r0, r5
 801e4ba:	f7fe fef5 	bl	801d2a8 <__sinit>
 801e4be:	4b2e      	ldr	r3, [pc, #184]	; (801e578 <__swsetup_r+0xd0>)
 801e4c0:	429c      	cmp	r4, r3
 801e4c2:	d10f      	bne.n	801e4e4 <__swsetup_r+0x3c>
 801e4c4:	686c      	ldr	r4, [r5, #4]
 801e4c6:	89a3      	ldrh	r3, [r4, #12]
 801e4c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e4cc:	0719      	lsls	r1, r3, #28
 801e4ce:	d42c      	bmi.n	801e52a <__swsetup_r+0x82>
 801e4d0:	06dd      	lsls	r5, r3, #27
 801e4d2:	d411      	bmi.n	801e4f8 <__swsetup_r+0x50>
 801e4d4:	2309      	movs	r3, #9
 801e4d6:	6033      	str	r3, [r6, #0]
 801e4d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e4dc:	81a3      	strh	r3, [r4, #12]
 801e4de:	f04f 30ff 	mov.w	r0, #4294967295
 801e4e2:	e03e      	b.n	801e562 <__swsetup_r+0xba>
 801e4e4:	4b25      	ldr	r3, [pc, #148]	; (801e57c <__swsetup_r+0xd4>)
 801e4e6:	429c      	cmp	r4, r3
 801e4e8:	d101      	bne.n	801e4ee <__swsetup_r+0x46>
 801e4ea:	68ac      	ldr	r4, [r5, #8]
 801e4ec:	e7eb      	b.n	801e4c6 <__swsetup_r+0x1e>
 801e4ee:	4b24      	ldr	r3, [pc, #144]	; (801e580 <__swsetup_r+0xd8>)
 801e4f0:	429c      	cmp	r4, r3
 801e4f2:	bf08      	it	eq
 801e4f4:	68ec      	ldreq	r4, [r5, #12]
 801e4f6:	e7e6      	b.n	801e4c6 <__swsetup_r+0x1e>
 801e4f8:	0758      	lsls	r0, r3, #29
 801e4fa:	d512      	bpl.n	801e522 <__swsetup_r+0x7a>
 801e4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e4fe:	b141      	cbz	r1, 801e512 <__swsetup_r+0x6a>
 801e500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e504:	4299      	cmp	r1, r3
 801e506:	d002      	beq.n	801e50e <__swsetup_r+0x66>
 801e508:	4630      	mov	r0, r6
 801e50a:	f7fe ffd9 	bl	801d4c0 <_free_r>
 801e50e:	2300      	movs	r3, #0
 801e510:	6363      	str	r3, [r4, #52]	; 0x34
 801e512:	89a3      	ldrh	r3, [r4, #12]
 801e514:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e518:	81a3      	strh	r3, [r4, #12]
 801e51a:	2300      	movs	r3, #0
 801e51c:	6063      	str	r3, [r4, #4]
 801e51e:	6923      	ldr	r3, [r4, #16]
 801e520:	6023      	str	r3, [r4, #0]
 801e522:	89a3      	ldrh	r3, [r4, #12]
 801e524:	f043 0308 	orr.w	r3, r3, #8
 801e528:	81a3      	strh	r3, [r4, #12]
 801e52a:	6923      	ldr	r3, [r4, #16]
 801e52c:	b94b      	cbnz	r3, 801e542 <__swsetup_r+0x9a>
 801e52e:	89a3      	ldrh	r3, [r4, #12]
 801e530:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e538:	d003      	beq.n	801e542 <__swsetup_r+0x9a>
 801e53a:	4621      	mov	r1, r4
 801e53c:	4630      	mov	r0, r6
 801e53e:	f000 f84d 	bl	801e5dc <__smakebuf_r>
 801e542:	89a0      	ldrh	r0, [r4, #12]
 801e544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e548:	f010 0301 	ands.w	r3, r0, #1
 801e54c:	d00a      	beq.n	801e564 <__swsetup_r+0xbc>
 801e54e:	2300      	movs	r3, #0
 801e550:	60a3      	str	r3, [r4, #8]
 801e552:	6963      	ldr	r3, [r4, #20]
 801e554:	425b      	negs	r3, r3
 801e556:	61a3      	str	r3, [r4, #24]
 801e558:	6923      	ldr	r3, [r4, #16]
 801e55a:	b943      	cbnz	r3, 801e56e <__swsetup_r+0xc6>
 801e55c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e560:	d1ba      	bne.n	801e4d8 <__swsetup_r+0x30>
 801e562:	bd70      	pop	{r4, r5, r6, pc}
 801e564:	0781      	lsls	r1, r0, #30
 801e566:	bf58      	it	pl
 801e568:	6963      	ldrpl	r3, [r4, #20]
 801e56a:	60a3      	str	r3, [r4, #8]
 801e56c:	e7f4      	b.n	801e558 <__swsetup_r+0xb0>
 801e56e:	2000      	movs	r0, #0
 801e570:	e7f7      	b.n	801e562 <__swsetup_r+0xba>
 801e572:	bf00      	nop
 801e574:	24000074 	.word	0x24000074
 801e578:	08021654 	.word	0x08021654
 801e57c:	08021674 	.word	0x08021674
 801e580:	08021634 	.word	0x08021634

0801e584 <abort>:
 801e584:	b508      	push	{r3, lr}
 801e586:	2006      	movs	r0, #6
 801e588:	f000 f8b6 	bl	801e6f8 <raise>
 801e58c:	2001      	movs	r0, #1
 801e58e:	f7e3 fe8f 	bl	80022b0 <_exit>

0801e592 <__swhatbuf_r>:
 801e592:	b570      	push	{r4, r5, r6, lr}
 801e594:	460e      	mov	r6, r1
 801e596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e59a:	2900      	cmp	r1, #0
 801e59c:	b096      	sub	sp, #88	; 0x58
 801e59e:	4614      	mov	r4, r2
 801e5a0:	461d      	mov	r5, r3
 801e5a2:	da07      	bge.n	801e5b4 <__swhatbuf_r+0x22>
 801e5a4:	2300      	movs	r3, #0
 801e5a6:	602b      	str	r3, [r5, #0]
 801e5a8:	89b3      	ldrh	r3, [r6, #12]
 801e5aa:	061a      	lsls	r2, r3, #24
 801e5ac:	d410      	bmi.n	801e5d0 <__swhatbuf_r+0x3e>
 801e5ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e5b2:	e00e      	b.n	801e5d2 <__swhatbuf_r+0x40>
 801e5b4:	466a      	mov	r2, sp
 801e5b6:	f000 f8bb 	bl	801e730 <_fstat_r>
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	dbf2      	blt.n	801e5a4 <__swhatbuf_r+0x12>
 801e5be:	9a01      	ldr	r2, [sp, #4]
 801e5c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e5c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e5c8:	425a      	negs	r2, r3
 801e5ca:	415a      	adcs	r2, r3
 801e5cc:	602a      	str	r2, [r5, #0]
 801e5ce:	e7ee      	b.n	801e5ae <__swhatbuf_r+0x1c>
 801e5d0:	2340      	movs	r3, #64	; 0x40
 801e5d2:	2000      	movs	r0, #0
 801e5d4:	6023      	str	r3, [r4, #0]
 801e5d6:	b016      	add	sp, #88	; 0x58
 801e5d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e5dc <__smakebuf_r>:
 801e5dc:	898b      	ldrh	r3, [r1, #12]
 801e5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e5e0:	079d      	lsls	r5, r3, #30
 801e5e2:	4606      	mov	r6, r0
 801e5e4:	460c      	mov	r4, r1
 801e5e6:	d507      	bpl.n	801e5f8 <__smakebuf_r+0x1c>
 801e5e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e5ec:	6023      	str	r3, [r4, #0]
 801e5ee:	6123      	str	r3, [r4, #16]
 801e5f0:	2301      	movs	r3, #1
 801e5f2:	6163      	str	r3, [r4, #20]
 801e5f4:	b002      	add	sp, #8
 801e5f6:	bd70      	pop	{r4, r5, r6, pc}
 801e5f8:	ab01      	add	r3, sp, #4
 801e5fa:	466a      	mov	r2, sp
 801e5fc:	f7ff ffc9 	bl	801e592 <__swhatbuf_r>
 801e600:	9900      	ldr	r1, [sp, #0]
 801e602:	4605      	mov	r5, r0
 801e604:	4630      	mov	r0, r6
 801e606:	f7fe ffab 	bl	801d560 <_malloc_r>
 801e60a:	b948      	cbnz	r0, 801e620 <__smakebuf_r+0x44>
 801e60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e610:	059a      	lsls	r2, r3, #22
 801e612:	d4ef      	bmi.n	801e5f4 <__smakebuf_r+0x18>
 801e614:	f023 0303 	bic.w	r3, r3, #3
 801e618:	f043 0302 	orr.w	r3, r3, #2
 801e61c:	81a3      	strh	r3, [r4, #12]
 801e61e:	e7e3      	b.n	801e5e8 <__smakebuf_r+0xc>
 801e620:	4b0d      	ldr	r3, [pc, #52]	; (801e658 <__smakebuf_r+0x7c>)
 801e622:	62b3      	str	r3, [r6, #40]	; 0x28
 801e624:	89a3      	ldrh	r3, [r4, #12]
 801e626:	6020      	str	r0, [r4, #0]
 801e628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e62c:	81a3      	strh	r3, [r4, #12]
 801e62e:	9b00      	ldr	r3, [sp, #0]
 801e630:	6163      	str	r3, [r4, #20]
 801e632:	9b01      	ldr	r3, [sp, #4]
 801e634:	6120      	str	r0, [r4, #16]
 801e636:	b15b      	cbz	r3, 801e650 <__smakebuf_r+0x74>
 801e638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e63c:	4630      	mov	r0, r6
 801e63e:	f000 f889 	bl	801e754 <_isatty_r>
 801e642:	b128      	cbz	r0, 801e650 <__smakebuf_r+0x74>
 801e644:	89a3      	ldrh	r3, [r4, #12]
 801e646:	f023 0303 	bic.w	r3, r3, #3
 801e64a:	f043 0301 	orr.w	r3, r3, #1
 801e64e:	81a3      	strh	r3, [r4, #12]
 801e650:	89a0      	ldrh	r0, [r4, #12]
 801e652:	4305      	orrs	r5, r0
 801e654:	81a5      	strh	r5, [r4, #12]
 801e656:	e7cd      	b.n	801e5f4 <__smakebuf_r+0x18>
 801e658:	0801d241 	.word	0x0801d241

0801e65c <_realloc_r>:
 801e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e65e:	4607      	mov	r7, r0
 801e660:	4614      	mov	r4, r2
 801e662:	460e      	mov	r6, r1
 801e664:	b921      	cbnz	r1, 801e670 <_realloc_r+0x14>
 801e666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e66a:	4611      	mov	r1, r2
 801e66c:	f7fe bf78 	b.w	801d560 <_malloc_r>
 801e670:	b922      	cbnz	r2, 801e67c <_realloc_r+0x20>
 801e672:	f7fe ff25 	bl	801d4c0 <_free_r>
 801e676:	4625      	mov	r5, r4
 801e678:	4628      	mov	r0, r5
 801e67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e67c:	f000 f87a 	bl	801e774 <_malloc_usable_size_r>
 801e680:	42a0      	cmp	r0, r4
 801e682:	d20f      	bcs.n	801e6a4 <_realloc_r+0x48>
 801e684:	4621      	mov	r1, r4
 801e686:	4638      	mov	r0, r7
 801e688:	f7fe ff6a 	bl	801d560 <_malloc_r>
 801e68c:	4605      	mov	r5, r0
 801e68e:	2800      	cmp	r0, #0
 801e690:	d0f2      	beq.n	801e678 <_realloc_r+0x1c>
 801e692:	4631      	mov	r1, r6
 801e694:	4622      	mov	r2, r4
 801e696:	f7fe fee3 	bl	801d460 <memcpy>
 801e69a:	4631      	mov	r1, r6
 801e69c:	4638      	mov	r0, r7
 801e69e:	f7fe ff0f 	bl	801d4c0 <_free_r>
 801e6a2:	e7e9      	b.n	801e678 <_realloc_r+0x1c>
 801e6a4:	4635      	mov	r5, r6
 801e6a6:	e7e7      	b.n	801e678 <_realloc_r+0x1c>

0801e6a8 <_raise_r>:
 801e6a8:	291f      	cmp	r1, #31
 801e6aa:	b538      	push	{r3, r4, r5, lr}
 801e6ac:	4604      	mov	r4, r0
 801e6ae:	460d      	mov	r5, r1
 801e6b0:	d904      	bls.n	801e6bc <_raise_r+0x14>
 801e6b2:	2316      	movs	r3, #22
 801e6b4:	6003      	str	r3, [r0, #0]
 801e6b6:	f04f 30ff 	mov.w	r0, #4294967295
 801e6ba:	bd38      	pop	{r3, r4, r5, pc}
 801e6bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e6be:	b112      	cbz	r2, 801e6c6 <_raise_r+0x1e>
 801e6c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e6c4:	b94b      	cbnz	r3, 801e6da <_raise_r+0x32>
 801e6c6:	4620      	mov	r0, r4
 801e6c8:	f000 f830 	bl	801e72c <_getpid_r>
 801e6cc:	462a      	mov	r2, r5
 801e6ce:	4601      	mov	r1, r0
 801e6d0:	4620      	mov	r0, r4
 801e6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6d6:	f000 b817 	b.w	801e708 <_kill_r>
 801e6da:	2b01      	cmp	r3, #1
 801e6dc:	d00a      	beq.n	801e6f4 <_raise_r+0x4c>
 801e6de:	1c59      	adds	r1, r3, #1
 801e6e0:	d103      	bne.n	801e6ea <_raise_r+0x42>
 801e6e2:	2316      	movs	r3, #22
 801e6e4:	6003      	str	r3, [r0, #0]
 801e6e6:	2001      	movs	r0, #1
 801e6e8:	e7e7      	b.n	801e6ba <_raise_r+0x12>
 801e6ea:	2400      	movs	r4, #0
 801e6ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e6f0:	4628      	mov	r0, r5
 801e6f2:	4798      	blx	r3
 801e6f4:	2000      	movs	r0, #0
 801e6f6:	e7e0      	b.n	801e6ba <_raise_r+0x12>

0801e6f8 <raise>:
 801e6f8:	4b02      	ldr	r3, [pc, #8]	; (801e704 <raise+0xc>)
 801e6fa:	4601      	mov	r1, r0
 801e6fc:	6818      	ldr	r0, [r3, #0]
 801e6fe:	f7ff bfd3 	b.w	801e6a8 <_raise_r>
 801e702:	bf00      	nop
 801e704:	24000074 	.word	0x24000074

0801e708 <_kill_r>:
 801e708:	b538      	push	{r3, r4, r5, lr}
 801e70a:	4d07      	ldr	r5, [pc, #28]	; (801e728 <_kill_r+0x20>)
 801e70c:	2300      	movs	r3, #0
 801e70e:	4604      	mov	r4, r0
 801e710:	4608      	mov	r0, r1
 801e712:	4611      	mov	r1, r2
 801e714:	602b      	str	r3, [r5, #0]
 801e716:	f7e3 fdb9 	bl	800228c <_kill>
 801e71a:	1c43      	adds	r3, r0, #1
 801e71c:	d102      	bne.n	801e724 <_kill_r+0x1c>
 801e71e:	682b      	ldr	r3, [r5, #0]
 801e720:	b103      	cbz	r3, 801e724 <_kill_r+0x1c>
 801e722:	6023      	str	r3, [r4, #0]
 801e724:	bd38      	pop	{r3, r4, r5, pc}
 801e726:	bf00      	nop
 801e728:	2402224c 	.word	0x2402224c

0801e72c <_getpid_r>:
 801e72c:	f7e3 bda6 	b.w	800227c <_getpid>

0801e730 <_fstat_r>:
 801e730:	b538      	push	{r3, r4, r5, lr}
 801e732:	4d07      	ldr	r5, [pc, #28]	; (801e750 <_fstat_r+0x20>)
 801e734:	2300      	movs	r3, #0
 801e736:	4604      	mov	r4, r0
 801e738:	4608      	mov	r0, r1
 801e73a:	4611      	mov	r1, r2
 801e73c:	602b      	str	r3, [r5, #0]
 801e73e:	f7e3 fe06 	bl	800234e <_fstat>
 801e742:	1c43      	adds	r3, r0, #1
 801e744:	d102      	bne.n	801e74c <_fstat_r+0x1c>
 801e746:	682b      	ldr	r3, [r5, #0]
 801e748:	b103      	cbz	r3, 801e74c <_fstat_r+0x1c>
 801e74a:	6023      	str	r3, [r4, #0]
 801e74c:	bd38      	pop	{r3, r4, r5, pc}
 801e74e:	bf00      	nop
 801e750:	2402224c 	.word	0x2402224c

0801e754 <_isatty_r>:
 801e754:	b538      	push	{r3, r4, r5, lr}
 801e756:	4d06      	ldr	r5, [pc, #24]	; (801e770 <_isatty_r+0x1c>)
 801e758:	2300      	movs	r3, #0
 801e75a:	4604      	mov	r4, r0
 801e75c:	4608      	mov	r0, r1
 801e75e:	602b      	str	r3, [r5, #0]
 801e760:	f7e3 fe05 	bl	800236e <_isatty>
 801e764:	1c43      	adds	r3, r0, #1
 801e766:	d102      	bne.n	801e76e <_isatty_r+0x1a>
 801e768:	682b      	ldr	r3, [r5, #0]
 801e76a:	b103      	cbz	r3, 801e76e <_isatty_r+0x1a>
 801e76c:	6023      	str	r3, [r4, #0]
 801e76e:	bd38      	pop	{r3, r4, r5, pc}
 801e770:	2402224c 	.word	0x2402224c

0801e774 <_malloc_usable_size_r>:
 801e774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e778:	1f18      	subs	r0, r3, #4
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	bfbc      	itt	lt
 801e77e:	580b      	ldrlt	r3, [r1, r0]
 801e780:	18c0      	addlt	r0, r0, r3
 801e782:	4770      	bx	lr

0801e784 <_init>:
 801e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e786:	bf00      	nop
 801e788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e78a:	bc08      	pop	{r3}
 801e78c:	469e      	mov	lr, r3
 801e78e:	4770      	bx	lr

0801e790 <_fini>:
 801e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e792:	bf00      	nop
 801e794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e796:	bc08      	pop	{r3}
 801e798:	469e      	mov	lr, r3
 801e79a:	4770      	bx	lr
